; Zap Text Command Extension
; Copyright (C) 1998 Zap Developers
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
; Text commands by Paul Moore
; Tidied up a bit, with some more functionality, by sja. Error handling cleaned
; up a bit (Paul's memory-leaked like crazy - only leaks in quite rare cases now).
;
; Other main alteration: if the command can't be found on the normal run path,
; we try to find it in ZapFilters:. We do it this way round so that you can
; override normal behaviour by prepending the command with ZF: or ZapFilters:
; to guarantee that the "internal" one is used.
;
; All commands complete filenames in the minibuffer.
;
; FILTERSEL		- Filter selection through a command
; FILTERBUF		- Filter entire buffer through a command
; PIPESEL		- Pipe selection through a command into a new buffer
; PIPEBUF		- Pipe entire buffer through a command into a new buffer
; INSERTPIPEDSEL	- Pipe selection through a command to the cursor
; INSERTPIPEDBUF	- Pipe entire buffer through a command to the cursor
;
; PIPESEL and PIPEBUF both set the filetype and mode of the new file from the old.
;
; And a command to get the help file for a given Zap filter:
; * HELPFILTER
;
; Two more commands to insert the output of a command somewhere. These don't check
; ZapFilters:.
;
; PIPE			- Pipe output of a command to a new buffer
; INSERTPIPE		- Pipe output of a command to the cursor
;
; (* = planned)

; Includes
		GET	h.ZapText
		GET	h.dsutils
		GET	h.coreutils
		GET	h.module

; What we give to other people
		EXPORT	pm_filtersel
		EXPORT	pm_filterbuf
		EXPORT	pm_pipesel
		EXPORT	pm_pipebuf
		EXPORT	pm_pipe
		EXPORT	pm_insertpipe
		EXPORT	pm_insertpipedsel
		EXPORT	pm_insertpipedbuf

; Uses tidy_out, so get the stacks right.

; PIPE
		LOCAL

prompt$l	=	"Pipe in: ", 0
		ALIGN

		&	(1)+(3:SHL:3)+(1:SHL:6)+(1:SHL:9)
pm_pipe
		TEQ	r2,#6
		ADREQ	r0,prompt$l
		BEQ	zap_setprompt

		FNJSR

		SWI	XHourglass_On
		MOV	r7,r0

		BL	do_pipe
		BVS	error_ret

		BL	get_len_out
		CMP	r0,#-1
		SWIEQ	XHourglass_Off
		FNRTS	EQ			; no tidying up - Zap-Out not there

		BL	install_file
		BVS	error_ret

		; finish off - set type and mode to text
		MOV	r0,#0
		FNcall	Zap_NewMode
		LDR	r0,[r9,#f_load]

		AND	r0,r0,#&000000FF	; save top bit of date
		ORR	r0,r0,#&FF000000
		ORR	r0,r0,#&00F00000	; typed file
		MOV	r1,#&1000
		SUB	r1,r1,#1
		MOV	r1,r1,LSL #8
		ORR	r0,r0,r1		; &FFF (Text)
		STR	r0,[r9,#f_load]

		B	tidy_out

; INSERTPIPE

		&	(0)+(3:SHL:3)+(1:SHL:6)+(1:SHL:9)
pm_insertpipe
		TEQ	r2,#6
		ADREQ	r0,prompt$l
		BEQ	zap_setprompt

		FNJSR
		SWI	XHourglass_On
		MOV	r7,r0

		BL	pipe			; \X r0 block containing pipe output
		BVS	error_ret		; !!! memory leak if file didn't load

		CMP	r3,#-1
		SWIEQ	XHourglass_Off
		FNRTS	EQ			; no clearing up

		MOV	r2,r4			; number of bytes
		BL	do_insert

		B	tidy_out

; \E r2, r3 = length, data, r8/r9/r10
; r3 is a block which we free afterwards
do_insert
		FNJSR
		MOV	r0,#&11			; perhaps + &40 (select) ?
		LDR	r1,[cursorptr,#c_off]	; file offset to insert at
		FNcall	Zap_Command

		MOV	r0,r3
		FNcall	Zap_Free		; ignore error

		FNRTS

; Both pm_pipebuf and pm_pipesel use finish$l to clear up, with calls tidy,
; or error_ret to abort, or error_free to abort and free a block in r3.
; They are all a lot further down, so they can be near the filename stores
; that they clear up.
; All tails expect only lr to be stacked.

; PIPESEL, PIPEBUF
		LOCAL

prompt$l	=	"Pipe through: ", 0
		ALIGN

		&	(1)+(3:SHL:3)+(1:SHL:6)+(1:SHL:9)
pm_pipebuf
		TEQ	r2,#6
		ADREQ	r0,prompt$l
		BEQ	zap_setprompt

		FNJSR
		SWI	XHourglass_On
		MOV	r7,r0

		BL	util_splitbuffer	; all in one block

		LDR	r2,[fileptr,#f_len]
		CMP	r2,#0
		SWIEQ	XHourglass_Off
		FNRTS	EQ			; nothing to filter
		LDR	r3,[fileptr,#f_ptr]
		ADR	r1,file_in
		BL	save
		BVS	error_ret

		BL	do_filterfile		; filter the file
		BVS	error_ret

		MOV	r10,r8			; store old window

		BL	get_len_out
		CMP	r0,#-1
		BEQ	tidy

		BL	install_file
		BVS	error_ret
		B	finish$l

		&	(1)+(3:SHL:3)+(1:SHL:6)+(1:SHL:9)
pm_pipesel
		TEQ	r2,#6
		ADREQ	r0,prompt$l
		BEQ	zap_setprompt

		FNJSR
		SWI	XHourglass_On
		MOV	r7,r0

		FNcall	Zap_ReadSel
		BVS	error_ret
		TEQ	r3,#0
		BEQ	error_nosel

		ADR	r1,file_in
		BL	save
		BVS	error_free

		MOV	r0,r3
		FNcall	Zap_Free
		BVS	error_ret

		BL	do_filterfile		; filter the file
		BVS	error_ret

		MOV	r10,r8			; store old window

		BL	get_len_out
		CMP	r0,#-1
		BEQ	tidy

		BL	install_file
		BVS	error_ret

; /E r8/r9, r10 = old r8
finish$l	LDRB	r0,[r10,#w_format]	; mode number
		FNcall	Zap_NewMode		; change it
		LDR	r0,[r10,#w_file]	; old file offset
		MOV	r8,r9			; store new file pointer
		FNcall	Zap_ConvFileOff		; get old r9
		LDR	r0,[r9,#f_load]		; old load address
		CMP	r0,#&FF000000		; typed file?
		BCC	copyboth$l		; no, so copy load/exec

		MOV	r3,#(1:SHL:13)
		SUB	r3,r3,#1		; 12 bits of 1's
		MOV	r3,r3,LSL #8		; in place for filetype mask

		AND	r0,r0,r3		; just filetype

		LDR	r1,[r8,#f_load]		; current load address
		BIC	r1,r1,r3		; all but filetype

		ORR	r1,r1,r0		; new load address
		STR	r1,[r8,#f_load]

		B	tidy

copyboth$l	STR	r0,[r8,#f_load]
		LDR	r0,[r9,#f_exec]
		STR	r0,[r8,#f_exec]

		B	tidy

; INSERTPIPEDSEL, INSERTPIPEDBUF

		&	(0)+(3:SHL:3)+(1:SHL:6)+(1:SHL:9)
pm_insertpipedbuf
		TEQ	r2,#6
		ADREQ	r0,prompt$l
		BEQ	zap_setprompt

		FNJSR
		SWI	XHourglass_On
		MOV	r7,r0

		BL	util_splitbuffer

		ADR	r1,file_in
		LDR	r2,[fileptr,#f_len]
		CMP	r2,#0
		SWIEQ	XHourglass_Off
		FNRTS	EQ
		LDR	r3,[fileptr,#f_ptr]
		BL	save
		BVS	error_ret

		BL	filter
		BVS	error_ret

		CMP	r3,#-1
		BEQ	tidy

		MOV	r2,r4
		BL	do_insert

		B	tidy

		&	(0)+(3:SHL:3)+(1:SHL:6)+(1:SHL:9)
pm_insertpipedsel
		TEQ	r2,#6
		ADREQ	r0,prompt$l
		BEQ	zap_setprompt

		FNJSR
		SWI	XHourglass_On
		MOV	r7,r0

		FNcall	Zap_ReadSel
		BVS	error_ret
		TEQ	r3,#0
		BEQ	error_nosel

		ADR	r1,file_in
		BL	save
		BVS	error_free

		MOV	r0,r3
		FNcall	Zap_Free
		BVS	error_ret

		BL	filter			; filter to a block
		BVS	error_ret

		CMP	r3,#-1
		BEQ	tidy

		MOV	r2,r4
		BL	do_insert

		B	tidy

; Note that these routines essentially form two different heads and two
; different tails. Or, in other words: BEWARE STACKED REGISTERS. There
; currently aren't any; it's probably best to leave it like that.

; FILTERSEL, FILTERBUF
		LOCAL

prompt$l	=	"Filter through: ", 0
		ALIGN

		&	(1)+(3:SHL:3)+(1:SHL:6)+(1:SHL:9)
pm_filterbuf
		TEQ	r2,#6
		ADREQ	r0,prompt$l
		BEQ	zap_setprompt

		FNJSR
		SWI	XHourglass_On
		MOV	r7,r0

		BL	util_splitbuffer	; all in one block

		ADR	r1,file_in
		LDR	r2,[fileptr,#f_len]
		CMP	r2,#0
		SWIEQ	XHourglass_Off
		FNRTS	EQ			; nothing to filter
		LDR	r3,[fileptr,#f_ptr]
		BL	save			; r1=filename, r2=len, r3=block
		BVS	error_free

		BL	filter
		BVS	error_ret		; !!! if file won't load, memory leak

		CMP	r3,#-1
		BEQ	tidy			; no file output (NOT zero length)

		MOV	r1,#0			; start of file
		LDR	r2,[fileptr,#f_len]
		B	finish$l

		&	(1)+(3:SHL:3)+(1:SHL:6)+(1:SHL:9)
		; string param, call me before opening the minibuff,
		; doesn't need r10 (hence r8/r9 correct for menu)
pm_filtersel
		TEQ	r2,#6
		ADREQ	r0,prompt$l
		BEQ	zap_setprompt

		FNJSR
		SWI	XHourglass_On
		MOV	r7,r0			; remember command for later

		FNcall	Zap_ReadSel		; selection as heap block
		BVS	error_ret
		TEQ	r3,#0
		BEQ	error_nosel		; Error if there isn't one

		ADR	r1,file_in		; save selection to a temp file
		BL	save			; (In) r1=filename, r2=len, r3=block
		BVS	error_free

		MOV	r0,r3			; free selection block
		FNcall	Zap_Free		; (In) r0=block
		BVS	error_ret

		BL	filter			; filter into a new heap block
		BVS	error_ret		; !!! if file won't load, memory leak

		CMP	r3,#-1
		BEQ	tidy			; no file output (NOT zero length)

		FNcall	Zap_GetSel		; get selection area for replace
;		BCS	error_nosel		; Error if there isn't one - cannot happen
		BVS	error_free

finish$l
		BL	zap_startop		; start long op
		BVS	error_free
		BL	zap_replacearea		; replace old with new
						; DON'T call error here without calling zap_stopop
		BL	zap_stopop		; end long op
		BVS	error_free

		MOV	r0,r3			; free heap block
		FNcall	Zap_Free		; (In) r0=block
		BVS	error_ret

tidy		ADR	r1,file_in		; clear up temp files
		BL	delete
tidy_out	ADR	r1,file_out
		BL	delete

		SWI	XHourglass_Off
		FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Error returns                                                ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
error_nosel	ADR	r0,error_noselection	; Fall through!
error_ret	ADR	r1,file_in
		BL	delete			; clear up
		ADR	r1,file_out
		BL	delete			; both temp files

		SWI	XHourglass_Off
		FNRTV				; return the error

error_free	MOV	r1,r0
		MOV	r0,r3
		FNcall	Zap_Free
		MOV	r0,r1
		B	error_ret

error_noselection
		DCD	0
		=	"No selection", 0
		ALIGN

		LOCAL
filter
		FNJSR
		BL	do_filterfile
		FNRTS	VS

get_output$l
		BL	get_len_out
		FNRTS	VS

		MOV	r4,r0			; length

		CMP	r0,#-1
		MOVEQ	r3,#-1
		FNRTS	EQ

		FNcall	Zap_Claim
		FNRTS	VS
		MOV	r3,r0			; Save block addr in r3 for later

		ADR	r1,file_out		; load replacement file
		BL	load_file		; (In) r0=block, r1=file

		FNRTS

pipe
		FNJSR
		BL	do_pipe
		FNRTS	VS

		B	get_output$l

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Input and output filenames for command                       ;
; Routine to send off the filter - must be close to filenames  ;
; Routine to send off the pipe -            ""       ""        ;
; Routine to install file as a new buffer - ""       ""        ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

file_in		=	"<Wimp$ScrapDir>.Zap-In", 0
file_out	=	"<Wimp$ScrapDir>.Zap-Out", 0
		ALIGN

do_filterfile
		FNJSR
		MOV	r0,r7
		ADR	r1,file_in
		ADR	r2,file_out
		BL	filter_file		; (In) r0=command, r1=input, r2=output
		FNRTS				; preserve status flags

do_pipe
		FNJSR
		MOV	r0,r7
		ADR	r1,file_out
		BL	pipe_file
		FNRTS

install_file
		FNJSR
		ADR	r0,file_out		; load output file as a new Zap buffer
		FNcall	Zap_InstallFile
		FNRTS	VS			; preserve status flags
		CMP	r0,#-1
		FNRTS	EQ			; not loaded
		FNcall	Zap_ConvWindOff		; \X r8/r9

		MOV	r0,r7			; command again
		FNcall	Zap_NewFileName		; set filename
;		LDR	r0,[fileptr,#f_flags]
;		ORR	r0,r0,#(1:SHL:3)	; set modified
;		STR	r0,[fileptr,#f_flags]
;		MOV	r0,#-1
;		STR	r0,[fileptr,#f_chklen]	; keep modified
;		FNcall	Zap_NewFileTitle	; update title bars
		MOV	r0,#1			; modified
		FNcall	Zap_MarkChanged
		FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Save data to a file                                          ;
; (In) r1 = filename, r2 = len, r3 = addr                      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

save
		FNJSR	"r1-r5"
		MOV	r4,r3			; start addr
		ADD	r5,r3,r2		; end addr
		MOV	r0,#10			; save file
		LDR	r2,file_txt		; filetype
		SWI	XOS_File
		FNRTS

file_txt
		DCD	&FFF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get the length of a file                                     ;
; (In) r1 = file (Out) r0 = length                             ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

		LOCAL
get_len_out	ADR	r1,file_out
get_len
		FNJSR	"r1-r6"
		MOV	r0,#17
		SWI	XOS_File
		FNRTS	VS
		CMP	r0,#0
		MOVEQ	r0,#-1			; file not found
		MOVNE	r0,r4			; file length
		FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Delete a file                                                ;
; (In) r1 = file                                               ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

delete
		FNJSR	"r0-r5"
		MOV	r0,#6
		SWI	XOS_File
		FNRTSS				; r0 corrupt!

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Load a file                                                  ;
; (In) r0 = address, r1 = file                                 ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

load_file
		FNJSR	"r1-r7"
		MOV	r2,r0			; address to load to
		MOV	r0,#16			; load file
		MOV	r3,#0			; load to given address
		SWI	XOS_File
		FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Filter file_in to file_out                                   ;
; (In) r0=command, r1=input, r2=output                         ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

buflen		EQU	255

filter_file
		FNJSP	"r1-r2", "r0"		; r0-r2, lr on stack

		MOV	r3,sp			; get parameter list pointer

		MOV	r0,#buflen		; space for command buffer
		FNcall	Zap_Claim
		ADDVS	sp,sp,#4		; On an error, we don't restore r0!
		FNRTS	VS

		MOV	r1,r0
		BL	find_command		; \X r0 = correct template or error
		ADDVS	sp,sp,#4
		MOVVS	r2,r0			; so heap block gets freed
		BVS	error_starttask

		MOV	r2,#buflen
		BL	argsub			; substitute args
		MOVVS	r2,r1			; on an error, block pulled to r1
		ADDVS	sp,sp,#4		; depending on where the error
		BVS	error_starttask		; occured, this can memory leak

		MOV	r2,r0			; returned heap block

		ADD	sp,sp,#4		; drop r0 from stack

		SWI	XWimp_StartTask		; start child task
		BVS	error_starttask
		TEQ	r0,#0
		ADRNE	r0,error_livetask
		BNE	error_starttask

		MOV	r0,r2			; free the heap block
		FNcall	Zap_Free

		FNRTS

error_starttask					; Error in starting the child task
		MOV	r1,r0			; Preserve the error pointer

		MOV	r0,r2
		FNcall	Zap_Free		; Free the heap block (ignore errors here)

		MOV	r0,r1
		FNRTV

find_command
		FNJSR	"r1-r6"
		LDR	r1,[r3]			; command name
		MOV	r6,r1			; store
		ADR	r4,path_run$l
		MOV	r0,#13
		SWI	XOS_File
		FNRTS	VS			; error

		CMP	r0,#0
		ADRNE	r0,cmd_template$l
		FNRTS	NE

		MOV	r1,r6			; restore
		ADR	r4,path_filter$l
		MOV	r0,#13
		SWI	XOS_File
		FNRTS	VS			; error

		CMP	r0,#0
		ADRNE	r0,cmd_template2$l
		FNRTS	NE

		ADR	r0,error_nocommand
		FNRTV

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
error_livetask	DCD	0
		=	"Task has not completed", 0

error_nocommand	DCD	0
		=	"Command not found", 0
		ALIGN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

cmd_template$l	=	"%0 < %1 > %2 2> Null:", 0
cmd_template2$l	=	"ZapFilters:%0 < %1 > %2 2> Null:", 0
cmd_pipe$l	=	"%0 > %1 2> Null:", 0
path_run$l	=	"Run:", 0
path_filter$l	=	"ZapFilters:", 0
		ALIGN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Pipe command to file_out                                     ;
; (In) r0=command, r1=output                                   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Note that we stack r2 as well so we can use the same error
; routines as filter_file, above.
pipe_file
		FNJSP	"r1-r2", "r0"		; r0-r2, lr on stack
		MOV	r3,sp			; get parameter list pointer

		MOV	r0,#buflen		; space for command buffer
		FNcall	Zap_Claim
		ADDVS	sp,sp,#4		; don't restore r0
		FNRTS	VS

		MOV	r1,r0			; buffer
		ADR	r0,cmd_pipe$l		; template
		MOV	r2,#buflen		; buffer extent
		BL	argsub			; substitute args
		MOVVS	r2,r1
		ADDVS	sp,sp,#4
		BVS	error_starttask

		MOV	r2,r0			; returned heap block
		ADD	sp,sp,#4		; drop r0

		SWI	XWimp_StartTask
		BVS	error_starttask
		TEQ	r0,#0
		ADRNE	r0,error_livetask
		BNE	error_starttask

		MOV	r0,r2
		FNcall	Zap_Free

		FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Substitute args into a string                                ;
; (In) R0 = template, R1 = output buffer, R2 = output buffer   ;
;      length, R3 = parameter list                             ;
; (Out) R0 = output buffer, R1 = null at end of output         ;
;                                                              ;
; Copies the template into the output buffer, replacing %n by  ;
; the contents of the nth parameter in the list at R3. %% is   ;
; replaced by a single %                                       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

		LOCAL
argsub
		FNJSP	"r2-r5", "r1"

loop$l						; Main loop - load and store bytes
		TEQ	r2,#0			; buffer overlow?
		BEQ	err_overflow$l

		LDRB	r4,[r0]

		TEQ	r4,#'%'			; argument substitution?
		BEQ	pct$l

bas$l						; Basic case - add to output string
		STRB	r4,[r1],#1
		ADD	r0,r0,#1
		SUB	r2,r2,#1

		TEQ	r4,#0			; at end?
		BNE	loop$l

		SUB	r1,r1,#1		; Back up to the null
		FNRTP	"r0"

pct$l						; argument substitution
		LDRB	r4,[r0,#1]!
		TEQ	r4,#'%'			; %% => %
		BEQ	bas$l

		CMP	r4,#'0'			; check that it's within %0 - %9
		BLT	err_invalid$l
		CMP	r4,#'9'
		BGT	err_invalid$l

		ADD	r0,r0,#1		; r0 -> next unread template char

		SUB	r4,r4,#'0'
		LDR	r5,[r3,r4,LSL #2]


loop2$l						; Copy [r5] into [r1]
		LDRB	r4,[r5],#1
		TEQ	r4,#0
		BEQ	loop$l			; Done - go back to main loop

		TEQ	r2,#0
		BEQ	err_overflow$l

		STRB	r4,[r1],#1
		SUB	r2,r2,#1
		B	loop2$l

err_overflow$l
		FNPULLP	"r1"
		ERR	"Overflow"

err_invalid$l
		FNPULLP	"r1"
		ERR	"Invalid template"

; That's it
		END
