/*	colours.c
	© James Aylett	*/

#include "colours.h"

void open_colours(int which, int r, int g, int b)
{
  /* which is a 24 bit value,
  // which indicates the use of the colour box in this case.
  // 0 means unused. 1, 2 are minibuffer fore and back colours.
  // 256-511 are tweak mode colours, 512-767 are COS mode colours.
  */

  /* extract RGB from col and set window */
  Icon_SetInteger(windows[Colours].openblock.window,7,r);
  Icon_SetInteger(windows[Colours].openblock.window,14,g);
  Icon_SetInteger(windows[Colours].openblock.window,21,b);

  Icon_SetSlider(windows[Colours].openblock.window,2,4,1000 * (r / 0xff));
  Icon_SetSlider(windows[Colours].openblock.window,9,11,1000 * (g / 0xff));
  Icon_SetSlider(windows[Colours].openblock.window,16,18,1000 * (b / 0xff));

  if (which < 256)
  {
    switch(which)
    {
      case 1 :
        lookup_message(MessageBlock, "ColourM-m-1", output, 256);
        set_indtext(windows[Colours].openblock.window,40,output);
        break;
      case 2 :
        lookup_message(MessageBlock, "ColourM-m-2", output, 256);
        set_indtext(windows[Colours].openblock.window,40,output);
        break;
    }
  }
  else
  {
    switch(which & 255)
    {
      case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:
        /* default colours */
        sprintf(output, "ColourM%i",which & 255);
        lookup_message(MessageBlock, output, output, 256);
        set_indtext(windows[Colours].openblock.window,40,output);
        break;
      default:
        /* mode-specific - some have hard-coded names in Messages file
         * but this isn't implemented yet
         */
        sprintf(output,"Mode colour %x",(which & 255) - 9);
        set_indtext(windows[Colours].openblock.window,40,output);
        break;
    }
  }

  whichcolour=which;
  windows[Colours].openblock.behind=WimpWindow_Top;
  Wimp_OpenWindow(&windows[Colours].openblock);
  {
    caret_block block;
    block.window=windows[Colours].openblock.window;
    block.icon=7;
    block.offset.x=0;
    block.offset.y=0;
    block.height=-1;
    block.index=-1;
    Wimp_SetCaretPosition(&block);
  }
}

void redraw_colours(window_redrawblock *block)
{
  /*	This is called from within a Wimp_GetRectangle loop	*/

  /*
  //	To take a screen coord and convert to work area coords use:
  //		work x = screen x - (screen x0 - scroll x)
  //		work y = screen y - (screen y1 - scroll y)
  //
  //	Where:
  //		screen x0 = block->rect.min.x
  //		screen y1 = block->rect.max.y
  //		scroll x  = block->scroll.x
  //		scroll y  = block->scroll.y
  */

  int movex, movey;

  movex=block->rect.min.x - block->scroll.x;
  movey=block->rect.max.y - block->scroll.y;

  /*
  //	So now we use work x = screen x - movex etc.
  */

  /*
  //	Go through all entries seeing if we need to draw them
  //	Can't do this yet because I'm not loading the definitions :-)
  */
}
