# Make file for Zap Util Extension

Linkflags	= -o $@ -B 0x0 -bin -s @.Labels

ExtHdrs		= <ZapExtSource$Dir>.h.Macros <ZapExtSource$Dir>.h.RegNames

UtilHdrs	= t.module t.commands t.minfo t.dwcomms \
		  t.dsutils t.coreutils t.sjacomms \
		  t.dscomms t.pmcomms t.jrfcomms t.cursors
UtilObjs	= o.module o.commands o.minfo o.dwcomms \
		  o.dsutils o.coreutils o.sjacomms \
		  o.dscomms o.pmcomms o.jrfcomms o.cursors

# had -depend !Depend
Objasmflags	= -I <ZapExtSource$Dir> -to $@ -stamp -Throwback -quit -from
Zap		= <Zap$Dir>
ZapS		= <ZapSource$Dir>
ZapUtil		= <ZapUtil$Dir>
ZapUtilExt	= <ZapExtSource$Dir>.Util

.SUFFIXES: .s .o .h .t
.s.t:;		@Run $(ZapS).data.StoH $(ZapUtilExt).s.$* $(ZapUtilExt).h.$*
		Create $(ZapUtilExt).t.$* 0

.s.o:;		objasm $(Objasmflags) $<

# Final target:

ZapUtil:	$(ExtHdrs) $(UtilObjs) $(UtilHdrs)
		link $(Linkflags) $(UtilObjs)
		Settype $(ZapUtilExt).$@ Module
		Run $(ZapS).data.MCopy $(ZapUtilExt).$@ $(ZapUtil).ZapUtil
		Run $(Zap).Code.MakeExtern.MakeExtern -ext ZapUtil
		@Echo Made ZapUtil

# Dependencies:

# Dynamic dependencies:
