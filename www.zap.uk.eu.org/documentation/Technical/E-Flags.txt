*************************************************************************
* >E-Flags	Documents the '*_flags' and '*_format' words.		*
*************************************************************************

This file documents the bits of the flag/format words. To be specific these
are the word variables named opt_flags, f_flags, w_flags and opt_format,
w_format. The opt_* variables give the default values to use when creating
new file or window blocks and these are saved in the !Config file. See the
file E-Vars on how to change them. The f_* and w_* variable offsets are
documented in E-File and E-Windows.

After each bit, I will write an 'o','f' or 'w' depending on whether that bit
has meaning in the opt_flags, f_flags or w_flags words.

The flags word:

b0	of	Set if undo supported for this file
b1	w	0=insert mode 1=overwrite mode
b2	o	0=files auto deleted 1=no auto delete of files
b3	f	Set if file altered
b4	of	Set if file permanently read only (big R in title)
b5	w	Set if in hex entry mode for this window
b6	w	Set if auto width option active
b7	f	Indicates file not in buffer list - out of date - do not use
b8	of	Set if file temporarily read only (small r in title)
b9 & 10	w	Tab mode 00=Unix 01=!Edit 10=coltab mode 11=undefined
b11	w	Set means insert tabs as spaces
b12	o	Set if search case sensitive
b13	w	Set if wordwrap mode on
b14	f	Set to unlink input position from input cursor
b15	o	Set for sideways printing in 'fancy print'
b16	o	Set for don't add title in 'fancy print'
b17	ow	Redraw mode low bit - see later
b18	o	Set for don't add title in 'quick print'
b19	ow	Set for don't use search macros
b20	ow	Redraw mode medium bit - see later
b21	ow	Redraw mode high bit - see later
b22	o	Set if selections should automatically vanish
b23	o	Minibuffer permanent if set (popup otherwise)
b24	f	Set to prevent input cursor being drawn after a text change
b25	o	Set if gain input calls should be ignored - internal use
b26	w	Set if linewrap mode on
b27	f	Set if file a "DOS text file" (converts LF->CRLF on saving)
b28	f	Set if file has non standard attributes. Update via GBPB
b29	f	Set if file a "Spool file" (converts LF->LFCR on saving)
b30	w	Internal use : Window changed during scrolling
b31	w	Internal use : Window needs to be altered after mode change

The redraw mode bits can be described by the masks:
	&000000	1 dpp system font (DSA)
	&020000 system font (VDU)
	&100000 scaled system font (DSA)
	&120000 font via vdu
	&200000 fast font redraw
	&220000 double height system font (DSA)
	&300000 reserved
	&320000 reserved

Now the 'format' word. This word is very important as it contains the mode
number of the window. You should use Zap_NewMode to change it. All bits are
valid in opt_format and w_format. The opt_format mode is the options mode
mentioned in the 'Options.Mode' menu.

b0-b7	Mode number (0-255)
b8	0=no line numbers 1=show line numbers
b9	0=line numbers are file offsets 1=line numbers are lines (see b11)
b10	0=line numbers given in decimal 1=line numbers given in hex
b11	0=line numbers are physical 1=line numbers are logical
b12-b13	display format 00=none 01=spaces 10= '->   ' 11='----->'
b14	0=stream edit paradigm 1=line edit paradigm
b15	Set for non standard edit mode
b16	Set for auto indent mode
b17	Set for big endian mode
b18	Set if spaces should be stripped when file is saved
b19+b20	Reserved
b21	Free mouse clicks
b22	Auto soft wrap
b23	Confined cursor up/down
b24	Confined cursor right
b25	Smart shift-cursor
b26	Window wrap
b27	Soft wrap
b28	Internal use : use double height scaling
b29	Reserved : not currently used
b30	Colours menu sets colours for given mode only
b31	Internal use : Set to force default (options) mode on loading a file

w_info
The 'info' word. Essentially this word contains various window status bits
that wouldn't fit into the w_format word.

 b0-b2	Line number width
 b3	Line number colons
 b4	Internal use : font sub-styles currently completely disabled
 b5	Infinite window wrap
 b6	Use line selection paradigm
 b7	Spell-as-you-type
 b8	Reserved
 b9	Strong soft wrap
 b10	Block editing

People writing modes should note that it is their responsibility to save the
current mode options/restore the options on a e_end or e_start call.  Use the
call Zap_RestoreModeWord on your e_start call and Zap_SaveModeWord on your
e_end call to accomplish this.
