; Contains module header and initialise/finialise/service call code and
; module command table.
; $Id: ModuleBits,fff,v 2.12 2002-11-18 11:18:42 christian Exp $

 GET h.ZapHeader
 GET h.Messages
 GET h.Strings
 GET h.Commands
 GET h.Execute
 GET h.Dispatch
 GET h.Mode0
 GET h.Mode1+2
 GET h.Mode3
 GET h.Mode4
 GET h.ModeBits
 GET h.StartCode
 GET h.Heap
 GET h.Messages
 GET h.Version
 GET h.TMFs

 EXPORT title_string
 EXPORT help_string
 EXPORT help_string_1
 EXPORT help_string_2
 EXPORT core_dump
 EXPORT Module_header
 EXPORT Module_end
 EXPORT service_reset
 EXPORT poll_word_changed

 ; 32 bit ARM support code
 EXPORT ARM32_VSRet
 EXPORT ARM32_VCRet
 EXPORT ARM32_CSRet
 EXPORT ARM32_CCRet
 EXPORT ARM32_ZSRet
 EXPORT ARM32_ZCRet

 IMPORT mode_table_11
 IMPORT conv_wind_off
 IMPORT warn_user
 IMPORT poll_word_pdriverchanged
 IMPORT kill_lineeditor

 AREA |!!!Module_Header_Area|,CODE,READONLY

 ENTRY

Module_header
Start_code	     DCD start_code
Initialisation_code  DCD initialise_code
Finalisation_code    DCD finalise_code
Service_call_handler DCD service_call
Title_string	     DCD title_string
Help_string	     DCD help_string
Command_keyword_tab  DCD command_table
SWI_chunk_number     DCD 0
SWI_handler_code     DCD 0
SWI_decoding_table   DCD 0
SWI_decoding_code    DCD 0
Messages_File	     DCD 0
Module_Flags	     DCD module_flags

title_string = |zap$|,0

help_string	= |zap$|,9,9
help_string_1	= version,"(00 Jan 0000)"
 [ BUILD > ""
		= " ",BUILD
  [ (BUILD:RIGHT:1 < "0" :LOR: BUILD:RIGHT:1 > "9") :LAND: patch_level <> ""
		= "-",patch_level
  ]
 |
  [ test_flag
		= " [TEST"
   [ patch_level <> ""
		= " ",patch_level
   ]
		= "]"
  |
   [ patch_level <> ""
		= " patch-",patch_level
   ]
  ]
 ]
help_string_2	FNS (" © Zap developers")


; Command table

command_table
 FNS (|zap$|:CC:"Command")
 DCD Zap_StringCommand
 DCD &630001
 DCD zcsy
 DCD zchp

 FNS (|zap$|:CC:"_Desktop")
 DCD Zap_Desktop
 DCD &02FF00
 DCD dessy
 DCD deshp

 DCD 0

zchp  = "*",27,0," executes a colon-separated string of Zap commands.",13
zcsy  = 27,30,"*]<string>",0

deshp = "*",27,0," runs",27,2,"Zap module",27,16,"(optionally) loads in",27,2
      = "given file on startup. Zap",27,")initialised as a WIMP task.",13
dessy = 27,30,"-noicon] [<filename>]",0

 ALIGN


module_flags	DCD	1				; 32 bit aware


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; INITIALISE AND FINALISE				       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

;X claims and clears workspace, links templates, added modes

initialise_code
 FNJSR
 MOV R0,#6
 MOV R3,   #(variable_size :AND: &00FF)
 ORR R3,R3,#(variable_size :AND: &FF00)
 SWI XOS_Module			; claim varable workspace
 BLVC messages_open
 FNRTS VS			; R3 saved
 STR R2,[R12]			; save workspace
 MOV R12,R2
 MOV R1,#0
 BL fill_words			; clear workspace
 ADR R0,Module_header		; start of the module
 FNSTR R0,env_modstart		; save it as the module start address
 FNADR R0,ext$l			; table of branch instructions
 FNSTR R0,env_main_entry	; save at start of workspace
 BL add_default_modes		; add default modes and commands
 FNRTS
ext$l DCD zap_entry_table



finalise_code
 FNJSR
 MOV R1,R12			; save private word pointer
 LDR R12,[R12]
 FNLDR R0,wimp_task		; we can't die if we're active
 CMP R0,#0			;
 CMPNE R0,#-1			;
 BNE noyoudont$l		;

 MOV R0,#7			; free our workspace - I'm fairly certain
 MOV R2,R12			; the kernel can do this for us, however
 MOV R12,R1			;
 SWI XOS_Module			;
 SUBS R0,R0,R0			; clv  and R0 = 0
 STR R0,[R12]			; null private word
 FNRTS				;

noyoudont$l
 ADR R0,err$l
 FNRTV

err$l
 DCD 0
 = "You must quit the ":CC:|zap$|:CC:" application before you can "
 = "kill the ":CC:|zap$|:CC:" module",0
 ALIGN


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; OSCLI COMMANDS					       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Zap_Desktop
 FNJSR
 LDR R12,[R12]
 FNLDR R14,wimp_task
 TEQ R14,#0			; task dead
 CMNNE R14,#1			; task starting up
 MOVEQ R2,R0			; command tail (ie filename)
 ADREQ R1,title_string
 MOVEQ R0,#2
 SWIEQ XOS_Module			; enter the module
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SERVICE CALL HANDLER					       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 DCD service_table ; table offset (ursula only)
service_call
 MOV r0,r0	   ; ursula magic word
; fast service rejection code
 TEQ R1,#&49	; StartWimp
 TEQNE R1,#&4A	; StartedWimp
 TEQNE R1,#&27	; PostReset
 TEQNE R1,#&7F	; PDriverChanged
 MOVNE pc,r14
service_call_accepted
 LDR R12,[R12]			; get zap workspace
 TEQ R1,#&49
 BEQ service_startwimp
 TEQ R1,#&4A
 BEQ service_startedwimp
 TEQ R1,#&7F
 BEQ service_pdriverchanged
 TEQ R1,#&27
 BEQ service_reset
 MOV PC,R14

service_table
 DCD 0  ; flags
 DCD service_call_accepted
; the following are the service calls we accept. They MUST be in
; order.
 DCD &27 ; reset
 DCD &49 ; start wimp
 DCD &4A ; started wimp
 DCD &7F ; printer driver changed
 DCD 0 ; end of list


service_startwimp
 FNJSR
 SYSLOG "Zap service_startwimp", LOG_STATUS
 FNLDR R14,wimp_task
 TEQ R14,#0
 MVNEQ R14,#0
 FNSTR R14,wimp_task,EQ
 ADREQ R0,start_string
 MOVEQ R1,#0
 FNRTS

start_string	    FNS (|zap$|:CC:"_Desktop")

service_startedwimp
 FNJSR
 SYSLOG "Zap service_startedwimp", LOG_STATUS
 FNLDR R14,wimp_task
 CMP R14,#0
 MOVMI R14,#0
 FNSTR R14,wimp_task,MI
 FNRTS

service_reset
 FNJSR
 SYSLOG "Zap service_reset", LOG_STATUS
 MOV R14,#0
 FNSTR R14,wimp_task		; task pseudo - dead
 FNSTR R14,file_num		; and no files (zap not active)
 FNRTS

service_pdriverchanged
	FNJSR
	SYSLOG "Zap service_pdriverchanged", LOG_STATUS
	FNLDR	R14,wimp_poll_word
	ORR	R14,R14,#2		; set it...
	FNSTR	R14,wimp_poll_word
	FNRTS

 LOCAL


;X default modes 0-4,11 added to mode list & command table #

add_default_modes
	FNJSR	"R1,R7"
	LDR	R1,[R12,#env_modstart]	; start of the module
	ADR	R7,extm$l
loop$l	LDR	R0,[R7],#4
	TEQ	R0,#0
	BEQ	cmd$l
	ADD	R0,R1,R0
	BL	add_new_mode
	BVC	loop$l
	FNRTS
cmd$l	LDR	R0,extc$l
	ADD	R0,R1,R0
	BL	add_command_table
	FNRTS
extm$l	& mode_table_0
	& mode_table_1
	& mode_table_2
	& mode_table_3
	& mode_table_4
	& mode_table_5
	& mode_table_6
	& mode_table_11
	& 0
extc$l  DCD key_command_table



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Module debug						;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

;X writes all of Zap's memory to disc #

core_dump
 FNJSR
 SYSLOG "Dumping core, module and workspace into <Zap$Dir>", LOG_ALWAYS
 ADR R1,module$l
 FNADR R4,ext1$l
 FNADR R5,ext2$l
 BL core_save
 ADRVC R1,main$l
 FNLDR R4,env_start,VC
 FNLDR R5,env_top,VC
 BLVC core_save
 ADRVC R1,worksp$l
 MOVVC R4,R12
 ADDVC R5,R12,#(variable_size :AND: &00FF)
 ADDVC R5,R5,#(variable_size :AND: &FF00)
 BLVC core_save
 FNRTS
ext1$l	 DCD Module_header
ext2$l	 DCD Module_end
module$l FNS (|zapdir$|:CC:".D-Mod")
worksp$l FNS (|zapdir$|:CC:".D-Work")
main$l	 FNS (|zapdir$|:CC:".D-Core")

core_save
 FNJSR
 MOV R2,R4
 MOV R3,R4
 MOV R0,#0
 SWI XOS_File
 FNRTS



; *******************************************************************
; Subroutine:	zapcommand
; Description:  OSCLI command zapcommand. Installs a temporary filter
;		for !Zap with will then execute the command specified
;		on the current task
; Parameters:	r0->string used by *ZapCommand
; Returns:	VS if error (r0->error block)
; *******************************************************************

Zap_StringCommand
	FNJSR	"R0-R5"
	LDR	R12,[R12]		; get our workspace
	FNLDR	R2,exception_buffer	; will do for now.
	; er strcopy?
loop$l
	LDRB	r3,[r0],#1
	STRB	r3,[r2],#1
	CMP	r3,#32
	BGE	loop$l			; string copied to our block
	MOV	r3,#0
	STRB	r3,[r2],#1

	FNLDR	R0,wimp_poll_word
	ORR	R0,R0,#1		; set it...
	FNSTR	R0,wimp_poll_word
	FNRTS				; exit command routine


; *******************************************************************
; Subroutine:	filtercode
; Description:  Filter Zap to execute the command specified + remove
;		filter
; Parameters:	r0= reason code (ignored)
;		r1= buffer (ignored)
;		r2= task handle
;		r12= string to execute
; Returns:	as passed
; *******************************************************************

poll_word_changed
	FNJSR
	SUBS	R0,R0,#0
	FNLDR	R0,wimp_poll_word
	TST	R0,#1
	BIC	R0,R0,#1
	FNSTR	R0,wimp_poll_word
	BLNE	poll_word_command
	FNRTS	VS
	FNLDR	R0,wimp_poll_word
	TST	R0,#2
	BIC	R0,R0,#2
	FNSTR	R0,wimp_poll_word
	BLNE	poll_word_pdriverchanged
	FNRTS

poll_word_command
	FNJSR
	FNLDR	r10,car_cursor		; r10=cursor block
	LDR	r0,[r10]		; r0=window offset
	BL	conv_wind_off		; get r8,r9...
	FNLDR	R0,exception_buffer
	LDRB	r1,[r0]			; get first byte
	CMP	r1,#'*'			; if * this is configuration
	ADDEQ	r0,r0,#1		; ... so increment start pointer
	MOVEQ	r8,#0			; ... set wind to 0
	MOVEQ	r9,#0			; ... and file to 0
	MOV	R1,#command_DontLearn
	BL	command_string		; corrupts...?
	FNRTS	VC

error$l
	ADDS	R0,R0,#4		; also CLV...
	MOV	R1,#0
	BL	warn_user
	FNRTS



; 32 bit ARM support code

ARM32_VSRet	SEV
		MOV	PC,R14

ARM32_VCRet	CLV
		MOV	PC,R14

ARM32_CSRet	SEC
		MOV	PC,R14

ARM32_CCRet	CLC
		MOV	PC,R14

ARM32_ZSRet	SEZ
		MOV	PC,R14

ARM32_ZCRet	CLRZ
		MOV	PC,R14


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; End of the module					;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 AREA |ZEnd_Of_Module|,READONLY,CODE

Module_end

 END
