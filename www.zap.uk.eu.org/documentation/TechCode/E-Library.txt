REM >E-Library
REM
REM Defines the variables needed for writing Zap extension modes.
REM Call the procedure define_zap_variables to set variables up.
REM The procedure defines:
REM   f_*           The file block variables (see E-File)
REM   w_*           The window block variables (see E-Windows)
REM   c_*           The cursor block variables (see E-Cursors)
REM   e_*           The entry point variables (see E-Entry)
REM   r_*           The redraw block variables (see Redraw)
REM   Zap_*         The zap routines (see E-ZapCalls)
REM
REM Procedure names local to this library are:
REM  set_up_file_blk_vars
REM  set_up_wind_blk_vars
REM  set_up_cusr_blk_vars
REM  set_up_entry_vars

DEF PROCdefine_zap_variables
LOCAL pass,P%,O%,L%,code%
DIM code% 2048
L%=code%+2048
PROCset_up_file_blk_vars
PROCset_up_wind_blk_vars
PROCset_up_cusr_blk_vars
PROCset_up_entry_vars
ENDPROC

DEF PROCset_up_file_blk_vars
FOR pass=%1100 TO %1110 STEP 2:P%=0:O%=code%:[OPTpass

\L File block variables

.f_ptr              EQUD 0    \ pointer to file buffer / -1
.f_bufl             EQUD 0    \ length of file buffer
.f_len              EQUD 0    \ length of file
.f_name             EQUD 0    \ pointer to filename
.f_load             EQUD 0    \ load address of file
.f_exec             EQUD 0    \ exec address of file
.f_flags            EQUD 0    \ file flags
.f_uptr             EQUD 0    \ pointer to undo buffer
.f_ubufl            EQUD 0    \ length of undo buffer
.f_ulen             EQUD 0    \ length of data in undo buffer
.f_undo             EQUD 0    \ offset of main undo pointer
.f_undop            EQUD 0    \ offset of undo block sub-pointer
.f_blklen           EQUD 0    \ total length of file block + undo
.f_splito           EQUD 0    \ offset in file of start of split
.f_splite           EQUD 0    \ offset in buf of end of split
.f_splits           EQUD 0    \ size  of split=splite-splito
.f_mptr             EQUD 0    \ pointer to marker buffer
.f_mbufl            EQUD 0    \ length of marker buffer
.f_mlen             EQUD 0    \ length of data in marker buffer
.f_mark             EQUD 0    \ current offset in marker buffer
.f_docom            EQUD 0    \ current command being 'done'.
.f_source           EQUD 0    \ word for use of f_cmode mode
.f_dolen            EQUD 0    \ length of insertion/deletion
.f_dodata           EQUD 0    \ data to be inserted/replace with.
.f_altered          EQUD 0    \ first altered offset in file /-1
.f_shiftable        EQUD 0    \ first shiftable offset in file /-1
.f_change           EQUD 0    \ signed change of shiftable offset
.f_depth            EQUD 0    \ multiple operation depth / 0
.f_links            EQUD 0    \ v links to other files
.f_cmode            EQUD 0    \ mode which 'owns' file / -1
.f_attr             EQUD 0    \ file attributes
.f_chklen           EQUD 0    \ initial length
.f_chksum           EQUD 0    \ initial checksum
.f_oflags           EQUD 0    \ old flags (used by startop/stopop)
.f_end_mark         EQUD 0    \ end of list marker

]:NEXT
ENDPROC

DEF PROCset_up_wind_blk_vars
FOR pass=%1100 TO %1110 STEP 2:P%=0:O%=code%:[OPTpass

\L Window block variables

.w_handle           EQUD 0    \ window handle / -1 if deleted
.w_minx             EQUD 0    \ min scn x
.w_miny             EQUD 0    \ min scn y
.w_maxx             EQUD 0    \ max scn x
.w_maxy             EQUD 0    \ max scn y
.w_scrollx          EQUD 0    \ x scroll
.w_scrolly          EQUD 0    \ y scroll
.w_infront          EQUD 0    \ window handle of window in front
.w_windowflags      EQUD 0    \ wimp window flags
.w_file             EQUD 0    \ offset of file showing
.w_format           EQUD 0    \ display format
.w_width            EQUD 0    \ width of work area in chars
.w_height           EQUD 0    \ height of work area in chars
.w_txt              EQUD 0    \ pointer to cached text buffer
.w_txth             EQUD 0    \ height of cached txt buf in lines
.w_txtw             EQUD 0    \ char width of cached line (mult 8)
.w_txtn             EQUD 0    \ number of lines cached
.w_coff             EQUD 0    \ off in text of first cached line
.w_cline            EQUD 0    \ line number of first cached line
.w_clogl            EQUD 0    \ log line num of first cached line
.w_tab              EQUD 0    \ coltab width
.w_tabc             EQUD 0    \ actual tab character code (x4)
.w_cr               EQUD 0    \ code of return/line feed
.w_flags            EQUD 0    \ (my) window flags
.w_title            EQUD 0    \ pointer to window title buffer
.w_bpl              EQUD 0    \ bytes per line / width of text
.w_margin           EQUD 0    \ width of margin (inc line nos)
.w_rl               EQUD 0    \ height in lines of each character
.w_rw               EQUD 0    \ width in pixels of each character
.w_rh               EQUD 0    \ text height in pixels (no spacing)
.w_addr             EQUD 0    \ address of first byte in display
.w_stline           EQUD 0    \ line number of first line in disp
.w_titlelen         EQUD 0    \ title length (excluding 0)
.w_titbuf           EQUD 0    \ address of title showing buffer
.w_titlen           EQUD 0    \ length of title showing string
.w_mwidth           EQUD 0    \ user required margin width
.w_tabchar          EQUD 0    \ user required tab char code (x4)
.w_linesp           EQUD 0    \ user required line spacing
.w_savedo           EQUD 0    \ fixed off / fixed line off before
.w_savedl           EQUD 0    \ pixs from top / phy line of off
.w_savedc           EQUD 0    \ change in phy line for shiftable
.w_savedh           EQUD 0    \ w_height at multiop start
.w_savedlc          EQUD 0    \ phy line of fixed for one op
.w_wrapwidth        EQUD 0    \ wordwrap width
.w_togminx          EQUD 0    \ toggle size min x
.w_togminy          EQUD 0    \ toggle size min y
.w_togmaxx          EQUD 0    \ toggle size max x
.w_togmaxy          EQUD 0    \ toggle size max y
.w_txtlen           EQUD 0    \ size of cache line inc col masks
.w_palette          EQUD 0    \ current palette data
.w_pwind            EQUD 0    \ point (=this!) window offset
.w_pline            EQUD 0    \ point row (y coord)
.w_pcol             EQUD 0    \ point column (x coord)
.w_poff             EQUD 0    \ point offset
.w_ploff            EQUD 0    \ point line offset
.w_pwidth           EQUD 0    \ point width
.w_saveds           EQUD 0    \ start of area to redraw offset
.w_modedata         EQUD 0    \ zap handled mode data block
.w_basemap          EQUB 0    \ base keymap number
.w_currentmap       EQUB 0    \ current keymap number
.w_helpmap          EQUB 0    \ previous keymap number (for HELPKEY)
.w_defaultmap       EQUB 0    \ default keymap number
.w_font             EQUD 0    \ font block pointer
.w_savedscy         EQUD 0    \ saved scrolly (s_txt_stat) ; (was RW 12)
.w_info             EQUD 0    \ w_info (was RW13)
.w_res14            EQUD 0    \ font cache offset / -1 if none
.w_res15            EQUD 0    \ font offset (of 1bpp form)
.w_res16            EQUD 0    \ reserved word 16
.w_mode0            EQUD 0    \ mode 0 word
.w_mode1            EQUD 0    \ mode 1 word
.w_mode2            EQUD 0
.w_mode3            EQUD 0
.w_mode4            EQUD 0
.w_mode5            EQUD 0
.w_mode6            EQUD 0
.w_mode7            EQUD 0
.w_mode8            EQUD 0
.w_mode9            EQUD 0
.w_mode10           EQUD 0
.w_mode11           EQUD 0
.w_mode12           EQUD 0
.w_mode13           EQUD 0
.w_mode14           EQUD 0
.w_mode15           EQUD 0
.w_mode16           EQUD 0
.w_mode17           EQUD 0
.w_mode18           EQUD 0
.w_mode19           EQUD 0
.w_mode20           EQUD 0
.w_mode21           EQUD 0
.w_mode22           EQUD 0
.w_mode23           EQUD 0
.w_mode24           EQUD 0
.w_mode25           EQUD 0
.w_mode26           EQUD 0
.w_mode27           EQUD 0
.w_mode28           EQUD 0
.w_mode29           EQUD 0
.w_mode30           EQUD 0
.w_mode31           EQUD 0
.w_end_mark         EQUD 0    \ end of list marker

]:NEXT
ENDPROC

DEF PROCset_up_cusr_blk_vars
FOR pass=%1100 TO %1110 STEP 2:P%=0:O%=code%:[OPTpass

\L Cursor block variables

.c_wind             EQUD 0    \ offset of window with this caret
.c_line             EQUD 0    \ line of caret in work area
.c_col              EQUD 0    \ column of caret in work area
.c_off              EQUD 0    \ offset of caret in text
.c_loff             EQUD 0    \ start of line offset
.c_width            EQUD 0    \ width of cursor in chars
.c_owind            EQUD 0    \ old window / -1 if none
.c_oline            EQUD 0    \ old plotted line
.c_ocol             EQUD 0    \ old plotted col
.c_owidth           EQUD 0    \ old width / offset for selected regions
.c_charoff          EQUD 0    \ offset within character
.cusr_blk           EQUD 0    \ length of a cursor block

]:NEXT
ENDPROC

DEF PROCset_up_entry_vars
FOR pass=%1100 TO %1110 STEP 2:P%=0:O%=code%:[OPTpass

\L Entry block vars

.e_module           EQUD 0    \ table offset from module start
.e_title            EQUD 0    \ title offset (max 10)
.e_author           EQUD 0    \ author offset
.e_basemode         EQUD 0    \ mode to call for 0 offsets
.e_mode             EQUD 0    \ mode you would like to be
.e_init             EQUD 0    \ startup code
.e_menu             EQUD 0    \ extension menu
.e_len              EQUD 0    \ length of this table
.e_postload         EQUD 0    \ called after being loaded/created
.e_presave          EQUD 0    \ called before being saved
.e_loading          EQUD 0    \ file being loaded/created
.e_start            EQUD 0    \ window entering this mode
.e_end              EQUD 0    \ window leaving this mode
.e_width            EQUD 0    \ find work area width
.e_linecol          EQUD 0    \ column offset to file offset
.e_lineoff          EQUD 0    \ file offset to column offset
.e_clnlog           EQUD 0    \ log to file off
.e_clnphy           EQUD 0    \ phy to file off
.e_clnoff           EQUD 0    \ file off to phy/log
.e_nextline         EQUD 0    \ find next line which can be shifted down
.e_minus            EQUD 0    \ perform cursor left
.e_plus             EQUD 0    \ perform cursor right
.e_sminus           EQUD 0    \ perform shift left
.e_splus            EQUD 0    \ perform shift right
.e_cminus           EQUD 0    \ perform ctrl minus
.e_cplus            EQUD 0    \ perform ctrl plus
.e_redrawline       EQUD 0    \ redraw a line of the display
.e_redrawlnum       EQUD 0    \ find logical line number
.e_char             EQUD 0    \ insert characters as if typed
.e_delete           EQUD 0    \ delete characters from text
.e_tab              EQUD 0    \ tab key pressed
.e_return           EQUD 0    \ return key pressed
.e_renumber         EQUD 0    \ please renumber
.e_saveandrun       EQUD 0    \ save file and run/compile
.e_linestart        EQUD 0    \ find start of line
.e_lineend          EQUD 0    \ find end of line
.e_linenext         EQUD 0    \ find actual end of line
.e_lineprev         EQUD 0    \ find actual start of line
.e_copy             EQUD 0    \ copy key data
.e_joinline         EQUD 0    \ join this line with the next
.e_splitline        EQUD 0    \ split this line at the cursor
.e_aligncaret       EQUD 0    \ put caret in sensible posn before command
.e_command          EQUD 0    \ someone wants to alter the text
.e_compile          EQUD 0    \ compile / run and don't exit
.e_formattext       EQUD 0    \ format the text from this point
.e_run              EQUD 0    \ run the program being edited
.e_runandquit       EQUD 0    \ as above but then quits
.e_basic            EQUD 0    \ drops into basic (or language)
.e_search           EQUD 0    \ called before a search
.e_replace          EQUD 0    \ replace a string
.e_selection        EQUD 0    \ start/end a selection
.e_click            EQUD 0    \ double/treble click etc
.e_message          EQUD 0    \ unrecognised wimp messages
.e_setwidth         EQUD 0    \ changing window width
.e_listfns          EQUD 0    \ provide list of functions
.e_prevline         EQUD 0    \ find start of update region
.e_openwindow       EQUD 0    \ window changing size or moving
.e_interrogate      EQUD 0    \ Information request from Zap
.e_returnword       EQUD 0    \ return bounds of word at cursor
.e_help             EQUD 0    \ return possible help keywords

]:NEXT
FOR pass=%1100 TO %1110 STEP 2:P%=0:O%=code%:[OPTpass

\L zap entry point offsets

.Zap_AddMode        EQUD &000  \ add new mode to zap
.Zap_Claim          EQUD &004  \ claim heap block
.Zap_Ensure         EQUD &008  \ ensure heap block
.Zap_Free           EQUD &00C  \ free heap block
.Zap_MoveBytes      EQUD &010  \ move data
.Zap_SplitBuffer    EQUD &014  \ split text buffer at given point
.Zap_NewTxtStatus   EQUD &018  \ refresh screen after file changed
.Zap_SaveTxtStatus  EQUD &01C  \ save info before file changed
.Zap_Command        EQUD &020  \ execute insert/delete command
.Zap_NewWinStatus   EQUD &024  \ recreate window after change
.Zap_SaveWinStatus  EQUD &028  \ save window status before change
.Zap_ReplaceArea    EQUD &02C  \ replace one string by another
.Zap_PlotCaret      EQUD &030  \ plot caret at given position
.Zap_ReflectCaret   EQUD &034  \ plot caret at posn only using c_off
.Zap_SetCaret       EQUD &038  \ draw caret
.Zap_ClearCaret     EQUD &03C  \ draw old caret position (remove caret)
.Zap_DoCommand      EQUD &040  \ perform the command
.Zap_ShowCursor     EQUD &044  \ make sure given cursor is visible
.Zap_ReadVar        EQUD &048  \ read a zap variable
.Zap_WriteVar       EQUD &04C  \ write a zap variable
.Zap_SaveFile       EQUD &050  \ save a file to disc
.Zap_FillWords      EQUD &054  \ fill a given area of memory
.Zap_UpdateLns      EQUD &058  \ update line numbers column
.Zap_EachWindow     EQUD &05C  \ call sub for each window on file
.Zap_UpdateCaret    EQUD &060  \ updates caret posn from offset
.Zap_GetWindState   EQUD &064  \ update R8 block with wind posn
.Zap_StartOp        EQUD &068  \ start multiop
.Zap_StopOp         EQUD &06C  \ stop multiop
.Zap_CallMode       EQUD &070  \ call a mode entry point using R8
.Zap_CallGivenMode  EQUD &074  \ call mode in R10
.Zap_ReadMode       EQUD &078  \ read info on a mode
.Zap_FindFile       EQUD &07C  \ find window on a given file name
.Zap_FindWindow     EQUD &080  \ find window on a loaded file
.Zap_ConvWindOff    EQUD &084  \ convert window off to blk ptr
.Zap_ConvFileOff    EQUD &088  \ convert file off to blk ptr
.Zap_GetWindOff     EQUD &08C  \ convert window blk ptr to off
.Zap_GetFileOff     EQUD &090  \ convert file blk ptr to off
.Zap_GotoOffset     EQUD &094  \ move cursor to given posn + mark
.Zap_JumptoOffset   EQUD &098  \ move cursor to given posn nomark
.Zap_FindOffset     EQUD &09C  \ find file offset from x,y coord
.Zap_NewFileTitle   EQUD &0A0  \ update titlebars on a file
.Zap_InsertString   EQUD &0A4  \ insert string into file
.Zap_CreateFile     EQUD &0A8  \ create an empty file
.Zap_NewLinkEntry   EQUD &0AC  \ add an entry to the links table
.Zap_DefaultClick   EQUD &0B0  \ default mouse click handling
.Zap_PutCaret       EQUD &0B4  \ put new caret in file
.Zap_DiscardFile    EQUD &0B8  \ kill file
.Zap_DeleteFile     EQUD &0BC  \ propmt then kill
.Zap_DiscardWindow  EQUD &0C0  \ kill window
.Zap_DeleteWindow   EQUD &0C4  \ prompt then kill window
.Zap_BuildMenu      EQUD &0C8  \ create a variable length menu
.Zap_ClearSel       EQUD &0CC  \ clear selected area
.Zap_CreateFileBlk  EQUD &0D0  \ create a new file block in R9
.Zap_CreateWindBlk  EQUD &0D4  \ create a new window block in R8
.Zap_GetSel         EQUD &0D8  \ get info on selected region
.Zap_InsertMark     EQUD &0DC  \ insert marker at given offset
.Zap_InstallFile    EQUD &0E0  \ load a file into Zap
.Zap_NewMode        EQUD &0E4  \ change mode of a file
.Zap_NewTitle       EQUD &0E8  \ update the title of a window
.Zap_CallBaseMode   EQUD &0EC  \ call base mode entry point
.Zap_NewView        EQUD &0F0  \ open a new window on a file
.Zap_ReadSel        EQUD &0F4  \ read the selected region
.Zap_Replace        EQUD &0F8  \ perform a search and replace
.Zap_Search         EQUD &0FC  \ perform a file search
.Zap_Select         EQUD &100  \ select a region
.Zap_AlterSel       EQUD &104  \ alter selected region
.Zap_OffLineCol     EQUD &108  \ convert file offset to X,Y
.Zap_AddCommands    EQUD &10C  \ add a command table
.Zap_MiniWrite      EQUD &110  \ insert chars in minibuffer
.Zap_MiniPrompt     EQUD &114  \ set/change the minibuffer prompt
.Zap_MiniUpdate     EQUD &118  \ update minibuffer on screen
.Zap_AddYankRegion  EQUD &11C  \ add a region to kill ring
.Zap_FindCommand    EQUD &120  \ convert command name to address
.Zap_ProcessCommand EQUD &124  \ call a Zap command
.Zap_FindKeyEntry   EQUD &128  \ read a keymap entry
.Zap_FindLeafName   EQUD &12C  \ find leaf part of a filename
.Zap_NewFileName    EQUD &130  \ change the name of a file
.Zap_CheckFileName  EQUD &134  \ see if file contains a path
.Zap_GetCurrDir     EQUD &138  \ find the current directory name
.Zap_MiniWriteC     EQUD &13C  \ write a character to minibuffer
.Zap_MiniClear      EQUD &140  \ clear minibuffer
.Zap_MiniStart      EQUD &144  \ start up a new minibuffer
.Zap_MiniEval       EQUD &148  \ turn string into number
.Zap_CommandString  EQUD &14C  \ execute a string command
.Zap_ProcessKeys    EQUD &150  \ process a list of keys
.Zap_ProcessAKey    EQUD &154  \ process a single key as if typed
.Zap_OpenWindow     EQUD &158  \ open a Zap window
.Zap_RestoreModeWord EQUD &15C \ restore mode options on e_start
.Zap_SaveModeWord   EQUD &160  \ save mode options on e_end
.Zap_GetModeWord    EQUD &164  \ read the mode word
.Zap_PutModeWord    EQUD &168  \ write the mode word
.Zap_BaseMode       EQUD &16C  \ call the base mode
.Zap_ReadWord       EQUD &170  \ read a word from the file buffer
.Zap_ReplaceWord    EQUD &174  \ replace a word in the file buffer
.Zap_ModeColour     EQUD &178  \ Read colour definitions
.Zap_FindInput      EQUD &17C  \ Find input position
.Zap_ClipCache      EQUD &180  \ Move the cache reference point.
.Zap_ModeData       EQUD &184  \ Read/write Zap data mode words.
.Zap_WhichMode      EQUD &188  \ Which mode to load a file into.
.Zap_ModeNumber     EQUD &18C  \ Convert mode name to number.
.Zap_SendDataSave   EQUD &190  \ Initiate data transfer protocol.
.Zap_Warning        EQUD &194  \ Show warning message.
.Zap_AllWindow      EQUD &198  \ Examine each window in turn.
.Zap_ReadMenu       EQUD &19C  \ Create text menu to data.
.Zap_LoadMenu       EQUD &1A0  \ Load a text menu file.
.Zap_OpenMenu       EQUD &1A4  \ Open a menu on the screen.
.Zap_CallBack       EQUD &1A8  \ Call back at given time.
.Zap_DragBox        EQUD &1AC  \ Perform your own drag box.
.Zap_SendMessage    EQUD &1B0  \ Send a message via Zap.
.Zap_Reply          EQUD &1B4  \ Reply to a message via Zap.
.Zap_Extend         EQUD &1B8  \ Extend a heap block.
.Zap_ModeColourNum  EQUD &1BC  \ Change size of palette.
.Zap_CreateThrowback EQUD &1C0 \ Create a throwback file.
.Zap_Throwback      EQUD &1C4  \ Insert a throwback line.
.Zap_TestModeName   EQUD &1C8  \ Find if a mode is loaded.
.Zap_UpdateArea     EQUD &1CC  \ Force window redraw
.Zap_UpdateWindow   EQUD &1D0  \ Force window redraw
.Zap_UpdateWholeWindow EQUD &1D4 \ Force window redraw
.Zap_AllFiles       EQUD &1D8  \ Force window redraw
.Zap_ReadValidateCommand EQUD &1DC \ String -> command block
.Zap_ProcessKeyCommand EQUD &1E0 \ Execute a given command block
.Zap_ReturnWord     EQUD &1E4  \ Return delimited word at cursor
.Zap_DoReplaceArea  EQUD &1E8  \ Calls Zap_ReplaceArea with R8=0
.Zap_LogicalLine    EQUD &1EC  \ Calls base mode's e_clnlog
.Zap_PhysicalLine   EQUD &1F0  \ Calls base mode's e_clnphy
.Zap_OffsetLine     EQUD &1F4  \ Calls base mode's e_clnoff
.Zap_NextLine       EQUD &1F8  \ Calls base mode's e_nextline
.Zap_EvaluateExpression EQUD &1FC \ Calls base mode's e_nextline
.Zap_ClaimMessage   EQUD &200 \ Claim/forward the next message
.Zap_TestChanged    EQUD &204 \ Tests to see if file modified
.Zap_MarkChanged    EQUD &208 \ Marks the file changed/unchanged
.Zap_CalculateChecksum EQUD &20C \ Calculates the file's chksum
]:NEXT
FOR pass=%1100 TO %1110 STEP 2:P%=0:O%=code%:[OPTpass

\L zap redraw offsets

.r_flags            EQUD 0    \ Redraw flags
.r_minx             EQUD 0    \ min x in pixs inc
.r_miny             EQUD 0    \ min y in pixs inc (from top)
.r_maxx             EQUD 0    \ max x in pixs exc
.r_maxy             EQUD 0    \ max y in pixs exc (from top)
.r_screen           EQUD 0    \ address of the screen
.r_bpl              EQUD 0    \ bytes per raster line
.r_bpp              EQUD 0    \ log base 2 of bpp
.r_charw            EQUD 0    \ width of a character in pixs
.r_charh            EQUD 0    \ height of a character in pixs
.r_caddr            EQUD 0    \ cache address / font name
.r_cbpl             EQUD 0    \ bytes per cached line
.r_cbpc             EQUD 0    \ bytes per cached character
.r_linesp           EQUD 0    \ line spacing in pixels
.r_data             EQUD 0    \ address of data to print
.r_scrollx          EQUD 0    \ x scroll offset in pixs
.r_scrolly          EQUD 0    \ y scroll offset in pixs
.r_palette          EQUD 0    \ address of palette data
.r_for              EQUD 0    \ start forground colour
.r_bac              EQUD 0    \ start background colour
.r_workarea         EQUD 0    \ address of work area
.r_magx             EQUD 0    \ log 2 of num of x os per pixel
.r_magy             EQUD 0    \ log 2 of num of y os per pixel
.r_xsize            EQUD 0    \ screen width in pixels
.r_ysize            EQUD 0    \ screen height in pixels
.r_mode             EQUD 0    \ screen mode

]:NEXT
ENDPROC
