; Contains code called when things go bang
; $Id: Exceptions,fff,v 2.7 2002-11-15 00:18:57 christian Exp $

 GET h.ModuleBits
 GET h.ZapHeader
 GET h.StartUp
 GET h.Strings
 GET h.StartCode
 GET h.MiniBuff

 EXPORT register_abort_handlers
 EXPORT Stackdump

 EXPORT zephyr

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Exceptions							;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; register our exception handlers
; E
; X
	FNAME	register_abort_handlers
register_abort_handlers
	FNJSR	"R0-R3,R8"
	ADD	R8,R12,#old_environment

	; keep these in order
	MOV	R0,#environ_Error
	ADR	R1,ErrorHandler
	FNLDR	R3,exception_buffer
	BL	change_environment

	MOV	R0,#environ_Exit
	ADR	R1,ExitHandler
	BL	change_environment

	MOV	R0,#environ_UpCall
	ADR	R1,UpCallHandler
	BL	change_environment

	BL	set_running_var
	FNRTS


; deregister our exception handlers
; E
; X
	FNAME	deregister_abort_handlers
deregister_abort_handlers
	FNJSR	"R0-R4,R8"
	BL	unset_running_var

	; keep these in order
	ADD	R8,R12,#old_environment
	MOV	R0,#environ_Error
	BL	restore_environment
	MOV	R0,#environ_Exit
	BL	restore_environment
	MOV	R0,#environ_UpCall
	BL	restore_environment
	FNRTS


; UpCall hanlder
UpCallHandler
	TEQ	R0,#256			; New Application
	MOVEQ	R0,#0			; prevent it starting (use *WimpTask)
	MOV	PC,R14


; Error handler
	FNAME	ErrorHandler
ErrorHandler
	MOV	R12,R0			; get Zap workspace

	FNLDR	R13,env_start		; ensure we have a stack
	ADD	R13,R13,#stack_size

	FNLDR	R0,exception_buffer
	ADD	R0,R0,#4		; skip PC

	BL	kill_print_job
	BL	report_error
	BEQ	ExitHandler

	BL	checkanddump
	CLV
	BL	minibuffer_close
	B	main_loop


; Exit handler - tidy up system resources, remove handlers and exit
;
	FNAME	ExitHandler
ExitHandler
	FNLDR	R13,env_start		; ensure we have a stack
	ADD	R13,R13,#stack_size

	BL	kill_print_job
	BL	deregister_abort_handlers
	BL	clean_up		; release our system resources

	ADR	R3,zap
	SWI	OS_ExitAndDie


; report the exception in a Wimp error box
; E r0 -> error message
;   exception_r14 contains PC at time of exception
; X Z set if user pressed Quit
	FNAME	report_error
report_error
	FNJSR
	[ LOGGING = SYSLOG
	ADD R0,R0,#4
	SYSLOGF "Exception '%0s'",LOG_EXCEPTION
	SUB R0,R0,#4
	]
	MOV	R1,#&500
	ADR	R2,zap
	ADR	R3,zap_sprite
	MOV	R4,#1			; use wimp area
	ADR	R5,buttons$l
	SWI	XWimp_ReportError
	TEQ	R1,#4
	FNRTS

zap_sprite
	=	"!"
zap	=	|zap$|,0

buttons$l
	=	"Continue,Quit",0	; FIXME: i18n
	ALIGN


	LOCAL

	FNAME	kill_print_job
kill_print_job
	FNJSR	"R0-R1"
	FNLDR	R0,wimp_print_job
	TEQ	R0,#0
	SWINE	XPDriver_AbortJob
	FNLDR	R1,wimp_print_job
	TEQ	R1,#0
	MOVNE	R0,#0
	FNSTR	R0,wimp_print_job,NE
	SWINE	XOS_Find		; close file
	; ignore any errors - for now :-)
	FNLDR	R0,wimp_print_prevjob	; previous job
	TEQ	R0,#0
	MOVNE	R1,#0
	FNSTR	R1,wimp_print_prevjob,NE
	SWINE	XPDriver_SelectJob
	FNRTS


; do a coredump if the debug file is present
; E
; X
	FNAME	checkanddump
checkanddump
	FNJSR
	ADR	R1,debugfile$l
	MOV	R0,#5
	SWI	XOS_File		; check for <Zap$Dir>.Debug
	FNRTS	VS
	CMP	R0,#0
	FNRTS	EQ
	BL	core_dump
	BL	Stackdump
	FNRTS

debugfile$l
	=	"<",|zap$|,"$Dir>.Debug",0
	ALIGN


	LOCAL

; setup an environment handler
; E r0-r1,r3 passed to OS_ChangeEnvironment
; X old
	FNAME	change_environment
change_environment
	MOV	R2,R12
	SWI	XOS_ChangeEnvironment
	STMIA	R8!,{R1,R2,R3}
	MOV	PC,R14

; restore an environment handler
; E R8 -> block containing old handler
; X
	FNAME	restore_environment
restore_environment
	FNJSR
	LDMIA	R8!,{R1,R2,R3}
	SWI	XOS_ChangeEnvironment
	FNRTS


; set Zap$Running to "Yes"
; E
; X
	FNAME	set_running_var
set_running_var
	FNJSR	"R1-R4"
	ADR	R0,var$l
	ADR	R1,yes$l
	MOV	R2,#yes_end$l - yes$l
	MOV	R3,#0
	MOV	R4,#0			; string
	SWI	XOS_SetVarVal
	FNRTS

yes$l	=	"Yes",0
yes_end$l

; unset Zap$Running
; E
; X
	FNAME	unset_running_var
unset_running_var
	FNJSR
	ADR	R0,var$l
	MOV	R1,#0
	MOV	R2,#-1			; delete
	MOV	R3,#0
	MOV	R4,#0
	SWI	XOS_SetVarVal
	FNRTS

var$l	=	|zap$|,"$Running",0
	ALIGN


	LOCAL

; do a stack dump, attempting to resolve function names
; E
; X
	FNAME	Stackdump
	DCD	7
Stackdump
	MOV	R0,#&8C			; open file with errors
	ADR	R1,fname$l
	SWI	XOS_Find
	MOVVS	PC,R14
	MOV	R11,R0			; keep file handle

	FNSTR	R14,opt_temporary	; don't use the stack

	ADRL	R8,Module_header	; find our limits
	ADRL	R9,Module_end		;
	MOV	R7,#&8000		; start at the base of the stack

loop$l	MOV	R0,R7			; print the address
	BL	hex4$l			;

	ADR	R0,colon$l
	BL	write$l

	LDR	R6,[R7],#4		; print the stack contents
	MOV	R0,R6			;
	BL	hex8$l			;

	TST	R6,#3			; ignore if not word aligned
	BNE	next$l			;

	TEQ	PC,PC			; clear PSR bits if we're in a 26 bit mode
	TEQEQ	PC,PC			;
	BICNE	R6,R6,#&FC000000	;

	CMP	R6,R8			; see if it's inside our module
	CMPHS	R9,R6			;
	BLO	next$l			;

	MOV	R10,R6			; keep address
	SUB	R5,R6,#2048		; scan back a maximium of 2k
	CMP	R5,R8
	MOVLO	R5,R8			; and don't go past the module start

flop$l	CMP	R6,R5			; didn't find a function name
	BLO	next$l			;
	LDR	R3,[R6],#-4
	BIC	R1,R3,#&FF
	TEQ	R1,#&FF000000		; SWINV?
	BNE	flop$l

	ADR	R0,arr$l
	BL	write$l

	AND	R0,R3,#&FF		; name length
	SUB	R0,R6,R0
	ADD	R0,R0,#4		; corect for post-decrement
	BL	write$l

	SUB	R10,R10,R6		; get offset into function
	SUBS	R10,R10,#8		;
	BEQ	next$l
	ADR	R0,plus$l
	BL	write$l
	MOV	R0,R10			; write it out
	BL	hex4$l

next$l	BL	newl$l			; do next stack entry
	CMP	R7,#&8000 + stack_size
	BLO	loop$l

end$l	FNLDR	R14,opt_temporary	; recover return address
	MOV	R0,#0
	FNSTR	R0,opt_temporary	; clear it as instructed :)
	MOV	R1,R11
	SWI	XOS_Find		; close file
	MOV	R0,#18			; set it's type to Text
	ADR	R1,fname$l
	MOV	R2,#&FF
	ORR	R2,R2,#&F00
	SWI	XOS_File
	MOV	PC,R14

hex8$l	FNLDR	R1,exception_buffer	; write 8 hex characters
	MOV	R2,#256
	SWI	XOS_ConvertHex8
	B	write$l

hex4$l	FNLDR	R1,exception_buffer	; write 4 hex characters
	MOV	R2,#256
	SWI	XOS_ConvertHex4		; fall through

; write string in R0
write$l	MOV	R2,R0
	MOV	R1,R11
wlop$l	LDRB	R0,[R2],#1
	TEQ	R0,#0
	MOVEQ	PC,R14
	SWI	XOS_BPut
	BVS	end$l
	B	wlop$l

newl$l	MOV	R0,#10
	MOV	R1,R11
	SWI	XOS_BPut
	BVS	end$l
	MOV	PC,R14

colon$l	=	" : ",0
plus$l	=	" + ",0
fname$l	=	"<",|zap$|,"$Dir>.D-Stack",0
arr$l	=	" -> ",0
	ALIGN


; debugging code

zephyr

 [ LOGGING=ZEPHYR

zephyrmsg_blk
 DCD &20
 DCD &0
 DCD &0
 DCD &0
 DCD &804C0
 DCD &32323232
 DCD &32323232
 DCD &0

 FNJSR "R0-R6"
 ADR R1,zephyrmsg_blk + &14
 MOV R2,#8
 SWI XOS_ConvertHex8
 MOV R0,#&80000
 ORR R0,R0,#&4C0
 ADR R1,zephyrmsg_blk
 MOV R2,#0
 MOV R3,#32
 MOV R4,#0
 MOV R5,#0
 MOV R6,#0
 BL message_send
 FNRTS

 |

 MOV PC,R14

 ]

 END
