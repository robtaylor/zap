\#
\# $Id: Chapter13,fff,v 1.1.1.1 1998-12-03 15:49:05 dj Exp $
\#
\# Manual.Section13/src
\# Extensions to Zap (plugins, ZapConfig, internal extensions)
\# Original author: James Aylett
\#

\C{Extensions} Extensions to Zap

Here we look at various useful extensions to Zap. Some of them may or may not have come with the core distribution; if not, they are available from wherever you got Zap itself (or, if not, from the main Zap site - see \k{future}).

\H{spelling} \i\e{ZapSpell}: spell checking for Zap

\i\e{ZapSpell} provides features to allow you to spell check from within Zap. A number of features are included; spell checking the selection or an entire file (using throwback to mark unrecognised words), and simple dictionary lookup.

The front end is started by the \c{SPELL} command (\c{cA} or from the \c{Misc->Spell} menu). It will select the word at the cursor, and try to that word in the dictionary. The main window has a large number of buttons; \c{Previous} and \c{Next} move backwards and forwards through the file looking for unrecognised words; \c{Check selection} and \c{Check buffer} will open a throwback window containing all unrecognised words; \c{Replace} replaces the current selection in the file with the current word in the writable icon at the top of the spelling window.

\i\e{ZapSpell} uses \i{Computer Concepts}' \i\e{Impression} Spell module (not supplied); it also provides an interface to Computer Concepts' \i\e{WordWorks} thesaurus/dictionary application.

More information is available in the documentation which comes with \i\e{ZapSpell}, which is a 'normal' Zap extension - ie it lives in \c{!Zap.Modules}.

\H{zapconfig} \i\e{ZapConfig}: graphical configuration of Zap

If you have looked at \k{Configuration}, you may already have been frustrated by the way that you have to go about configuring Zap. Fear not: many of these features can be configured in a graphical environment, using \i\e{ZapConfig}, which can be launched from the \c{Options} submenu from Zap's iconbar menu.

\i\e{ZapConfig} has its own detailed documentation, but basically loading it puts an icon on the iconbar which opens a main window when clicked on. From here there are lots of individual sections; any one can be open at a time, and each configures a separate section of Zap. You can configure more or less any part of Zap except colours and mode\-specific options using \i\e{ZapConfig}; in particular, similar options (such as everything to do with display) are grouped under one section; this differs from Zap itself, because some of the display options are in the \c{Settings} file (see \k{settings}).

The main drawback of \i\e{ZapConfig} is that is works externally to Zap; in order to use all the changes you've made, you have to quit and reload Zap.

\i\e{ZapConfig} lives in \c{!Zap.Code.Config}.

\H{internal} Behind-the-scenes extensions to Zap

There are a few extensions which Zap can use to make your life easier. These are autoloaded when required (although you can turn that feature off - see \k{autoload}).

These extensions all live in \c{!Zap.Code.Extensions} - in general this needn't concern you, however, because they tend to be supplied with the core distribution. Even if you obtain them separately, they will usually be supplied within a dummy \c{!Zap} structure, so you can simply copy them over the top of your current Zap installation.

In general these aren't specific to Zap - but they are so useful with Zap that they can be installed with it, and automatically loaded by it.

\S{lineeditor} Olly Betts' \i\e{Line editor}

The most important extension is Olly Bett's excellent line editor. This supplies a variety of features to Zap: it is used to provide a history for the minibuffer and the search windows, and it is used in Taskwindow mode to provide a command line editing facility similar to \i{tcsh} (and other Unix shells) or \i{4DOS}.

We strongly suggest having this autoloaded (unless you load it in your boot sequence :\-), because it makes life so much easier. See Olly's documentation for details on how to use and configure the line editor.

\S{extbasasm} \i\e{ExtBASICAsm}: extended assembly and disassembly

\i\e{ExtBASICAsm} (and its companion, \i\e{Debugger Plus}) are a pair of extensions written by Darren Salt, and which give support for additional BASIC assembly, and disassembly options. In particular, many more of the more recent ARM opcodes are supported (including ones that in general won't be used in RISC OS).

In the autoload menu (see \k{autoload}) they are referred to as \c{Disassembler} and \c{Assembler}.

Documentation is supplied with them; in addition, you should look at \k{Code mode} for information on how to configure Zap's use of Debugger Plus when disassembling ARM code.

\S{hideptr} \i\e{HidePtr}: hiding the mouse pointer while you work

This is a simple extension written by Martin Ebourne which hides the mouse pointer while you are typing, and then unhides it again when you use the mouse. This prevents your being distracted while working with a file in Zap, but gives you instant access to the mouse when you need it. It is also apparently a common feature amongst DTP and word processing packages.

\S{keyextend} \i\e{KeyboardExtend}: Better keyboard response

This is an attempt to limit the problems Zap has to do with keyboard modifiers. For instance, if you save a file, and while saving press scT (insert current time), sometimes if the save takes a long time Zap will not notice that shift was held down when \c{cT} was pressed, and will perform the wrong action (in this case selecting the entire file).

KeyboardExtend, in general, makes this much more bearable - unfortunately there are some conflicts with other programs. See the supplied documentation (or the FAQ and bugs pages on \W{http://www.zap.uk.eu.org/}{the web site}) for details on these conflicts.

\S{flashcar} \i\e{FlashCar}: flashing the cursor in dialogue boxes

You may have already noticed that Zap has a feature to flash its text cursor; this extension gives you the same facilities in all your RISC OS dialogue boxes.

\S{iclear} \i\e{IClear}: clear writeable icons using the mouse

Martin Fox's IClear allows you to clear the contents of a writeable icon using the mouse. Simply double click on the icon using \c{Select} or \c{Adjust}, and the icon is inverted. As soon as you press a key, the text in the icon will be replaced with the character that you typed. With the icon inverted, a further click will de\-invert the icon and put things back to normal (in case you decide you want the current contents after all).

RULEHERE

The next section in the manual is \k{Devel}, which you should read if you want to help with Zap development, whether in a technical or non\-technical role.

If not, you can move onto the last section of the manual, \k{More info}, which covers other user documentation included with Zap; the future of Zap, and how to get in touch with the Zap development team. It also discusses the Zap license, and covers things such as bug reports.
