/*
 * $Id: cshow,fff,v 1.6 1999-07-02 13:19:20 james Exp $
 * cshow.c
 * (c) Zap Developers 1999
 *
 * display/edit contents of a Zap config file
 * won't work with blocks on non-integer numbers of words (but this should never happen anyway)
 * the bit which actually deals with the config file is fairly horrible, frankly. Don't go
 * investigating it assuming it'll help you figure out how to access Zap's config files ...
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "coopt.h"

#define MAX_MODENAME_LENGTH 10
#define VERSION_STRING "v0.2 (c) Zap developers 1999"

/* eek, global variable ... */
int writing=1;

void *xmalloc (int);
void *xrealloc (void *, int);
void do_error(char *);
int do_fill_byte(void *, FILE *, FILE *);
int do_fill_word(void *, FILE *, FILE *);
char *read_mode_name (int, FILE *);
void help(void);

#define fill_byte(a, b) do_fill_byte(a, b, out);
#define fill_word(a, b) do_fill_word(a, b, out);

const char *program_name;

int
main(int argc, char const * const * argv)
{
  FILE *in=NULL, *out=NULL;
  FILE *display=stdout;
  int type;

#define base_sys_colours 9
#define max_top_sys_colours 0

  char *base_sys_colour[base_sys_colours] = {
    "\"Background 1 (unused)\"",
    "\"Background 2 (used)\"  ",
    "\"Foreground\"           ",
    "\"Selection background\" ",
    "\"Selection foreground\" ",
    "\"Cursor background\"    ",
    "\"Cursor foreground\"    ",
    "\"Line numbers\"         ",
    "\"Control characters\"   "
  };
  char *top_sys_colour[max_top_sys_colours] = { 
  };

  static const struct coopt_option option[] = {
    { 'i', COOPT_REQUIRED_PARAM, "input" },
    { 'v', COOPT_NO_PARAM, "verbose" },
    { 'l', COOPT_NO_PARAM, "listmodes" },
    { 'd', COOPT_NO_PARAM, "dumpfile" },
    { 'r', COOPT_REQUIRED_PARAM, "deletemode" },
    { 'o', COOPT_REQUIRED_PARAM, "output" },
    { 't', COOPT_NO_PARAM, "terse" },
    { 'p', COOPT_NO_PARAM, "pruneunknown" },
    { 'h', COOPT_NO_PARAM, "help" },
    { 'V', COOPT_NO_PARAM, "version" },
    { 'O', COOPT_REQUIRED_PARAM, "text-output" }
  };

  struct coopt_state state;
  struct coopt_return ret;
  int verboseflag=0, terseflag=0, pruneflag=0, deletemodes=0;
  enum {
    usage_default,
    usage_listmodes,
    usage_dumpfile
  } usagemode = usage_default;
  int shownmode = 0;

#define use_listmodes (usagemode == usage_listmodes)
#define use_dumpfile (usagemode == usage_dumpfile)
#define use_deletemode (deletemodes)

  char const * infile=NULL;
  char const * outfile=NULL;
  char const * displayfile=NULL;
  char const ** deletemodelist = NULL;

  program_name = argv[0];
  coopt_init(&state, option, sizeof(option) / sizeof(struct coopt_option),
	     argc-1, argv+1);
  
  do
  {
    ret = coopt(&state);
    if (!coopt_is_error(ret.result))
    {
      if (ret.opt!=NULL)
      {
        switch (ret.opt->short_option)
        {
          case 'i':
            if (infile!=NULL)
              do_error("you can't specify more than one input file");
            infile = ret.param;
            break;
          case 'o':
            if (outfile!=NULL)
              do_error("you can't specify more than one output file");
            outfile = ret.param;
            break;
	  case 'O':
	    if (displayfile!=NULL)
	      do_error("you can't specify more than one display file");
	    displayfile = ret.param;
	    break;
          case 'l':
            usagemode = usage_listmodes;
            break;
          case 'd':
            usagemode = usage_dumpfile;
            break;
          case 'r':
            if (!ret.param)
              do_error("you must specify the mode to delete");
            deletemodes++;
            deletemodelist = xrealloc (deletemodelist,
                                       deletemodes * sizeof (const char *));
            deletemodelist[deletemodes - 1] = ret.param;
            break;
          case 'v':
            verboseflag=1;
            break;
          case 't':
            terseflag=1;
            break;
          case 'p':
            pruneflag=1;
            break;
          case 'V':
            printf ("%s %s\n", program_name, VERSION_STRING);
            exit(0);
          case 'h':
            help();
            break;
        }
      }
      else if (coopt_is_okay(ret.result)) /* ie: it's a parameter */
      {
        if (infile==NULL)
          infile=ret.param;
        else
          do_error("you can't specify more than one input file");
      }
    }
  } while (coopt_is_okay(ret.result));

  if (coopt_is_error(ret.result) || ret.result==COOPT_RESULT_MISSINGPARAM)
    do_error("error in options processing");

  /* processing */
  if (infile==NULL || strcmp(infile, "-")==0)
    in=stdin;
  else
    in=fopen(infile, "rb");

  if (outfile!=NULL)
  {
    if (strcmp(outfile, "-")==0)
    {
      out=stdout;
      if (usagemode != usage_default && displayfile==NULL)
      {
        fprintf (stderr, "%s: warning: output file is stdout, cannot %s to stdout; try with -O\n",
                 program_name, use_dumpfile ? "dump" : "list");
	exit(1);
      }
    }
    else
      out=fopen(outfile, "wb");
  }
  
  if (displayfile!=NULL)
    display=fopen(displayfile, "wb");

  if (in==NULL)
  {
    if (out!=stdout && out!=NULL)
      fclose(out);
    do_error("couldn't open input file");
  }

  if (out==NULL)
  {
    if (use_deletemode)
    {
      if (in!=stdin)
        fclose(in);
      if (display!=stdout)
	fclose(display);
      do_error("couldn't open output file; REQUIRED for --deletemode");
    }
    else
      writing=-1; /* so the ++ and -- don't bring it up to 1, at which point we'd write */
  }
  
  /* they've specified a display file, but we couldn't open it. This is bad. */
  if (display==NULL)
  {
    if (in!=stdin)
      fclose(in);
    if (out!=stdout && out!=NULL)
      fclose(out);
    do_error("couldn't open display file");
  }

  fill_word(&type, in);
  if (strncmp((char *)&type, "Conf", 4)!=0)
    do_error("wasn't a conf file");

  while (!feof(in) && !ferror(in))
  {
    int done_data=0;
    int block_len;
    int which;

    if (fread(&type, 4, 1, in)!=1)
      do_error("terminated without EOF block marker");
    if (fread(&block_len, 4, 1, in)!=1)
      block_len=0;
    if (verboseflag)
      fprintf(stderr, "found a block of type #%i length %i\n", type, block_len);

    switch (type)
    {
      case 0: /* end */
        if (writing==1)
          fwrite(&type, 4, 1, out);
        if (use_dumpfile)
          fprintf (display, "\nEnd of options\n");
        break;

      case 1: /* global */
        if (writing==1)
        {
          fwrite(&type, 4, 1, out);
          fwrite(&block_len, 4, 1, out);
        }
        if (use_dumpfile)
        {
          if (shownmode)
            fprintf (display, "\n");
          shownmode = 1;
          fprintf (display, "Global options block\n");
        }
        which=0;
        while (block_len>8)
        {
          int do_write=1;
          writing--;
          fill_word(&type, in);
          writing++;
          switch (which)
          {
            case 0:case 1:case 2:case 3:
              if (type!=0 && terseflag==0)
                fprintf (display, "    Warning: global options reserved word at 0x%x was non-zero (was 0x%8.8x)\n",
                       4*which, (unsigned int)type);
              break;
            case 4:
              if (use_dumpfile)
                fprintf (display, "    opt_info         = 0x%8.8x\n", (unsigned int)type);
              break;
            case 5: /* char set? 0x14 */
              if (type!=0 && use_dumpfile)
                fprintf (display, "    Char set         = %i\n  [pre-1.30]", type);
              break;
            case 6:
              if (use_dumpfile)
                fprintf (display, "    Column tab width = %i\n", type);
              break;
            case 7:
              if (use_dumpfile)
                fprintf (display, "    opt_flags        = 0x%8.8x\n", (unsigned int)type);
              break;
            case 8:
              if (use_dumpfile)
                fprintf (display, "    opt_format       = 0x%8.8x\n", (unsigned int)type);
              break;
            case 9:
              if (use_dumpfile)
                fprintf (display, "    Start address    = %i (0x%x)\n", type, type);
              break;
            case 10:
              if (use_dumpfile)
                fprintf (display, "    Start line       = %i\n", type);
              break;
            case 11:
              if (use_dumpfile)
                fprintf (display, "    Line spacing     = %i\n", type);
              break;
            case 12:
              if (use_dumpfile)
                fprintf (display, "    Margin width     = %i\n", type);
              break;
            case 13:
              if (use_dumpfile)
                fprintf (display, "    Cursor types     = %i, %i, %i, %i\n",
                        type & 0xff, (type >> 8) & 0xff, (type >> 16) & 0xff,
                        (type >> 24) & 0xff);
              break;
            case 14:
              if (use_dumpfile)
                fprintf (display, "    EOL mask         = %i\n", type & 0xff);
              break;
            case 15:
              if (use_dumpfile)
                fprintf (display, "    Tab mask         = %i\n", type & 0xff);
              break;
            case 16:
              if (use_dumpfile)
                fprintf (display, "    Wordwrap width   = %i\n", type);
              break;
            case 17:
              if (type!=0 && use_dumpfile)
                fprintf (display, "    Minibuf colours  = 0x%8.8x  [pre-1.20]\n", (unsigned int)type);
              break;
            case 18:
              if (use_dumpfile)
                fprintf (display, "    Switches         = 0x%8.8x\n", (unsigned int)type);
              break;
            case 19:
              if (use_dumpfile)
                fprintf (display, "    Minibuffer bgnd  = 0x%8.8x\n", (unsigned int)type);
              break;
            case 20:
              if (use_dumpfile)
                fprintf (display, "    Minibuffer fgnd  = 0x%8.8x\n", (unsigned int)type);
              break;
            default:
              if (use_dumpfile)
                fprintf (display, "    (unknown)        = 0x%8.8x\n", (unsigned int)type);
              if (pruneflag==1)
              {
                fprintf (stderr, "    [stripping unknown global options word]\n");
                do_write=0;
              }
              break;
          }
          if (do_write && writing==1)
            fwrite(&type, 4, 1, out);
          which++;
          block_len-=4;
        }

        done_data=1;
        break;

      case 2: /* old-style mode */
      case 3: /* new-style mode */
        writing--; /* may well not write this block ... ? */
        if (use_dumpfile)
        {
          if (shownmode)
            fprintf (display, "\n");
          shownmode = 1;
          fprintf (display, "Mode block, %s style%s\n",
                  (type == 2) ? "old" : "new",
                  (type == 2) ? " [pre-1.41]" : "");
        }
        { /* just a block to give us space for some more variables */
          char *modename = read_mode_name (0, in);
          int modelen = strlen (modename) + 1;
          int deleting = 0;

          if (use_dumpfile)
            fprintf (display, "    Mode name         = %s\n", modename);
          else if (use_listmodes)
            fprintf (display, "%s\n", modename);

          if (use_deletemode && deletemodelist)
          {
            int i = 0;
            while (i < deletemodes && strcmp (modename, deletemodelist[i]))
              i++;
            if (i < deletemodes)
            {
              fprintf (stderr,
                       "    [found and deleting %s-style %s mode block]\n",
                       (type == 2) ? "old" : "new", modename);
              deleting = 1;
            }
          }
          if (writing == 0 && !deleting)
          { /* want to write this block after all */
            fwrite (&type, 4, 1, out);
            fwrite (&block_len, 4, 1, out);
            fwrite (modename, 1, modelen, out);
            writing++;
          }

          if (type==3)
          {
            /* could be cloned */
            char *base = read_mode_name (1, in);
            modelen += strlen (base) + 1;

            if (strcmp (modename, base))
            {
              if (use_dumpfile)
                fprintf (display, "    Clone base name   = %s\n", base);
              else if (use_listmodes)
                fprintf (display, "    cloned from %s\n", base);
            }

            if (writing == 1)
              fwrite (base, 1, strlen (base) + 1, out);

            free (base);
          }

          while (modelen & 3)
            modelen += fill_byte(&block_len, in);

	  free (modename);
        }

        fill_word(&block_len, in);
        if ((verboseflag || terseflag) && use_dumpfile)
          fprintf (display, "    Zap-handled data  = %i bytes\n", block_len);
        if (block_len==12)
        {
          if (use_dumpfile && terseflag==0)
            fprintf (display, "    Data is pre-v1.20 style\n");
          fill_word(&type, in);
          if (use_dumpfile && terseflag==0)
            fprintf (display, "    Mode data #0      = 0x%8.8x\n", (unsigned int)type);
          fill_word(&type, in);
          if (use_dumpfile && terseflag==0)
          {
            fprintf (display, "    Palette           = 0x%8.8x, ", (unsigned int)type);
            fill_word(&type, in);
            fprintf (display, "0x%8.8x\n", (unsigned int)type);
          }
          else
            fill_word(&type, in);
        }
        else
        {
	  int non_sys_colours=-1; /* >=0 if loaded from file */
	  unsigned int top_sys_colours=0; /* this will be in the file */
	  unsigned int sys_colours;
	  unsigned int within_group=0;
	  if (type==2)
	  {
	    non_sys_colours=-2; /* definitely will not contain num colours */
	  }
	  if (top_sys_colours > max_top_sys_colours)
	  {
	    fprintf(stderr, "    [sys colours is wrong!]\n");
	    top_sys_colours = max_top_sys_colours;
	  }
	  sys_colours=base_sys_colours+top_sys_colours;
          which=0;
          do
          {
            fill_word(&type, in);
            if (type!=-1 && use_dumpfile && terseflag==0)
	    {
	      if (which==2 && non_sys_colours==-1)
		non_sys_colours = ((unsigned int)type) >> 24;
              fprintf (display, "    Mode data #%-3i    = 0x%8.8x\n", which, (unsigned int)type);
	    }
            which++;
            block_len-=4;
          } while (type!=-1);
          which=0;
          while (block_len>0)
          {
            fill_word(&type, in);
            if (use_dumpfile && terseflag==0)
	    {
	      if (which % (sys_colours + non_sys_colours)==0 && non_sys_colours>=0)
	      {
		within_group=0;
		fprintf(display, "    -- Colour group #%i --\n", which / (sys_colours+non_sys_colours));
	      }
	      if (within_group<base_sys_colours)
		fprintf(display, "    Colour %s = 0x%8.8x\n", base_sys_colour[within_group], (unsigned int)type);
	      /* Logic for following step isn't quite right - copes poorly
	       * with no user colours
	       */
	      else if (within_group>(base_sys_colours+non_sys_colours) && non_sys_colours>=0)
		fprintf(display, "    Colour %s = 0x%8.8x\n", top_sys_colour[within_group],  (unsigned int)type);
	      else
		fprintf(display, "    Colour #%-3i                    = 0x%8.8x\n", which, (unsigned int)type);
	    }
            which++;
	    within_group++;
            block_len-=4;
          }
	  if (which % (sys_colours + non_sys_colours)!=0 && non_sys_colours>=-1)
	  {
	    fprintf(stderr, "    [num colours is wrong or not set! (%i; should be %i?)]\n", non_sys_colours, which-sys_colours);
	  }
        }
	fill_word(&block_len, in);
	if (use_dumpfile)
        {
          fprintf (display, "    Mode-handled data = %i bytes\n%s", block_len,
                  verboseflag ? "        " : "");
        }
        while (block_len--)
        {
          fill_byte(&type, in);
          if (verboseflag && use_dumpfile)
            fprintf (display, "[%2.2x]", type & 0xff);
        }
        if (verboseflag && use_dumpfile)
          fprintf (display, "\n");

        done_data=1;
        break;

      case -1: /* verbose block */
        if (writing==1)
        {
          fwrite(&type, 4, 1, out);
          fwrite(&block_len, 4, 1, out);
        }
        if (use_dumpfile)
        {
          if (shownmode)
            fprintf (display, "\n");
          shownmode = 1;
          fprintf (display, "Version block\n");
        }
        if (block_len!=20 && use_dumpfile)
          fprintf (display, "    Warning: block length is wrong\n");
        fill_word(&type, in);
        if (use_dumpfile)
          fprintf (display, "    Saved by Zap v%i.", type);
        fill_word(&type, in);
        if (use_dumpfile)
          fprintf (display, "%i; ", type);
        fill_word(&type, in);
        if (use_dumpfile)
          fprintf (display, "Config format rev %i\n", type);
        done_data=1;
        break;

      default: /* error! */
        if (use_dumpfile)
        {
          if (shownmode)
            fprintf (display, "");
          shownmode = 1;
        }
        fprintf (display, "Warning: illegal options block, type %i length %i\n", type, block_len);
        if (writing==1)
        {
          if (pruneflag==0)
          {
            fwrite(&type, 4, 1, out);
            fwrite(&block_len, 4, 1, out);
          }
          else
          {
            writing--;
            fprintf (stderr, "    [stripping unknown options block]\n");
          }
        }
        break;
    }

    if (done_data==0 && block_len>8)
    {
      if (verboseflag && use_dumpfile)
        fprintf (display, "        ");
      while (block_len-->8)
      {
        fill_byte(&type, in);
        if (verboseflag && use_dumpfile)
          fprintf (display, "[%2.2x]", ((char *)&type)[0]);
      }
      if (verboseflag && use_dumpfile)
        fprintf (display, "\n");
    }

    if (writing==0)
      writing++; /* back to normal for next block */
  }

  if (use_listmodes && terseflag==1)
    fprintf (display, "\n");

  if (in!=stdin)
    fclose(in);
  if (out!=NULL && out!=stdout)
    fclose(out);

  return 0;
}


int
do_fill(void *ptr, size_t s, FILE *in, FILE *out)
{
  int r;
  if (feof(in) || ferror(in))
    do_error("feof() or ferror()");
  r = fread(ptr, s, 1, in);
  if (r==1)
  {
    if (writing==1 && out)
      fwrite(ptr, s, 1, out);
    return 1;
  }
  else
  {
    do_error("error on read");
  }
  return 0;
}


int
do_fill_byte(void *ptr, FILE *fp, FILE *out)
{
  return do_fill(ptr, 1, fp, out);
}


int
do_fill_word(void *ptr, FILE *fp, FILE *out)
{
  return do_fill(ptr, 4, fp, out);
}


char *
read_mode_name (int type, FILE *in)
{
  int len = 0;
  char *name = xmalloc (256);

  if (!name)
    do_error ("malloc failed");
  writing--;
  do
  {
    do_fill_byte (name + len, in, 0);
    if (len >= 255)
      do_error ("internal overflow on mode name");
  } while (name[len++]);
  writing++;

  if (len - 1 > MAX_MODENAME_LENGTH)
    fprintf (stderr, "    Error: %s name is too long (%i characters)\n",
             type ? "clone base" : "mode", len - 1);
  else if (len == 1)
    fprintf (stderr, "    Error: null %s name\n",
             type ? "clone base" : "mode");

  return name;
}


void *
xmalloc (int size)
{
  void *ptr = malloc (size);
  if (!ptr)
  {
    fprintf(stderr, "%s: %salloc failed\n", "m", program_name);
    exit (2);
  }
  return ptr;
}


void *
xrealloc (void *ptr, int size)
{
  ptr = realloc (ptr, size);
  if (!ptr)
  {
    fprintf(stderr, "%s: %salloc failed\n", "re", program_name);
    exit (2);
  }
  return ptr;
}


void
do_error(char *mess)
{
  fprintf(stderr, "%s: %s\n", program_name, mess);
  exit(1);
}


void
help(void)
{
  printf (
"usage: %s [options] [--output OUTFILE] [--input] INFILE\n"
"\n"
"  -i, --input INFILE      config file read from INFILE; stdin used if not given\n"
"                          if -i not given, a single argument will be used\n"
"  -o, --output OUTFILE    final config file written to OUTFILE\n"
"\n"
"  -l, --listmodes         list modes only (no dump, no editing)\n"
"  -d, --dumpfile          textual file dump to stderr\n"
"  -r, --deletemode MODE   delete given mode from file\n"
"  -p, --pruneunknown      prune unknown blocks in file\n"
"\n"
"  -v, --verbose           increase verbosity of output\n"
"  -t, --terse             decrease verbosity of output\n"
"                          (both -v and -t gives somewhere between the two)\n"
"  -O, --text-display FILE -l and -d output to FILE not stdout (so -o - works)\n"
"\n"
"  -h, --help              display this help message and quit\n"
"  -V, --version           display version string and quit\n"
    , program_name);
  exit(0);
}
