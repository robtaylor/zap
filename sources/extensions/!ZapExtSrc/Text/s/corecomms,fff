; Zap Text Command Extension
; Copyright (C) 1998 Zap Developers
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
; Commands and routines taken/adapted from the core (Dominic Symes)
;
; SWAPCASE(CURSOR)	- Swap selection or cursor case
; UNSPACE		- Remove wsp around the cursor
;
; util_cursop		- perform op on character at cursor
; util_charop		- perform op on chars in selection / char at cursor

; Includes
		GET	h.ZapText
		GET	h.module
		GET	h.coreutils

		IMPORT	ds_wksp			; rather than include the whole of h.dscomms

; What we give to other people
		EXPORT	core_swapcase
		EXPORT	core_swapcasecursor
		EXPORT	core_unspace

		EXPORT	util_cursop
		EXPORT	util_charop

; SWAPCASE - char op to swap case.
		&	0
core_swapcase	ADR	r6,swapcase
		B	util_charop

; SWAPCASECURSOR - curs op to swap case.
		&	0
core_swapcasecursor
		ADR	r6,swapcase
		B	util_cursop

; swapcase - swaps case of char in r0
swapcase
; old code is ASCII only:
;		CMP	r0,#'z'
;		MOVHI	pc,lr
;		CMP	r0,#'a'
;		SUBCS	r0,r0,#'a'-'A'
;		MOVCS	pc,lr
;		CMP	r0,#'Z'
;		MOVHI	pc,lr
;		CMP	r0,#'A'
;		ADDCS	r0,r0,#'a'-'A'
;		MOV	pc,lr

; new code can cope with ISO Latin 1 characters:
		CMP	r0,#'z'
		BHI	capital$l
		CMP	r0,#'a'
		BLO	capital$l
		SUB	r0,r0,#'a'-'A'
		MOV	pc,lr
capital$l
		CMP	r0,#'Z'
		BHI	capital_1$l
		CMP	r0,#'A'
		MOVLO	pc,lr
		ADD	r0,r0,#'a'-'A'
		MOV	pc,lr
capital_1$l
		PUSH	"r0,r11,lr"
		MOV	r0,#14
		MOV	r11,#e_interrogate
		FNcall	Zap_CallMode
		CMP	r0,#2
		PULL	"r0,r11,lr"
		MOVEQ	pc,lr

		CMP	r0,#'¿'
		BLO	capital_2$l
		CMP	r0,#'◊'
		CMPNE	r0,#'˜'
		CMPNE	r0,#'ﬂ'
		CMPNE	r0,#'ˇ'
		MOVEQ	pc,lr
		CMP	r0,#'‡'
		ADDLO	r0,r0,#'‡'-'¿'
		SUBHS	r0,r0,#'‡'-'¿'
		MOV	pc,lr

capital_2$l
		CMP	r0,#'Ö'
		CMPNE	r0,#'Å'
		CMPNE	r0,#'ö'
		ADDEQ	r0,r0,#1
		MOVEQ	pc,lr

		CMP	r0,#'Ü'
		CMPNE	r0,#'Ç'
		CMPNE	r0,#'õ'
		SUBEQ	r0,r0,#1
		MOV	pc,lr

; UNSPACE - remove excess spaces and tabs around the cursor.
		DCD	0
core_unspace					; remove excess tabs and spaces
		FNJSR
		LDR	R2,[R10,#c_off]		; start of white space
		MOV	R3,R2			; end of white space
		LDR	R4,[R9,#f_len]
		LDRB	R5,[R8,#w_tabc]		; tab char
a$l
		CMP	R3,R4
		BCS	b$l
		MOV	R0,R3
		BL	util_readc
		TEQ	R0,#&20
		TEQNE	R0,R5
		ADDEQ	R3,R3,#1
		BEQ	a$l
b$l
		SUBS	R0,R2,#1
		BLT	c$l
		BL	util_readc
		TEQ	R0,#&20
		TEQNE	R0,R5
		SUBEQ	R2,R2,#1
		BEQ	b$l
c$l						; R2-R3 = spaced region about cursor
		MOV	R4,#1			; length of replacement string
		SUBS	R0,R3,R2		; length of source
		FNRTS	LE			; nothing to replace
		CMP	R0,#1
		BGT	d$l
		MOV	R0,R2
		BL	util_readc
		TEQ	R0,#&20			; it is a single space?
		TEQNE	R0,R5			; or a single tab?
		MOVEQ	R4,#0			; delete if so
d$l						; replace
		FNcall	Zap_StartOp
		MOV	R1,R2			; start
		SUB	R2,R3,R2		; len
		ADR	R3,sp$l
		FNcall	Zap_ReplaceArea
		FNcall	Zap_StopOp		; may return an error
		FNRTS
sp$l		=	" "

		ALIGN

; util_cursop - perform char op on char at cursor
; \E r6 = charcter routine, r8-r10
; \X r0-7 corrupted
;
; Char op routine takes character input in r0 and returns it in r0.
; r8/r9 will also be valid for the file the input character came from.
; However r10 may not be (so you can't find *where* in the file you're
; acting on).
; This is stored back using STRB, so only the LSB is used. All other
; registers should be preserved. Flags may be altered.
		LOCAL
util_cursop
		FNJSR
		B	cursop$l

; util_charop - perform char op on selection (or char at cursor if none)
; \E r6 = character routine, r8-r10
; \X r0-7 corrupted

util_charop
		FNJSR	"windptr,fileptr"
		FNcall	Zap_GetSel		; r1=offset, r2=length, r8/r9=file
		BCS	nosel$l

		FNcall	Zap_ReadSel		; r3=block, r2=length
		FNRTS	VS			; something weird happened

		MOV	r4,r2			; count
		MOV	r5,r3			; where we're operating
selloop$l	LDRB	r0,[r5]

		MOV	lr,pc			; return
		MOV	pc,r6			; routine

		STRB	r0,[r5],#1		; put back and increment
		SUBS	r4,r4,#1
		BGT	selloop$l

		MOV	r0,#&13			; atomic replace
		FNcall	Zap_Command		; r1 preserved from Zap_GetSel
						; r2, r3 preserved from Zap_ReadSel
		MOV	r0,r3
		FNcall	Zap_Free		; free the heap block
		FNRTS

nosel$l
		UNSTACK				; retrieve windptr, fileptr
						; also corrects StackedRegs
cursop$l	LDR	r7,[cursorptr,#c_off]	; offset in file of cursor
		LDR	r0,[fileptr,#f_len]	; end of file
		CMP	r7,r0
		FNRTS	CS			; invalid cursor position

		MOV	r0,r7
		BL	util_readc
		MOV	r5,r0

		MOV	lr,pc			; return address
		MOV	pc,r6			; jump to routine

		TEQ	r0,r5
		BEQ	getout$l

;		LDR	r3,[zapws,#wimp_kbdbuf]	; find keyboard buffer
		ADRL	r3,ds_wksp		; 320 byte buffer ...
		STRB	r0,[r3]			; and put the replacement character there

		MOV	r0,#3
		MOV	r1,r7
		MOV	r2,#1
		FNcall	Zap_Command		; single character replace (data in r3)
		FNRTS	VS

getout$l	ADD	r7,r7,#1
		STR	r7,[cursorptr,#c_off]	; advance cursor
		FNcall	Zap_ReflectCaret
		FNRTS

; That's it
		END
