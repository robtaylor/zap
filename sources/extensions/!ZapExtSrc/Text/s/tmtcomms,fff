; Zap Text Command Extension
; Copyright (C) 1998 Zap Developers
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
; Text commands by Tim Tyler (from ZapTMT)
;
; LOWERCASE(CURSOR)	- Make selection or cursor lower case
; UPPERCASE(CURSOR)	- Make selection or cursor upper case
; ADDLF(SEL)		- Converts soft line ends to hard LFs
; [@]SELECTUNTIL	- Select block with given delimiters
; [@]SELECTWHILE	- Select block with given contents

; Includes
		GET	h.ZapText
		GET	h.coreutils
		GET	h.corecomms
		GET	h.dsutils
		GET	h.sjacomms

; What we give to other people
		EXPORT	tmt_lowercase
		EXPORT	tmt_lowercasecursor
		EXPORT	tmt_uppercase
		EXPORT	tmt_uppercasecursor
		EXPORT	tmt_addlf
		EXPORT	tmt_addlfsel
		EXPORT	tmt_selectuntil
		EXPORT	tmt_selectwhile

; SELECTUNTIL - select block with given delimiters (and control codes)
		LOCAL

		&	(3:SHL:3)+(1:SHL:6)+(1:SHL:23)+(3:SHL:24)
		; string param, call before minibuffer, command or function
tmt_selectuntil
		CMP	r2,#6
		ADREQ	r0,prompt$l
		BEQ	zap_setprompt

		CMP	r2,#23
		BEQ	function_until

		CMP	r10,#0
		CMPNE	r9,#0
		CMPNE	r8,#0
		MOVEQ	pc,lr

		FNJSR
		MOV	r1,r0
		MOV	r0,#2_010			; given and ctrls are delimiters
		LDR	r2,[cursorptr,#c_off]
		FNcall	Zap_ReturnWord			; \X r0, r1
		FNRTS	VS
		MOV	r2,r0
		ADD	r3,r0,r1
		FNcall	Zap_Select
		FNRTS

		&	(3:SHL:3)+(1:SHL:6)+(1:SHL:23)+(3:SHL:24)
		; string param, call before minibuffer, command or function
tmt_selectwhile
		CMP	r2,#6
		ADREQ	r0,prompt$l
		BEQ	zap_setprompt

		CMP	r2,#23
		BEQ	function_while

		CMP	r10,#0
		CMPNE	r9,#0
		CMPNE	r8,#0
		MOVEQ	pc,lr

		FNJSR
		MOV	r1,r0
		MOV	r0,#2_001			; given are non-delimiters
		LDR	r2,[cursorptr,#c_off]
		FNcall	Zap_ReturnWord			; \X r0, r1
		FNRTS	VS
		MOV	r2,r0
		ADD	r3,r0,r1
		FNcall	Zap_Select
		FNRTS

prompt$l	=	"Delimiters: "
zero$l		=	0
		ALIGN

function_until
		FNJSR
		CMP	r10,#0
		CMPNE	r9,#0
		CMPNE	r8,#0
		BEQ	noway$l

		MOV	r2,r0				; protect offset from util_splitbuffer

		BL	util_splitbuffer		; get split point out of the way
		FNRTS	VS

		MOV	r0,#2_010			; given and ctrls are delimiters
		MOV	r1,r2				; get list back
		LDR	r2,[cursorptr,#c_off]
		FNcall	Zap_ReturnWord			; \X r0, r1
		FNRTS	VS

		CMP	r1,#0
		BEQ	noway$l

		B	util_word_function		; finished off

function_while
		FNJSR
		CMP	r10,#0
		CMPNE	r9,#0
		CMPNE	r8,#0
		BEQ	noway$l

		MOV	r2,r0				; protect offset from util_splitbuffer

		BL	util_splitbuffer		; get split point out of the way
		FNRTS	VS

		MOV	r0,#2_001			; given are non-delimiters
		MOV	r1,r2				; get list back
		LDR	r2,[cursorptr,#c_off]
		FNcall	Zap_ReturnWord			; \X r0, r1
		FNRTS	VS

		CMP	r1,#0
		BEQ	noway$l

		B	util_word_function		; finish it off

noway$l		ADR	r0,zero$l
		MOV	r1,#3				; string
		FNRTS

; These have been rewritten by SJA at TMT's suggestion to use the same
; method as SWAPCASE (from the core). In doing so I've abstracted it to
; a character operation which acts on the selection/cursor as appropriate.

; LOWERCASE - char op to lower case.
		&	0
tmt_lowercase	ADR	r6,tolower
		B	util_charop

; UPPERCASE - char op to upper case.
		&	0
tmt_uppercase	ADR	r6,toupper
		B	util_charop

; LOWERCASECURSOR - curs op to lower case.
		&	0
tmt_lowercasecursor
		ADR	r6,tolower
		B	util_cursop

; UPPERCASECURSOR - curs op to upper case.
		&	0
tmt_uppercasecursor
		ADR	r6,toupper
		B	util_cursop

; tolower - takes r0 and ensures it's lower case
; Tim used to use inline macros, but because we're now using
; a central method of performing character operations we need to
; be a compact procedure.
		LOCAL

tolower
; old version, ASCII only:
;		CMP	r0,#'Z'
;		MOVHI	pc,lr
;		CMP	r0,#'A'
;		ADDCS	r0,r0,#'a'-'A'
;		MOV	pc,lr

; new version, ISO Latin 1:
		CMP	r0,#'Z'
		BHI	capital_1$l
		CMP	r0,#'A'
		MOVLO	pc,lr			; not alpha
		ADD	r0,r0,#'a'-'A'		; make lower
		MOV	pc,lr
capital_1$l
		PUSH	"r0,r11,lr"
		MOV	r0,#14
		MOV	r11,#e_interrogate
		FNcall	Zap_CallMode
		CMP	r0,#2
		PULL	"r0,r11,lr"
		MOVEQ	pc,lr

		CMP	r0,#'¿'
		BLO	capital_2$l
		CMP	r0,#'◊'
		MOVEQ	pc,lr			; not alpha
		CMP	r0,#'ﬁ'
		MOVHI	pc,lr			; not alpha, or already lower
		ADD	r0,r0,#'‡'-'¿'		; make lower (gap is the same)
		MOV	pc,lr

capital_2$l	CMP	r0,#'Ö'
		CMPNE	r0,#'ö'
		CMPNE	r0,#'Å'
		ADDEQ	r0,r0,#1
		MOV	pc,lr

; toupper - see above
		LOCAL

toupper
;		CMP	r0,#'z'
;		MOVHI	pc,lr
;		CMP	r0,#'a'
;		SUBCS	r0,r0,#'a'-'A'
;		MOV	pc,lr

		CMP	r0,#'a'
		MOVLO	pc,lr			; not alpha, or already upper
		CMP	r0,#'z'
		BHI	lower_1$l
		SUB	r0,r0,#'a'-'A'		; make upper
		MOV	pc,lr
lower_1$l
		PUSH	"r0,r11,lr"
		MOV	r0,#14
		MOV	r11,#e_interrogate
		FNcall	Zap_CallMode
		CMP	r0,#2
		PULL	"r0,r11,lr"
		MOVEQ	pc,lr

		CMP	r0,#'‡'
		BLO	lower_2$l
		CMP	r0,#'˜'
		CMPNE	r0,#'ˇ'
		MOVEQ	pc,lr			; not alpha
		SUB	r0,r0,#'‡'-'¿'		; make upper (gap is the same)
		MOV	pc,lr

lower_2$l	CMP	r0,#'Ü'
		CMPNE	r0,#'õ'
		CMPNE	r0,#'Ç'
		SUBEQ	r0,r0,#1
		MOV	pc,lr

; ADDLF(SEL) - convert soft line ends to hard LFs
		&	1
tmt_addlf
		FNJSR
		MOV	R1,#0
		LDR	R2,[R9,#f_len]
		B	addlfsbetweenoffsets

		LOCAL

		&	1
tmt_addlfsel
		FNJSR
		LDR	R0,[R9,#f_len]
		TEQ	R0,#0
		FNRTS	EQ
		MOV	R4,R9
		FNcall	Zap_GetSel
		FNRTS	CS
		CMP	R4,R9
		FNRTS	NE
addlfsbetweenoffsets
		CMP	R9,#0
		FNRTS	EQ
		CMP	R2,#0
		FNRTS	EQ
		MOV	R6,R1
		ADD	R7,R1,R2
		MOV	R0,#2				; sw possible...?
		MOV	R11,#e_interrogate
		FNcall	Zap_CallMode
		CMP	R0,#2
		FNRTS	NE
		MOV	R0,R7
		MOV	R1,#&100
		FNcall	Zap_SplitBuffer         	; get the split out of the way
		MOV	R10,R7
		BL	zap_startop
		BL	util_long_op_on
		BLVC	swon_for_addlf
		BVS	exit_Addlfsel
		LDRB	R5,[R8,#w_cr]
		STRB	R5,insertdata$l
loop$l
		SWI	XOS_ReadEscapeState		; doesn't corrupt R14 as in user mode
		BCS	exit_Addlfsel
		SUB	R1,R10,R6
		SUB	R0,R7,R6
		SUB	R0,R1,R0			; as going in reverse...
		BL	util_long_op_display
		MOV	R0,R7
		MOV	R11,#e_clnoff
		FNcall	Zap_CallMode
		SUBS	R7,R1,#1
		BMI	exit_Addlfsel
		MOV	R0,R7
		BL	util_readc
		CMP	R0,R5
		BLNE	toReturn$l
		CMP	R7,R6
		BCS	loop$l
exit_Addlfsel
		BLVC	swoff_for_addlf
		BL	util_long_op_off
		FNRTS	VS
		BL	zap_stopop
		FNRTS

toReturn$l
		FNJSR
		CMP	R0,#32
		BEQ	replacewithaCR$l
		MOV	R0,#1
		ADD	R1,R7,#1
		MOV	R2,#1
		ADR	R3,insertdata$l
		FNcall	Zap_DoCommand
		FNRTS

replacewithaCR$l
		MOV	R0,#3
		MOV	R1,R7
		MOV	R2,#1
		ADR	R3,insertdata$l
		FNcall	Zap_DoCommand
		FNRTS

insertdata$l		; eugh - local storage.
		DCD	0

swon_for_addlf
		FNJSR	"R0"
		BL	util_blatcacheofthiswindow
		ADR	R0,wformat_toggleon$l
		FNcall	Zap_CommandString
		FNRTS

swoff_for_addlf
		FNJSR	"R0"
		BL	util_blatcacheofthiswindow
		ADR	R0,wformat_toggleoff$l
		BL	zap_commandstring
		FNcall	Zap_NewFileTitle
		FNRTS

; = "WFLAGS_TOGGLE &5C" ; clear linewrap
wformat_toggleon$l
		=	"WFORMAT_TOGGLE &3B",0		; set SW
wformat_toggleoff$l
		=	"WFORMAT_TOGGLE &5B",0		; clear SW

		ALIGN

;E R8
;X windows cache blatted.
util_blatcacheofthiswindow
		MOV	R0,#0
		STR	R0,[R8,#w_txth]			; invalidate cache
		STR	R0,[R8,#w_txtn]
		STR	R0,[R8,#w_coff]
		STR	R0,[R8,#w_cline]
		STR	R0,[R8,#w_clogl]
		MOV	PC,R14

; That's it
		END
