| Fichier Zap 'HelpData'. Ce žchier contient:
|
| 1. La documentation sur toutes les commandes Zap contenues dans le
|    module Zap.
| 2. Fichier d'aide pour l'aide interactive de Zap.
|
| Les données de ce žchier sont utilisées par la commande 'Help' (^H) et
| l'application !Help.
|
| Le format de žchier est fait de paragraphes de la forme:
|
| <étiquette> [<commentaire>]
| <paragraphe du žchier d'aide>
|
| où étiquette est l'une des choses suivantes:
|
|   <commande>		texte d'aide pour la commande <commande>
|   @<fonction>		texte d'aide pour la fonction <fonction>
|   window.<nom>	aide pour la fenêtre-feuille avec la template
|			appelée <nom>
|   mode_<nom>		aide pour une fenêtre dans le mode appelé <nom>
|   zap.icon		aide pour l'icône de Zap sur la barre.
|
| Les commandes doivent être gardés dans l'ordre alphabétique, aussi
| longtemps que possible.
| NB Seuls les 4 premières lignes sont afžchées par l'application !Help.
| Utiliser ^H pour plus de détails.

| Icône principale

zap.icon
C'est l'application Zap.
Zap est un éditeur de texte.
Cliquer SELECT pour ouvrir un nouveau žchier texte.
Draguer un žchier sur cette icône pour le charger.

| Fenêtre en mode 'n'

mode_text
Mode d'édition de texte.
Cliquer SELECT pour positionner le curseur.
Cliquer ADJUST pour réactiver le curseur à sa position courante.
Draguer SELECT pour délimiter une sélection ou ADJUST pour la modižer.
Double clic pour choisir un mot.
Triple clic pour choisir une ligne.
Quadruple clic pour choisir un paragraphe.
Quintuple clic pour choisir tout le texte.

mode_byte
Mode d'édition d'octets.
Alterner entre mode d'entrée hexa via sF3 et mode d'insertion/remplacement
via la touche Insert.
En mode d'entrée hexa, les touches 0-9, A-F, a-f rentrent des octets hexa.
Autrement, les lettres entrent leur valeur Ascii.
Appuyer sur RETURN pour éditer l'octet courant; L'instruction est assemblée par BASIC, donc vous pouvez utiliser EQUB, EQUS etc.; Mais seul le premier octet sera pris en compte.

mode_word
Mode d'édition de mots (32 bits).
Alterner entre mode d'entrée hexa via sF3 et mode d'insertion/remplacement
via la touche Insert.
En mode d'entrée hexa, les touches 0-9, A-F, a-f rentrent des mots hexa.
DELETE supprime un mot entier.
Appuyer sur RETURN pour éditer le mot courant.
L'instruction est assemblée par BASIC, donc vous pouvez utiliser EQUB, EQUS etc.; Mais seuls les quatre premiers octets seront pris en compte.

mode_ascii
Mode d'édition ASCII.
Taper des caractères pour les insérer.
Comme pour le mode texte sauf qu'il n'y a pas de retour-chariot.

mode_code
Mode d'examen d'instructions assembleur.
Presser la Ÿèche DROITE pour suivre un 'branch' et GAUCHE pour revenir.
Presser la Ÿèche DROITE ou cI pour faire une indirection à partir de
l'adresse courante.
Presser RETURN pour éditer l'instruction courante.
L'instruction est assemblée par BASIC, donc vous pouvez utiliser EQUB, EQUS etc.; Mais seuls les quatre premiers octets seront pris en compte.

mode_halfword
Édition en mode HalfWord (16 bits).
Alterner entre mode d'entrée hexa via sF3 et mode d'insertion/remplacement
via la touche Insert.
DELETE supprime un demi-mot entier.
Appuyer sur RETURN pour éditer le demi-mot courant.
L'instruction est assemblée par BASIC, donc vous pouvez utiliser EQUB, EQUS etc.; Mais seuls les deux premiers octets seront pris en compte.

mode_doubleword
Édition en mode Double Mot (64 bits).
Alterner entre mode d'entrée hexa via sF3 et mode d'insertion/remplacement
via la touche Insert.
En mode d'entrée hexa, les touches 0-9, A-F, a-f rentrent des mots hexa.
DELETE supprime un double mot entier.
RETURN n'a pas d'effet.

mode_throwback
Ceci est la fenêtre de Throwback de Zap.
Double clic SELECT ou appuyer RETURN sur une ligne pour retrouver l'occurence.
Triple clic SELECT pour retrouver l'occurence et ramener la fenêtre vers
l'avant.
Cliquer ADJUST ou appuyer DELETE sur une ligne pour la supprimer.
Double clic SELECT avec Shift maintenu pour retrouver l'occurence et fermer
la fenêtre de Throwback.

| Fenêtres-feuilles

window.CloneBox
Cette fenêtre vous permet de voir la liste courante des modes clone.
Cliquer sur le menu-popup pour ouvrir la liste des modes clone.
Cliquer sur Nouveau pour ouvrir une fenêtre de création de mode clone.
Cliquer sur Supprimer pour supprimer le mode clone afžché.
Cliquer sur Cacher pour cacher (décharger) le mode clone afžché.

window.CloneCrBox
Cette fenêtre vous permet de créer de nouveaux modes clone.
Cliquer sur le menu-popup pour ouvrir une liste de modes clone de base.
  Les modes clone sont montrés en bleu.
  Les modes déchargés sont montrés en gris.
Cliquer sur Créer pour créer le mode.

window.ColourBox
Ceci est le sélecteur de couleurs 24 bits de Zap.
Appuyer sur une des 16 couleurs Wimp pour choisir cette couleur.
Draguer les barres puis cliquer sur 'OK' pour appliquer une couleur générale.
On peut également choisir d'ici les sous-styles de fontes.

window.DyingBox
Cliquer Sauver (ou presser S) pour sauver le žchier avant qu'il ne soit perdu.
Cliquer Abandonner (ou presser D) pour abandonner le žchier.
Cliquer Annuler (ou presser C) pour annuler la boîte de dialogue.

window.DzapBox
Taper le nom du système de žchiers (Attention min/MAJ !) et presser RETURN
Le lecteur par défaut sera alors automatiquement rempli pour vous.
Taper le numéro de lecteur puis RETURN pour valider.
Appuyer sur Lire secteur pour lire le disque.

window.GotoBox
Cette fenêtre afžche votre position courante dans le texte.
Taper le numéro de ligne ou d'adresse voulu dans le žchier.
Vous avez droit aux expressions (p.ex '&100+32*78').
Appuyer sur CTRL-U pour effacer le buffer.

window.InfoBox
C'est la fenêtre d'info de Zap.
L'application Zap est copyright 'Zap Developers' 1992-2001.
Cliquer sur le bouton pour obtenir une liste des auteurs de modes.
Voir le žchier 'Copyright' pour les adresses correspondantes.

window.LoadBox
Cliquer sur Editer (ou appuyer sur E) pour charger le žchier dans un buffer
séparé.
Cliquer sur Ecraser (ou appuyer sur O) pour remplacer le buffer courant.

window.MacroBox
Les petits cadres indiquent les macros de recherche.
Les grands cadres le texte par lequel remplacer ces macros.

window.MiniBuf
C'est le minibuffer de Zap.
Draguer avec SELECT pour le déplacer.
Draguer près de la limite droite pour redimensionner.
Presser ESCAPE pour quitter le minibuffer.

window.MoveBox
Cliquer sur 'Préc. Cyl.' (ou presser X) pour reculer d'un cylindre.
Cliquer sur 'Cyl. suiv.' (ou presser C) pour avancer d'un cylindre.
Cliquer sur 'Préc. Piste' (ou presser R) pour reculer d'une piste.
Cliquer sur 'Piste suiv.' (ou presser T) pour avancer d'une piste.
Cliquer sur 'Préc. Secteur' (ou presser A) pour reculer d'une secteur.
Cliquer sur 'Sect. suiv.' (ou presser S) pour avancer d'une secteur.

window.MzapBox
Draguer l'icône 'switcher' vers une fenêtre/icône appartenant à la tâche de
votre choix.
Presser RETURN ou cliquer sur Lire.
Draguer vers une Taskwindow de Zap pour lire la mémoire de la Taskwindow.

window.NextBox
Cliquer Remplacer (ou presser R, M ou RETURN) pour remplacer une seule fois.
Cliquer Suiv. (ou presser S) pour passer à l'occurence suivante.
Cliquer Dern. (ou presser L) pour remplacer une fois et sortir.
Cliquer Annuler (ou presser C ou Q) pour terminer la recherche/remplacement.
Cliquer Undo (ou presser U) pour annuler la dernière opération sur le žchier.
Cliquer reDo (ou presser D) pour refaire l'opération d'undo la plus récente.
Cliquer Tout (ou presser A, T ou E) pour remplacer toutes les occurences.
Cliquer Dans Sél (ou presser I) pour remplacer toutes les occurences dans la sélection.

window.PrintBox
Imprime un žchier via l'application !Printers (pilote d'impression).
L'impression utilise les fontes choisies dans le menu Display.
Appuyer sur PRINT pour commencer.

window.QuickBox
Cliquer sur PRINT ou taper RETURN pour envoyer le žchier vers l'imprimante.
Si cela ne marche pas pour votre imprimante changer alors le switch DIP CR/LF
OU: Charger le pilote d'impression et sauver le žchier dessus.

window.QuitBox
Cliquer Quitter (ou presser Q) pour quitter Zap *sans* sauver de žchiers.
Cliquer Avant-plan (ou presser T ou F) pour ramener devant les données non sauvées.
Cliquer Annuler (ou presser C) pour quitter la boîte de dialogue.

window.ReplaceBox
Taper la chaîne de recherche puis RETURN.
Taper la chaîne de remplacement puis RETURN.
Presser CTRL-U pour effacer le buffer.
Presser CTRL-<une lettre> pour changer les options.

window.SaveBox
Draguer l'icône vers une fenêtre de Filer pour sauver le žchier.
Presser RETURN ou cliquer sur OK pour sauver le žchier.
Cliquer ADJUST sur OK pour sauver le žchier en laissant la fenêtre ouverte.
Cliquer MENU pour choisir le type de žchier.

window.SaveOBox
Cliquer sur Ecraser (ou presser O) pour remplacer le žchier sur disque.
Cliquer sur Avant-plan (ou presser T ou F) pour ramener devant le žchier sur disque.

window.SaveCBox
Cliquer sur Sauver dans CSD pour sauver vers le répertoire courant.

window.SaveSCBox
Cliquer sur Sauver dans CSD pour ne sauver que la sélection vers le répertoire courant.

window.SaveSelBox
Draguer l'icône vers une fenêtre de Filer pour sauvegarder la sélection.

window.SearchBox
Taper la chaîne de recherche et presser RETURN pour engager la recherche.
Cliquer sur 'Editer Macros' pour changer les macros de recherche.
Presser TAB pour revenir à l'ancienne chaîne de recherche.
Presser CTRL-<lettre> pour changer les options.

window.UndoBox
Zap vous demande si vous voulez désactiver le buffer d'undo pour un žchier.
Si vous le faîtes, rappelez-vous que PASTE et YANK ne marcheront plus.

window.WCBox
Ceci est la fenêtre de comptage de Zap. Elle afžche le nombre de mots dans
un žchier.

| ***************************************************************
| *                       C O M M A N D E S			*
| ***************************************************************

ALLWINDOWS <chaîne>
Exécute la chaîne de commandes Zap, séparées par des ; une fois pour chaque
fenêtre Zap valide. Le curseur est placé dans chacune des fenêtre avant
l'appel des commandes.

ALLMODES <chaîne>
Exécute la chaîne de commandes Zap, séparées par des : une fois pour chaque
mode chargé. La commande s'exécute normalement comme si c'était à partir de
l'icône sur la barre; cependant, vous pouvez empêcher ce comportement si la chaîne commence par un :, p.ex. depuis le minibuffer, ALLMODES (LINENOS 1) passera l'afžchage des numéros de ligne en mode 'logique', mais ALLMODES (:LINENOS 1) ne le fera que pour la fenêtre courante (à moins, bien sûr, qu'elle ne soit lancée depuis la barre d'icône ou via COMMANDIB).

Le but principal de cette commande est d'appliquer à tous les modes chargés
une commande n'en affectant qu'un seul. Il n'est pour l'instant pas possible
d'utiliser simplement cette commande depuis l'interface graphique de Zap.

ALTERSEL (Martin Ebourne)
Déplace l'extrémité de la sélection courante vers la position du caractère le
plus proche (comme Adjust). S'il n'y a pas de sélection, choisir le caractère
suivant.

ASYOUTYPE
Inverse l'option 'Spell-as-you type' du mode.

AUTOINDENT
Inverse l'auto-indentation (on/off)
(comme WFLAGS_TOGGLE 16)

AUTOSOFTWRAP
Ceci contrôle le réglage de la détection 'auto soft wrap'. Si la détection
est activée, le chargement d'un žchier comportant de longues lignes charge
ce žchier en mode SoftWrap. Par défaut, cette détection est activée.

BASEMAP <mot>
** Déprécié; utiliser plutôt BASEMAPN.
Cette commande met en place le key basemap avec le numéro de keymap donné.
Toute touche frappée sera ensuite interprétée avec le nouveau keymap.
(écrit à w_basemap, w_currentmap et w_helpmap - voir E-windows)

#Basemap
Ceci déžnit le keymap de base (par nom) pour le mode.

BASEMAPLIST
Utilisé en interne pour générer le menu de keymaps pour la sélection
du basemap.

BASEMAPN <chaîne>
Cette commande met en place le keymap basemap nommé <chaîne>.
(Elle traduit le nom en nombre puis appelle BASEMAP)

BEEP
Produit un petit bip (fait un VDU 7)

BINDTOKEY <chaîne>
Evalue la chaîne en nombre et attache la séquence apprise à ce code de
touche. (p.ex. BINDTOKEY "&1B") Si <chaîne> n'est pas donné, Zap demande
alors d'appuyer sur une touche.

BITMAPFONT <chaîne>
Change la chaîne de recherche de fonte bitmap à "ZapFont:<chaîne>".
Attention, pour qu'il y ait un changement effectif de fonte, il faut suivre
cette commande par FONTTYPE 1 command.

BITMAPLIST
Usage interne. Génère le menu de fontes bitmap.

BREAK
Sort d'une boucle REPEAT ou WHILE, ou d'un bloc CASE.

BYTE_CONTROLREPLACE <chaîne>
Le premier caractère de <chaîne> règle le remplacement de caractère de
controle en mode BYTE.

BYTE_FLAGSTOGGLE <mot>
Utilisé de manière interne pour régler les options en mode Byte.

BYTE_GROUPSIZE
Règle la taille de groupe en mode Byte. Les valeurs entre 1-16 sont permises.

CANCEL
Annule le Yank courant ainsi que la recherche interactive.
Le curseur revient à sa position d'origine.

CASE <chaîne>
Le début d'un bloc CASE.
 
<chaîne> est une expression Zap (voir IF). Elle est comparée aux expressions
listées dans chaque WHEN.

En général, cela ressemble à 
	CASE <expression>:
	WHEN <liste d'expressions>:<commande(s)>:
	WHEN <liste d'expressions>:<commande(s)>:
	Œ
	DEFAULT:<commande(s)>:
	ENDCASE
(CWHEN est possible au lieu de WHEN.)
 
Voir aussi CWHEN, WHEN, DEFAULT, ENDCASE.

CDOWN
Déplace le curseur en žn de žchier.
Un marqueur est laissé à la position précédente.
(Utiliser sF6 pour revenir à l'ancienne position).

CHAR <octet>
Insère le code de caractère <octet> dans le žchier.
Les frappes multiples sont bufferisées (comme avec tout appel d'octet).
(Utilise le point d'entrée de mode e_char)

CLEARSEL
Annule toute sélection.
(Appelle Zap_ClearSel)

CLEARGC
Efface le clipboard global, si Zap le possède.

CLEFT
Déplace le curseur en début de ligne.
(Utilise le point d'entrée de mode e_cminus)

CLI <chaîne>
Exécute <chaîne> comme une commande CLI. Par ex. CLI "Set A 3".
La sortie standard de la commande est redirigée vers Null:.
Voir aussi OSCLI et WIMPTASK.

CLONEBASE <chaîne>
Utile seulement en tant que commande d'entrée de menu, CLONEBASE grisera
l'entrée de menu si le mode donné n'est pas le mode courant ou son (sous)menu
de base de clone dans lequel il se trouve n'appartient pas au mode spécižé.

CLONEBOX
Ouvre la fenêtre de modes de clone.

CLONECREATE <chaîne>
Crée et initialise un mode de clone à partir d'un mode de base donné. Le mode
est ensuite accessible par la méthode habituelle.

CLONECREATE "Foo Text"
Crée un mode nommé "Foo" héritant des paramètres par défaut courant du mode
Text.

CLONEDELETE <chaîne>
Supprime le mode donné et toute information de conžguration associée.
Le numéro de mode est alors libéré pour un usage ultérieur.
 
Le mode doit être un clone, pas le mode par défaut courant, et non utilisé.

CLONEHIDE <chaîne>
Supprime le mode clone donné en gardant les informations de conžguration.
Le numéro de mode est alors libéré pour un usage ultérieur.
Le mode reste disponible.

Le mode doit être un clone, pas le mode par défaut courant, et non utilisé.

CLOSEOTHER
Ferme la fenêtre suivante dans la séquence de swap-window.
(Ferme l'autre fenêtre si seulement 2 fenêtres sont ouvertes).

CLOSEPRINTER
Ferme la fenêtre de Filer 'printer:$' via *Filer_CloseDir.

CLOSEWINDOW
Ferme la fenêtre courante, puis place le curseur dans la fenêtre suivante.

CODE_FLAGSTOGGLE <mot>
Utilisé en interne pour régler les options du mode Code.
Les bits sont ici utilisés d'une manière proche de celle du module 'Debugger'.

COLONSEPARATOR
Met ou non un double-point entre le numéro de ligne et le corps du texte
(comme avec WINFO_TOGGLE 3)

COLOURLIST
Utilisé en interne pour créer le menu COLOUR LIST.

COLUMNTAB
Passe en mode 'Column Tab'.
(change b9-10 de w_Ÿags)

COMMAND <chaîne>
Exécute la commande <chaîne> (ou liste de commandes séparées par des
double-points). (Utilise Zap_CommandString)

COMPILE
En mode BASIC, sauve le programme et le lance.
En mode C, compile le programme.
Si lancer un programme et le chaîner sont fonctionnellement équivalents alors
COMPILE devrait essayer de lancer (RUN) le programme dans une taskwindow.
(Appelle le point d'entrée de mode e_compile)

CONFINEHORIZONTALLY
Inverse l'option de curseur 'conžne horizontally'. Si elle est active, un
curseur-droit passera immédiatement au début de la ligne suivante si la ligne
précédente est dépassée.

CONFINEVERTICALLY
Inverse l'option de curseur 'conžne vertically'. Si elle est active,
curseur-haut et bas sont restreints dans la zone des caractères éditables, et
pas dans l'espace 'vide'. La colonne de curseur préférée est enregistrée et
restaurée aussi souvent que possible sur les mouvements haut-bas consécutifs.

Cette option copie le comportement d'éditeurs qui ne permettent pas au
curseur de s'éloigner du texte.

CONTINUE
Saute au prochain UNTIL, ENDWHILE ou ENDCASE.

COPY
Commence une copie en mode split-cursor.
Chaque touche suivante copie un seul caractère.
(Passe le curseur en mode 2 et utilise le point d'entrée de mode e_copy)

COPYSEL
Copie la sélection à la position de caret courante.

COREDUMP
Produit une image de l'espace mémoire de Zap dans le répertoire de Zap.
Utilisé pour le debuggage.

CREATEFILE <mot>
Crée un žchier vide de žletype <mot>.

CRIGHT
Déplace le curseur en žn de ligne.
(utilise le point d'entrée de mode e_cminus)

CUP
Déplace le curseur en début de žchier, en laissant un marqueur à l'ancienne
position.

CURSORMENU
Utilisé en interne pour créer le menu de types de curseur.

CUT
Supprime la sélection courante. Si le buffer de undo est actif, alors le paramètre contrôle si vous pouvez le recoller avec cY (Paste); s'il est nul ou omis, vous pouvez.
Si l'undo n'est pas actif, c'est perdu pour toujours!

CWHEN <chaîne>
Fait partie d'un bloc CASE.
 
CWHEN provides C-like fallthrough; if the immediately preceding CWHEN/WHEN
block contained a matching expression, then this will be treated as if it
does also. Si vous voulez un comportement type BASIC, utilisez alors WHEN.

<chaîne> est une liste d'expressions Zap séparées par des virgules (voir IF).
 
Si l'expression du CASE s'accorde avec une de ces expressions, alors les
commandes jusqu'au prochain CWHEN, WHEN, DEFAULT ou ENDCASE seront exécutées,
et les commandes après DEFAULT ne le seront pas.

Une expression CASE peut avoir plusieurs occurences communes avec des CWHEN
ou WHEN, contrairement au BASIC où seule la première est prise en compte.

DATE <chaîne>
Insère une chaîne de date de format <chaîne>.
Par ex. <chaîne>=%MI pour insérer les minutes de l'heure courante.
(utilise OS_ConvertDateAndTime)

DEFAULT
Fait partie d'un bloc CASE.

Les commandes suivantes sont exécutées seulement s'il n'y avait aucune
occurence avec un WHEN précédent.

DEFAULTMAP
Dans une fenêtre, change le basemap de touches à la valeur par défaut du
mode.

Depuis le menu de la barre, le basemap du mode devient le basemap global,
comme cela est indiqué dans le žchier Keys.

Si le keymap n'existe pas, retour au basemap global ou alors au keymap 0.

DELETE <chaîne>
Si aucune chaîne n'est fournie, la commande supprime le caractère devant le
curseur. (appelle le point d'entrée de mode e_delete avec R7=0)
Si la chaîne est dans la table suivante (casse respectée) alors l'action
correspondante est entreprise:

Chaîne		Equivalent	Description
 
"PREV"		DELETE		Supprime le car. précédent
"NEXT"		DELETENEXT	Supprime le car. suivant
"WORDSTART"	DELWORDSTART	Supprime le mot précédent
"WORDEND"	DELWORDEND	Supprime le mot suivant
"WORD"				Supprime le mot sous le curseur
"LINESTART"	DELTOSTART	Supprime jusqu'en début de ligne
"LINEEND"	DELTOEND	Supprime jusqu'en žn de ligne
"LINE"		DELLINE		Supprime la ligne entière
"FILESTART"			Supprime jusqu'au début du žchier
"FILEEND"			Supprime jusqu'en žn de žchier
"FILE"				Supprime tout le contenu du žchier
"SEL"		CUT		Supprime la sélection
"NONSEL"			Supprime tout sauf la sélection
 
La sélection est conservée chaque fois que c'est possible.

DELETENEXT
Supprime le caractère sous le curseur. Copie un seul caractère en mode 'copy'.
(appelle le point d'entrée de mode e_delete avec R7=1)

DELETENEXTNOCOPY
Supprime le caractère sous le curseur comme DELETENEXT.

DELLINE
Supprime la ligne sur laquelle se trouve le curseur.
Les suppressions successives peuvent être collées d'un coup avec cY.
(utilise e_lineprev et e_linenext pour trouver les limites de ligne)

DELTOEND
Supprime tout entre le curseur et la žn de ligne.
Supprime le caractère de žn de ligne si le curseur y est déjà.
(utilise e_lineend pour trouver la žn de ligne)

DELTOSTART
Supprime tout entre le curseur et le début de ligne.
(utilise e_linestart pour trouver le début de ligne)

DELWORDEND
Supprime tout entre le curseur et la žn du mot.

DELWORDSTART
Supprime tout entre le curseur et le début du mot.

DISCARDFILE
Tue un žchier et toutes les fenêtres sur ce žchier sans demander
conžrmation.

DISCARDWINDOW
Tue une fenêtre, et le žchier si auto-delete est actif et que c'est la
dernière fenêtre de ce žchier - sans demander conžrmation.

DOUBLEWORD_CONTROLREPLACE <chaîne>
Le premier caractère de <chaîne> remplace le remplacement de caractère de
controle en mode DoubleWord.

DOUBLEWORD_FLAGSTOGGLE <word>
Utilisé en interne pour régler les options du mode DoubleWord.

DOUBLEWORD_GROUPSIZE
Règle la taille du groupe de mode DoubleWord. Les valeurs 1-16 sont permises.

DOWN
Descend le curseur d'une ligne.

DROPMARK
Laisse un marqueur à l'endroit du curseur, si ça n'a déjà été fait.
Voir aussi TOGGLEMARK.

DUMPFILE
Crée une image textuelle de l'afžchage courant de ce žchier.

DZAPBOX
Ouvre la fenêtre 'Lire les données d'un disque'.

EDITBYTE <chaîne>
Assemble l'instruction donnée par <chaîne>.
L'octet de poids faible du résultat est placé à l'endroit du curseur.
L'appel de cette commande opère de manière similaire à la commande EDITWORD
et utilise de même la commande ASSEMBLE en interne.

EDITWORD <chaîne>
Assemble l'instruction donnée par <chaîne>.
La place à l'endroit du curseur (via l'adresse du žchier).
Cette commande appelle la commande ASSEMBLE. Elle en diffère par le fait que
le prompt de minibuffer ne permet d'éditer le mot qu'en tant que DCD.

ELSE
Partie optionnelle d'un bloc IF. Puisque ELSE ne fait qu'inverser une
condition, vous pouvez en utilisez plusieurs à l'intérieur d'un bloc IF, bien
que ce soit déconseillé.

EMACS
Passe en émulation de keymap Emacs.
(Utilise BASEMAPN "Emacs")

ENDCASE
La žn d'un bloc CASE. Nécessaire, même en žn de chaîne de commande, un
ENDCASE est implicite pour chaque CASE non terminé.

ENDIF
La žn d'un bloc IFŒELSEŒENDIF. Nécessaire, même en žn de chaîne de
commande, un ENDIF est implicite pour chaque IF non terminé.

ENDWHILE <chaîne>
La žn d'une boucle WHILEŒENDWHILE. Nécessaire, même en žn de chaîne de
commande, un ENDWHILE est implicite pour chaque WHILE non terminé.

ESCAPE
Annule les modes suivants (sans déplacer le curseur):
mode-copie, mode-yank, sélection-par-curseur, recherche interactive.
Voir aussi Cancel (cG).

EXECUTE
Exécute la dernière séquence de touches apprise. (voir cL)

FASTUNDO
Undo de la dernière opération en prenant le chemin le plus court dans l'arbre
d'undo. Par exemple, si vous faîtes A,B,UNDO,C,FASTUNDO,FASTUNDO, alors Zap
effacera le 'a' au lieu d'insérer le 'b'.

FFLAGS_TOGGLE <mot> 
Commande générale pour inverser un bit dans le mot de Ÿags de žchier.
Ensuite, la barre de titre est rafraîchie.
Voir WFLAGS_TOGGLE pour les détails sur le <mot>.

FINDFILE <chaîne>
Ouvre un buffer pour le žchier <chaîne> (le chemin doit être complet).

FINDFILEREADONLY <chaîne>
Comme FINDFILE, mais le žchier est ouvert en lecture seule.

FINDFUNCTION
Cette fonction cherche une fonction correspondant au mot sous le curseur.
En mode BASIC, la commande cherche une FoNction ou PROCedure du même nom, ou
une étiquette d'assembleur, si cela semble plus approprié.

FONTLIST
Utilisé en interne pour créer le menu de fontes vectorielles.

FONTSIZE <mot>
Met la taille de fontes vectorielles à <mot>.

FONTTYPE <mot>
Détermine le type d'afžchage de fontes selon <mot>:
0=fonte bitmap à 1dpp, 1=fonte bitmap redimensionnée, 2=fonte système via VDU
3=fonte anti-aliasée (rapide) 4=fonte anti-aliasée (via vdu)
5=fonte bitmap (hauteur double).

FORMATTEXT
Formatte le paragraphe courant depuis la position du curseur.
Utilise la largeur de wordwrap' pour le formattage.

FREECLICK
Inverse l'option 'Free click'. Quand elle est active, cliquer au-delà du
dernier caractère sur la ligne place le curseur à cet endroit, plutôt qu'au
dernier caractère sur la ligne.

FULLUNDO
Undo de la dernière opération en prenant le chemin le plus long. Par exemple,
A,B,UNDO,C,FULLUNDO,FULLUNDO insérera 'b' plutôt qu'effacer 'a'. A comparer
avec FASTUNDO.

GETMODULE
Utilisé en interne pour ouvrir la liste des modules à capturer.

GETWORKSPACE
Utilisé en interne pour ouvrir la liste des espaces de travail des modules à
capturer.

GETDYNAMICAREA
Utilisé en interne pour ouvrir la liste des dynamic areas à capturer.

GOTO
Ouvre la boîte de dialogue 'Aller'.

HALFWORD_CONTROLREPLACE <string>
Le premier caractère de <chaîne> remplace le remplacement de caractère de
controle en mode HalfWord.

HALFWORD_FLAGSTOGGLE <word>
Utilisé en interne pour régler les options du mode HalfWord.

HALFWORD_GROUPSIZE
Règle la taille du groupe de mode HalfWord. Les valeurs 1-16 sont permises.

HELP <chaîne>
Donne l'aide sur un sujet selon la première lettre de <chaîne>.
'c'=aide sur une commande (HELPCOM), 'f'=aide sur une fonction (HELPFN),
'k'=aide sur une touche (HELPKEY),   'v'=aide sur une var C (HELPVAR)
'm'=aide sur le mode courant,        'd'=ouvre le répertoire docs de Zap,
'z'=charge le žchier principal d'aide de Zap.

HELPFN <chaîne>
Aide sur une fonction <chaîne>.

HELPKEY <chaîne>
<chaîne> est évalué en nombre puis de l'aide est apportée sur ce code de
touche.

HELPCOM <chaîne>
Aide sur la commande <chaîne>.

HEXASCII
Alterne mode d'entrée hex/ascii.
Le mode Byte l'utilise pour contrôler l'entrée de données.
(comme WFLAGS_TOGGLE 5)

ICONISE
Iconise la fenêtre.

IF <chaîne>
Le début d'un bloc IFŒELSEŒENDIF. (Le ELSE est optionnel)
 
<chaîne> est une expression Zap - évaluée par les routines de l'OS, après
substitution des fonctions Zap, préžxées par '@'.

L'usage normal ressemble à:

	IF <condition>:<commande(s)>:ENDIF
ou	IF <condition>:<commande(s)>:ELSE:<commande(s)>:ENDIF
et une chaîne de condition typique ressemble à
	(@MODEN="text" OR @MODEN="email")
 
Les IFs peuvent s'imbriquer.

INDENT <chaîne>
Indente la sélection courante par la chaîne <chaîne>.
Si la chaîne vaut un nombre alors l'indentation se fait par autant d'espaces.
Si aucune chaîne n'est fournie, la commande utilise celle par défaut i.e.
celle dans le menu 'selection.indent'. On peut initialiser cette dernière par
INDENTBY.

INDENTBY <chaîne>
Indente la sélection courante par <chaîne>.
Si <chaîne> est un nombre, l'indentation se fera avec autant d'espaces.
Si <chaîne> est négative, ce sera une 'désindentation'.
Sans chaîne fournie, le minibuffer s'ouvre et 'Tab' permet de récupérer la
chaîne courante.

INDIRECT
Saute à l'adresse contenue au mot de la position-curseur courante.
(en laissant un marqueur, comme avec n'importe quel saut)

INFINITEWRAP
Utilisé pour inverser l'option 'inžnite wrap' sur les fenêtres avec 'Window
wrap'

INFOBOX
Ouvre la boîte d'info.

INSERT <chaîne>
Insère <chaîne> dans le žchier.
(Utilise le point d'entrée de mode e_char)

INSERTBLOCK <chaîne>
Agit comme INSERT, mais l'action peut être annulée d'une touche.
C'est équivalent à STARTOP:INSERT <chaîne>:STOPOP

INSERTBLOCKGS <chaîne>
Agit comme INSERTGS, mais l'action peut être annulée d'une touche.
C'est équivalent à STARTOP:INSERTGS <chaîne>:STOPOP

INSERTDATE
Insère la date courante en utilisant le format du žchier Keys.
(variable &300)

INSERTGS <chaîne>
Insère <chaîne> dans le žchier, en le GS-Transant d'abord.
Vous pouvez donc introduire des codes de contrôle (p.ex. |M).
(utilise le point d'entrée de mode e_char)

INSERTTIME <chaîne>
Insère l'heure courante en utilisant le format de chaîne <chaîne>. Si la
chaîne est omise, celle par défaut est utilisée, celle-ci étant déžnie comme
étant la variable &301.

INSTALLICON
Installe une icône sur la barre, si ce n'est déjà fait.

JOINLINE
Regroupe la ligne courante avec la suivante.
(utilise le point d'entrée de mode e_joinline)

KEEPREGION
Copie la sélection dans le buffer yank (Emacs kill ring).
La sélection peut être collée par cY.
C'est équivalent au Meta-W d'Emacs.

KEYMAP <mot>
** Déprécié; utiliser plutôt KEYMAPN.
Change le keymap à <mot> seulement pour la prochaine touche.
Le keymap passera ensuite à celui de valeur BASEMAP.
(P.ex. utilisé pour les extensions CTRL-X dans le keymap Emacs)

KEYMAPN <chaîne>
Change le keymap à <chaîne> seulement pour la prochaine touche.
Le keymap passera ensuite à celui de valeur BASEMAP.
(Il y a une traduction du nom en nombre avant l'appel à KEYMAP)

LASTCYLINDER (Darren Salt)
Va au dernier cylindre sur un žchier (inchangé) lu sur disque.

LASTMARK
Saute à la marque précédente dans le buffer des marqueurs.

LASTMATCH
Va à l'occurence précédente de la chaîne de recherche courante.
Parcourra tous les žchiers si l'option du même nom a été cochée.

LASTSECTOR
Va au dernier secteur sur un žchier (inchangé) lu sur disque.

LASTTRACK
Va à la dernière piste sur un žchier lu sur disque.

LEARN
Démarre ou arrête une séquence d'apprentissage (de touches).
Utiliser Execute (F1) pour rejouer la séquence.
NB Escape sera également enregistré et n'interrompra pas l'apprentissage.

LEFT
Déplace le curseur vers la gauche.
(appelle le point d'entrée de mode e_minus)

LINEEDIT
Inverse le mode d'édition.
(comme WFLAGS_TOGGLE 14)

LINENOS <mot>
Change l'état de numéro de ligne de la fenêtre à <mot>.
0=pas de numéros de ligne 1=nºs logiques 2=nºs physiques 3=adresses.

LINESELECT
Inverse l'option 'Line selection'. Ceci contrôle la façon qu'a Zap de choisir
les lignes et de coller une sélection longue de plus d'une ligne.

LINESPACING <mot>
Règle l'interligne à <mot>.

LINEWRAP
Active/désactive le mode de line wrap.
(comme WFLAGS_TOGGLE 26)

LISTFNS
Liste les fonctions de déžnitions d'un mode donné.
(via e_listfns)

LOADLIST
Utilisé en interne pour générer un menu de modes à charger.

LOADMODULE <chaîne>
Charge le module Zap dont le nom de žchier est <chaîne>.
Attention: C'est une commande très bas niveau - charger un module déjà chargé
provoquera un crash.

LOCALPASTE
Colle la dernière sélection coupée, en ignorant le clipboard global rempli
par une autre application, et utilise toujours le couper le plus récent faît
dans Zap.

LOCAL <chaîne>
Déclare des variables locales à la chaîne de commandes courante. Le paramètre
est une liste de noms de variables séparés par des virgules, eg.
	LOCAL (foo,bar)
Les jokers sont interdits.

Les variables ne sont *pas* initialisées; la seule chose faite est la
sauvegarde de l'ancienne valeur, qui sera restaurée en sortant de la chaîne
de commande.

MAKEDEFAULT <mot>
Ceci enregistre les options de la fenêtre comme options par défaut courantes.
Si mot = 0, alors Zap ne fait que le mode courant.
Si mot <> 0, alors il le fait pour tous les modes chargés.

Faire ensuite 'save options' ('save defaults') si vous voulez sauver les options par défaut pour le prochain lancement de Zap.
Utile pour les couleurs.

MARGIN <mot>
Met la marge à <mot>.

MENUOPEN <mot> (Chris Rutter)
Ouvre le menu interne Zap de numéro <mot>.
Remarquez que les menus de numéros >= 20 sont susceptibles de changer dans
les futures versions de Zap.

Utilisation possible à placer dans le žchier 'Settings':
Commande exécutée par IB ADJUST   &30F    MENUOPEN 2

MINIMENU
Utilisé en interne pour créer le menu d'options du minibuffer.

MINIMISEMEMORY
Compacte le tas autant que possible.
J'ai bien peur que ce soit un tas du type Acorn (OS_Heap), ce qui fait que la
commande change peu de choses en pratique. Fait automatiquement quand un
žchier est retiré de la mémoire de Zap.

MISCOPS <mot>
Inverse une option suivant <mot>
 0=Retirer automatiquement un žchier lorsque ses fenêtres sont fermées
 1=Auto-annuler la sélection courante quand une touche est frappée
 2=reservé
 3=Curseur clignotant
 4=Vérižer la date avant la sauvegarde d'un žchier
 5=Fermeture automatique de la fenêtre de recherche lors d'une ouverture
 6=Restreindre le curseur aux zones visibles de la fenêtre
 7=Détecter les žchiers MSDOS
 8=Autocharger FlashCar
 9=Autocharger LineEditor
10=Autocharger Disassembler
11=Autocharger Assembler
12=Autocharger HidePtr
13=Autoriser les dialogues Wimp interrompus
14=Travailler en silence
15=Pas d'anti-aliasing
16=Autocharger IClear
17=Autocharger KeyExtend
18=Pas de déžlement horizontal
19=Forcer la commande de startup même qd des žchiers sont chargés au démarrage
20=Le minibuffer s'ouvre toujours à la largeur de la fenêtre
21=Dialogues use custom tile sprites

MODE <mot>
** Déprécié. Utiliser plutôt MODEN
Passer au mode graphique <mot>

MODEN <chaîne>
Passer au mode graphique <chaîne>.

MODENMENU <string>
Génère le menu de mode du mode donné. Si aucun mode n'est donné, le mode courant est utilisé.

MOVEBOX
Ouvre la fenêtre de navigation de disque, si la fenêtre s'y prête.

MOVESEL
Déplace la sélection à la position courante du curseur.

MULTICOMMAND <donnée>
Exécute une liste d'autres commandes (p.ex la séquence de touches apprise ou
une liste de commandes séparées par des ':'). La liste est stockée dans le
bloc de données.
Le bloc de données est une liste d'entrées terminée par -1 dont la forme est
décrite plus bas. Remarquez que toutes les données pour les commandes à
exécuter sont stockées dans le bloc de données sauf le type 4 (Autres
multicommandes).
	#0 Adresse de commande
	#4 Longueur de donnée/nbre de fois (R1 sur l'entrée de commande)
	#8 Données de commande. Dépend du type de la commande (voir E-command)
		0 Pas de données
		1 List of #4 bytes then align
		2 List of #4 words
		3 Chaîne terminée par 0 puis alignée
		4 Pointeur sur un bloc de données

MZAPBOX
Ouvre la fenêtre 'Capturer tâche'.

NEWFILE <chaîne>
Crée un žchier vide. Le mode et žletype dépendent du paramètre et de la
situation; ils peuvent être spécižés "<nom de mode> <žle type>", p.ex.:
NEWFILE "Byte &FFD". Sans spécižcation, ils sont hérités du mode courant, ou
"Text &FFF" par défaut en cas de lancement depuis la barre.

NEWTYPE <mot>
Change le žletype du žchier à <mot>. Crée un žchier de valeur <mot> en cas
d'appel depuis le menu principal (options).

NEWVIEW
Ouvre une nouvelle fenêtre sur ce žchier.
(en copiant l'ancien mode et format de la fenêtre)

NEWVIEWLIST
Utilisé en interne pour créer le menu de žchier sur lequel on peut ouvrir de
nouvelles vues.

NEXTCYLINDER (Darren Salt)
Aller au prochain cylindre d'un žchier (inchangé) lu du disque.

NEXTMARK
Sauter au marqueur suivant dans le buffer.

NEXTMATCH
Aller à l'occurence suivante de la chaîne de recherche.

NEXTSECTOR
Aller au secteur suivant d'un žchier lu sur disque.

NEXTTRACK
Aller à la prochaine piste d'un žchier lu sur disque.

NONSTANDARD
Active/pas l'édition non standard
(comme WFORMAT_TOGGLE 15).

NULL
Ne fait rien (mais la touche n'est pas transmise via Wimp_ProcessKey)

OPENPARENT
Ouvre le répertoire contenant le žchier courant.

OPENPRINTER
Ouvre la fenêtre de Filer printer:$ via *Filer_OpenDir.

OSCLI <chaîne>
Exécute <chaîne> via l'interpréteur de commandes. P.ex OSCLI "Help".
La sortie est redirigée sur <Wimp$Scrap>.
Le žchier est afžché s'il est non vide. Voir aussi CLI et WIMPTASK.

OUTDENT
Désindente la sélection.
(de la longueur de la chaîne d'indentation)

OUTLINEFONT <chaîne>
<chaîne> est un nom de fonte, éventuellement précédé par un '#'. Si elle est
présente, la dièse empêche l'installation et la mise dans le cache de la
fonte. Utile lorsqu'on veut bloquer une 2ème mise en cache d'une fonte avec
la commande FONTSIZE.

OWNEDBY <string>
Ne servant que comme commande de menu, OWNEDBY grisera un item de menu si le
mode donné n'est pas celui possédant le buffer, p.ex. mode Byte pour ceux
crées via la fenêtre 'Lire Disque'.

PASTE
Colle le dernier Couper répétitivement.
(Utilisez YANK pour permuter circulairement les Couper précédents)

PASSTHROUGH <key>
En mode TaskWindow, envoie le nº de touche Wimp, traduit convenablement, à la
tâche, p.ex. PASSTHROUGH &19B pour sCopy.

PRINTFILE
Ouvre la fenêtre d'impression de qualité.

QUICKPRINT
Ouvre la fenêtre d'impression brouillon.

QUICKSAVE
Sauve le žchier sur disque sans conžrmation.

QUIT
Tue Zap !
(en demandant d'abord s'il faut sauver les žchiers)

QUOTE
Fais en sorte que le code de la touche suivante soit inséré dans le texte.
Le code est le code Zap. Donc, il faut faire cQ cSpace pour obtenir 0.

READONLY
Inverse l'état de lecture seule d'un žchier.
(b8 de f_Ÿags)

REDO
Redo du dernier undo, qu'il fut complet ou rapide.

RELOADKEYS
Recharger le žchier 'keys'

REMOVELIST
Utilisé en interne pour créer le menu de žchier à retirer.

RENUMBER
En mode BASIC renumérote le programme
(En général, appelle le point d'entrée de mode e_renumber)

REPEAT
Le début d'une boucle REPEATŒUNTIL; la boucle n'est exécutée qu'une fois.
La boucle n'est apprise qu'une fois, si le mode d'apprentissage est activé.

L'usage normal est
	REPEAT:<commande(s)>:UNTIL <condition>
 
Les REPEAT peuvent s'imbriquer.
 
WARNING: Les boucles inžnies sont très faciles à obtenir. C'est pourquoi
Alt-Escape est fourni pour éviter de rebooter.

REPLACE
Ouvre la fenêtre Chercher/Remplacer.

RETURN
Coupe la ligne (s'il n'y a pas le mode d'édition de ligne), en indentant
automatiquement. Annule également la copie avec curseurs séparés.
(utilise le point d'entrée de mode e_return)

RETURNCHAR <mot>
Règle la valeur du retour chariot du žchier.

RETURNNOINDENT
Coupe la ligne comme avec RETURN mais sans indentation automatique.

RIGHT
Déplace le curseur à droite.
(en utilisant le point d'entrée de mode e_plus)

RUN
En mode BASIC, lance le programme BASIC à PAGE.
(en général appelle le point d'entrée de mode e_run)

RUNANDQUIT
En mode BASIC, lance le programme BASIC à PAGE puis quitte le BASIC.
(en général appelle le point d'entrée de mode e_runandquit)

SAVE
Ouvre la fenêtre de sauvegarde.

SAVEANDRUN
En mode BASIC, sauve le programme et le 'chaîne'.
(en général appelle le point d'entrée de mode e_saveandrun)

SAVEFILE <chaîne>
Sauve le buffer courant avec le nom de žchier <chaîne>.
Si <chaîne> est absent, le buffer est sauvé avec son nom courant.
(à moins que le nom soit incorrect lorsqu'on vous le demande)

SAVEOPTIONS
Sauve les options par défaut courantes dans le žchier !Conžg (<Zap$Options>).

SAVESEL
Ouvre la fenêtre de sauvegarde de sélection.

SCDOWN
Descend l'afžchage d'une ligne (sans bouger le curseur).

SCLEFT
Déplace l'afžchage vers la gauche d'un caractère (sans bouger le curseur).

SCRIGHT
Déplace l'afžchage vers la droite d'un caractère (sans bouger le curseur).

SCUP
Monte l'afžchage d'une ligne (sans bouger le curseur).

SDOWN
Descend d'une page.

SEARCHBACK <chaîne>
Recherche interactive vers l'arrière (sans argument).
Recherche vers l'arrière de <chaîne> si celle-ci est présente.
Le curseur est placé en žn d'occurence.

SEARCHBUF <chaîne>
Ouvre la fenêtre de recherche avec redirection des résultats dans une fenêtre
(sans argument). Toutes les occurences correspondant à la chaîne de recherche
sont placés dans cette fenêtre.

SEARCHCUR <chaîne>
Ouvre la fenêtre de recherche et déplace le curseur vers les occurences (sans
argument). Déplace le curseur à la première occurence correspondant à
<chaîne> si celle-ci est présente.

SEARCHFORWARD <chaîne>
Recherche interactive vers l'avant (sans argument).
Recherche vers l'avant de <chaîne> si celle-ci est présente.
Le curseur est placé en žn d'occurence.

SELECTBUFFER
Sélection de tout le buffer.

SELECTLINE
Sélection de la ligne du curseur.

SELREGION
Commence une sélection par déplacement du curseur.
Utiliser Escape pour terminer le sélection.
(le mode curseur passe à 4)

SENDSEL <chaîne>
Envoie la sélection dans le buffer clavier, un caractère à la fois. L'envoi
peut-être interrompu par Escape.
Si <chaîne> est "X" alors aucun caractère de contrôle n'est envoyé.
On ne peut envoyer qu'une sélection à la fois.

SET <chaîne>
Crée une variable Zap à partir d'un résultat d'une expression Zap.
Usage:   SET (variable=expression)
Example: SET (foo="chaîne")
	 SET (foo=12)
	 SET (bar=@CHAR)
 
Dans une expression:
 
Pour utiliser une variable, la préžxer avec "@$" (chaîne) ou "@#" (nombre).
Exemple: INSERT $(@$foo)

Pour évaluer une variable dans une expression, la préžxer avec "@=".
Exemple: CHAR #(@=bar)

SETMARGINWIDTH
Règle la largeur des numéros de ligne utilisés dans le mode.
Seules les valeurs de 1 à 8 sont permises.

SETWIDTH <chaîne>
Règle la largeur de la fenêtre au nombre contenu dans <chaîne>.
(appelle le point d'entrée de mode e_setwidth)

SLEFT
Recule le curseur d'un mot.
(appelle e_sminus)

SOFTWRAP
Règle les divers Ÿags d'état de softwrap de la fenêtre et rafraîchit l'écran
si nécessaire.

SPLITLINE
Coupe en 2 la ligne à la position du curseur.
(appelle le point d'entrée de mode e_splitline)

SRIGHT
Avance le curseur d'un mot.
(appelle e_splus)

STARTOP
Démarre une opération Zap intensive. Ceci afžche le sablier et fait en sorte
que le groupe de commandes suivantes puisse être annulé en une étape.
Voir STOPOP

STARTADDR <mot>
Règle l'adresse de début apparent de žchier à <mot>.
(cette adresse sert dans la marge en mode Byte/Code)

STARTLINE <mot>
Règle le nº de ligne apparent de la première ligne du žchier.

STILLDOWN
Combine l'action de DOWN et SCDOWN, càd descend le curseur d'une ligne tout
en maintenant sa position verticale dans la fenêtre.

STILLUP
Combine l'action de UP et SCUP, càd monte le curseur d'une ligne tout en
maintenant sa position verticale dans la fenêtre.

STOPOP
Finit une opération intensive Zap - devrait toujours suivre tout appel à
STARTOP

STRIPSPACES <mot>
Exécute une commande modižant l'espacement selon les bits de <mot>.
b0=Supprime les espaces en žn de ligne, b1=Supprime les tabs en žn de ligne
b2=Tabiže (càd convertit les espaces en tabs), b3+ réservé

SUP
Monte d'une page.

SUSPEND
Appelle la ligne de commande (comme F12).

SWAPCHARS
Echange les caractères de part et d'autre du curseur.

SWAPWINDOW
Amène le curseur dans la fenêtre suivante.
Si plusieurs vues du žchier sont ouvertes, bascule d'une vue à l'autre.

SWITCHTAB
Inverse le mode TAB entre Unix et TrueTab.
(b9-b10 de w_Ÿags)

TAB
Fait un tab dans le mode courant.
(appelle e_tab)

TABCHAR <mot>
Règle le code ASCII du tab. C'est généralement 9.

TABDISPLAY <mot>
Règle l'apparence des tabs selon <mot>:
0=aucun 1=en espaces 2=Ÿèche 3=tirets puis Ÿèches

TABMODE <mot>
Règle le mode d'insertion de tab courant selon <mot>:
0=tab unix 1=tab edit 2=tab colonne

TABSASSPACES
Active/pas selon que les tabs sont insérés en tant qu'espaces ou vrai tabs
(code 9) (comme WFLAGS_TOGGLE 11).

THROWBACK_FLAGSTOGGLE <word>
Utilisé en interne pour régler les options du mode Throwback.

TOBACK
Place la fenêtre au fond de la pile.
(via Zap_OpenWindow 4)

TOFRONT
Place la fenêtre au sommet de la pile.
(via Zap_OpenWindow 3)

TOGGLEHEX
Inverse l'afžchage hexa/décimal des nº de lignes.
(b10 de w_format)

TOGGLEINSERT
Inverse le mode insert/overwrite
(comme WFLAGS_TOGGLE 1).

TOGGLEMARK
Insére/enlève la position du curseur du buffer des marqueurs.

TOGGLEUNDO
Active/pas le buffer d'undo pour un žchier.

TOGGLEWIND
Maximise/minimise la taille de fenêtre.
(la taille not-fully-open est stockée de w_togminx à w_togmaxy)

TOTALSEL (Elliott Hughes)
Fait le total des nombres de la sélection courante.
A un comportement similaire à la commande WC.

UNIVERSALARG <chaîne>
Evalue <chaîne> en nombre puis le donne comme argument à la commande
suivante. Généralement, cela exécute la commande suivante <chaîne> fois.

UNSET <chaîne>
Détruit une ou plusieurs variables Zap.
Usage:   UNSET (<nom de variable>)
Example: UNSET (foo)
	 UNSET (b#r)
	 UNSET (q*x)
	 UNSET (*)

UNTIL <chaîne>
La žn d'une boucle REPEATŒUNTIL. Bien que nécessaire, un UNTIL est
implicite pour chaque REPEAT non terminé.

<chaîne> est une expression Zap (voir IF).
 
Une chaîne de condition typique:
	(@CHARSTR="\n")

UP
Monte le curseur d'une ligne.

UPDATEWINDOW
Rafraîchit le contenu de la fenêtre d'où la commande est lancée. Position des
curseurs et sélection courante sont préservés.

WFLAGS_ALTER <mot>
Commandes pour altérer les bits du mot w_Ÿags ou opt_Ÿags.
La fenêtre est ensuite rafraîchie pour conžrmer le nouvel état.
<mot> est comme pour WFLAGS_TOGGLE.

WC (Elliott Hughes)
WC compte le nombre de mot d'un žchier. S'il est appelé d'une commande, il
ouvre une fenêtre contenant le nombre de mots, centrée sur le pointeur.
Attaché à un menu, la même fenêtre est fournie, mais en sous-menu. La méthode
utilisée pour compter les mots est en principe identique à celle d'Impression
Publisher (Le nom provient d'une commande Unix).

WCSEL (Elliott Hughes)
Compte le nombre de mots dans la sélection courante. Voir WC

WFLAGS_TOGGLE <mot>
Commande pour changer des bits du mot w_Ÿags ou opt_Ÿags. La barre de titre
est rafraîchie ensuite. <mot> est un petit 'programme' jusqu'à 4 instructions
de long en 4 octets, chaque octet étant de la forme:
 b0-b4 = bit à affecter
 b5-b6 = 0=>bit inversé, 1=>bit à 1, 2=>bit à 0
 b7    = 1 pour montrer l'activation de l'octet (seulement dans les 3 octets
         supérieurs)

P.ex &5 signiže 'inverse le bit 5'
P.ex &8609 signiže inverse le bit 9, puis le bit 6, etcŒ

WFORMAT_ALTER <mot>
Commande pour altérer les bits des mots w_format ou opt_format.
La barre de titre est ensuite rafraîchie mais pas la fenêtre.
<mot> est comme pour WFLAGS_TOGGLE.

WFORMAT_TOGGLE <mot>
Commande pour altérer les bits des mots w_format ou opt_format.
La fenêtre est ensuite rafraîchie pour conžrmer le nouvel état.
<mot> est comme pour WFLAGS_TOGGLE.

WHEN <chaîne>
Partie d'un bloc CASE.
 
WHEN provides BASIC-like lack of fallthrough. If you want C-like fallthrough,
use CWHEN instead.
 
<chaîne> est une liste de expressions Zap séparées par des virgules (voir IF).
 
If the CASE expression matches one of these expressions, then the commands up
until the next CWHEN, WHEN, DEFAULT or ENDCASE are executed, and the commands
following DEFAULT will not be executed.
 
A CASE expression may be matched in more than one CWHEN or WHEN, unlike BASIC
where only the žrst matching WHEN counts.

WHILE <chaîne>
Le début d'une boucle WHILEŒENDWHILE. La boucle n'est apprise qu'une fois,
si le mode d'apprentissage est actif.

<chaîne> est une expression Zap (voir IF).
 
L'usage normal est:
	WHILE <condition>:<commande(s)>:ENDWHILE
et une chaîne de condition typique 
	(@MODEN="text" OR @MODEN="email")
 
Les WHILE peuvent s'imbriquer.
 
ATTENTION: Les boucles inžnies sont faciles à obtenir. Pour en sortir,
faîtes Alt-Escape.

WIMPTASK <chaîne>
Exécute <chaîne> en tant que commande OSCLI via Wimp_StartTask.
Diffère d'OSCLI et CLI car les sorties VDU ne sont pas redirigées.
A utiliser pour démarrer d'autres applications.

WINDOWWRAP
Installe les divers Ÿags pour le window wrap et le rafraîchissement d'écran
si nécessaire.

WINFO_ALTER <mot>
Commande pour altérer les bits des mots w_info et opt_info.
La barre de titre est ensuite rafraîchie mais pas la fenêtre.
<mot> est comme pour WFLAGS_TOGGLE.

WINFO_TOGGLE <mot>
Commande pour inverser les bits des mots w_info et opt_info.
<mot> est comme pour WFLAGS_TOGGLE.

WORDWRAP
Inverse wordwrap on/off
(comme WFLAGS_TOGGLE 13).

WORD_CONTROLREPLACE <chaîne>
Le premier caractère de <chaîne> indique le 'control character replacement'
en mode Word.

WORD_FLAGSTOGGLE <mot>
Utilisé en interne pour changer les options en mode Word.

WORD_GROUPSIZE
Règle la taille de groupe en mode Word. Les valeurs entre 1-16 sont permises.

WRAPWIDTH <mot>
Règle la largeur de wordwrap.

WRITEBUFFER <chaîne>
Sauve le buffer sous le nom <chaîne>.
Si <chaîne> est absent, un nom de žchier est demandé.
Contrairement à WRITEFILE, ceci ne change pas le nom de žchier d'un žchier encore ouvert.

WRITEFILE <chaîne>
Sauve le buffer avec le nom de žchier <chaîne>.
Si <chaîne> est absent, demande alors un nom de žchier.
(contrairement à SAVEFILE qui ne demande rien en général)

YANK
Colle le dernier 'Couper' dans le buffer d'undo à la position du curseur.
Des 'yanks' consécutifs collent les derniers 'Couper' de manière circulaire.

| Fonctions fournies de Zap

@ADJUST
Rend VRAI si Adjust est appuyé

@ALT
Rend VRAI si un Alt est appuyé, FAUX sinon

@BASEMAP
Rend le numéro de basemap courante

@BASEMAPN
Rend le nom du basemap courant, ou NULL s'il n'a pas de nom

@BUTTONS
Rend le dernier état de boutons (Wimp_GetPointerState)

@CHAR
Rend le caractère sous le curseur
255 est retourné si le curseur est en žn de žchier

@CHAROFF <offset>
Rend le caractère situé à (curseur+offset)
255 est retourné si le caractère est en dehors du žchier

@CHARSTR
Rend le caractère sous le curseur sous forme de chaîne.
Une chaîne vide est retournée si le curseur est en žn de žchier.

@CHAROFFSTR <offset>
Rend le caractère à (curseur+offset).
Une chaîne vide est retournée si le caractère est en dehors du žchier.

@COPY
Rend VRAI si le curseur de copie est actif.

@CTRL
Rend VRAI si un des CTRL est appuyé, FAUX sinon.

@EOF
Rend VRAI si le curseur est en žn de žchier.

@FALSE
Rend 0.

@FILENAME
Rend le nom du žchier.

@GETVAR
Rend la valeur de la variable de conžguration du mode-set ou žle-set.

@GREYED <commande>
Rend VRAI si la commande Zap <commande> est grisée dans un menu.

@IF <chaîne>
Rend une des deux expressions (évaluée en chaîne ou entier) suivant qu'une
expression est vraie (non-nulle). L'une ou l'autre des expressions peut être
omise, et le minibuffer s'ouvre alors pour compléter.
 
Syntaxe:
  @IF (<condition>,<expr_si_VRAI>)			; NULL si FAUX
  @IF (<condition>,<expr_si_VRAI>,<expr_si_FAUX>)
  @IF (<condition>,,<expr_si_FAUX>)			; NULL si VRAI
 
Exemples:
  INSERT $IF (@MODET>4, "Text", "") ;"Text" si mode presque Texte, "" sinon
  EMAIL_STRIPSPCS #IF (@SELECT, &0B, &1B) ; &B si select appuyé, sinon &1B

@IN <chaîne>
Rend VRAI si le premier élément est identique à au moins un des éléments
suivants. Les éléments dans la chaîne sont séparés par des virgules; chacun
étant évalué comme une expression Zap (voir IF). Tous les éléments doivent
être du même type.

Exemples d'usage:
 
Commande:	IF (@IN(@MODEN,"basic","code")=@TRUE):UPDATEWINDOW:ENDIF
Equivalente à:	IF (@MODEN="basic" OR @MODEN="code"):UPDATEWINDOW:ENDIF
Action:		Rafraîchit la fenêtre si le mode n'est ni Basic ni Code
 
Commande:	IF (@IN(@CHAR,@TABCHAR,32)):RIGHT:ENDIF
Equivalente à:	IF (@CHAR=@TABCHAR OR @CHAR=32):RIGHT:ENDIF
Action:		Déplace le curseur à droite s'il est sur un tab ou un espace

@KEYMAP
Rend le numéro de keymap courant

@KEYMAPN
Rend le nom du keymap courant, ou NULL s'il n'a pas de nom

@MATCH <string>
Renvoie TRUE si la chaîne sous le curseur s'accorde avec la chaîne de
recherche fournie. Vous pouvez spécifier des options de recherche comme suit:
  ¤  en début de chaîne, et à la fin des options
  +  valide les options qui suivent
  -  invalide les options qui suivent
  ~  inverse l'état de l'option (réglage par défaut)
  C  sensible à la casse
  M  expension de macro
  R  recherche littérale
  \  commandes '\'
Par défaut, la correspondance est insensible à la casse, les commandes '/'
sont validées, les macros sont invalidées.
Exemple: "¤C\¤Foo\n" s'accordera à la casse près à "Foo\n"
Exemple: "¤C¤Foo\n" s'accordera à la casse près à "Foo" suivi d'un LF.
Si vous voulez '¤' au début d'une chaîne de recherche, utilisez "¤<flags>¤¤"
(remplacez <flags> selon vos besoins).

@MENU
Rend VRAI si Menu est appuyé

@MODE
Rend le numéro du mode courant

@MODEN
Rend le nom du mode courant, en minuscules

@MODET
Rend le type de mode
	0 Binary (Byte, Word, ASCII)
	1 Code
	2 BASIC
	3 TaskWindow
	4 Throwback
    Autre Basé sur le mode texte

@MODIFIED
Rend VRAI si le žchier est modižé

@MODIFIERS
Rend une valeur indiquant quelle touche modižcatrice est appuyée
Bit 0 à 1 si un Shift est appuyé
Bit 1 à 1 si un Ctrl est appuyé
Bit 2 à 1 si un Alt est appuyé

@SELANYWHERE
Rend VRAI s'il y a une sélection

@RETURNCHAR
Rend la valeur du retour chariot dans le mode courant

@SELECT
Rend VRAI si Select est appuyé

@SELHERE
Rend VRAI s'il y a une sélection dans la fenêtre courante

@SELSIZE
Rend la taille de la sélection, ou VRAI si pas de sélection

@SHIFT
Rend VRAI si une touche Shift est enfoncée, FAUX sinon

@SOF
Rend VRAI si le curseur est en début de žchier

@STARTADDR
Rend l'adresse apparente de début de žchier

@STARTLINE
Rend le nº de ligne apparent de la première ligne du žchier

@TABCHAR
Rend la valeur du caractère tab dans le mode courant

@TICKED <commande>
Rend VRAI si la commande Zap <commande> est cochée dans un menu

@TRUE
Rend -1
