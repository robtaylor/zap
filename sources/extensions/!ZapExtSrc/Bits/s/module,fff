; Zap Bits Command Extension
; $Id: module,fff,v 1.1 1999-02-15 16:21:54 dj Exp $
; Copyright (C) 1999 Zap Developers

; Module header and init/final code etc.

	GET	h.Version
	GET	h.ZapBits
	GET	h.commands


	EXPORT	Module_Header
	EXPORT	Module_End
	EXPORT	get_workspace


	AREA	|!!!Module_Header_Area|,CODE,READONLY

	ENTRY

Module_Header
Start_code		DCD 0
Initialisation_code	DCD init_code
Finalisation_code	DCD 0
Service_call_handler	DCD 0
Title_string		DCD title_string
Help_string		DCD help_string
Command_keyword_table	DCD 0
SWI_chunk_number	DCD 0
SWI_handler_code	DCD 0
SWI_decoding_table	DCD 0
SWI_decoding_code	DCD 0
Messages_file		DCD 0


	&	Zap_command_table,0,0 ; MakeExtern help


title_string	= "ZapBits",0

help_string
	=	"ZapBits",9,9,version,"(00 Jan 0000)"
 [ BUILD > ""
	=	" ",BUILD
  [ (BUILD:RIGHT:1 < "0" :LOR: BUILD:RIGHT:1 > "9") :LAND: patch_level <> ""
	=	"-",patch_level
  ]
 |
  [ test_flag
	=	" [TEST"
   [ patch_level <> ""
	=	" ",patch_level
   ]
	=	"]"
  |
   [ patch_level <> ""
	=	" patch-",patch_level
   ]
  ]
 ]
 [ INTL>""
        =	" Zap 1.40"
 ]
	=	" © Zap developers",0
	ALIGN


	LOCAL

init_code
	FNJSR
 [ :INDEX:WorkspaceSize <> 0
	MOV	r0,#6
	MOV	r3,#:INDEX:WorkspaceSize
	SWI	XOS_Module
	FNRTS	VS
	MOV	r11,r2
	STR	r11,[r12]
	STR	r11,workspace_addr
 ]
	MOV	r0,#18
	ADR	r1,zap$l
	SWI	XOS_Module
	FNRTS	VS			; find Zap
	MOV	r12,r4			; Zap's workspace
	ADR	r0,Zap_command_table
	FNcall	Zap_AddCommands
	FNRTS	VS			; add our command table
 [ :INDEX:WorkspaceSize <> 0
	MOV	r1,#0
	MOV	r2,ws
	MOV	r3,#:INDEX:WorkspaceSize
	FNcall	Zap_FillWords		; zero workspace
 ]
	FNRTS
zap$l	=	"Zap",0


;X R11 -> workspace
get_workspace
 [ :INDEX:WorkspaceSize <> 0
	LDR	r11,workspace_addr
	MOV	pc,lr
workspace_addr & 0
 |
	MOV	r11,#0
	MOV	pc,lr
 ]


	AREA	|~Module_End_Area|,CODE,READONLY

Module_End

	END
