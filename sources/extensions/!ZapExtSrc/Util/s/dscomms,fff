; Zap Util Command Extension
; Copyright (C) 1998 Zap Developers
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
; Util commands by Darren Salt (from ZapDS)
;
; (SAVE)(AND)(CLOSE|DISCARD)ALL
; 			- All fairly obvious.
;			  Darren's help file says that these were based on
;			  code supplied by me (SJA), which I remember
;			  vaguely (specifically that the code I sent him
;			  didn't work :-). But I'll credit myself anyway.
; RUNAPP		- Runs the application containing the current file,
;			  if it exists; if not, call RUNFILE.
; #EVAL#		- Evaluate parameter - as command, inserts; as
;			  function returns

; Includes
		GET	h.ZapUtil
		GET	h.module
		GET	h.dsutils
		GET	h.minfo

; What we give to other people
		EXPORT	ds_closeall
		EXPORT	ds_discardall
		EXPORT	ds_saveall
		EXPORT	ds_saveandcloseall
		EXPORT	ds_saveanddiscardall
		EXPORT	ds_runapp
		EXPORT	ds_eval
		EXPORT	ds_evalh
		EXPORT	ds_ueval

		LOCAL
; (SAVE)(AND)(CLOSE|DISCARD)ALL
; These all use a common core.

		DCD	7
ds_closeall	MOV	r11,#1
		B	closesave_main$l

		DCD	7
ds_discardall	MOV	r11,#2
		B	closesave_main$l

		DCD	7
ds_saveandcloseall
		MOV	r11,#5
		B	closesave_main$l

		DCD	7
ds_saveanddiscardall
		MOV	r11,#6
		B	closesave_main$l

		DCD	7
ds_saveall	MOV	r11,#4
		; drops through

; Common SAVE/CLOSE/DISCARD ALL code
; b0 = close unmodified
; b1 = close regardless (unless save failed)
; b2 = save modified
;
; Note: this could probably be optimised a little more, if anyone's bothered.
; It calls Zap_TestChanged twice, which could be a speed hit because it has
; to calculate the checksum each time (although in practice this will only
; happen if the file is marked as modified and the file length hasn't
; changed).

closesave_main$l
		FNJSR	"r1-r6,windptr,fileptr"
		MOV	r1,#9
		BL	zap_readvar			; number of files
		FNRTS	VS

		CMP	r0,#0
		FNRTS	LE

		SUB	r10,r0,#1			; limit
		MOV	r2,#0				; which one we're doing

		SWI	XHourglass_On
loop$l		CMP	r2,r10
		BHI	ret$l				; done?
		MOV	r0,r2
		FNcall	Zap_ConvFileOff
		ADD	r2,r2,#1
		TEQ	fileptr,#0
		BEQ	loop$l

		TST	r11,#4
		BEQ	closeit$l

;		LDR	r0,[fileptr,#f_flags]
;		TST	r0,#8
		FNcall	Zap_TestChanged			; modified?
		BEQ	closeit$l			; no - so close

		LDR	r0,[fileptr,#f_name]
		BL	zap_checkfilename
		TEQ	r0,#0
		BNE	closeit$l			; valid filename

		FNcall	Zap_FindWindow			; may open a window if none currently open
		BLVC	zap_savefile
		FNRTS	VS

		CMP	r0,#-1
		BEQ	ret$l				; if unsaved

closeit$l
		TST	r11,#3
		BEQ	loop$l				; not discarding

; this section replaces that below
		EOR	r0,r11,#2
		TST	r0,#2				; EQ if to close anyway
		FNcallc	Zap_TestChanged, NE
		FNcallc	Zap_DiscardFile, EQ
		BVC	loop$l

; replaced
;		FNcall	Zap_TestChanged			; \X Z if unchanged
;		MOVEQ	r1,#0
;		MOVNE	r1,#1
;		TSTNE	r11,#2				; if changed and r11:b1 set, closing changed
;		BNE	doclose$l

;		CMP	r1,#0
;		BNE	loop$l				; changed, but we're not closing changed

;		TST	r11,#1				; if unchanged and r11:b0 set, closing unchanged
;		BEQ	loop$l

;doclose$l
;		FNcallc	Zap_DiscardFile
;		BVC	loop$l

		; !!! drop through to ret$l so we turn off the hourglass !!!

; old method uses f_flags:b3 directly (deprecated)
;		TST	r11,#3				; are we closing files?
;		LDRNE	r0,[fileptr,#f_flags]		; maybe - find modified
;		MOVEQ	r0,#8				; no - set modified
;
;		TST	r11,#2				; are we closing modified files?
;		BICNE	r0,r0,#8			; yes - clear modified
;
;		TST	r0,#8				; if not modified
;		FNcallc	Zap_DiscardFile, EQ		; discard
;		BVC	loop$l
;
;		FNRTS

ret$l		SWI	XHourglass_Off
		FNRTS

		LOCAL
; RUNAPP
; Run enclosing application, or call RUNFILE
		DCD	3
		; don't need windptr, cursorptr
ds_runapp
		FNJSR
		LDR	r0,[fileptr,#f_name]
		BL	zap_checkfilename
		TEQ	r0,#0
		BNE	beep_and_exit$l
		FNcall	Zap_TestChanged
		BEQ	nosave$l
		BL	zap_savefile
		TEQ	r0,#0
		BNE	beep_and_exit$l
nosave$l	LDR	r2,[fileptr,#f_name]
		MOV	r0,#1024			; space for filename
		FNcall	Zap_Claim
		FNRTS	VS
		MOV	ws,r0
		MOV	r3,ws
copyname$l	LDRB	r4,[r2],#1
		TEQ	r4,#0
		STRB	r4,[r3],#1
		BNE	copyname$l
finddot$l	LDRB	r4,[r3,#-1]!
		TEQ	r4,#'.'
		BNE	finddot$l
		MOV	r2,r3
findpling$l	LDRB	r4,[r2,#-1]!
		TEQ	r4,#'!'
		TEQNE	r4,#'.'
		BNE	findpling$l

		TEQ	r4,#'!'
		MOVNE	r0,ws
		FNcallc	Zap_Free,NE
		BNE	runfile$l

		MOV	r4,#0
		STRB	r4,[r3]

		MOV	r1,ws
		MOV	r0,#5
		SWI	XOS_File
		MOVVS	r0,ws
		FNcallc	Zap_Free,VS
		BVS	runfile$l

		MOV	r0,ws
		SWI	XWimp_StartTask

		MOV	r0,ws
		FNcall	Zap_Free

		FNRTS

runfile$l	LDR	r0,[fileptr,#f_name]
		SWI	XWimp_StartTask

		FNRTS

beep_and_exit$l	ADR	r0,beep$l
		ORR	r0,r0,#1:SHL:31			; don't learn
		FNcall	Zap_CommandString
		FNRTSS					; status flags too
beep$l		=	"BEEP", 0
		ALIGN

		LOCAL
; EVAL
		DCD	(3:SHL:3)+(1:SHL:6)+(1:SHL:23)+(3:SHL:24)
		; Function and command take string,
		; call me on minibuffer
ds_eval		TEQ	r2,#6
		MOVNE	r7,#1:SHL:31
		BNE	eval$l
		ADR	r0,prompt$l
		B	zap_setprompt

prompt$l	=	"Evaluate (signed): ", 0
prompth$l	=	"Evaluate (hex): ", 0
uprompt$l	=	"Evaluate (unsigned): ", 0
		ALIGN

		DCD	(3:SHL:3)+(1:SHL:6)+(1:SHL:23)+(3:SHL:24)
		; Function and command take string,
		; call me on minibuffer
ds_evalh	TEQ	r2,#6
		ADREQ	r0,prompth$l
		BEQ	zap_setprompt

		MOV	r6,#16				; base 16
		MOV	r7,#0				; unsigned result
		MOV	r11,r2
		FNJSR	"r7,r11"			; set up for gotbase$l
		B	gotbase$l

		DCD	(3:SHL:3)+(1:SHL:6)+(1:SHL:23)+(3:SHL:24)
		; Function and command take string,
		; call me on minibuffer
ds_ueval	TEQ	r2,#6
		ADREQ	r0,uprompt$l
		BEQ	zap_setprompt
		MOV	r7,#0				; unsigned result

; Common #EVAL code
; \E r0 string, r1 number of times to execute
;    r2 0,1 if command, 23 if function
;    r7 tbs if result should be signed
eval$l		MOV	r11,r2
		FNJSR	"r7,r11"			; save how we deal with expression result
		MOV	r4,r0				; string to evaluate
		SUB	r5,r4,#1			; because we pre-increment, not post-

scan$l		LDRB	r2,[r5,#1]!
		TEQ	r2,#':'
		BEQ	gotcolon$l			; r5 => colon separating base expression from main
		TEQ	r2,#0				; end of string
		BNE	scan$l

		MOV	r6,#10				; default base is 10
		MOV	r0,r4				; no base expression, so entire string to evaluate
		B	gotbase$l			; go and do it

; \E r4 start of base expression, r5 colon terminator
gotcolon$l	MOV	r2,#0
		STRB	r2,[r5]				; terminate with NUL
		MOV	r0,r4
		SWI	XOS_EvaluateExpression		; r2 = 0 => no buffer; evaluate only as string
		MOV	r6,#10				; default base 10
		MOV	r0,#58
		STRB	r0,[r5]				; return colon to string

		MOVVS	r0,r4
		BVS	gotbase$l			; on error, assume colon is part of main expression

		TEQ	r1,#0
		MOVNE	r0,r4
;		MOVNE	r6,#10				; previously set
		BNE	gotbase$l			; if result not an integer, assume as above

		MOV	r6,r2				; integer result becomes base
		CMP	r6,#2
		RSBHSS	r2,r6,#36			; if higher than 36
		ADRLO	r0,badbase$l			; or lower than 2
		FNRTV	LO				; complain about invalid base
		B	validbase$l			; everything's happy

badbase$l	=	"Base must be between 2 and 36", 0
		ALIGN

validbase$l	ADD	r0,r5,#1			; main expression starts one past colon

; Common #EVAL# code
; \E r0 string to evaluate, r1 (dropped)
;    r6 base, F stacked (tbs => unsigned result),
;    N stacked (command/function)
gotbase$l	MOV	r1,#256				; maximum length of result
		BL	zap_evaluateexpression		; \X r0 = 0 / block containing string result, r1 = integer / length of string
		FNRTS	VS

		PULL	"r7"				; tbs => unsigned result
StackedRegs	SETS	"r11"				; correct for pulled register
		TEQ	r0,#0				; integer or string?
		MOVNE	r2,r1				; length in r2
		BNE	string$l			; insert the string (or return if function)

; The expression evaluated to a number; return as string if function,
; add prefix and convert to string if special==0, otherwise insert as number.
;
; \E r1 integer to enter
;    r6 base
;    r7 tbs => unsigned result
;    N stacked, 0,1 => command, 23 => function
varisnum$l	PULLS	"r11"
		CMP	r11,#23
		BEQ	alwaysconvert$l

		LDRB	r0,[windptr,#w_format]
		BL	util_getmodeinfo		; \X r0 = information word, r11 corrupted (ws)
		MInfo	"Special", r2			; affects status registers
		BNE	number$l			; special==1

alwaysconvert$l	MOV	r0,#320				; 320 bytes for temporary workspace
		FNcall	Zap_Claim
		FNRTS	VS
		MOV	r4,r0				; store so we can free it later
		MOV	r3,r0				; move into place (for Darren's code)

		TST	r1,r7				; if unsigned and r1 tbs (=> negative), N set; otherwise N clear
		MOVMI	r0,#'-'				; if N set, store a minus sign at
		STRMIB	r0,[r3],#1			; the start of the result buffer
		RSBMI	r1,r1,#0			; get the modulus (r1 = 0 - r1)

; \E r1 number to enter, r3 block to enter to, r6 base
;    N stacked, 0, 1 => command, 23 => function
;    r10 block to insert at end
getprefixtype$l
		LDRB	r0,[windptr,#w_format]
		BL	util_getmodeinfo		; \X r0 = information word
							; also sets ws
		FNRTS	VS				; could possibly use defaults?
		MOV	r11,r4				; can now move block into place

		CMP	r6,#2
		MInfo	"Binary", r2, EQ
		CMP	r6,#8
		MInfo	"Octal", r2, EQ
		CMP	r6,#16
		MInfo	"Hex", r2, EQ

		; r2 is prefix number or 0 for default
		CMP	r2,#0
		BEQ	defaultprefix$l

		ADRL	r0,util_prefixes
		ADD	r0,r0,r2,LSL #2
; \E r0 pointer to prefix, NUL-termed
;    r3 place to insert prefix
; \X r3 updated, r0, r2 corrupted
prefixloop$l	LDRB	r2,[r0],#1
		CMP	r2,#0
		BEQ	doneprefix$l
		STRB	r2,[r3],#1
		B	prefixloop$l

defaultprefix$l	CMP	r6,#16
		MOVEQ	r0,#'&'
		STREQ	r0,[r3],#1
		CMPNE	r6,#10
		BEQ	doneprefix$l

		MOV	r2,r6				; number to convert
		MOV	r6,#10				; base 10
		BL	convert				; insert base
		MOV	r6,r2				; base back into place
		MOV	r2,#'_'
		STRB	r2,[r3],#1			; insert separator
		B	doneprefix$l

; \E r1 number to enter, r3 block to enter to, r6 base
;    N stacked, 0, 1 => command, 23 => function
;    r11 block to insert at end
doneprefix$l	MOV	r2,r1				; main number into place
		BL	convert

		MOV	r0,r11				; block to insert
		SUB	r2,r3,r0			; length
; \E r0 string to enter, r2 length
;    N stacked, 0, 1 => command, 23 => function
string$l
		MOV	r11,r0				; store
		PULL	"r14"
StackedRegs	SETS	""
		TEQ	r14,#23				; r0 already set to the string
		MOVEQ	r1,#3				; string literal
		FNRTS	EQ				; return from function call

; \E r11 string to enter, r2 length
insert$l
		MOV	r3,r11				; string to enter
		MOV	r0,#&11				; atomic insert
		BL	util_commandcur			; \X r1 corrupted

		MOVVC	r1,#0
		MOVVS	r1,r0				; error pointer
		MOV	r0,r11				; block to free
		FNcall	Zap_Free

		FNPULL					; get lr
		MOVS	r0,r1
		BICEQS	pc,lr,#Vbit			; clear V if no error
		ORRS	pc,lr,#Vbit			; set V if error

; \E r0 information word, r1 integer to enter, r7 tbs => unsigned
;    N stacked, 0, 1 => command, 23 => function (but never function)
number$l
		PULL	"r2"				; get rid of stacked register
StackedRegs	SETS	""				; correct for tail routine (insert$l)
		TST	r1,r7				; if unsigned and r1 tbs (=> negative), N set; otherwise N clear
		RSBMI	r1,r1,#0			; get the modulus (r1 = 0 - r1)
		MInfo	"Size", r2			; \X r2 data size

		MOV	r0,r2
		FNcall	Zap_Claim			; \X r0 block of size 'datasize'
		FNRTS	VS
		MOV	r11,r0

		; r2 can currently be 1 or 4; 3 is 'varies' and is reserved currently
		; and 2 has never come up. If we add a halfword-editing mode, we'll
		; need something more cunning here.

		CMP	r2,#1
		STREQB	r1,[r11]
		BEQ	insert$l			; \E r11 'string' to enter, r2 length

		LDR	r0,[windptr,#w_format]
		TST	r0,#1:SHL:17			; big endian?
							; if so, reverse bytes
							; r0: x   x   x   x   r1: a   b   c   d
		EORNE	r0,r1,r1,ROR #16		; r0: a^c b^d a^c b^d				(r1 ROR #16: c   d   a   b)
		BICNE	r0,r0,#0xff00			; r0: a^c b^d 0   b^d
		MOVNE	r1,r1,ROR #24			;                     r1: b   c   d   a
		EORNE	r1,r1,r0,LSL #8			;                     r1: d   c   b   a		(r0 LSL #8:  b^d 0   b^d 0)

		STR	r1,[r11]
		B	insert$l

		LOCAL
; \E r2 number to convert, r3 block to insert to, r6 base to use
;    r11 block with scratch space at (r11+128) for digits required
; \X r3 updated
convert
		FNJSR	"r0-r2"
		ADD	r14,r11,#128			; scratch space
		MOV	r0,#1
		TEQ	r2,#0
		BEQ	digit0$l

; Determine the number of digits; for each digit, put the value of
; one in that column in r14 (in reverse order - highest column ends up
; first).
		MOV	r1,#1
shift$l		CMP	r1,r2
		BHI	digits$l
		STR	r1,[r14],#4			; store column multiplier
		MOV	r0,r1,LSR #8
		MUL	r0,r6,r0
		TST 	r0,#0xff000000			; are we running out of space?
		MULEQ	r1,r6,r1			; no - advance multiplier to next column
		BEQ	shift$l

digits$l	LDR	r0,[r14,#-4]!			; get multiplier for this column
digit0$l	MOV	r1,#0

; Determine the digit for this column. First work it out as a number.

digit$l		CMP	r2,r0
		SUBHS	r2,r2,r0
		ADDHS	r1,r1,#1
		BHI	digit$l

; Now convert to the ASCII character.

		ADD	r1,r1,#48			; '0'
		CMP	r1,#58				; ':' - top of numbers
		ADDHS	r1,r1,#7			; to 65 - 'A'
		STRB	r1,[r3],#1			; store the character
		TEQ	r0,#1				; done the final column?
		BNE	digits$l

		MOV	r1,#0
		STRB	r1,[r3]				; terminate string, don't advance
		FNRTSS					; preserve SR across call

; That's it
		END
