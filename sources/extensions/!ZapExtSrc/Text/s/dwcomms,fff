; Zap Text Command Extension
; Copyright (C) 1998 Zap Developers
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
; Text commands by Daniel Wagenaar (from DWExt)
;
; SWAPCRLF		- Exchanges CR <-> LF
; LINEENDS		- Translates CRLF/LFCR/CR/LF sequences to correct lineend
; FINDSEL		- Find selected block
; REMOVELF		- Convert text with fixed LFs to free line-endings
; REMOVELFSEL		- And on the selection only

; Includes
		GET	h.ZapText
		GET	h.dsutils
		GET	h.coreutils

; What we give to other people
		EXPORT	dw_swapcrlf
		EXPORT	dw_lineends
		EXPORT	dw_findsel
		EXPORT	dw_removelf
		EXPORT	dw_removelfsel

; SWAPCRLF - Swap CRs and LFs throughout the current file
; Note that this appears to lose the current selection?
		LOCAL

		&	0			; command flags
dw_swapcrlf
		FNJSR	"r0-r6"
		LDR	r0,[fileptr,#f_len]
		MOV	r1,#0
		TEQ	r0,#0
		FNRTS	EQ			; nothing to do

		FNcall	Zap_SplitBuffer		; move split to end of file
		FNcall	Zap_SaveWinStatus	; ie one contiguous block of memory

		LDR	r0,[fileptr,#f_ptr]
		LDR	r1,[fileptr,#f_len]
		ADD	r1,r1,r0		; end of file

loop$l		LDRB	r14,[r0],#1
		TEQ	r14,#10
		TEQNE	r14,#13			; LF or CR?
		EOREQ	r14,r14,#7		; if so, flip (7=10 EOR 13)
		STREQB	r14,[r0,#-1]
		CMP	r0,r1			; got to the end yet?
		BCC	loop$l

		FNcall	Zap_NewWinStatus	; let Zap sort itself out
		FNRTS

; LINEENDS - translates CRLF/LFCR/CR/LF to correct lineend
		LOCAL

		&	0			; command flags
dw_lineends
		FNJSR	"r0-r7"
		BL	zap_startop		; undo in a single stroke
		BL	util_long_op_on

		LDR	r0,[cursorptr,#c_off]
		LDR	r1,[fileptr,#f_flags]
		PUSH	"r0,r1"			; stack current cursor position and flags

		ORR	r1,r1,#(1:SHL:14)
		STR	r1,[fileptr,#f_flags]	; unlink input posn from input cursor

		LDRB	r5,[windptr,#w_cr]	; what's the correct lineend?
		MOV	r0,#0			; start of file

		BL	getvars$l
		TEQ	r0,r1
		BEQ	finished$l
		MVN	r4,#0			; R4=lineend code if we've just replaced one
						; (so we can delete a subsequent one)
						; -1 otherwise

loop$l		LDRB	r6,[r2,r0]		; get a character
		TEQ	r6,#10
		TEQNE	r6,#13			; CR or LF?
		BLEQ	foundcr$l		; must return with EQ still bearing
		MVNNE	r4,#0
		ADDNE	r0,r0,#1		; skip over otherwise

		; update the hourglass
		MOV	r7,r0
		BL	util_long_op_display	; r0 / r1
		MOV	r0,r7

		; does the user want to break out?
		SWI	XOS_ReadEscapeState	; user mode, so doesn't corrupt r14
		BCS	finished$l

		CMP	r0,r1
		BCC	loop$l			; keep going if there's more to do

		BL	getvars$l		; file length may have changed / over split
		CMP	r0,r1
		BCC	loop$l

finished$l	BL	util_long_op_off
		BL	zap_stopop
		PULL	"r0,r1"			; unstack cursor position and flags
		LDR	r2,[fileptr,#f_flags]
		TST	r1,#(1:SHL:14)
		ORRNE	r2,r2,#(1:SHL:14)
		BICEQ	r2,r2,#(1:SHL:14)	; restore input posn/cursor linking
                STR	r2,[fileptr,#f_flags]
		FNRTS

getvars$l	LDR	r2,[fileptr,#f_ptr]
		LDR	r1,[fileptr,#f_splito]	; split offset
		CMP	r0,r1
		MOVCCS	pc,lr			; return if we're before split point
		LDR	r1,[fileptr,#f_splits]	; split size
		ADD	r2,r2,r1		; apparent buffer start if after split point
		LDR	r1,[fileptr,#f_len]
		MOVS	pc,lr			; so EQ bears

; R4 = previous lineend code or -1
; R5 = correct lineend code
; R6 = current lineend code
foundcr$l
		FNJSR
		CMP	r4,#0
		BMI	replace$l		; if first one, replace
		TEQ	r4,r6
		BNE	remove$l		; if last was different to us, remove this one
						; and similarly if last was the same (so overkill ...)
replace$l	MOV	r4,r6
		PUSH	"r0-r3"
		TEQ	r4,r5
		BEQ	noreplace$l		; if already correct, do nothing
		MOV	r1,r0
		MOV	r2,#1
		ADD	r3,windptr,#w_cr
		MOV	r0,#&13
						; R8 and R9 are preserved throughout this command
		FNcall	Zap_Command		; replace (and into undo buffer)

noreplace$l	PULL	"r0-r3,lr"		; sets up lr again
		ADD	r0,r0,#1
		B	getvars$l		; update positions

remove$l	MVN	r4,#0			; don't remove next one too
		PUSH	"r0-r3"
		MOV	r1,r0
		MOV	r2,#1
		MOV	r0,#&12
		FNcall	Zap_Command		; remove
		PULL	"r0-r3,lr"		; sets up lr again
		B	getvars$l

; FINDSEL - do a search for the current selection
; Exactly how we do this is dependent on our parameter.
; n=0	To buffer					"To buffer"
; n=+1	Forward from cursor (next match)		"Next( match)" / "Forward"
; n=-1	Backward from cursor (previous match)		"Previous( match)" / "Backward"
; n=+2	Forward from start (first match)		"First( match)" / "(From )start"
; n=-2	Backward from end (last match)			"Last( match)" / "(From )end"
;
; Parameter coding by SJA
		LOCAL

prompt$l	=	"Direction: ", 0
to$l		=	"to buffer", 0			; T

next$l		=	"next match", 0			; N
next2$l		=	"forward", 0			; F (don't use - depends on test order)

previous$l	=	"previous match", 0		; P
previous2$l	=	"backward", 0			; B

first$l		=	"first match", 0
first2$l	=	"from "
first3$l	=	"start", 0			; S

last$l		=	"last match", 0
last2$l		=	"from "
last3$l		=	"end", 0			; E
		ALIGN

		MACRO
$la		TEST	$a,$b
$la		ADR	r0,$a
		MOV	r1,r3
		BL	strstarts
		MOVEQ	r5,#$b
		BEQ	go$l
		MEND

		&	(3:SHL:3)+(1:SHL:6)
dw_findsel
		TEQ	r2,#6
		ADREQ	r0,prompt$l
		BEQ	zap_setprompt

		FNJSR

		MOV	r3,r0				; move into storage position

		; Test to see if the given string starts with any of the
		; parameters we have above, in turn. Hence abbreviations
		; work.
		TEST	to$l, 0

		TEST	next$l, 1
		TEST	next2$l, 1

		TEST	previous$l, -1
		TEST	previous2$l, -1

		TEST	first$l, 2
		TEST	first2$l, 2
		TEST	first3$l, 2

		TEST	last$l, -2
		TEST	last2$l, -2
		TEST	last3$l, -2

		; Okay, so none of the strings checked out.
		; Let's try running it through OS_EvaluateExpression for kicks.
		MOV	r0,r3
		MOV	r1,#0
		MOV	r2,#0				; don't use a buffer!
		SWI	XOS_EvaluateExpression		; do it
		BVS	err$l
		CMP	r1,#0
		BNE	err$l				; couldn't get a number
		CMP	r2,#-2
		BLT	err$l
		CMP	r2,#2
		BGT	err$l
		MOV	r5,r2				; search type

		; Drop through into go$l, which does the work.
go$l
		BL	search$l			; \E r5 = search type
		FNRTS

err$l
		FNPULL					; get lr back
		ERR	"Parameter not recognised"

; Modified DW code starts here
; Called with r5 = search type. Don't call with an invalid search type;
; anything could happen.
search$l
		FNJSR	"r0-r1"
		FNcall	Zap_ReadSel		; r3 => block, r2=length
		TEQ	r3,#0
		FNRTS	EQ			; no selection
		MOV	r0,r3
		ADD	r1,r2,#1
		FNcall	Zap_Ensure		; space for terminator too
		MOVVS	r0,r3			; restore pointer
		BVS	free$l			; couldn't get space, so free block

		MOV	r14,#0
		STRB	r14,[r0,r2]		; terminator
		PUSH	"r0"			; stack heap pointer

		CMP	r5,#0
		MOVEQ	r1,#1
		MOVNE	r1,#0			; buffer or cursor

		MOVPL	r4,#1
		MVNMI	r4,#0			; forward/backward

		CMP	r5,#2			; +2
		CMPNE	r5,#0			; 0
		MVNEQ	r3,#0			; start of file
		LDRNE	r3,[cursorptr,#c_off]	; cursor position

		CMN	r5,#2			; -2
		LDREQ	r3,[fileptr,#f_len]	; end of file

		MOV	r5,#(7:SHL:28)		; case sensitive, no macros, no \commands
		FNcall	Zap_Search

		PULL	"r0"
free$l		FNcall	Zap_Free		; free up the heap block we grabbed

		FNRTS

; REMOVELF - converts text in paragraphs with lard line ends into text
; suitable for soft-wrapping.
; Note that Zap_SaveWinStatus will probably lose the current selection :-(

		LOCAL

		&	1
dw_removelf
		STMFD	R13!,{R0-R6,R14}
		LDR	R0,[R9,#f_len]
		TEQ	R0,#0
		LDMEQFD	R13!,{R0-R6,PC}^
		FNcall	Zap_SaveWinStatus,R6
		BL	util_splitbuffer
		LDR	R0,[R9,#f_ptr]
		LDR	R1,[R9,#f_bufl]		; f_len]
		ADD	R1,R1,R0
		LDRB	R2,[R8,#w_cr]
rlf_lp
		LDRB	R14,[R0],#1
		TEQ	R14,R2
		BLEQ	rlf_cr
		CMP	R0,R1
		BCC	rlf_lp
		LDR	R0,[R9,#f_flags]
		ORR	R0,R0,#1<<3
		STR	R0,[R9,#f_flags]	; set modified
		MOV	R0,#-1
		STR	R0,[R9,#f_chklen]	; keep modified
		FNcall	Zap_NewWinStatus,R6
		LDMFD	R13!,{R0-R6,PC}^

		DCD 1
dw_removelfsel
		STMFD	R13!,{R0-R6,R14}
		LDR	R0,[R9,#f_len]
		TEQ	R0,#0
		LDMEQFD	R13!,{R0-R6,PC}^
		MOV	R4,R9
		FNcall	Zap_GetSel
		LDMCSFD	R13!,{R0-R6,PC}^
		CMP	R4,R9
		LDMNEFD	R13!,{R0-R6,PC}^
		MOV	R4,R1
		FNcall	Zap_SaveWinStatus,R6
		FNcall	Zap_SplitBuffer,R6	; get the split out of the way
		LDR	R0,[R9,#f_ptr]
		LDR	R1,[R9,#f_splite]
		ADD	R0,R0,R1
		ADD	R0,R0,R4
		ADD	R1,R2,R0
		LDRB	R2,[R8,#w_cr]
rlf_lp2
		LDRB	R14,[R0],#1
		TEQ	R14,R2
		BLEQ	rlf_cr
		CMP	R0,R1
		BCC	rlf_lp2
		LDR	R0,[R9,#f_flags]
		ORR	R0,R0,#1<<3
		STR	R0,[R9,#f_flags]	; set modified
		MOV	R0,#-1
		STR	R0,[R9,#f_chklen]	; keep modified
		FNcall	Zap_NewWinStatus,R6
		LDMFD	R13!,{R0-R6,PC}^

rlf_cr
		CMP	R0,R1
		MOVCSS	PC,R14
		STMFD	R13!,{R14}
		LDRB	R14,[R0],#1
		TEQ	R14,#9
		TEQNE	R14,#32
		LDMEQFD	R13!,{PC}^		; if followed by ;t or ' ' -> don't replace it
		TEQ	R14,R2
		BNE	rlf_rcr			; if not followed by ;t, ' ', or ;n -> replace it
rlf_skiplp
		CMP	R0,R1
		LDMCSFD	R13!,{PC}^
		LDRB	R14,[R0],#1
		TEQ	R14,R2
		BEQ	rlf_skiplp
		LDMFD	R13!,{PC}

rlf_rcr
		MOV	R14,#32
		STRB	R14,[R0,#-2]
		LDMFD	R13!,{PC}^

; That's it
		END
