/*
 * $Id: templcat,fff,v 1.1 1999-09-20 17:21:49 james Exp $
 * -*- c -*-
 * templcat
 * Output textual description of a template file
 *
 * Copyright (c) James Aylett 1999. <dj@zap.uk.eu.org>
 * 
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * This is a mess because it's all in one file. It's all in one file
 * to make it easier to build both under Unix and RISC OS. If you don't
 * like it, then either find a wrapper for ncc so it will work with a
 * flat layout, or a patch for gcc so it'll work with a 'bumpy' one. I'll
 * accept patches providing it will still build under both systems.
 * 
 * Possible additions: WinEd lists "Furniture" as a possible window flag.
 * Dunno where this lives, though ... (work area buttons seems likely).
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

#include "coopt.h"

/* you need to -IDeskLib: to get this to work under RISC OS.
 * Under UNIX, you'll need to copy the file somewhere useful, or something.
 */

/* Do the following because we don't actually need DeskLib:Core.h
 * and Wimp.h will insist on it otherwise.
 */
#define __dl_core_h
#include "Wimp.h"

/* Template file structures
 * indirected pointers are relative to start of file
 * font numbers are offsets within the font descriptors
 * at the end of the file
 */
typedef struct
{
  unsigned int font_offset; /* from start of file */
  unsigned int reserved[3];
} templ_header;

typedef struct
{
  unsigned int offset; /* from start of file */
  unsigned int size;
  unsigned int type; /* 1 => window template */
  char identifier[12];
} templ_index;

/* Notionally, we think the following:
 *
 *  typedef struct
 *  {
 *    window_block window;
 *    icon_block icon[0];
 *  } templ_definition;
 *
 * There's really no point, because the icon[0] doesn't work in C.
 */

typedef struct
{
  wimp_point size; /* points times 16 */
  char name[40];
} templ_fontinfo;

#define VERSION_STRING "v0.1 (c) James Aylett 1999"

void *xmalloc(int);
void *xrealloc(void *, size_t);
void help(void);
void fatal_error(char *, ...);
void do_error(char *, ...);
void *slurp_file(const char *, unsigned long *);
unsigned long increase_offset(unsigned long, unsigned long, unsigned long);
const char *colour_name(char, int);
void do_font(FILE *, int, templ_fontinfo *, unsigned long);
unsigned int fprint_string(FILE *, char *, unsigned long);

const char *yesno[] =
{
  "no", "yes"
};

const char *button[]  =
{
  "never", "always", "auto repeat", "click",
  "release", "double click", "click/drag", "release/drag",
  "double/drag", "menu", "double/click/drag", "radio",
  "12 (reserved)", "13 (reserved)", "writable/drag", "writable"
};

const char *program_name;

int
main(int argc, char const * const * argv)
{
  static const struct coopt_option option[] =
  {
    { 'i', COOPT_REQUIRED_PARAM, "input" },
    { 'o', COOPT_REQUIRED_PARAM, "output" },
    { 'h', COOPT_NO_PARAM, "help" },
    { 'V', COOPT_NO_PARAM, "version" }
  };

  struct coopt_state state;
  struct coopt_return ret;
  char const * infile=NULL;
  char const * outfile=NULL;
  FILE *out=NULL;
  void *block;
  unsigned long block_len=0;
  unsigned long current=0;

  program_name = argv[0];
  coopt_init(&state, option, sizeof(option) / sizeof(struct coopt_option),
             argc-1, argv+1);

  do
  {
    ret = coopt(&state);
    if (!coopt_is_error(ret.result))
    {
      if (ret.opt!=NULL)
      {
        switch (ret.opt->short_option)
        {
          case 'i':
            if (infile!=NULL)
              fatal_error("you can't specify more than one input file");
            infile = ret.param;
            break;
          case 'o':
            if (outfile!=NULL)
              fatal_error("you can't specify more than one output file");
            outfile = ret.param;
            break;
          case 'V':
            printf ("%s %s\n", program_name, VERSION_STRING);
            exit(0);
          case 'h':
            help();
            break;
        }
      }
      else if (coopt_is_okay(ret.result)) /* ie: it's a parameter */
      {
        if (infile==NULL)
          infile=ret.param;
        else
          fatal_error("you can't specify more than on input file");
      }
    }
  } while (coopt_is_okay(ret.result));

  if (coopt_is_error(ret.result))
  {
    char err[255];
    coopt_serror(err, 255, &ret, &state);
    fatal_error("fatal error in options parsing: %s", err);
  }

  block = slurp_file(infile, &block_len);

  if (outfile==NULL || strcmp(outfile, "-")==0)
    out=stdout;
  else
    out=fopen(outfile, "w");

  if (out==NULL)
    fatal_error("couldn't open output file");

  if (strcmp(infile, "-")==0)
    fprintf(out, "// template file from stdout\n// ");
  else
    fprintf(out, "// %s, ", infile);
  fprintf(out, "disassembled by %s %s\n", program_name, VERSION_STRING);

  current=0;
  /* let's go!
   * file is in block, length block_len
   * we operate at block+current
   *
   * remember that indirected data is stored with a trailing \n, no
   * NUL terminator, and we _don't_ have a sensible bound for it, because
   * we don't store loads of nothing unnecessarily in the file. Hence we
   * have a routine for fprint()ing the string taking this into account.
   */
  {
    templ_header *header = (templ_header *)block;
    templ_index *index;
    templ_fontinfo *font_base=0;
    unsigned long font_limit=0;

    if (header->font_offset < block_len)
    {
      font_base = (templ_fontinfo *)(block + header->font_offset);
      font_limit = block_len - header->font_offset;
    }

    if (header->reserved[0]!=0 ||
        header->reserved[1]!=0 ||
        header->reserved[2]!=0)
      fatal_error("reserved header words weren't empty!");

    current = increase_offset(current, block_len, sizeof(templ_header));
    index = (templ_index *)(block+current);
    while (index->offset!=0)
    {
      if (index->type!=1)
      {
        do_error("unknown block type %i, skipping", index->type);
      }
      else
      {
        unsigned long templ_current=0;
	unsigned long temp_current=0;
	int icon_num=0;
        window_block *defn;
	fprintf(out, "\nwindow \"");
        fprint_string(out, index->identifier, 12);
        fprintf(out, "\"\n{\n");
        defn = (window_block *)(block+index->offset);
	/* the following will bomb out if there isn't enough space for
	 * the window block
	 */
	temp_current=increase_offset(index->offset, block_len, sizeof(window_block));
        /* don't exceed index->size with templ_current */
	fprintf(out, "  coords\n  {\n    %i, %i, %i, %i\n  }\n",
		defn->screenrect.min.x,
		defn->screenrect.min.y,
		defn->screenrect.max.x,
		defn->screenrect.max.y);
	fprintf(out, "  scroll\n  {\n    %i, %i\n  }\n",
		defn->scroll.x,
		defn->scroll.y);
	switch ((int)defn->behind)
	{
	 case -1:
	  fprintf(out, "  open_position top;\n");
	  break;
	 case -2:
	  fprintf(out, "  open_position bottom;\n");
	  break;
	 case -3:
	  fprintf(out, "  open_position iconised;\n");
	  break;
	 default:
	  fprintf(out, "  open_position behind %i;\n", (int)defn->behind);
	  break;
	}
	fprintf(out, "  window_flags\n  {\n");
	if (defn->flags.data.newflags)
	{
	  fprintf(out, "    has_title %s;\n", yesno[(int)defn->flags.data.titlebar]);
	  fprintf(out, "    has_vscroll %s;\n", yesno[(int)defn->flags.data.vscroll]);
	  fprintf(out, "    has_hscroll %s;\n", yesno[(int)defn->flags.data.hscroll]);
	  fprintf(out, "    has_close %s;\n", yesno[(int)defn->flags.data.closeicon]);
	  fprintf(out, "    has_back %s;\n", yesno[(int)defn->flags.data.backicon]);
	  fprintf(out, "    has_toggle %s;\n", yesno[(int)defn->flags.data.toggleicon]);
	  fprintf(out, "    has_adjust %s;\n", yesno[(int)defn->flags.data.adjusticon]);
	}
	else
	{
	  fprintf(out, "// old-style flags\n");
	  fprintf(out, "    has_title %s;\n", yesno[(int)defn->flags.data.hastitle]);
	  fprintf(out, "    has_vscroll %s;\n", yesno[(int)defn->flags.data.hasvscroll]);
	  fprintf(out, "    has_hscroll %s;\n", yesno[(int)defn->flags.data.hashscroll]);
	  fprintf(out, "    has_close %s;\n", yesno[(int)!defn->flags.data.nobackclose]);
	  fprintf(out, "    has_back %s;\n", yesno[(int)!defn->flags.data.nobackclose]);
	}
	fprintf(out, "    moveable %s;\n", yesno[(int)defn->flags.data.moveable]);
	fprintf(out, "    auto_redraw %s;\n", yesno[(int)defn->flags.data.autoredraw]);
	fprintf(out, "    is_pane %s;\n", yesno[(int)defn->flags.data.pane]);
	fprintf(out, "    no_bounds %s;\n", yesno[(int)defn->flags.data.nobounds]);
	if (defn->flags.data.scrollrq)
	{
	  if (defn->flags.data.scrollrqdebounced)
	    fprintf(out, "    scroll_events debounced;\n");
	  else
	    fprintf(out, "    scroll_events yes;\n");
	}
	else
	  fprintf(out, "    scroll_events no;\n");
	fprintf(out, "    back_window %s;\n", yesno[(int)defn->flags.data.backwindow]);
	fprintf(out, "    grab_keys %s;\n", yesno[(int)defn->flags.data.hotkeys]);
	fprintf(out, "    keep_on_screen %s;\n", yesno[(int)defn->flags.data.keeponscreen]);
	fprintf(out, "    ignore_right_extent %s;\n", yesno[(int)defn->flags.data.ignoreright]);
	fprintf(out, "    ignore_bottom_extent %s;\n", yesno[(int)defn->flags.data.ignorebottom]);
	/*
	 * open, top, fullsize, istoggling, focus, forceonce,
	 * dummy22/partiallyfullsize, dummy23/furniture
	 * aren't relevant in templates
	 */
	fprintf(out, "  }\n");
	if (defn->colours[0]==(char)0xff)
	{
	  fprintf(out, "  title_fg no_frame;\n");
	}
	else
	{
	  fprintf(out, "  title_fg %s;\n", colour_name(defn->colours[0],
		  defn->flags.data.realcolours));
	}
	fprintf(out, "  title_bg %s;\n", colour_name(defn->colours[1],
		defn->flags.data.realcolours));
	fprintf(out, "  work_fg %s;\n", colour_name(defn->colours[2],
		defn->flags.data.realcolours));
	fprintf(out, "  work_bg %s;\n", colour_name(defn->colours[3],
		defn->flags.data.realcolours));
	fprintf(out, "  scroll_out %s;\n", colour_name(defn->colours[4],
		defn->flags.data.realcolours));
	fprintf(out, "  scroll_in %s;\n", colour_name(defn->colours[5],
		defn->flags.data.realcolours));
	fprintf(out, "  title_hilight %s;\n", colour_name(defn->colours[6],
		defn->flags.data.realcolours));
	/* colours[7] is reserved */
	fprintf(out, "  work_area\n  {\n    %i, %i, %i, %i\n  }\n",
		defn->workarearect.min.x,
		defn->workarearect.min.y,
		defn->workarearect.max.x,
		defn->workarearect.max.y);
	fprintf(out, "  work_buttons %s;\n", button[defn->workflags.data.buttontype]);
	if ((int)defn->spritearea!=0)
	  fprintf(out, "  sprite_area %i;\n", (int)defn->spritearea);
	fprintf(out, "  min_size\n  {\n    %i, %i\n  }\n",
		defn->minsize.x,
		defn->minsize.y);
	fprintf(out, "  title_bar\n  {\n");
	{
	  int icon_type = defn->titleflags.data.text +
	                  defn->titleflags.data.sprite * 2 +
	                  defn->titleflags.data.indirected * 4;
	  switch (icon_type)
	  {
	   case 0:
	    // Rather dull
	    break;
	   case 1:
	    fprintf(out, "    text \"");
	    fprint_string(out, defn->title.text, wimp_MAXNAME);
	    fprintf(out, "\";\n");
	    break;
	   case 2:
	    fprintf(out, "    sprite \"");
	    fprint_string(out, defn->title.text, wimp_MAXNAME);
	    fprintf(out, "\";\n");
	    break;
	   case 3: /* very rare */
	    fprintf(out, "    text_and_sprite \"");
	    fprint_string(out, defn->title.text, wimp_MAXNAME);
	    fprintf(out, "\";\n");
	    break;
	   case 4:
	    // Again, rather dull
	    if (defn->title.indirecttext.validstring!=(void *)-1)
	    {
	      fprintf(out, "    validation \"");
	      fprint_string(out, block + index->offset +
			    (unsigned long)defn->title.indirecttext.validstring,
			    index->size -
			    (unsigned long)defn->title.indirecttext.validstring);
	      fprintf(out, "\";\n");
	    }
	    break;
	   case 5:
	   case 7:
	    fprintf(out, "    text \"");
	    fprint_string(out, block + index->offset +
			  (unsigned long)defn->title.indirecttext.buffer,
			  index->size -
			  (unsigned long)defn->title.indirecttext.buffer);
	    fprintf(out, "\";\n");
	    fprintf(out, "    indirected_size %i;\n",
		    defn->title.indirecttext.bufflen);
	    if (defn->title.indirecttext.validstring!=(void *)-1)
	    {
	      fprintf(out, "    validation \"");
	      fprint_string(out, block + index->offset +
			    (unsigned long)defn->title.indirecttext.validstring,
			    index->size -
			    (unsigned long)defn->title.indirecttext.validstring);
	      fprintf(out, "\";\n");
	    }
	    break;
	   case 6:
	    /*
	     * doesn't handle sprite control block pointer
	     * (but doesn't need to?)
	     */
	    if (defn->title.indirectsprite.nameisname==0)
	    {
	      fatal_error("you can't have an embedded sprite in a template file!");
	    }
	    else
	    {
	      fprintf(out, "    sprite \"");
	      fprint_string(out, block+ index->offset +
			    (unsigned long)defn->title.indirecttext.buffer,
			    index->size -
			    (unsigned long)defn->title.indirecttext.buffer);
	      fprintf(out, "\";\n");
	      fprintf(out, "    indirected_size %i;\n",
		      defn->title.indirectsprite.nameisname);
	    }
	    break;
	  }

	  fprintf(out, "\n");
/*	  fprintf(out, "    has_border %s;\n", yesno[(int)defn->titleflags.data.border]);*/
	  fprintf(out, "    h_centred %s;\n", yesno[(int)defn->titleflags.data.hcentre]);
	  fprintf(out, "    v_centred %s;\n", yesno[(int)defn->titleflags.data.vcentre]);
	  fprintf(out, "    r_justified %s;\n", yesno[(int)defn->titleflags.data.rightjustify]);
/*	  fprintf(out, "    is_filled %s;\n", yesno[(int)defn->titleflags.data.filled]);*/
/*	  fprintf(out, "    needs_help %s;\n", yesno[(int)defn->titleflags.data.needshelp]);*/
	  fprintf(out, "    sprite_halfsize %s;\n", yesno[(int)defn->titleflags.data.halfsize]);
	  fprintf(out, "    selected %s;\n", yesno[(int)defn->titleflags.data.selected]);
	  fprintf(out, "    shaded %s;\n", yesno[(int)defn->titleflags.data.shaded]);
	  fprintf(out, "    deleted %s;\n", yesno[(int)defn->titleflags.data.deleted]);
	  /* button flags */
	  fprintf(out, "    allow_adjust %s;\n", yesno[(int)defn->titleflags.data.allowadjust]);
	  /* esg */
	  if (defn->titleflags.data.font)
	  {
	    fprintf(out, "    font\n    {\n");
	    do_font(out, defn->titleflags.font.handle, font_base, font_limit);
	    fprintf(out, "    }\n");
	  }
	  /* else - colours handled elsewhere for titlebar */
	}
	fprintf(out, "  }\n");
	/* followed by defn->numicons (unsigned int) of type icon_block */
	if (defn->numicons>0)
	{
	  fprintf(out, "\n");
	  for (icon_num=0; icon_num<defn->numicons; icon_num++)
	  {
	    icon_block *icon_defn;
	    int icon_type;
	    /* index->offset is the start of the current window definition */
	    icon_defn = (icon_block *)(block + index->offset +
				       sizeof(window_block) +
				       icon_num * sizeof(icon_block));
	    /* Will bomb out if we run out of space */
	    temp_current=increase_offset(temp_current, block_len, sizeof(icon_block));
	    icon_type = icon_defn->flags.data.text +
	                icon_defn->flags.data.sprite * 2 +
	                icon_defn->flags.data.indirected * 4;
	    if (icon_defn->flags.data.deleted)
	      fprintf(out, "  deleted %i\n  {\n", icon_num);
	    else
	      fprintf(out, "  icon %i\n  {\n", icon_num);

	    fprintf(out, "    bounds\n    {\n      %i, %i, %i, %i\n    }\n",
		    icon_defn->workarearect.min.x,
		    icon_defn->workarearect.min.y,
		    icon_defn->workarearect.max.x,
		    icon_defn->workarearect.max.y);

	    switch (icon_type)
	    {
	     case 0:
	      // Rather dull
	      break;
	     case 1:
	      fprintf(out, "    text \"");
	      fprint_string(out, icon_defn->data.text, wimp_MAXNAME);
	      fprintf(out, "\";\n");
	      break;
	     case 2:
	      fprintf(out, "    sprite \"");
	      fprint_string(out, icon_defn->data.text, wimp_MAXNAME);
	      fprintf(out, "\";\n");
	      break;
	     case 3: /* very rare */
	      fprintf(out, "    text_and_sprite \"");
	      fprint_string(out, icon_defn->data.text, wimp_MAXNAME);
	      fprintf(out, "\";\n");
	      break;
	     case 4:
	      // Again, rather dull
	      if (icon_defn->data.indirecttext.validstring!=(void *)-1)
	      {
		fprintf(out, "    validation \"");
		fprint_string(out, block + index->offset +
			      (unsigned long)icon_defn->data.indirecttext.validstring,
			      index->size -
			      (unsigned long)icon_defn->data.indirecttext.validstring);
		fprintf(out, "\";\n");
	      }
	      break;
	     case 5:
	     case 7:
	      fprintf(out, "    text \"");
	      fprint_string(out, block+ index->offset +
			    (unsigned long)icon_defn->data.indirecttext.buffer,
			    index->size -
			    (unsigned long)icon_defn->data.indirecttext.buffer);
	      fprintf(out, "\";\n");
	      fprintf(out, "    indirected_size %i;\n",
		      icon_defn->data.indirecttext.bufflen);
	      if (icon_defn->data.indirecttext.validstring!=(void *)-1)
	      {
		fprintf(out, "    validation \"");
		fprint_string(out, block + index->offset +
			      (unsigned long)icon_defn->data.indirecttext.validstring,
			      index->size -
			      (unsigned long)icon_defn->data.indirecttext.validstring);
		fprintf(out, "\";\n");
	      }
	      break;
	     case 6:
	      /*
	       * doesn't handle sprite control block pointer
	       * (but doesn't need to?)
	       */
	      if (icon_defn->data.indirectsprite.nameisname==0)
	      {
		fatal_error("you can't have an embedded sprite in a template file!");
	      }
	      else
	      {
		fprintf(out, "    sprite \"");
		fprint_string(out, block+ index->offset +
			      (unsigned long)icon_defn->data.indirecttext.buffer,
			      index->size -
			      (unsigned long)icon_defn->data.indirecttext.buffer);
		fprintf(out, "\";\n");
		fprintf(out, "    indirected_size %i;\n",
			icon_defn->data.indirectsprite.nameisname);
	      }
	      break;
	    }

	    fprintf(out, "\n");
	    fprintf(out, "    has_border %s;\n", yesno[(int)icon_defn->flags.data.border]);
	    fprintf(out, "    h_centred %s;\n", yesno[(int)icon_defn->flags.data.hcentre]);
	    fprintf(out, "    v_centred %s;\n", yesno[(int)icon_defn->flags.data.vcentre]);
	    fprintf(out, "    r_justified %s;\n", yesno[(int)icon_defn->flags.data.rightjustify]);
	    fprintf(out, "    is_filled %s;\n", yesno[(int)icon_defn->flags.data.filled]);
	    fprintf(out, "    needs_help %s;\n", yesno[(int)icon_defn->flags.data.needshelp]);
	    fprintf(out, "    sprite_halfsize %s;\n", yesno[(int)icon_defn->flags.data.halfsize]);
	    fprintf(out, "    selected %s;\n", yesno[(int)icon_defn->flags.data.selected]);
	    fprintf(out, "    shaded %s;\n", yesno[(int)icon_defn->flags.data.shaded]);
	    fprintf(out, "    button_flags %s;\n", button[(int)icon_defn->flags.data.buttontype]);
	    fprintf(out, "    allow_adjust %s;\n", yesno[(int)icon_defn->flags.data.allowadjust]);
	    fprintf(out, "    esg %i;\n", (int)icon_defn->flags.data.esg);
	    if (icon_defn->flags.data.font)
	    {
	      fprintf(out, "    font\n      {\n");
	      do_font(out, icon_defn->flags.font.handle, font_base, font_limit);
	      fprintf(out, "      }\n");
	    }
	    else
	    {
	      fprintf(out, "    foreground %s;\n",
		      colour_name(icon_defn->flags.data.foreground, 0));
	      fprintf(out, "    background %s;\n",
		      colour_name(icon_defn->flags.data.background, 0));
	    }
	    fprintf(out, "  }\n");
	  }
	}
	fprintf(out, "}\n");
      }

      /* next! */
      current = increase_offset(current, block_len, sizeof(templ_index));
      index = (templ_index *)(block+current);
    }
  }
  return 0;
}

void do_font(FILE *out, int index, templ_fontinfo *font, unsigned long limit)
{
  templ_fontinfo *font_defn = font+index;
  (void)increase_offset(0, limit, sizeof(templ_fontinfo) * index);
  fprintf(out, "    font_name \"");
  fprint_string(out, font_defn->name, 40);
  fprintf(out, "\";\n");
  fprintf(out, "    font_size\n    {\n      %f, %f\n    }\n",
	  ((float)font_defn->size.x) / 16,
	  ((float)font_defn->size.y) / 16);
}

static char * colour[] =
{
  "white", "grey1", "grey2", "grey3",
  "grey4", "grey5", "grey6", "black",
  "blue", "yellow", "green", "red",
  "cream", "dark green", "orange", "light blue"
};

const char *colour_name(char col, int flags)
{
  static char int_col_num[10];
  if (col==(char)0xff)
    return "transparent";
  else if (flags==0)
  {
    if (col>=0 && col<=0xf)
      return colour[col];
    else
      return "<unknown>";
  }
  else
  {
    sprintf(int_col_num, "GCOL %3.3i", col);
    return int_col_num;
  }
}

unsigned int fprint_string(FILE *fp, char *ptr, unsigned long limit)
{
  unsigned int i=0;
  while (ptr[i]!=13 && i<limit)
  {
    fputc(ptr[i], fp);
    i++;
  }
  return i;
}

unsigned int chomp_string(char *ptr)
{
  unsigned int i=0;
  while (*(ptr++)!='\n') i++;
  *ptr=0;
  return i;
}

unsigned long increase_offset(unsigned long c, unsigned long l, unsigned long i)
{
  c+=i;
  if (c > l)
    fatal_error("overran bounds of %li, starting at %li, by %li", l, c-i, c-l);
  return c;
}

/* Some useful bits and bobs */

void *
xmalloc (int size)
{
  void *ptr = malloc (size);
  if (!ptr)
  {
    fprintf(stderr, "%s: %salloc failed\n", "m", program_name);
    exit (2);
  }
  return ptr;
}


void *
xrealloc (void *ptr, size_t size)
{
  ptr = realloc (ptr, size);
  if (!ptr)
  {
    fprintf(stderr, "%s: %salloc failed\n", "re", program_name);
    exit (2);
  }
  return ptr;
}


void fatal_error(char *format, ...)
{
  va_list ap;
  va_start(ap, format);
  vfprintf(stderr, format, ap);
  putc('\n', stderr);
  va_end(ap);
  exit(EXIT_FAILURE);
}

void do_error(char *format, ...)
{
  va_list ap;
  va_start(ap, format);
  vfprintf(stderr, format, ap);
  putc('\n', stderr);
  va_end(ap);
}

/* Slurps the file into core. *used_ptr is filled with the length of data.
 * Immediately after the data will be a NUL. You need to free up the returned
 * block. Read in as binary.
 *
 * Remember that fatal_error() calls exit(), which will close our open filehandles.
 */
void *slurp_file(const char *file, unsigned long *used_ptr)
{
  unsigned long current, used;
  long length=0;
  void *block;
  FILE *fp;

  if (file==NULL || strcmp(file, "-")==0)
    fp = stdin;
  else
    fp = fopen(file, "rb");

  if (fp==NULL)
    return NULL;

#ifndef NO_FSEEK
  if (fp!=stdin) /* don't even bother trying on the standard input */
  {
    fseek(fp,0,SEEK_END);
    length=ftell(fp);
    fseek(fp,0,SEEK_SET);
  }
  if (length<=0)
#endif
    length=20*1024;
  /* length is a suggestion as to the page size to use */

  block = xmalloc((size_t)length);

  current = (unsigned long)length;
  used=0;
  while (!feof(fp) && !ferror(fp))
  {
    size_t t;
    if (used+length > current)
    {
      block = xrealloc(block, (size_t)(current+(unsigned long)length));
      current+=(unsigned long)length;
    }
    t = fread(block+used, 1, (size_t)length, fp);
    used += t;
  }
  if (ferror(fp))
  {
    if (file==NULL || strcmp(file, "-")==0)
      fatal_error("Error while reading from stdin.");
    else
      fatal_error("Error while reading file %s.", file);
  }
  if (fp!=stdin)
    fclose(fp);
  if (used >= current)
  {
    block = xrealloc(block, (size_t)(current+1));
    current+=(unsigned long)length;
    ((char *)block)[used]=0; /* terminate with a NUL (don't increment used) */
  }

  *used_ptr = used;
  return block;
}

void
help(void)
{
  printf (
"usage: %s [options] [--output OUTFILE] [--input] INFILE\n"
"\n"
"  -i, --input INFILE      template file read from INFILE;\n"
"                          stdin used if not given\n"
"                          if -i not given, a single argument will be used\n"
"  -o, --output OUTFILE    textual output written to OUTFILE;\n"
"                          stdout used if not given\n"
"\n"
"  -h, --help              display this help message and quit\n"
"  -V, --version           display version string and quit\n"
    , program_name);
  exit(0);
}
