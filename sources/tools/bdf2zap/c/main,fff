/*////////////////////////////////////////////////////////
//
//  BDF2Zap : BDF to Zap font file converter
//
//  © Zap developers, written by Christian Ludlam
//
//  $Id: main,fff,v 1.3 2004-10-21 01:40:11 christian Exp $
//
*/

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <ctype.h>

#define VERSION "1.00 (18-Mar-04)"

#define CHUNKSIZE 256
#define SIZE 65536 // maximum number of characters storable

int lineno;

int nglyphs;  // number of glyphs defined
int maxglyph; // highest numbered glyph

int xsize;
int ysize;

int cbpl;
int cbpc;

typedef struct Glyph Glyph;
typedef struct Command Command;

// structures stored in the Zap font file
typedef struct Chunk Chunk;
typedef struct Header Header;

typedef struct OldHeader OldHeader;

#define MAGIC 0x4655525A // ZRUF

char buf[65536];

unsigned char *data;

// pointer to list of glyphs in each chunk
Glyph *glyphs[SIZE / CHUNKSIZE];

Glyph *null_glyph; // the glyph to use for otherwise undefined ones

struct Glyph
{
    Glyph *next;

    long fpos;    // file position of definition
    int num;      // encoding number
    int lineno;   // line number of fpos
};

struct Command
{
    char *name;
    int len;
};

struct Chunk
{
    int num;             // chunk number (encoding number BIC &FF)
    int nglyphs;         // number of glyphs in chunk
    int foff;            // file offset of start of chunk (from start of file)
    int res0;            // reserved (must be 0)
};

struct Header
{
    int magic;           // font file identifier
    int res0;            // reserved (must be 0)
    int xsize;           // x size in pixels
    int ysize;           // y size in pixels
    int chunk_dir_size;  // size of chunk directory
    int null_glyph;      // file offset of null glyph / 0 if none
    int res2;            // reserved (must be 0)
    int res3;            // reserved (must be 0)
};

struct OldHeader
{
    char magic[8];       // font file identifier
    int xsize;           // x size in pixels
    int ysize;           // y size in pixels
    int first;           // first character defined
    int last;            // last character defined
    int res2;            // reserved (must be 0)
    int res3;            // reserved (must be 0)
};

Command commands[] =
{
    #define DEFCOM(a) {#a, sizeof(#a)-1},
#ifdef RISCOS
    #include "commands.h"
#else
    #include "h/commands,fff"
#endif
    #undef DEFCOM
};

enum
{
    #define DEFCOM(a) COM_##a,
#ifdef RISCOS
    #include "commands.h"
#else
    #include "h/commands,fff"
#endif
    #undef DEFCOM

    COM_NONE
};

FILE *in;
FILE *out;
FILE *base;

OldHeader oldheader;
Header    header;
Chunk     chunk;

char txtable[CHUNKSIZE];

void help(void)
{
    printf( "bdf2zap v"VERSION" © Zap developers\n\n"
            "usage: bdf2zap <infile> <outfile> [<basefile>]\n\n"
            "   infile:   source BDF font file\n"
            "   outfile:  destination Zap font file\n"
            "   basefile: base old-style Zap font file\n");

    exit(0);
}

void error(char *format, ...)
{
    va_list ap;

    va_start(ap, format);
    vfprintf(stderr, format, ap);
    putc('\n', stderr);
    va_end(ap);

    if (in)   fclose(in);
    if (out)  fclose(out);
    if (base) fclose(base);

    exit(EXIT_FAILURE);
}

int decode(char *com)
{
    int i;

    for (i = 0; i < COM_NONE; i++)
        if (strncmp(com, commands[i].name, commands[i].len) == 0 && isspace(com[commands[i].len]))
            break;

    return i;
}

char *skipword(char *s)
{
    while (!isspace(*s))
        s++;

    while (isspace(*s))
        s++;

    return s;
}

// get the next line, or NULL on error / eof
char *getline(void)
{
    lineno++;

    return fgets(buf, sizeof(buf), in);
}

// skip to a specific command and return its arguments
char *skiptocom(int c)
{
    char *s;

    while (1)
    {
        s = getline();
        if (s)
        {
            if (decode(s) == c)
                break;
        }
        else
        {
            error("Error: Premature end of file");
        }
    }

    return skipword(s);
}


void *mem(int size)
{
    void *ret;

    ret = malloc(size);
    if (!ret)
        error("Out of memory");

    return ret;
}

// table of reversed nybbles
unsigned char reversed[] =
{
    0x00, // 0
    0x08, // 1
    0x04, // 2
    0x0c, // 3
    0x02, // 4
    0x0a, // 5
    0x06, // 6
    0x0e, // 7
    0x01, // 8
    0x09, // 9
    0x00, // :
    0x00, // ;
    0x00, // <
    0x00, // =
    0x00, // >
    0x00, // ?
    0x00, // @
    0x05, // a
    0x0d, // b
    0x03, // c
    0x0b, // d
    0x07, // e
    0x0f  // f
};

int acorn_extended_latin1[] =
{
    0x20ac,
    0x0174,
    0x0175,
    0xffff,
    0xffff,
    0x0176,
    0x0177,
    0xffff,
    0xffff,
    0xffff,
    0xffff,
    0xffff,
    0x2026,
    0x2122,
    0x2030,
    0x2022,

    0x2018,
    0x2019,
    0x2039,
    0x203a,
    0x201c,
    0x201d,
    0x201e,
    0x2013,
    0x2014,
    0x2212,
    0x0152,
    0x0153,
    0x2020,
    0x2021,
    0xfb01,
    0xfb02
};

int hexval(char *s)
{
    int ret;

    ret  = reversed[s[0] - '0'];
    ret |= reversed[s[1] - '0'] << 4;

    return ret;
}

void write(void *ptr, int size)
{
    if (fwrite(ptr, size, 1, out) != 1)
        error("output error\n");
}

Glyph *find_glyph(int num)
{
    Glyph *g;

    for (g = glyphs[num / CHUNKSIZE]; g && g->num != num; g = g->next)
        ;

    return g;
}


void output_glyph(Glyph *g)
{
    char *s;
    int j, k;

    fseek(in, g->fpos, SEEK_SET);
    lineno = g->lineno;

    s = skiptocom(COM_BBX);
    if (strtol(s, &s, 10) != xsize || strtol(s, NULL, 10) != ysize)
        error("Error: bounding box incorrect at line %d", lineno);

    skiptocom(COM_BITMAP);

    for (j = 0; j < ysize; j++)
    {
        s = getline();

        for (k = 0; k < (xsize + 7) / 8; k++)
        {
            data[(j * cbpl) + k] = hexval(s);
            s += 2;
        }
    }

    if (decode(getline()) != COM_ENDCHAR)
        error("Syntax error at line %d: expected ENDCHAR", lineno);

    write(data, cbpc);
}


void output_glyph_or_null(int num)
{
    Glyph *g;
    int i;

    g = find_glyph(num);

    if (g)
    {
        output_glyph(g);
    }
    else
    {
        if (base && num >= oldheader.first && num <= oldheader.last)
        {
            // copy glyph from base file
            printf("Copying glyph %d from base file\n", num);

            fseek(base, (long) (((num - oldheader.first) * cbpc) + sizeof(oldheader)), SEEK_SET);
            if (fread(data, cbpc, 1, base) != 1)
                error("Read error from base file");

            write(data, cbpc);
        }
        else if (null_glyph)
        {
            output_glyph(null_glyph);
        }
        else
        {
            for (i = 0; i < cbpc; i++)
                fputc(0, out);

            printf("Warning: No glyph to put in character %d\n", num);
        }
    }
}

int main(int argc, char *argv[])
{
    Glyph **pg;
    Glyph *g;

    long foff;
    int i, j;
    char *s;

    int total_overhead;
    int overhead;
    int numchunks = 0;
    int num;

    if (argc < 2 || argv[1][0] == '-')
        help();

    in = fopen(argv[1], "rb");
    if (!in)
        error("unable to open %s file", "input");

    out = fopen(argv[2], "wb");
    if (!out)
        error("unable to open %s file", "output");

    if (argv[3])
    {
        base = fopen(argv[3], "rb");
        if (!base)
            error("unable to open %s file", "base");

        fread(&oldheader, sizeof(oldheader), 1, base);

        if (strncmp(oldheader.magic, "ZapFont\r", 8))
            error("Base font is not a valid old-style Zap Font");
    }

    // get the start of a font
    s = skiptocom(COM_STARTFONT);
    if (strncmp(s, "2.1", 3) != 0 && strncmp(s, "2.2", 3) != 0)
        printf("Warning: unsupported file version %s\n", s);

    // find the bounding box
    s = skiptocom(COM_FONTBOUNDINGBOX);
    if (sscanf(s, "%i %i %i %i", &xsize, &ysize, &i, &j) < 4)
        error("Syntax error at line %d", lineno);

    printf("Font size %d x %d\n", xsize, ysize);

    // validate the base file
    if (base && (oldheader.xsize != xsize || oldheader.ysize != ysize))
        error("Error: base font size incorrect");

    // work out cbpl and cbpc
         if (xsize <= 8)  cbpl = 1;
    else if (xsize <= 16) cbpl = 2;
    else cbpl = (xsize + 31) & 31;

    cbpc = cbpl * ysize;

    printf("cbpl: %d\ncbpc: %d\n\n", cbpl, cbpc);

    data = mem(cbpc + 8);

    // build a list of glyphs
    while (1)
    {
        s = getline();
        if (s)
        {
            if (decode(s) == COM_STARTCHAR)
            {
                // gives position of line after startchar
                foff = ftell(in);
                j    = lineno;

                s   = skiptocom(COM_ENCODING);
                num = atoi(s);

                if (num < SIZE)
                {
                    g = mem(sizeof(Glyph));

                    g->num    = num;
                    g->fpos   = foff;
                    g->lineno = j;

                    if (num == 0)
                    {
                        null_glyph = g;
                        g->next = NULL;
                    }
                    else
                    {
                        if (glyphs[num / CHUNKSIZE] == NULL)
                            numchunks++;

                        // build the list in order
                        for (pg = &glyphs[num / CHUNKSIZE]; *pg && (*pg)->num < num; pg = &(*pg)->next)
                            ;

                        g->next = *pg;
                        *pg     = g;
                    }

                    // keep the statistics
                    nglyphs++;
                    if (g->num > maxglyph)
                        maxglyph = g->num;
                }
                else
                {
                    printf("Warning: ignoring out of range character %x\n", num);
                }
            }
        }
        else
        {
            break;
        }
    }

    printf("found %d glyphs in %d chunks\n", nglyphs, numchunks);

    //output the header
    header.magic          = MAGIC;
    header.xsize          = xsize;
    header.ysize          = ysize;
    header.chunk_dir_size = numchunks * sizeof(Chunk);
    header.null_glyph     = null_glyph ? sizeof(Header) + header.chunk_dir_size : 0;
    write(&header, sizeof(header));

    foff = (long) ((sizeof(Header) + header.chunk_dir_size) + (null_glyph ? cbpc : 0));

    // output the chunk directory entry for chunk 0 (forced to be full)
    chunk.num     = 0;
    chunk.nglyphs = CHUNKSIZE;
    chunk.foff    = (int) foff;
    chunk.res0    = 0;
    write(&chunk, sizeof(Chunk));

    foff += (long) (CHUNKSIZE * cbpc);

    // output the rest of the chunk directory entries
    for (i = 1; i < SIZE / CHUNKSIZE; i++)
    {
        j = 0;

        for (g = glyphs[i]; g; g = g->next)
            j++;

        if (j > 0)
        {
            chunk.num     = i * CHUNKSIZE;
            chunk.nglyphs = j;
            chunk.foff    = (int)foff;
            chunk.res0    = 0;

            //printf("Chunk %04x at %ld contains %d glyphs\n", chunk.num, foff, j);

            write(&chunk, sizeof(Chunk));

            foff += (long) (j * cbpc);
            if (j < CHUNKSIZE)
                foff += CHUNKSIZE;
        }
    }

    // output the null glyph
    if (null_glyph)
        output_glyph(null_glyph);

    // output chunk 0
    for (i = 0; i < 0x20; i++)
    {
        g = find_glyph(i);

        if (g)
            output_glyph(g);
        else if (base)
            output_glyph_or_null(i);
        else
            output_glyph_or_null(i + '@');
    }

    for (i = 0x20; i < 0x7f; i++)
        output_glyph_or_null(i);

    g = find_glyph(0x7f);
    if (g)
        output_glyph(g);
    else
        for (i = 0; i < cbpc; i++)
            fputc(0xff, out);

    for (i = 0; i < 0x20; i++)
    {
        if (acorn_extended_latin1[i] != 0xffff)
            output_glyph_or_null(acorn_extended_latin1[i]);
        else
            output_glyph_or_null(i + 0x80);
    }

    for (i = 0xA0; i < 0x100; i++)
        output_glyph_or_null(i);

    // output the rest of the chunks
    for (i = 1; i < SIZE / CHUNKSIZE; i++)
    {
        // output the translation table
        memset(txtable, 0, sizeof(txtable));

        j = 1;

        for (g = glyphs[i]; g; g = g->next)
            txtable[g->num & (CHUNKSIZE-1)] = (char) j++;

        if (j > 1)
        {
            if (j < CHUNKSIZE)
                write(txtable, sizeof(txtable));

            // now the glyphs
            for (g = glyphs[i]; g; g = g->next)
                output_glyph(g);
        }
    }

    total_overhead = 0;
    numchunks      = 0;

    for (i = 0; i < 65536 / CHUNKSIZE; i++)
    {
        j = 0;

        for (g = glyphs[i]; g; g = g->next)
            j++;

        if (j)
        {
            numchunks++;

            overhead = (j == CHUNKSIZE ? 0 : CHUNKSIZE);

            total_overhead += overhead;

            printf("%4d glyphs in chunk %04x  (%3d bytes overhead, %3d%%)\n", j, i * CHUNKSIZE, overhead, (overhead*100)/((j*cbpc)+(overhead)));
        }
    }

    printf("\n%d chunks used, %d glyphs defined, %d bytes, usage %d%%\n", numchunks, nglyphs, nglyphs*cbpc, (nglyphs*100)/(numchunks*CHUNKSIZE));
    printf("translation overhead %d bytes, %d%%\n", total_overhead, (total_overhead * 100) / ((nglyphs * cbpc) + total_overhead));

    fclose(in);
    fclose(out);

    if (base)
        fclose(base);

    return EXIT_SUCCESS;
}

