; Contains code to buffer undo data and act on it.
; $Id: Undo,fff,v 2.3 2001-11-05 13:35:33 james Exp $

; *** Important notes on symbolisation ***
;
; I'm only part way through converting this to use symbols instead of
; hard-coded constants. I've now got the command flags and masks working
; (I think :-), and the next step is to figure out exactly what the
; structure is, and start using constants wherever possible for that.
; I have a feeling that's very tricky, since this is all variable-length
; structure stuff, but we'll see.
;			-- sja

 GET h.ZapHeader
 GET h.TMTVars
 GET h.AlterTxt
 GET h.CreateFile
 GET h.Heap
 GET h.CreateWind

 IMPORT insertsomespaces
 IMPORT plot_caret
 IMPORT message_send
 IMPORT send_data_save
 IMPORT user_message_act
 IMPORT message_ack

 EXPORT undo_command
 EXPORT redo_command
 EXPORT yank_command
 EXPORT yank_cancel
 EXPORT add_yank_region
 EXPORT buffer_command
 EXPORT free_undo
 EXPORT turn_off_undo
 EXPORT paste_command
 EXPORT pastegc_command
 EXPORT gc_claimentity
 EXPORT gc_datarequest

ubuf_size		* &200		; increment size for undo buffer
udata			* &07		; undo data block increment mask

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; New format of undo buffers					;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; f_ptr		 =	start address of file
; f_ptr+f_bufl	 =	end of file / start of undo buffer
; f_ptr+f_blklen =	end of undo buffer / start of next file
;
; f_ulen	= length of valid data in the undo buffer
; f_undo	= offset of the undo pointer in the undo buffer
; (f_undop and f_undoptr no longer used)
;
; Undo buffer consists of a list of blocks of the following format:
;
;	<block length>	(currently 4 bytes - may be compressed later)
;	<block type>	(one byte)
;	<block data>	(variable length)
;	<block length>	(as above)
;
; Length of block at end enables backward tracing as well.
; Blocks are NOT word aligned.
;
; Block types are:
;
; &00:	Fast undo pointer. <data>=offset in undo buffer to jump to on
;	a fast undo. (skipping the full undo tree)
; &10:	Fast redo pointer. <data>=offset in undo buffer of block jumped
;	back from. Ie, this is the block to jump forward to.
; &01:	Insert text operation:
;	<data>= <offset in file text was inserted>
;		<in lined inserted data>
; &02:	Delete text operation:
;	<data> as for insert text except the deleted text is given.
; &03:	Replace text (forward) operation:
;	<data>=	<offset in file text was replaced>
;		<original text>
;		<replacement text> (both texts the same length)
;	(foward refers to the cursor being placed at the end after
;	replacement, so at the beginning after undoing).
; &04:	Replace text (backwards) operation:
;	<data> as above. Only difference is cursor position.
; &05:	Delete text operation:  (cursor at start)
;	<data> as for insert text except the deleted text is given.
; &06:	Insert text operation: (cursor at start)
;	<data>= <offset in file text was inserted>
;		<in lined inserted data>
; &07:	Start of a multiple operation marker. (see Zap_StartOp) No data.
; &17:	End of a muliple operation marker. (see Zap_StopOp) No data.

; UNUSED LAYOUT STRUCTURE -- I'm fairly certain that the above
; comments this is based on are actually totally wrong (see E-File).
;			-- sja
;			^	0
;undo_Length		#	4
;undo_Type		#	1
;undo_Offset		#	4	; used by everything that has data
;undo_Data		#	0	; most have one (or two same-sized) data area(s)

undo_Length		*	4	; length field tends to be here ...

undo_Type_fastundo	*	(0x00)
undo_Type_fastredo	*	(0x10)
undo_Type_startop	*	(0x07)
undo_Type_stopop	*	(0x17)

command_mask		*	(0x7)	; extract the actual command number. Note that undo-internal
					; commands (eg: undo_Type_stopop) come out as either 0 or 7
					; when masked with this ... hence, below, we deal with them:
command_Illegal		*	(7)	; a command number which cannot exist. It's used internally,
					; yes, but not in the places you'd test for this. Note that
					; you also want to test that the command number isn't 0 ...
					; do this by:
					;  ANDS Rn, Rn, #command_mask
					;  CMPNE Rn, #command_Illegal
					;  ... evasive action on EQ ...
					; This is a little evil, and should probably be wrapped in
					; a nice macro (IS_ILLEGAL Rn[, Rm] or something).

command_LongOp		*	(command_Illegal)	; undo special op
command_FastOp		*	(0)			; undo special op

undo_Type_mask		*	(0x17)
undo_Type_shift		*	(26)

; These are within a de-shifted undo block. b0-b2 give
; the command_ type.
undo_Block_Start	*	(1:SHL:5)
undo_Block_IsAtomic	*	(1:SHL:4)
undo_Block_DontFreeData	*	(1:SHL:3)

; To make life worse, we use b25 (ie: the top of the data area below the
; command) to indicate that this is a region select action as well as whatever
; else. ie: we transfer command_SelectRegion into undo_SelectRegion:
undo_SelectRegion	*	(1:SHL:25)

; Look at what we've got left of this first word. We've cleared out b25-b31,
; so we're left with b0-b24. This is 0x01ffffff; the inverse is 0xfe000000.
undo_Information_mask	*	(0xfe000000)
undo_Data_mask		*	(0x01ffffff)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Undo and redo							;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;E R9=file
;X nulls yank / calls pre input / returns CS if no undo #

pre_undo
 FNJSR
 FNLDR R0,yank_len
 FNSTR R0,yank_off
 BL pre_input
 FNRTS VS
 LDR R0,[R9,#f_flags]
 AND R0,R0,#flags_UndoSupported
 EOR R0,R0,#flags_UndoSupported		; 0 undo 1 no undo
 CMP R0,#flags_UndoSupported
 FNRTS				; CS if no undo

;E R0=suggested num of chars R1=0 fast undo/1 full undo R9=file
;X this number of characters undone #

undo_command
 FNJSR "R1-R11"
 MOV R2,R0
 MOV R10,R1
 BL pre_undo			; check text ready for input
 FNRTS VS
 FNRTS CS	; no undo supported
 LDR R7,[R9,#f_uptr]
 LDR R6,[R9,#f_undo]
 LDR R8,[R9,#f_undop]
un7
; now...
 CMP R6,#0
 BMI un9b			; run out data (does this work?)

 TEQ R8,#0			; ???
 BNE un8			; found a command to undo
 MOV R0,R6
 BL un_backward
 MOVCS R6,#0
;was...
; BCS un9			; run out data (new 9a)
;now...
 BCS un9a			; run out data
 MOV R6,R0
 ADD R0,R7,R6			; this command
 LDR R14,[R0]			; get command

 MOV R1,R14,LSR #undo_Type_shift
 AND R1,R1,#undo_Type_mask	; actual command number
 TEQ R1,#undo_Type_stopop
 BEQ un22			; multiop (end)
 TEQ   R1,#undo_Type_startop	; mutilop start (whoops)
 TEQNE R1,#undo_Type_fastredo	; fast redo (whoops)
 BEQ un7			; loop
 TEQ R1,#undo_Type_fastundo
 LDRNE R8,[R0,#4]
 BNE un7			; proper command
 TEQ R10,#0
 BNE un7			; fast undo not requested
 LDR R8,[R0,#4]			; new undop
 MOV R0,#undo_Type_fastredo
 ADD R1,R6,#8			; next command (at end of fast redo)
 BIC R6,R14,#&FE000000		; new undo ; FC000
 BL buffer_command		; buffer fast redo pointer
 BVC un7
 FNRTS
un8
 BL undo_invert_command		; find inverse command
 FNRTS VS
 MOV R10,R0			; save command
 PUSH "R1-R5"
 BL do_command
 PULL "R1-R5"			; ???
 MOVVC R0,R10
 BLVC buffer_command		; execute and buffer command
 SUBVC R8,R8,R2			; reduce undop by number done
un9
 STRVC R6,[R9,#f_undo]
 STRVC R8,[R9,#f_undop]		; save vals
un9a
un9b
 FNRTS
un22
 BL undo_start_operation	; start a multiop
 MOV R0,#undo_Type_startop
 BL buffer_command		; add marker for command start
 BVS un24
; try next command...
un23
 MOV R0,R6
 BL un_backward			; move back
 MOVCS R6,#0			; reached start
 BCS un24			; out of data
 MOV R6,R0			; new command to undo
 ADD R0,R0,R7			; start address
 LDR R2,[R0,#4]			; number of chars
 MOV R8,R2
 BL undo_invert_command		; find inverse command
 BVS un24
 ANDS R14,R0,#7
 EORNES R14,R14,#7
 BEQ un24			; out of data
 MOV R10,R0			; save command
 PUSH "R1-R5"
 BL do_command
 PULL "R1-R5"			; ???
 BVS un24
 MOV R0,R10
 BL buffer_command		; execute and buffer command
 BVC un23			; try next command
un24
 BL undo_stop_operation		; display result
 MOVVC R0,#undo_Type_stopop
 BLVC buffer_command		; add marker at the end
 MOVVC R8,#0			; finished this command
 BVC un9			; save new pointers
 FNRTS

;E R0=suggested number of chars to redo R9=file
;X last undo redone #

redo_command
 FNJSR "R1-R11"
 MOV R2,R0			; save suggested num chars
 BL pre_undo			; check text ready for input
 FNRTS VS
 LDRCC R7,[R9,#f_uptr]
 LDRCC R6,[R9,#f_ulen]
 LDRCC R10,[R9,#f_undo]
 LDRCC R11,[R9,#f_undop]		; current undo/undop
 CMPCC R10,R6
 BLCC redo_back
 CMPCC R10,R6
 FNRTS CS			; nothing to redo
 TEQ R0,#undo_Type_stopop
 BEQ un25			; redo whole of multiop
 TEQ R0,#undo_Type_startop
 BEQ un12			; skip it
 ADD R0,R7,R6
 LDR R8,[R0,#undo_Length]	; get length of command
 BL undo_invert_command		; find inverted command
 BLVC do_command		; and do it
 BLVC unbuffer_command		; remove this command from the undo buffer
 FNRTS VS			; nothing to redo
 SUB R8,R8,R2			; number of chars left in this command
 ADD R11,R11,R2			; number of characters done in inverse
 CMP R8,#0
 BGT un10			; still some left
un12
 MOV R0,R10			; so increment undo to next one
 BL un_forward
 MOV R10,R0
 BCS un15
 ADD R0,R7,R10			; address of next instruction
 LDR R14,[R0]
 TST R14,#&3C000000
 BEQ un12			; not a proper instruction
un15
 MOV R11,#0			; move undo pointers forward
 BL redo_back			; move redo pointer back to valid command
un10
 MOV R0,R6
 BL un_forward
 MOV R6,R0			; and forward for new end of buffer
 CMP R10,R6
 MOVCS R10,R6
 MOVCS R11,#0			; clip overflowing undo pointers
 STR R6,[R9,#f_ulen]
 STR R10,[R9,#f_undo]
 STR R11,[R9,#f_undop]
 FNRTS

un25
 BL undo_start_operation
un26
 MOV R0,R10
 BL un_forward
 MOV R10,R0			; we've undone that one
 MOV R11,#0			; done none of the next
 BL redo_back

 LDR R14,[R9,#f_ulen]
 CMP R10,R14			; was compare with R6 - bug.
				; hmm, this never seems to fire, though...

 BCS un27			; nothing left to redo...
 ADD R0,R7,R6			; command
 LDR R8,[R0,#undo_Length]
 MOV R2,R8			; amount to redo
 BL undo_invert_command		; find inverted command
 BVS un27
 ANDS R14,R0,#&07
 EORNES R14,R14,#7
 BEQ un27			; end of multiop
 BLVC do_command		; and do it
 BLVC unbuffer_command		; remove this command from the undo buffer
 BVC un26				; loop to next command
un27
 BL undo_stop_operation
 BVC un12			; this command done
 FNRTS

;\E R6=ulen R7=uptr R10=undo R11=undop
;\X R6=first previous proper instruction (1-7)
;   R0=instruction number &17, R10/R11 updaded by fast redos

redo_back
 FNJSR "R1"
un11
 MOV R0,R6
 BL un_backward
 MOVCS R6,#0
 FNRTS CS		; reached start of buffer !
 MOV R6,R0
 ADD R0,R7,R6			; address of previous instr
 LDR R14,[R0]			; previous instruction
 MOV R1,R14,LSR#undo_Type_shift
 ANDS R0,R1,#undo_Type_mask
 BEQ un11			; a fast undo (shouldnt be there!!)
 TEQ R0,#undo_Type_fastredo
 FNRTS NE		; found a proper instruction
 BIC R10,R14,#&FE000000		; a fast redo to this point
 MOV R11,#0
 B un11

local_yank_temp_col
 DCD 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; YANK-related stuff...
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;E R8-R10 input caret to yank at
;X last blocks before yank_off yanked #

yank_command
 FNJSR "R6"
 BL possiblystorecolumn
 FNLDR R6,yank_off		; current yank offset
 BL yank_cancel			; pre_input and cancel _off=_len
 BLVC yank_paste_command
 FNRTS VS
 CMP R6,#0			; was an entry found
 FNSTR R6,yank_off,PL		; new yank offset
 FNRTS

possiblystorecolumn
 FNJSR
 FNLDR R1,yank_off
 FNLDR R0,yank_len
 CMP R1,R0			; any yank to cancel?
 LDRCS R1,[R10,#c_col]
 STRCS R1,local_yank_temp_col
 FNRTS

;E R6=offset in yank buffer to start from R8-R10
;X R6=new yank_off /-ve if none. One yank command pasted. #

yank_paste_command
 FNJSR "R1-R5,R7"
 FNLDR R7,yank_ptr		; start of yank buffer
 BL start_operation		; may be multiple (eg ctrl K's)
 LDR R4,[R10,#c_off]		; paste offset
un17
 SUBS R6,R6,#8			; move back one
 BMI un30			; run out of data
 ADD R1,R7,R6			; block address
 LDR R5,[R1]			; get the file/address
 CMN R5,#1
 BEQ un17			; -1 => entry is dead
 BIC R0,R5,#3<<30		; actual address/offset
 LDR R2,[R1,#4]			; paramter (off/len)
 TST R5,#1<<31
 BNE un28			; actual block
 PUSH "R9"
 BL conv_file_off
 LDR R3,[R9,#f_uptr]
 PULL "R9"		; get R3=start of undo
 ADD R3,R3,R2			; entry address
 LDR R2,[R3,#undo_Length]
 LDR R3,[R3,#8]			; data address
 B un29
un28
 MOV R3,R0			; address
un29
 BL insertsomespaces		; code seems ok.
 ADD R1,R4,R0			; start of region (<cur) & allow for spaces
 MOV R0,#(command_Atomic :OR: command_DontUpdateInputCaret :OR: undo_Block_DontFreeData :OR: command_Insert)
 BL execute_command		; perform the yank by inserting text
 BVS un30
 TST R5,#1<<30
 BNE un17			; more to do (eg ctrl K's)
un30
 BL stop_operation
 FNRTS

;X any current yank cancelled and old text deleted #

yank_cancel
 FNJSR "R1,R9"
 FNLDR R1,yank_off
 FNLDR R0,yank_len
 CMP R1,R0			; any yank to cancel?
 FNRTS CS
 FNLDR R0,yank_file		; last yanked file
 MOV R1,R9
 BL conv_file_off		; get R9
 CMP R1,R9			; in this file?
 FNRTS NE	; no: don't redo.
 MOV R0,#0
 STR R0,[R9,#f_undo]
 STR R0,[R9,#f_undop]		; pretend yank was an undo
 MOV R0,#1
 BL redo_command		; redo last command
 FNRTS VS
 LDR R0,[R9,#f_ulen]		; new buffer length
 STR R0,[R9,#f_undo]
 MOV R14,#0			; and reset undo pointers
 STR R14,[R9,#f_undop]		; (as they were by yank start)
 FNLDR R0,yank_len
 FNSTR R0,yank_off		; no yank on stack now

 LDR R0,local_yank_temp_col
 STR R0,[R10,#c_col]
 BL plot_caret
 FNRTS

;E R8-R10 input caret to paste at
;X last deleted block pasted #

paste_command
 FNJSR "R6"
 FNLDR R6,yank_len
 FNSTR R6,yank_off		; start at end
 BL yank_paste_command		; insert the block
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Global Clipboard support - SJA			   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

message_claimentity * 15
message_datarequest * 16

;E R8-R10 input caret to paste at

pastegc_command
 FNLDR r0,opt_switches          ; opt_switches word
 ANDS r0,r0,#bit_got_gclip	; do we own the GC currently?
 BNE paste_command		; lr preserved for return

 FNJSR
 SUB r13,r13,#48		; some space for the message
 MOV r1,r13

 LDR r2,[r8,#0]
 STR r2,[r1,#20]
 MOV r2,#0

 STR r2,[r1,#24]		; internal handle (ignored)
 STR r2,[r1,#28]		; x position to drop on (irrelevant)
 STR r2,[r1,#32]		; y position to drop on (irrelevant)

 MOV r3,#4
 STR r3,[r1,#36]		; flags (send data from clipboard)

 LDR r0,[r9,#f_load]		; get load address
 BL calc_ftype			; returns in r0, or CC and r0=load addr
 MOVCC r0,#&1000
 SUBCC r0,r0,#3			; ask for data if it's an exec/load file
 STR r0,[r1,#40]
 MVN r3,#0
 STR r3,[r1,#44]		; end of filetype list (send native otherwise)

 MOV R0,#1
 FNSTR R0,opt_temporary
 MOV r6,r10			; pass as r11 to reply$l
 MOV r0,#message_datarequest	; r0 needs to include flags, so:
 ORR r0,r0,#(sendmessage_RecordAndCall :OR: sendmessage_CallOnReply)
 MOV r3,#48			; length

 ADR r5,reply$l
 BL message_send		; go

 ADD r13,r13,#48		; stack pointer back up
 FNRTS

reply$l
 CMP r0,#19
 BNE user_message_act
 FNJSR
 MOV r10,r11			; cursor block
 LDR r0,[r10,#c_wind]		; window offset
 BL conv_wind_off		; \X r8,r9
 BL paste_command		; paste in our internal clipboard
 FNRTS				; return

; Message_ClaimEntity
gc_claimentity
 FNJSR "r1"
 LDR r0,[r1,#20]		; is it for the clipboard?
 TST r0,#4
 FNRTS EQ

 LDR r0,[r1,#4]			; task handle of this message
 FNLDR r1,wimp_task		; Zap's task handle
 CMP r0,r1
 FNRTS EQ			; don't do anything on our message

 FNLDR r0,opt_switches          ; opt_switches word
 BIC r0,r0,#bit_got_gclip	; we no longer own it
 FNSTR r0,opt_switches          ; opt_switches word
 FNRTS

; Message_DataRequest
gc_datarequest
 FNJSR "r1-r10"
 LDR r0,[r1,#36]		; note the good design:
				; DataRq and ClaimEntity have the
 TST r0,#4			; type flags in different places ...
 FNRTS EQ			; not for the clipboard

 FNLDR r0,opt_switches          ; opt_switches word
 ANDS r0,r0,#bit_got_gclip
 FNRTS EQ			; we don't own it

 PUSH "r1"			; store the message pointer so we can use it

 FNLDR r6,yank_len		; length of kill ring; ie last pointer
 FNLDR r7,yank_ptr
 ; Next section of code modified from yank_paste_command, above, to
 ; find the block which would be pasted if the user just did it local to Zap
dr1
 SUBS r6,r6,#8			; back one
 BMI pullr1andreturn
 ADD r1,r6,r7			; block address

 LDR r5,[r1]			; file/address
 CMN r5,#1
 BEQ dr1			; -1 => entry is dead

 BIC r0,r5,#(3:SHL:30)		; discard flags
 LDR r9,[r1,#4]			; parameter (offset/length)
 TST r5,#(1:SHL:31)
 BNE dr2			; actual block - so r9, r0 are set up
 ; Otherwise it's part of the file's undo buffer, so r0 is the file offset
 ; and r9 is the offset into the file's undo buffer
 PUSH "r9"			; store whatever is actually in r9
 BL conv_file_off		; r9 = file ptr
 LDR r3,[r9,#f_uptr]		; r3 = undo buffer in file
 PULL "r9"			; get it back again
 ADD r3,r3,r9			; actual entry
 LDR r9,[r3,#4]			; length
 LDR r0,[r3,#8]			; address
dr2
 MOV r8,r0			; address into r8, where we need it

 PULL "r1"			; restore message pointer

 ADD r2,r1,#20			; bit we need to write
 LDMIA r2,{r3-r6}		; use window etc. supplied by task
 ADR r2,gc_filename		; can't use file's leaf
 MOV R10,#&0F000000
 ORR R10,R10,#&00FF0000
 ORR r10,r10,#6			; r8/r9 are block delimiters + reply!
 MOV r7,#0			; don't tell me after save finished
 BL send_data_save		; go

 FNRTS

pullr1andreturn
 PULL "r1"			; restore message pointer
 FNRTS

gc_filename
 = "GCScrap", 0

gc_claimclip
 FNJSR
 SUB r13,r13,#24		; space for the wimp message
 MOV r1,r13
 MOV r0,#message_claimentity	; includes required flags
 MOV r2,#0
 STR r2,[r1,#12]		; your_ref, and broadcast message
 MOV r3,#4
 STR r3,[r1,#20]		; flags: claiming the clipboard
 MOV r3,#24
 MOV r5,#0			; default reply code
 BL message_send
 ADD r13,r13,#24		; move back up
 FNLDR r0,opt_switches          ; opt_switches word
 ORR r0,r0,#bit_got_gclip	; set our internal variable
 FNSTR r0,opt_switches          ; opt_switches word
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; New yank handling subs				   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;E If b30 of R0 set then it's next in a kill sequence.
;  R0 BIC b30=0 => R8/R9=file, add last delete undo entry
;  R0 BIC b30<>0 => =address of region data blk R1=block length
;X Length added to yank_ptr buffer #

add_yank_region
 FNJSR "R1-R7"
 MOV R2,R0			; data pos start
 BICS R0,R2,#addyank_In_KillSequence
 BNE ad17			; actual block
 BL get_file_off		; R0=file offset
 ADDVC R2,R2,R0			; data pos
 LDRVC R7,[R9,#f_uptr]
 LDRVC R0,[R9,#f_ulen]		; last entry
ad18
 BLVC un_backward
 FNRTS CS
 FNRTS VS
 LDR R1,[R7,R0]			; first word
 MOV R1,R1,LSR #undo_Type_shift
 AND R1,R1,#command_mask
 TEQ R1,#command_Delete
 TEQNE R1,#command_Delete_MaintainCursor
 BNE ad18			; not yet found it
 MOV R3,R0			; offset in undo buffer
 B ad19
ad17
 ORR R2,R2,#1<<31
 MOV R3,R1
ad19
 FNLDR R4,yank_len		; buffer length
 ADD R5,R4,#8			; new length after adding entry
 ADD R1,R5,#63
 BIC R1,R1,#63			; round up
 FNLDR R0,yank_ptr
 BL heap_ensure
 FNSTR R0,yank_ptr,VC
 STRVC R2,[R0,R4]!
 STRVC R3,[R0,#4]			; set up next entry
 FNSTR R5,yank_len,VC		; new len
 FNSTR R5,yank_off,VC		; cancel any yank
 BLVC get_file_off
 FNSTR R0,yank_file,VC		; last yanked file
 BLVC gc_claimclip		; inform everyone that we've got the gc
 FNRTS

;E R0=off R7=undo buf R9
;X CC R0=next entry off / CS R0=end off |

un_forward
 FNJSR "R1"
 LDR R1,[R9,#f_ulen]
 CMP R0,R1
 FNRTS CS
un1
 ADD R0,R0,#4
 CMP R0,R1
 FNRTS CS
 LDR R14,[R7,R0]
 TST R14,#1<<31
 BEQ un1
 ADDS R0,R0,#0			; clc
 FNRTS

;E R0=off R7=undo buf R9
;X CC R0=prvious entry / CS R0=0 |

un_backward
 FNJSR
un2
 CMP R0,#0
 FNRTS LE		; return with CS
 SUB R0,R0,#4
 LDR R14,[R7,R0]
 TST R14,#1<<31
 BEQ un2
 ADDS R0,R0,#0			; clc
 FNRTS

;E R0=command R1-R5=undo buffer data R7=undo buf R9=file
;X R7 upd and command buffered with new buffers claimed if b3=0 in R0 #

buffer_command
 FNJSR "R1-R3,R6,R8-R11"
 MOV R10,R0
 MOV R11,R1
 MOV R8,R2			; (LENGTH TT)
 LDR R6,[R9,#f_ulen]
 LDR R0,[R9,#f_ubufl]
 SUB R14,R0,R6			; free bytes in buffer
 CMP R14,#20
 BGE un3			; enough room
 MOV R0,R7
 ADD R1,R6,#ubuf_size		; increment size
 BL heap_ensure
 FNRTS VS
 MOV R7,R0
 STR R7,[R9,#f_uptr]
 ADD R0,R6,#ubuf_size
 STR R0,[R9,#f_ubufl]		; update undo buffer vals
un3
 BIC R0,R10,#undo_Block_DontFreeData	; command number
 TEQ R0,#command_FastOp
 BEQ buf_new_command
 CMP R0,#command_LongOp
 BCS buf_new_command		; special command ... ?

 MOV R0,R6
 BL un_backward
 BCS buf_new_command		; no previous command

 LDR R14,[R7,R0]
 TST R14,#undo_SelectRegion	; killing off yet another bit of the first data word ...
 MOV R14,R14,LSR #undo_Type_shift
 AND R14,R14,#&1F		; Get command number (0x1f = undo_Type_mask :OR: undo_Block_DontFreeData ... ?)
 ORRNE R14,R14,#command_SelectRegion	; &40

 TEQ R10,R14
 BNE buf_new_command		; not the same as the previous command
 BIC R14,R10,#undo_Block_DontFreeData	; command number
 TEQ R14,#command_Insert
 TEQNE R14,#command_Replace
 TEQNE R14,#command_Insert_MaintainCursor
 BEQ buf_concat_top
 TEQ R14,#command_Delete
 TEQNE R14,#command_ReplaceBackwards
 TEQNE R14,#command_Delete_MaintainCursor
 BEQ buf_concat_bottom
 ; else drop through ...
buf_new_command
 CMP R6,#0			; otherwise address exceptions!?
 CMPPL R7,#0
 FNRTS MI

 ORR R14,R11,R10,LSL#undo_Type_shift
 ORR R14,R14,#(undo_Block_Start:SHL:undo_Type_shift) ; start of undo block - 1<<31

 TST R10,#command_SelectRegion	; &40
 ORRNE R14,R14,#undo_SelectRegion

 ADD R6,R7,R6			; address of entry
 STR R14,[R6],#4		; command and file offset - exception...!!!
 TEQ R10,#undo_Type_fastredo
 BEQ buf_new_end		; finished (fast redo)
 AND R14,R10,#command_mask
 CMP R14,#command_LongOp
 BCS buf_new_end		; finished (marker)

 STR R8,[R6],#undo_Length
 TEQ R10,#undo_Type_fastundo
 BEQ buf_new_end		; finished
 TST R10,#undo_Block_DontFreeData
 BNE buf_no_claim		; not set for freeing, so don't bother to duplicate
 MOV R0,R8			; (LENGTH TT)
 BL heap_claim			; get heap buffer for data
 STRVC R0,[R6],#4		; buffer address
 MOVVC R1,R3			; source data
 MOVVC R2,R0
 MOVVC R3,R8			; (LENGTH TT)
 BLVC move_bytes		; copy data
 FNRTS VS
 AND R14,R10,#command_mask
 TEQ R14,#command_Replace
 TEQNE R14,#command_ReplaceBackwards
 BNE buf_new_end		; finished
 MOV R0,R8			; (LENGTH TT)
 BL heap_claim
 FNRTS VS
 STR R0,[R6],#4
 MOV R1,R4
 MOV R2,R0
 MOV R3,R8			; (LENGTH TT)
 BL move_bytes			; second block of data for replace
 B buf_new_end
buf_no_claim
 STR R3,[R6],#4			; save data block address
 AND R0,R10,#command_mask	; get command
 CMP R0,#command_Replace
 STRCS R4,[R6],#4		; original block for replace
buf_new_end
 SUB R6,R6,R7			; new end offset
 STR R6,[R9,#f_ulen]
 FNRTS

buf_concat_top
 ADD R0,R7,R0			; previous command
 LDR R1,[R0]
 BIC R1,R1,#undo_Information_mask; file offset for insert/replace
 LDR R14,[R0,#undo_Length]	; length of data
 ADD R1,R1,R14			; file offset of last char
 TEQ R1,R11
 BNE buf_new_command		; doesnt concat
 TST R10,#undo_Block_DontFreeData
 BNE buf_concat_top_no_claim
 MOV R6,R0			; alter previous command
 MOV R11,R14			; old len
 ADD R1,R11,R8			; new len
 ADD R1,R1,#udata
 BIC R1,R1,#udata		; goto next word boundry
 LDR R0,[R6,#8]			; address of data block
 BL heap_ensure			; make block big enough
 FNRTS VS
 STR R0,[R6,#8]			; new block
 TEQ R10,#3
 BNE un20			; not a replace
 LDR R0,[R6,#12]
 BL heap_ensure			; ensure size of second block
 FNRTS VS
 STR R0,[R6,#12]
un20
 LDR R0,[R6,#8]			; address
 MOV R1,R3			; source
 ADD R2,R0,R11
 MOV R3,R8
 BL move_bytes			; add on new data
 TEQ R10,#command_Replace
 BNE un4
 LDR R0,[R6,#12]		; add to second block
 MOV R1,R4
 ADD R2,R0,R11
 MOV R3,R8
 BL move_bytes			; add on new data
un4
 ADD R0,R11,R8
 STR R0,[R6,#undo_Length]
 FNRTS
buf_concat_top_no_claim
 LDR R1,[R0,#8]			; address of data in previous command
 ADD R1,R1,R14			; address for ok concat
 TEQ R1,R3			; does it match the address given
 BNE buf_new_command		; no
 ADD R1,R8,R14			; new length of command
 STR R1,[R0,#undo_Length]
 FNRTS

buf_concat_bottom
 ADD R0,R7,R0			; previous command
 LDR R1,[R0]
 BIC R1,R1,#undo_Information_mask; offset of old block
 SUB R1,R1,R8
 TEQ R1,R11			; can new block be added on start
 BNE buf_new_command		; no
 TST R10,#undo_Block_DontFreeData
 BNE buf_concat_bottom_no_claim
 MOV R6,R0			; address of block
 LDR R11,[R6,#undo_Length]
 ADD R1,R11,R8			; new len
 ADD R1,R1,#udata
 BIC R1,R1,#udata
 LDR R0,[R6,#8]
 BL heap_ensure
 FNRTS VS
 STR R0,[R6,#8]			; enlarge first block
 TEQ R10,#command_ReplaceBackwards
 BNE un21			; not a replace
 LDR R0,[R6,#12]
 BL heap_ensure
 FNRTS VS
 STR R0,[R6,#12]		; enlarge second block
un21
 PUSH "R3"		; save data
 LDR R1,[R6,#8]
 ADD R2,R1,R8
 MOV R3,R11
 BL move_bytes			; move up data in first block
 PULL "R1"		; get back data
 LDR R2,[R6,#8]
 MOV R3,R8
 BL move_bytes			; copy in new data
 TEQ R10,#command_ReplaceBackwards
 BNE un19
 LDR R1,[R6,#12]
 ADD R2,R1,R8
 MOV R3,R11
 BL move_bytes			; move up data in second block
 MOV R1,R4
 LDR R2,[R6,#12]
 MOV R3,R8
 BL move_bytes			; copy in new data
un19
 ADD R0,R8,R11
 STR R0,[R6,#undo_Length]
 LDR R0,[R6]
 SUB R0,R0,R8
 STR R0,[R6]			; new file offset
 FNRTS
buf_concat_bottom_no_claim
 LDR R1,[R0,#8]			; old address
 SUB R1,R1,R8
 TEQ R1,R3			; does it match with new address
 BNE buf_new_command
 LDR R14,[R0,#undo_Length]
 ADD R14,R14,R8
 STR R14,[R0,#undo_Length]
 LDR R14,[R0]
 SUB R14,R14,R8
 STR R14,[R0]			; new offset of action
 STR R3,[R0,#8]			; new command start
 AND R14,R10,#command_mask
 CMP R14,#command_Replace
 STRCS R4,[R0,#12]		; new second block for replace
 FNRTS

;E R2=suggested num of chars to undo R6=undo R7=uptr R8=undop>0 <=
;X R0-R5=(bufferable) command required to undo R2 chars
;  and cursor moved to this point but not plotted (!?) #
;  R0=command number (5-bit) if out of range command 1-4

undo_invert_command
 FNJSR "R6,R10-R11"
 ADD R6,R7,R6			; address of command to undo
 LDR R0,[R6]			; command
 TST R0,#undo_SelectRegion
 BIC R1,R0,#undo_Information_mask; file offset (35MB limit here :|)
 MOV R0,R0,LSR #undo_Type_shift
 ORRNE R0,R0,#command_SelectRegion	; causes problems?
 AND R0,R0,#&5F			; 6 bit command (?)
 ANDS R10,R0,#command_mask
 CMPNE R10,#command_Illegal
 FNRTS EQ	; out of range
 ANDS R0,R0,#(command_Atomic :OR: command_SelectRegion)	; save/test
 MOVNE R2,R8			; undo whole command if top bit set
 CMP R2,R8
 MOVGT R2,R8			; clip to max number of chars
 LDR R3,[R6,#8]			; pointer to block
 TEQ R10,#command_Delete
 TEQNE R10,#command_ReplaceBackwards
 TEQNE R10,#command_Delete_MaintainCursor
 SUBNE R11,R8,R2		; num chars left after this undo
 LDREQ R11,[R6,#undo_Length]
 SUBEQ R11,R11,R8		; less num chars not done to give offset
 ADD R1,R1,R11
 ADD R3,R3,R11
 TEQ R10,#command_Replace
 TEQNE R10,#command_ReplaceBackwards
 EORNE R10,R10,#3		; change insert<->delete
 MOVEQ R4,R3			; else the new data becomes the old
 LDREQ R3,[R6,#12]
 ADDEQ R3,R3,R11		; and this is the new
 EOREQ R10,R10,#7		; opposite replace
 ORR R0,R0,R10			; complete command number
 ORR R0,R0,#undo_Block_DontFreeData
 FNRTS

;E R2=num of bytes to remove R6=buf off of command R7=uptr
;X command reduced by this number of bytes (and buffers freed)
;  note it only works for bit3 set commands and errors otherwise #

unbuffer_command
 FNJSR "R1-R3,R6"
 ADD R6,R7,R6			; address of the command
 LDR R0,[R6]
 MOV R3,R0,LSR #undo_Type_shift
 ANDS R1,R3,#command_mask
 CMPNE R1,#command_Illegal
 FNRTS EQ
 TST R3,#undo_Block_DontFreeData
 LDR R0,[R6,#undo_Length]
 SUBS R0,R0,R2			; number of bytes left
 FNRTS LE	; none left
 STR R0,[R6,#undo_Length]
 TEQ R1,#command_Delete
 TEQNE R1,#command_ReplaceBackwards
 TEQNE R1,#command_Delete_MaintainCursor
 FNRTS NE	; this is all for a concat top
 LDR R0,[R6]
 ADD R0,R0,R2
 STR R0,[R6]			; increase file offset
 LDR R0,[R6,#8]
 ADD R0,R0,R2
 STR R0,[R6,#8]			; increment position of first buf
 TEQ R1,#4
 FNRTS NE	; not a replace
 LDR R0,[R6,#12]
 ADD R0,R0,R2
 STR R0,[R6,#12]		; increment orig buf
 FNRTS

;E R9=file
;X all undo buffer data freed and undo pointers zeroed #

free_undo
 FNJSR "R1-R7"
 BL free_yank			; free yank links to undo data
 FNRTS VS
 LDR R7,[R9,#f_uptr]
 LDR R6,[R9,#f_ulen]		; move backwards to help heap manager
 ADD R6,R7,R6
fr2
 SUB R0,R6,R7			; undo offset
 BL un_backward
 BCS fr10			; finished
 ADD R6,R7,R0			; next instruction
 LDR R5,[R6]
 MOV R1,#-1			; yes?
 MOV R5,R5,LSR #undo_Type_shift	; top 6 bits
 TST R5,#undo_Block_DontFreeData
 BNE fr2			; no buffered data

 ANDS R5,R5,#command_mask
 TEQNE R5,#command_Illegal
 BEQ fr2			; next data, or bad command/multiop marker

 LDR R0,[R6,#8]
 STR R1,[R6,#8]
 BL heap_free
 FNRTS VS

 TEQ R5,#command_Replace
 TEQNE R5,#command_ReplaceBackwards
 BNE fr2

 LDR R0,[R6,#12]
 STR R1,[R6,#12]
 BL heap_free			; free second block
 BVC fr2
 FNRTS
fr10
 MOV R0,#0
 STR R0,[R9,#f_ulen]
 STR R0,[R9,#f_undo]
 STR R0,[R9,#f_undop]
 FNRTS

;E R9=file that has just has it's undo turned off/been killed
;X yank buffer has references to this file freed.

free_yank
 FNJSR "R1-R3"
 BL get_file_off		; R0=file off
 FNLDR R1,yank_ptr
 FNLDR R2,yank_len
 MVN R3,#0
 ADD R2,R1,R2
fr11
 CMP R1,R2
 FNRTS CS
 LDR R14,[R1],#8
 BIC R14,R14,#1<<30		; clear multi flag
 TEQ R14,R0
 STREQ R3,[R1,#-8]		; if match
 B fr11

;E R9=file
;X undo switched off for this file #

turn_off_undo
 FNJSR
 LDR R0,[R9,#f_flags]
 BIC R0,R0,#flags_UndoSupported
 STR R0,[R9,#f_flags]
 BL new_file_title		; turn off the undo flag
 BLVC free_undo			; free all used undo buffers
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Manipulate size of undo buffers				;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;E R0=size you need the undo buffer to be
;  R9=file
;X Undo buffer at least this size.

ensure_undo_size
 FNJSR "R1"
 LDR R1,[R9,#f_blklen]
 LDR R14,[R9,#f_bufl]
 SUB R1,R1,R14			; current size
 CMP R0,R1
 ADDGE R0,R0,#ubuf_size		; want more free + extra
 BICGE R0,R0,#3			; word align
 BLGE set_undo_size
 FNRTS

;E R0=size of undo buffer wanted for this file (word aligned)
;  R9=file
;X Undo buffer area set to this size. #

set_undo_size
 FNJSR "R1"
 LDR R1,[R9,#f_bufl]
 ADD R1,R1,R0			; new size for this block
 BL get_file_off		; R0=file number
 BLVC set_block_size
 FNRTS

 END
