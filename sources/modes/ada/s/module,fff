; s/module,fff
; converted from ada.bas by bas2asm.pl
	GET	h.Ada

	DCD	0x00
	DCD	StartUpHere
	DCD	0x00
	DCD	0x00
	DCD	D1
	DCD	ModHelpString
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	mod_flags

D1	=	"ZapAda",0
ModHelpString
	=	"ZapAda",9,9,"0.05 (00 Jan 0000) © "
lp1	=	"Tim Tyler", 0x00
	ALIGN

mod_flags	DCD	1				; 32 bit compatible


Dater3
	=	"Zap",0

w_formmb
	DCD	-1
	=	0x18, 0x18, 0x0, 0x0
	DCD	0	;  REM mainwkspflags


StartUpHere
	STMFD	sp!, {lr}
	LDR	r2, [r12, #0]
	CMP	r2, #0
	BNE	ModuleInit
	MOV	r0, #6
	MOV	r3, #0x20
	SWI	XOS_Module
	LDMVSFD	sp!, {pc}
	STR	r2, [r12, #0]
	ADRL	r0, Dater47
	STR	r2, [r0, #0]
	MOV	r0, #0
	STR	r0, [r2, #20]
ModuleInit
	MOV	r0, #4
	STR	r0, [r2, #12]
	MOV	r0, #0x12
	ADR	r1, Dater3
	SWI	XOS_Module
	MOVVC	r0, #0x0C
	SWIVC	XOS_Module
	LDMVSFD	sp!, {pc}
	MOV	r12, r4
	LDR	r2, [r3, #20]
	ADD	r3, r3, r2
	LDRB	r0, [r3, #3]
	TEQ	r0, #'X'
	ADDEQ	r3, r3, #1
	LDRB	r0, [r3, #5]
	CMP	r0, #'9'
	RSBLSS	r0, r0, #'1'
	BHI	MakeError
	BNE	RefDaterTab
	LDRB	r0, [r3, #7]
	CMP	r0, #'9'
	RSBLSS	r0, r0, #'0'
	BHI	MakeError
	BNE	RefDaterTab
	LDRB	r0, [r3, #8]
	CMP	r0, #'9'
	RSBLSS	r0, r0, #'0'
	BHI	MakeError
RefDaterTab
	ADR	r0, DaterTable
	FNcall	0
	ADR	r0, CmdTable
	FNcall	Zap_AddCommands
	LDMFD	sp!, {pc}
MakeError
	ADR	r0, ErrorMess
	SWI	OS_GenerateError
ErrorMess
	DCD	0x00
	=	"ZapAda requires Zap version 1.00 or greater.", 0x0
	ALIGN


HTMLLabeled
	=	"Ada", 0, ""
DaterTable
	DCD	DaterTable
	DCD	HTMLLabeled
	DCD	lp1	;  C-3FF0
	DCD	0x00	;  REM = BaseMode = Text
	DCD	0x40D + 1<<14	;  REM mode = 13 ; bit 10 = workspace, please!
	DCD	Initialisation	;  REM init
	DCD	menu	;  MnuDta; REM &00 ; menu...extension menu
	DCD	TableEnd - DaterTable	;  REM size of table ; len
	DCD	0	;  postload ; C-D44
	DCD	0	;  REM C-3590 ; e_presave  \ called before being saved
	DCD	0
	DCD	0 ;E_Start	;  REM e_start        \ window entering this mode
	DCD	0 ;E_End	;  REM e_end            \ window leaving this mode
	DCD	0x00	;  REM e-width          \ find work area width
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0	;  C-F84 lp7 ; e_clnphy \ physical to file offset
	DCD	0x00
	DCD	0	;  Ne_nextline; &00 ; c-FA0 =
	DCD	0x00
	DCD	0x00
	DCD	0	; sminus ; REM lp3 ;e_sminus       \ perform shift-left
	DCD	0	; splus  ; REM lp4 ;e_splus        \ perform shift-right
	DCD	0x00
	DCD	0x00
	DCD	redrawline	;  REM c-FDC e_redrawline     \ redraw line display
	DCD	0x00
	DCD	charchar	;  REM e_char
	DCD	0x00
	DCD	0	;  REM Tabular ; e_tab           \ tab key pressed
	DCD	0x00	;  c-?return key pressed
	DCD	0x00
	DCD	BrunchSave	;  REM &00 trytwo ; REM e_saveandrun
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	BrunchSave	;  REM e_compile \ compile & run - don't exit
	DCD	0x00
	DCD	JustRun	;  REM e_run     \ run the program being edited
	DCD	JustRun	;  REM e_runandquit \  run
	DCD	0x00	;  REM e_basic   \ drops into language...?
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00	;  C-3A24 \ unrecognised wimp messages
	DCD	0x00	;  REM e_setwidth - changing window width
	DCD	0x00	;  c-1C78 \provide list of functions
	DCD	redrawA	;  REM c-22d0 e_prevline \ find start of update reg'n; Easy!
	;DCD	gotoopenwindow	;  REM ; e_openwindow
TableEnd

menu	=	"ZapAda:Menus",0
	ALIGN

Initialisation
	CMP	r1, #1
	MOVCC	pc, lr
	STREQ	r0, [r11, #4]
	STREQ	r0, modenumberlocal
	TEQ	r1, #6
	ADREQ	r1, MenuExtension
	MOVEQ	pc, lr
	TEQ	r1, #2
	MOVNE	pc, lr
	STMFD	sp!, {r1, r7, r8, lr}
		;  REM here? yes!
	STMFD	sp!, {r0, r1, r7}
	ADRL	r0, firsthashhash

	STR	r0, locoftabletwo
	LDR	r8, [r0], #4
loop
	LDRB	r7, [r0], #1
	LDRB	r1, [r0], #1
	ORR	r7, r7, r1, LSL #8
	LDRB	r1, [r0], #1
	ORR	r7, r7, r1, LSL #16
	LDRB	r1, [r0], #1
	ORR	r7, r7, r1, LSL #24
	CMP	r7, r8
	BNE	loop
	STR	r0, locoftablethree
		;  REM -----------------------------------------
	MOV	r8, #'A'
	MOV	r1, r0
loop2
	LDRB	r0, [r1]
	CMP	r0, r8
	BGE	GtIt3
_altered_0
	LDRB	r0, [r1], #1
	CMP	r0, #'z'
	BLE	_altered_0
	LDRB	r0, [r1]
	CMP	r0, #'*'
	BNE	loop2
backinaction3
	ADD	r8, r8, #1
	CMP	r8, #'Z'
	BLE	loop2
		;   -----------------------------------------
	MOV	r8, #'A'
	LDR	r1, locoftabletwo
_altered_1
	LDRB	r0, [r1]
	CMP	r0, r8
	BGE	GtIt2
_altered_2
	LDRB	r0, [r1], #1
	CMP	r0, #'z'
	BLE	_altered_2
	LDRB	r0, [r1]
	CMP	r0, #'*'
	BNE	_altered_1
backinaction2
	ADD	r8, r8, #1
	CMP	r8, #'Z'
	BLE	_altered_1
		;  REM -----------------------------------------
	LDMFD	sp!, {r0, r1, r7}
	MOV	r8, #0
	BL	ZapModeWord
	TEQ	r7, #0
	BEQ	nocfginit
	LDR	r0, [r7, #0]
	CMP	r0, #0x10
	LDMEQFD	sp!, {r1, r7, r8, pc}
		;  REM no !Config...
nocfginit
	MOV	r0, #0x0F
	FNcall	Zap_ModeColourNum	;  REM change palette size.
	MOV	r0, #0x10
	LDR	lr, [r12, #0]
	ADD	lr, lr, #4	;  REM zap call - start heap block
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	MOV	r7, r0
	BLVC	OnToWrtMdeWrd
	MOVVC	r0, #0x10
	STRVC	r0, [r7, #0]
	MOVVC	r0, #0
	STRVC	r0, [r7, #4]
	MOVVC	r0, #0x0D
	STRVC	r0, [r7, #8]
	LDRVC	r0, startupformatwd
	STRVC	r0, [r7, #0x0C]
	LDRVC	r0, SDsasa	;  REM Dater 5%/8% !! vc= no !config file ?
	LDRVC	r1, [r11, #4]
	MOVVC	r2, #0
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #Zap_ModeData	;  REM call - RD/WRT Zap Dater mode words.
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	BLVC	UnkPreColBit	;  REM to set up colours with zmcs
	LDMFD	sp!, {r1, r7, r8, pc}
modenumberlocal
	DCD	0
startupformatwd
	DCD	0x07800000


CmdTable
	DCD	CmdTable
	DCD	0	; zapservice%
	=	"ADA_FLAGSTOGGLE", 0, ""
	DCD	Cmdhtmlflagstoggle
	DCD	0	;  REM flags...


MenuExtension
	=	"Comments",0
	=	"Strings",0
	=	"Chars",0
	=	"Types",0
	=	"Commands",0
	=	"Punctuation",0
	=	"Numbers",0
	=	"Operators",0
	=	"Attributes",0
	=	"Declaration",0
	=	0
	ALIGN

		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
UnkPreColBit
	STMFD	sp!, {r1-r4, lr}
	ADR	r3, DefaultColours
	LDR	r1, [r11, #4]	;  REM normally 0
PreZModColBit
	MOV	r2, #0x09	;  REM start colours
ZModColBit
	LDRB	r0, [r3], #1
	FNcall	Zap_ModeColour	;  REM Read colour definitions
	LDMVSFD	sp!, {r1-r4, pc}
	ADD	r2, r2, #1
	TEQ	r2, #0x13	;  REM max colours
	BNE	ZModColBit
	LDMFD	sp!, {r1-r4, pc}
DefaultColours
		;  REM Colour Numbers :
	=	0x0A	;  REM Comment Colour =&9
	=	0x0F	;  REM String colour  =&A
	=	0x0F	;  REM secondparamater=&B
	=	0x0D	;  REM Embedded {}    =&C
	=	0x09	;  REM Commands       =&D
	=	0x00	;  REM Misc Punct.    =&E
	=	0x0E	;  REM Number colour  =&F
	=	0x02	;  REM Error colour   =&10
	=	0x0E	;  REM GSTrans        =&11
	=	0x0C	;  REM Unknown        =&12
	=	0x00, 0x00	;  REM double zero termination !
	ALIGN

Tk1frm12andret
	LDR	r0, [r11, #12]
	SUBS	r0, r0, #1
	STR	r0, [r11, #12]
	MVNNE	r0, #0
	MOV	pc, lr

ZapModeWord
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
	LDR	r2, [r12, #0]
	ADD	r2, r2, #Zap_GetModeWord
	MOV	lr, pc
	MOV	pc, r2
	MOV	r7, r0
	LDMFD	sp!, {r0-r2, pc}
OnToWrtMdeWrd
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
WrtMdeWrd
	MOV	r0, r7
	LDR	r2, [r12, #0]
	ADD	r2, r2, #Zap_PutModeWord	;  0168 ; REM zap call...write the mode word
	MOV	lr, pc
	MOV	pc, r2
	LDMFD	sp!, {r0-r2, pc}
localdefltmw
	DCD	0
initialiseheap
	STMFD	sp!, {r1-r6, r8-r12, lr}
		; SWI &107
	MOV	r0, #0x10
	LDR	lr, [r12, #0]
	ADD	lr, lr, #4
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	MOV	r7, r0
	STR	r1, [r7, #0]
	LDR	r0, localdefltmw
	LDR	r0, [r0, #0xC]
	STR	r0, [r7, #0xC]
	MOV	r0, #0x0D
	STR	r0, [r7, #8]	;  REM AT THE START MAKE COLOUR OK?
	BL	OnToWrtMdeWrd
	LDMFD	sp!, {r1-r6, r8-r12, pc}

SDsasa	DCD	0x1200004D


		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
nlflaghere
	DCD	0
commentspeclcase
	TST	r2, #0x400
	BIC	r2, r2, #0x700
	ORREQ	r2, r2, #0xF000	;  REM ! ; fe? ; ff000
	BICEQ	r2, r2, #0x00E00000	;  REM HERE? &0F000000
		;  STREQ   2,nlflaghere
	B	bfcommentspeclcase
adrofrsix
	DCD	0
redrawline
	STMFD	sp!, {r6, r12, lr}
	STMFD	sp!, {r7, r11}
	STR	r6, adrofrsix
	BL	Brunch208
	BL	ZapModeWord
	LDR	r2, [r7, #0x08]	;  REM Preserved start colour & flags
	LDR	r3, [r7, #0x0C]
	ADRL	r12, w_formmb
	STR	r3, [r12, #8]
	LDMFD	sp!, {r7, r11}	;  REM calls...
	LDR	r3, [r8, #60]	;  REM ?
	STR	r4, [r12]
	LDRB	r12, [r8, #88]	;  REM ? At very beginning.
	AND	r5, r2, #0xFF
		; CMP     5,#&09
		; BEQ     commentspeclcase
		;  REM SWI &107
	TST	r2, #0x400
	BIC	r2, r2, #0x700
	BICEQ	r2, r2, #0xFF
	ORREQ	r2, r2, #0x0D
	ORREQ	r2, r2, #0xF000	;  REM ! ; fe? ; ff000
	BICEQ	r2, r2, #0x00E00000	;  REM HERE? &0F000000
	STREQ	r2, nlflaghere
bfcommentspeclcase
	LDR	r5, [r9, #0]	;  REM ?
	LDR	r10, [r9, #4]	;  REM ?
	ADD	r10, r10, r5
	TEQ	r7, r10
	LDMEQFD	sp!, {r6, r12, pc}	;  REM end - return for good!
	LDR	r10, [r9, #56]	;  REM ?
	ADD	r10, r10, r5
	CMP	r7, r10
	MOVCC	r10, r5
	MOV	r6, #0
BitAftStart
	SUB	r6, r6, #1
	LDRB	r0, [r7], #-1
	TEQ	r0, r12
	BEQ	UpToStart
	CMP	r7, r10
	BCS	BitAftStart
	TEQ	r5, r10
	LDRNE	r10, [r9, #60]
	SUBNE	r7, r7, r10
	MOVNE	r10, r5
	CMP	r7, r10
	BCS	BitAftStart
	SUB	R6,R6,#1	; cl fix
	SUB	R7,R7,#1	;
UpToStart			;
	ADDS	r6, r6, #2	;
	ADD	r7, r7, #2	;
	SUBPL	r7, r7, r6
	LDMPLFD	sp, {r6}
	TEQ	r5, r10
	LDREQ	r10, [r9, #52]	;  REM ?
	ADDEQ	r10, r10, r5
	LDRNE	r10, [r9, #60]	;  REM ?
	ADDNE	r5, r5, r10
	LDRNE	r10, [r9, #8]	;  REM ?
	ADDNE	r10, r10, r5
	LDRB	r0, [r8, #144]	;  REM         endchar?
	ORR	r12, r12, r0, LSL #24
	LDR	r0, [r8, #100]	;  REM         width.
	ORR	r12, r12, r0, LSL #12
RtAtStrtA
	MOV	lr, #0
RtAtStrtB
	CMP	r7, r10	;  REM EOF?
	BCC	Brunch13
	LDR	r10, [r9, #8]
	ADD	r10, r10, r5
	CMP	r7, r10
	LDMCSFD	sp!, {r6, r12, pc}
		;  STR     6,adrofrsix
	LDR	r1, [r9, #60]	;  REM ???
	ADD	r7, r7, r1
	ADD	r5, r5, r1
	ADD	r10, r10, r1
Brunch13
		;  REM MOV     0,#19
		;  REM SWI     "OS_Byte" ; REM too slow. >8=(
	LDRB	r0, [r7], #1	;  REM get char
	AND	r1, r12, #0xFF
	EOR	r2, r2, #0x0400	;  REM newline? ; alternating colour...
	TEQ	r0, r1
	TSTEQ	r2, #0x0400
	BEQ	RtAtStrtB
	BIC	r2, r2, #0x0400
	TEQ	r0, r1
	BEQ	BrunchNL	; REM Jeez, what a mess...
	CMP	r6, #0	;  REM wed morn-reinit
	MOVGT	r1, #1	;  REM @@@@ re init this?
	STRGTB	r1, [r6, r3,LSL #1]
	LDR	r1, nlflaghere
	CMP	r1, #0
	MOV	r1, #0
	STR	r1, nlflaghere
	BNE	BNL2
Backhome
	AND	r1, r2, #0xFF	;  REM begins the |G-type Entityrans Testing
	CMP	r1, #0x09	;  REM comment
	CMP	r1, #0x0A	;  REM quotes
	BEQ	aftertestA
	MOV	r1, #0
		;     TEQ     0,#ASC"}" ; REM Entityrans Testing1
		;     BEQ     EntityTest ; mon
		; .Entitystop
aftertestA
	AND	r1, r2, #0xFF
	CMP	r1, #0x02
	CMPNE	r1, #0x0A
	CMPNE	r1, #0x0D
	TEQEQ	r0, #'"'
	BEQ	QuoteBit	;  mon
	CMP	r1, #0x02
	CMPNE	r1, #0x0B
	CMPNE	r1, #0x0D
	TEQEQ	r0, #'''
	BEQ	QuoteBit2	;  mon
notQuoteBit2
	AND	r1, r2, #0xFF
	CMP	r1, #0x0A
	CMPNE	r1, #0x0B
	BEQ	BeforeColour
		;  TEQ     R0,#ASC"<"
		;  BEQ     CurlyBrackOpen
NotatStart
backfromabchar
	AND	r1, r2, #0xFF
	CMP	r0, #' '
	CMPNE	r0, #']'
	CMPEQ	r1, #0x13
	BEQ	endofconstant
	CMP	r0, #':'
	CMPNE	r0, #' '
	CMPNE	r0, #09
	CMPEQ	r1, #0x0B
	BEQ	endoflabel
baendoflabel
	CMP	r1, #0x0F
	BEQ	endofhexnumber
	TEQ	r1, #0x02	;  REM COL Errors/Redirection  ...new
	TEQNE	r1, #0x0D
	BNE	PlainNoOSChk
		; CMP     0,#ASC"&"
		; BEQ     hexnumberstart%
beforecmntchk
	CMP	r0, #'-'
		;  CMPNE   R0,#ASC"\"
	BEQ	CommentStart
	AND	r1, r2, #0xFF
		; CMP     R1,#&0D
		; CMPEQ   R0,#ASC"."
		; BEQ     prelabel
		; CMP     R0,#ASC"#"
		; CMPNE   R0,#ASC"*"
		; CMPEQ   R1,#&0D
		; BEQ     prepreprocess
		; CMP     R1,#&0D
		; CMPEQ   R0,#ASC"$"
		; BEQ     locallab
		; CMP     R1,#&02
		; CMPEQ   R0,#ASC"#"
		; BEQ     constantfound
	CMP	r0, #'-'
	BEQ	DontBother
	CMP	r0, #'0'
	BCC	Bother
	CMP	r0, #'}'
	CMPNE	r0, #':'
	CMPNE	r0, #';'
	CMPNE	r0, #'>'
	CMPNE	r0, #'='
	CMPNE	r0, #'<'
	CMPNE	r0, #'?'
	BNE	DontBother
Bother
	STMFD	sp!, {lr}
	BL	TableChk2	;  REM **************************
	LDMFD	sp!, {lr}
	TST	r2, #0x8000000
	BNE	DontBother
DontBother
AfterCmdCntChk
		; TEQ     R0,#ASC">"
		; BEQ     CurlyBrackClose
		;  TEQ     R0,#ASC" "
	TST	r2, #0x8000000
	BNE	isitaspaceinatag
afterisitaspaceinatag
	AND	r1, r2, #0xFF
	TEQ	r1, #0x02	;  REM COL Errors/Redirection  ...new
	TEQNE	r1, #0x0F	;  REM NUMBERS
	BEQ	BrunchYYY
PlainNoOSChk
		; TEQ     R0,#ASC">"
		; BICEQ   R2,R2,#&FF
		; OrrEQ   R2,R2,#&0C
		; BEQ     ToCurlyBrackClose
ToCurlyBrackBack
	AND	r1, r2, #0xFF
	CMP	r1, #0x0D
	BICEQ	r2, r2, #0xFF
	ORREQ	r2, r2, #0x02
SymbolChecking
BeforeColour
		;  REM NUMBERS?
	TEQ	r0, #' '
	TEQNE	r0, r12, LSR #24	;  REM = tab?
	BEQ	TabbingSub
Brunch24
	CMP	r6, #0
	BLE	firstpass	;  REM new addition to test
	AND	r1, r2, #0x1F	;  REM write colours
		;  MOV     1,#2 ; xxx
	STRB	r1, [r6, r3]
AfterColour
	CMP	r6, #0
	STRGTB	r0, [r6], #1	;  REM write text
firstpass
	ADD	lr, lr, #1
BeginOfEnd
	AND	r1, r12, #0xFF	;  REM end character... yes! At last...
	TEQ	r0, r1	;  REM end character... yes!
	BICEQ	r2, r2, #0x48000000	; REM START OF LINE FLAGS...7800xxx
	CMP	r6, #0
	ADDLTS	r6, r6, #1
	BMI	RtAtStrtB	;  REM round loop...
	LDMEQFD	sp, {r6}	;  REM huh?
	BEQ	RtAtStrtA
		; And     R1,R12,#&FF ; REM end character... yes! At last...
	TEQ	r0, r1	;  REM end character... yes!
	BEQ	tocheckbackwardsnow
	ORRNE	r2, r2, #0x0400
backcheckbackwardsnow
	BIC	r1, r12, #0xFF000000	;  REM if not width...
	CMP	lr, r1, LSR #12
	BICLT	r2, r2, #0x0400
	BLT	RtAtStrtB	;  REM go round loop...
	BEQ	tohaveajollygoodtime
tohaveajollygoodback
	BIC	r0, r12, #0xFF000000
	CMP	lr, r0, LSR #12
	BICGE	r2, r2, #0x0400	;  REM NE
	AND	r0, r12, #0x0200
	ORR	r2, r2, r0
	LDMFD	sp!, {r6, r12}
	STMFD	sp!, {r7, r11}
	BL	Brunch208
	BL	ZapModeWord
	STR	r2, [r7, #8]
	LDMFD	sp!, {r7, r11, pc}	;  REM on exit set things up... r7...
isitaspaceinatag
	CMP	r0, #' '
	BNE	afterisitaspaceinatag
	LDRB	r1, [r7, #-2]
	CMP	r1, #' '
	CMPNE	r1, #'='
	BEQ	afterisitaspaceinatag
	BIC	r1, r1, #0x20
	CMP	r1, #'E'
	BNE	justclearit
	LDRB	r1, [r7, #-3]
	BIC	r1, r1, #0x20
	CMP	r1, #'M'
	BNE	justclearit
	LDRB	r1, [r7, #-4]
	BIC	r1, r1, #0x20
	CMP	r1, #'A'
	BNE	justclearit
	LDRB	r1, [r7, #-5]
	BIC	r1, r1, #0x20
	CMP	r1, #'N'
	BEQ	afterisitaspaceinatag
justclearit
	BIC	r2, r2, #0x28000000
	B	afterisitaspaceinatag
CmdCntChk
	CMP	r0, #32
	BNE	AfterCmdCntChk
	CMP	r6, #0
	BGT	r6version
	LDR	r1, Sol7
	ADD	r1, r1, #2	;  REM ???
	CMP	r7, r1
	MOVLE	r1, #10
	LDRGTB	r1, [r7, #-2]	;  REM danger
overdangerperhaps
	CMP	r1, #32
	BEQ	AfterCmdCntChk
	MOV	r1, r2, LSR #21
	AND	r1, r1, #7
	SUBS	r1, r1, #1
		;   ; BICEQ   R2,R2,#&10000000 ; REM xxx
	BIC	r2, r2, #0x00E00000
	ORR	r2, r2, r1, LSL #21
	B	AfterCmdCntChk
r6version
	LDR	r1, Sol6	;  REM 13/10
	SUB	r1, r1, #1
	CMP	r6, r1	;  REM 13/10
	LDRGTB	r1, [r6, #-1]	;  REM 13/10
	BGT	overdangerperhaps	;  REM 13/10
	MOV	r1, #' '
	B	AfterCmdCntChk	;  REM 13/10
ErrEchConf
	CMP	r6, #0
	BLE	AfterColour
	AND	r1, r2, #0xFF
	CMP	r1, #0x0F
	BEQ	BeforeColour
	CMP	r1, #0x0E
	MOVEQ	r1, #0x02
	STREQB	r1, [r6, r3]
	TEQ	r0, #' '
	TEQNE	r0, r12, LSR #24	;  REM = tab?
	BEQ	TabbingSub
	B	AfterColour
abigcharacter
	AND	r1, r2, #0xFF
	CMP	r1, #0x02
	CMPNE	r1, #0x0D
	BNE	backfromabchar
	ADRL	r1, w_formmb
	LDR	r1, [r1, #8]
	TST	r1, #(1 << 26)
	BEQ	backfromabchar
	CMP	r6, #0
	BLE	AfterColour
	MOV	r1, #0x0F
	STRB	r1, [r6, r3]
	B	AfterColour
BrunchNL
	AND	r1, r2, #0xFF
	CMP	r1, #0x02	;  REM COL Errors/Redirection  ...new
	BNE	DontBother2
Bother2
	STMFD	sp!, {lr}
	BL	TableChk2	;  REM swap with sect below?;;;
	LDMFD	sp!, {lr}
DontBother2
	MOV	lr, #0x70000000	;  REM        ;;Jeez, what a mess!;;
	B	BeginOfEnd
BNL2
	STR	r6, Sol6
	SUB	r1, r7, #1
	STR	r1, Sol7
		;  SWI &107 ; REM at all line starts...
	B	Backhome
Sol6
	DCD	0
Sol7
	DCD	0
oversimplecharacter
	CMP	r6, #0
	BLT	BeforeColour
		;     LDR     R1,Sol7
		;     ADD     R1,R1,#2
		;     CMP     R7,R1
		;     MOVLE   R1,#10
		;     LDRGTB  R1,[R7,#-2] ; REM danger ;-(
		;     TEQ     R0,#ASC"." ; REM if in number
		;     TEQ     R0,#ASC"#"    ; REM if in number
		;     BNE     TryNextA
	CMP	r0, #'9'
	BGT	TryNextA
	CMP	r0, #'0'
	BLT	TryNextA
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0F
	STRB	r2, [r6, r3]
	B	AfterColour
TryNextA
	AND	r1, r2, #0xFF
	CMP	r1, #0x0F
	BNE	BeforeColour
	TEQ	r0, #'_'	;  REM if in number
	TEQNE	r0, #'#'	;  REM if in number
	TEQNE	r0, #'.'	;  REM if in number
	TEQNE	r0, #'A'	;  REM if in number
	TEQNE	r0, #'B'	;  REM if in number
	TEQNE	r0, #'C'	;  REM if in number
	TEQNE	r0, #'D'	;  REM if in number
	TEQNE	r0, #'E'	;  REM if in number
	TEQNE	r0, #'F'	;  REM if in number
	BNE	BeforeColour
	MOV	r1, #0x0F
	STRB	r1, [r6, r3]
	B	AfterColour
atoffsminusone
	MOV	r1, #0x0F
	SUBS	r3, r3, #1
	STRB	r1, [r6, r3]
	ADD	r3, r3, #1
	B	AfterColour
localrtadr
	DCD	0
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CommentStart
		;  REM | comment..........
	LDR	r1, Sol7	;  mon
	ADD	r1, r1, #2	;  mon
	CMP	r7, r1	;  mon
	BLE	tizokcomment	;  mon
	LDRB	r1, [r7]
	CMP	r1, #'-'
	BNE	BeforeColour
tizokcomment
	AND	r1, r2, #0xFF
	CMP	r1, #0x0A	;  REM in quotes?
	BEQ	BeforeColour
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x09
	B	BeforeColour
prelabel
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0B
	B	BeforeColour
prepreprocess
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0C
	B	BeforeColour
locallab
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0B
	B	BeforeColour
constantfound
	ORR	r2, r2, #0x1000000
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x13
	B	AfterColour
hexnumberstart
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0F
	B	BeforeColour
endofconstant
	BIC	r2, r2, #0x1000000
endofconstant2
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x02
	B	BeforeColour
endoflabel
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x02
	B	baendoflabel
endofhexnumber
	TEQ	r0, #'.'
	TEQNE	r0, #'#'
	BEQ	beforecmntchk
	BIC	r1, r0, #0x20
	CMP	r1, #'G'
	BCS	atendofhexnumber
	CMP	r0, #'0'
	BCC	atendofhexnumber
	CMP	r0, #':'
	BLE	beforecmntchk
	CMP	r0, #'@'
	BGT	beforecmntchk
atendofhexnumber
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x02
	B	BeforeColour
QuoteBit2
		;  REM 'Quotes' with ugly hack...
	CMP	r1, #0x09
	BEQ	notQuoteBit2
	CMP	r6, #0
	BLE	notQuoteBit2
	LDRB	r1, [r6, #-2]
	CMP	r1, #'''
	BNE	notQuoteBit2
	MOV	r1, #0x0B
	ADD	r6, r6, r3
	STRB	r1, [r6, #0]
	STRB	r1, [r6, #-1]
	STRB	r1, [r6, #-2]
	SUB	r6, r6, r3
	B	AfterColour
QuoteBit
		;  REM "Quotes"
	ORR	r2, r2, #0x10000000	;  REM newtt
	AND	r1, r2, #0xFF
	CMP	r1, #0x09
	BEQ	BeforeColour
	CMP	r1, #0x0A
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #0x0A
	BNE	BeforeColour
CurlyBrack
		;  REM "No {} NUFFIN"
	CMP	r6, #0
	ANDGT	r1, r2, #0x0F
	STRGTB	r1, [r6, r3]
	BIC	r2, r2, #0xFF
	MOV	r1, r2, LSR #24
	ANDS	r1, r1, #0x01	;  REM Bits for {} depth
	ORREQ	r2, r2, #0x02	;  REM COL Cream/Normal
	ORRNE	r2, r2, #0x13	;  REM COL Grey/Redirected
	B	AfterColour
CurlyBrackOpen
		;  REM originally for ' these ' ; "<"
	BIC	r2, r2, #0x30000000
	AND	r1, r2, #0xFF
	TEQ	r1, #0x0A
	TEQNE	r1, #0x09
	BEQ	BeforeColour
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0C
	ORR	r2, r2, #0x1000000
	ORR	r12, r12, #0x0200
	B	BeforeColour
posscommentproblem
	LDR	r1, Sol7	;  mon
	ADD	r1, r1, #2	;  mon
	CMP	r7, r1	;  mon
	BLE	ToCurlyBrackBack	;  mon
	LDRB	r1, [r7, #-2]
	CMP	r1, #'-'
	CMPNE	r1, #' '
	BNE	ToCurlyBrackBack
	LDRB	r1, [r7, #-3]
	CMP	r1, #'-'
	BNE	ToCurlyBrackBack
		; BEQ     nocommentproblem
	BIC	r2, r2, #0x38000000
	BIC	r2, r2, #0x1000000
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x02
	CMP	r6, #0
	BLE	firstpass	;  REM new addition to test
	MOVGT	r1, #0x09
	STRGTB	r1, [r6, r3]
	B	AfterColour
		; MOV     R1,R2,LSR #24
		; And     R1,R1,#&01   ; REM Bits for <> depth
		; TEQ     R1,#&00
		; BICNE   R2,R2,#&FF
		; OrrNE   R2,R2,#&0C   ; REM COL Grey/Redirected
		; OrrNE   R12,R12,#&0200
		; BNE     BeforeColour%
		; BIC     R12,R12,#&0200
		; B       CurlyBrack
ToCurlyBrackClose
	AND	r1, r2, #0xFF
	TEQ	r1, #0x09
	BEQ	posscommentproblem
nocommentproblem
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0C
CurlyBrackClose
		;  REM originally for ' these ' ; ">"
	BIC	r2, r2, #0x38000000
	AND	r1, r2, #0xFF
	TEQ	r1, #0x0A
	TEQNE	r1, #0x09
	BEQ	BeforeColour
	BIC	r2, r2, #0x1000000
	MOV	r1, r2, LSR #24
	AND	r1, r1, #0x01	;  REM Bits for <> depth
	TEQ	r1, #0x00
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #0x0C	;  REM COL Grey/Redirected
	ORRNE	r12, r12, #0x0200
	BNE	BeforeColour
	BIC	r12, r12, #0x0200
	B	CurlyBrack
TabbingSub
	AND	r1, r2, #0xF
	TEQ	r1, #0x0D
	TEQNE	r1, #0x0B
	ORREQ	r2, r2, #0x0100
	AND	r1, r4, #0x3000
	TEQ	r1, #0
	TEQEQ	r0, r12, LSR #24
	BEQ	AfterColour
	TEQ	r0, #' '
	BEQ	Brunch24
	CMP	r6, #0
	BLT	BeginOfEnd
	MOV	r0, #9	;  REM tab!
	TEQ	r1, #0x1000
	MOVEQ	r0, #0x20	;  REM " "!!!!
	TEQ	r1, #0x3000
	MOVEQ	r0, #'-'	;  REM "-"!!!!
TabLoop
	MOV	r1, #8	;  REM = COL control Character...
	STRB	r1, [r6, r3]	;
	MOV	r1, #1
	STRB	r1, [r6, r3,LSL #1]	;  REM wrong?
	STRB	r0, [r6], #1	;  REM @@@@@@
	ADD	lr, lr, #1
	AND	r1, r4, #0x3000
	TEQ	r1, #0x2000
	MOVEQ	r0, #0x20
	BIC	r1, r12, #0xFF000000
	TEQ	lr, r1, LSR #12
	TSTNE	lr, #7
	BNE	TabLoop
	AND	r0, r4, #0x3000
	TEQ	r0, #0x3000
	MOVEQ	r0, #9	;  REM  | ?
	STREQB	r0, [r6, #-1]	;  REM @@@@ ???
	MOV	r0, r12, LSR #24
	B	BeginOfEnd
redrawA
		;  REM redraw the screen and so forth
	SUBS	r0, r0, #32
	MOVMI	r0, #0
	MOV	pc, lr
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		; .Ne_nextline
		;     STMFD   R13 !,{R2-R4,R14}
		;     ADD     R0,R0,#32
		;     ;FNcall(Zap_ClipCache)
		;     MOV     R4,#5
		; .redrawN2
		;     MOV     R2,R0
		;     LDR     R1,[R9,#f_splito] ; \ find the split offset
		;     CMP     R2,R1 ; \ are we in the bottom or top half?
		;     LDRCS   R1,[R9,#f_splits]
		;     ADDCS   R2,R2,R1; \ if in the top half, skip the split
		;     LDR     R1,[R9,#f_ptr] ; \ start address of file
		;     LDRB    R3,[R1,R2] ; \ read the byte
		;     CMP     R3,#32
		;
		;     ADD     R0,R0,#1
		;     BGE     redrawN2
		;     SUBS    R4,R4,#1
		;     BPL     redrawN2
		;
		;     LDR     R1,[R9,#f_bufl] ; \ find the split offset
		;     LDR     R2,[R9,#f_ptr] ; \ find the split offset
		;     ADD     R1,R1,R2
		;     CMP     R0,R1
		;     MOVGE   R0,R1
		;     MOV     R4,R0
		;     MOV     R11,#e_clnoff
		;     FNcall(Zap_CallMode)
		;     MOV     R1,R0
		;     MOV     R0,R4
		;     LDMFD   R13 !,{R2-R4,PC}
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
lasttryadr
	DCD	0
locoftabletwo
	DCD	0
locoftablethree
	DCD	0
locoftableent
	DCD	0
		; .doitalpha2nd
		;     FNlong_adr("  ",12,AlphaIndex2)
		;     ADD     1,12,1,ASL #2
		;     LDR     1,[1]
		;     LDR     12,locoftabletwo
		;     ADD     12,12,1
		;     B       backfromparam
		;
		; .doitalpha3rd
		;     FNlong_adr("  ",12,AlphaIndex3)
		;     ADD     1,12,1,ASL #2
		;     LDR     1,[1]
		;     FNlong_adr("  ",12,ThirdParam)
		;     ADD     12,12,1
		;     B       backfromparam
storedr6flu
	DCD	0
cntcharback
	DCD	0
lastcharacterfound
	DCD	0
TableChk2
	STR	r6, storedr6flu
	TST	r2, #0x8000000
	MOVNE	pc, lr
	STMFD	sp!, {r4-r12, lr}
		;     LDR     1,[9,#f_ptr]
		;     CMP     7,1
		;     BCC     atvsof
		;
		;     LDR     12,[9,#f_splito]
		;     ADD     12,1,12
		;     CMP     7,12
		;     BCC     ploughonin
		;
		;     LDR     12,[9,#f_splite]
		;     ADD     12,1,12
		;     CMP     7,12
		;     LDRCC   1,[9,#f_splits]
		;     ADDCC   7,7,1
		; .ploughonin
	MOV	r8, #0
	MVN	r11, #0
_altered_3
	SUB	r11, r11, #1
	ADD	r4, r7, r11
	LDR	r1, [r9, #f_ptr]
	CMP	r4, r1
	BCC	atvsof
	LDR	r12, [r9, #f_splito]
	ADD	r12, r1, r12
	CMP	r4, r12
	BCC	inbothalfTC2
	LDR	r12, [r9, #f_splite]
	ADD	r12, r1, r12
	CMP	r4, r12
	LDRCC	r1, [r9, #f_splits]
	SUBCC	r4, r4, r1
inbothalfTC2
	LDR	r1, [r9, #f_ptr]
	CMP	r4, r1
	BCC	atvsof	;  to avoid bug ;-(
	LDRB	r1, [r4]
	CMP	r1, #'{'
	CMPNE	r1, #'}'
	CMPNE	r1, #'@'
	ORRGT	r8, r8, #1
	BGT	_altered_3
	CMP	r1, #'-'
	CMPNE	r1, #'0'
	CMPNE	r1, #'1'
	CMPNE	r1, #'2'
	CMPNE	r1, #'3'
	CMPNE	r1, #'4'
	CMPNE	r1, #'5'
	CMPNE	r1, #'6'
	CMPNE	r1, #'7'
	CMPNE	r1, #'8'
	CMPNE	r1, #'9'
		;    CMPNE   1,#ASC"'" ; hmm.
	BEQ	_altered_3
	CMP	r8, #0
	BEQ	notANYone
atvsof
	STR	r1, lastcharacterfound
	ADD	r11, r11, #1
	ADD	r4, r7, r11
	ADD	r11, r11, #1
	RSBS	r1, r11, #0
	BEQ	notANYone			; nothing to do
	STR	r1, cntcharback
	LDR	r1, [r9, #f_ptr]
	CMP	r4, r1
	BCC	notANYone
	LDR	r12, [r9, #f_splito]
	ADD	r12, r1, r12
	CMP	r4, r12
	BCC	inbothalfTC3
	LDR	r12, [r9, #f_splite]
	ADD	r12, r1, r12
	CMP	r4, r12
	LDRCC	r1, [r9, #f_splits]
	SUBCC	r4, r4, r1
inbothalfTC3
	LDRB	r1, [r4]
	FNupper	r1
	CMP	r1, #'A'
	BLT	notANYone
		;     CMP     1,#ASC"["
		;     CMPNE   1,#ASC"]"
		;     BEQ     notANYone
	CMP	r1, #'Z'
	MOVGT	r1, #'Z'
	SUB	r1, r1, #'A'
	LDRB	r8, lastcharacterfound
	TEQ	r8, #'''
	BEQ	soontobackfromparam
	ADRL	r12, AlphaIndex
	ADD	r1, r12, r1, ASL #2
	LDR	r1, [r1]
	LDR	r12, locoftablethree
	ADD	r12, r12, r1
backfromparam
lpa2
	MOV	r8, #0	;  REM tablepointer
lpa1
	LDRB	r1, [r12, r8]
	CMP	r1, #'_'
	BEQ	anunderscorehere
	FNupper	r1
	CMP	r1, #'Z'
	MOVGT	r10, r8
	BGT	gotexactmatch
anunderscorehere
	MOV	r7, r1
	ADD	r5, r4, r8
	LDR	r1, [r9, #f_ptr]
		; CMP     5,1
		; BCC     notANYone
	LDR	lr, [r9, #f_splito]
	ADD	lr, r1, lr
	CMP	r5, lr
	BCC	inbothalfTC4
	LDR	lr, [r9, #f_splite]
	ADD	lr, r1, lr
	CMP	r5, lr
	LDRCC	r1, [r9, #f_splits]
	ADDCC	r5, r5, r1
inbothalfTC4
	LDRB	r1, [r5]
		; LDMFD   13 !,{5}
	FNupper	r1
	CMP	r1, #'}'
	CMPNE	r1, #']'
	CMPNE	r1, #')'
	CMPNE	r1, #';'
	MOVEQ	r1, #' '
	CMP	r1, #' '
	MOVLT	r1, #' '
tabovr1
	ADD	r8, r8, #1
	CMP	r7, r1
	BGT	bigger1
	BEQ	lpa1
maybenot
	ADD	r12, r12, r8
	SUB	r12, r12, #1
_altered_4
	LDRB	r1, [r12], #1
	CMP	r1, #'z'
	BLE	_altered_4
	LDRB	r1, [r12]
	CMP	r1, #'*'
	BNE	lpa2
couldnotfindit
		;     B     notANYone
		;     RSB     8,11,#0
		;     MOV     1,#&12
		;     TST     2,#&8000000
		;     BEQ     ChooseYerColour
		;  BIC     R2,R2,#&20000000 ; REM really not found...
notANYone
	LDMFD	sp!, {r4-r12, pc}
soontobackfromparam
	ADRL	r12, AlphaIndex2
	ADD	r1, r12, r1, ASL #2
	LDR	r1, [r1]
	LDR	r12, locoftabletwo
	ADD	r12, r12, r1
	B	backfromparam
bigger1
	CMP	r8, #1
	BEQ	couldnotfindit
	B	maybenot
Prefixbit
	RSB	r10, r11, #0
		; STR     10,cntcharback
		; LDRB    R1,[R6] ; REM ??? V DUBIOUS...
		; CMP     R1,#ASC"."
		; ADDEQ   R10,R10,#1
	MOV	r1, #0x0D
	B	ChooseColour2
ChooseYerColour
	LDR	r9, storedr6flu
	CMP	r9, #0
	BLE	notANYone
	LDR	r9, lastcharacterfound
	CMP	r9, #'#'
	BEQ	notANYone
inChooseYerColour
	ADD	r9, r6, r3
	LDRB	r9, [r9, r11]	;  REM QUICK FIX...
	CMP	r9, #0x0A	;  REM ""
	LDMEQFD	sp!, {r4-r12, pc}
	MOV	r9, #0
	ADD	r7, r6, r11
	ADD	r6, r7, r3
		; LDR     11,Sol6
	LDR	r11, adrofrsix
lasdwAO
	ADD	r4, r7, r9
	CMP	r4, r11
	STRCSB	r1, [r6, r9]
	ADD	r9, r9, #1
	CMP	r9, r8
	BLT	lasdwAO
	MOV	r1, #0xEA00
	LDMFD	sp!, {r4-r12, pc}
apreChooseColour2
		;     B       notANYone
	CMP	r1, #0x0F
	MOVNE	r1, #0x12
	RSBNE	r10, r11, #0
	B	inChooseColour2
gotexactmatch
	TST	r2, #0x8000000
	BNE	notANYone
	BL	CheckRoutine
	LDR	r1, storedr6flu
	CMP	r1, #0
	BLE	notANYone
		; TEQ     R8,R10
		; TEQEQ   R9,#ASC"{"
		; BEQ     Prefixbit
	MOV	r1, #0x0D
		; TEQ     9,#ASC"}"
		; MovEQ   1,#&10
		; BICEQ   2,2,#&FF
		; OrrEQ   2,2,#&0C
	TEQ	r9, #'}'
	MOVEQ	r1, #0x0C
	TEQ	r9, #'~'
	MOVEQ	r1, #0x10
	TEQ	r9, #174
	MOVEQ	r1, #0x11
	TEQ	r9, #156
	MOVEQ	r1, #0x12
		; TEQ     9,#ASC""
		; MovEQ   1,#&14
		; BICEQ   2,2,#&FF
		; OrrEQ   2,2,#&09
		; TEQ     9,#ASC"²"
		; MovEQ   1,#&0F
		; TEQ     9,#ASC"}"
		; MovEQ   1,#&11
ChooseColour2
		; LDR     9,lastcharacterfound
		; CMP     9,#ASC","
		; CMP     9,#ASC"$"
		; BEQ     apreChooseColour2
		; CMP     9,#ASC"#"
		; BEQ     notANYone
inChooseColour2
	ADD	r9, r6, r3
	LDRB	r9, [r9, r11]	;  REM QUICK FIX...
	CMP	r9, #0x0A	;  REM ""
	LDMEQFD	sp!, {r4-r12, pc}
	MOV	r9, #0
	ADD	r7, r6, r11
	ADD	r6, r7, r3
	LDR	r11, adrofrsix
	ADRL	r5, w_formmb
	LDR	r5, [r5, #8]
lasdwA
	ADD	r4, r7, r9
	CMP	r4, r11
	BCC	beforesolhereargh
	LDRB	r4, [r12, r9]
	TST	r5, #(1 << 22)
	BLNE	maker4lower
	TST	r5, #(1 << 21)
	BLNE	maker4upper
	TST	r5, #0x08000000
	STRNEB	r4, [r7, r9]
lasdwA1
		; CMP     4,#ASC"}"
		; CMP     4,#ASC"#"
	STRB	r1, [r6, r9]
beforesolhereargh
	ADD	r9, r9, #1
	LDR	r4, cntcharback
	CMP	r9, r4
	BCS	colouringrapidexit
	CMP	r9, r8
	BLT	lasdwA
	CMP	r9, r10
	BLT	lasdwA1
colouringrapidexit
	LDMFD	sp!, {r4-r12, pc}
maker4lower
	FNlower	r4
	MOV	pc, lr
maker4upper
	FNupper	r4
	MOV	pc, lr
maker1lower
	FNlower	r1
	MOV	pc, lr
maker1upper
	FNupper	r1
	MOV	pc, lr
maker0upper
	FNupper	r0
	MOV	pc, lr
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CheckRoutine
	ADD	r1, r12, r8
	SUB	r1, r1, #1
_altered_5
	LDRB	r9, [r1], #1
	CMP	r9, #'z'
	BLE	_altered_5
	ORR	r2, r2, #0x10000000
		;     TEQ     R9,#ASC"~"
		;     MOVEQ   R1,#&10
	MOV	pc, lr
Dater47
	DCD	0x0
Brunch208
	LDR	r11, Dater47
	MOV	pc, lr
Brunch210
	STMFD	sp!, {r0, r1, lr}
	LDR	r11, Dater47
	LDR	r0, [r8, #40]
	AND	r0, r0, #0xFF
	MVN	lr, #0
	LDR	r1, [r11, #8]
	TEQ	r0, r1
	ADDEQ	lr, lr, #1
	LDRNE	r1, [r11, #4]
	TEQNE	r0, r1
	ADDEQ	lr, lr, #1
	LDRNE	r1, [r11, #0]
	TEQNE	r0, r1
	ADDEQ	lr, lr, #1
	LDMFD	sp!, {r0, r1, pc}
	STMFD	sp!, {r11, lr}
	LDR	r11, Dater47
	TEQ	r1, #0
	BLEQ	Tk1frm12andret
	LDMFD	sp!, {r11, pc}
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
charchar
	STMFD	sp!, {lr}
	MOV	r1, #0
FromMJE4
	CMP	r1, r5
	BGE	FromMJE5
	LDRB	r0, [r7, r1]
	TEQ	r0, #']'
	TEQNE	r0, #'}'
	TEQNE	r0, #')'
	TEQNE	r0, #'.'
	ADDNE	r1, r1, #1
	BNE	FromMJE4
	CMP	r5, #2
	ADDCS	r1, r1, #1
	BCS	FromMJE4
	BL	FromMJE6
	SUB	r5, r5, r1
	ADD	r7, r7, r1
	TEQ	r0, #']'
	BLEQ	FromMJE9
	TEQ	r0, #'}'
	BLEQ	FromMJE10
	TEQ	r0, #')'
	BLEQ	FromMJE10a
	TEQ	r0, #'.'
	BLEQ	Abbreviation
	SUB	r5, r5, #1
	ADD	r7, r7, #1
	MOV	r1, #0
	B	FromMJE4
FromMJE5
	BL	FromMJE6
	LDMFD	sp!, {pc}
FromMJE6
	CMP	r1, #0
	MOVLE	pc, lr
	STMFD	sp!, {r1-r10, lr}
	MOV	r5, r1
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
	LDMFD	sp!, {r1-r10, pc}
FromMJE9
	STMFD	sp!, {r1-r10, lr}
	ADRL	r0, w_formmb
	LDR	r0, [r0, #8]
	TST	r0, #(1 << 25)
	BEQ	overproblem1
		; SWI &107
	LDR	r0, [r10, #12]
	MOV	r1, #'['
	MOV	r2, #']'
	BL	FromMJE18
	BLEQ	FromMJE11
overproblem1
	MOV	r5, #1
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
	LDMFD	sp!, {r1-r10, pc}
FromMJE10
	STMFD	sp!, {r1-r10, lr}
	ADRL	r0, w_formmb
	LDR	r0, [r0, #8]
	TST	r0, #(1 << 24)
	BEQ	_altered_6
	LDR	r0, [r10, #12]
	MOV	r1, #'{'
	MOV	r2, #'}'
	BL	FromMJE18
	BLEQ	FromMJE11
overproblem2
		;  REM ????
	MOV	r5, #1
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
	LDMFD	sp!, {r1-r10, pc}
FromMJE10a
	STMFD	sp!, {r1-r10, lr}
	ADRL	r0, w_formmb
	LDR	r0, [r0, #8]
	TST	r0, #(1 << 24)
	BEQ	overproblem2
	LDR	r0, [r10, #12]
	MOV	r1, #'('
	MOV	r2, #')'
	BL	FromMJE18
	BLEQ	FromMJE11
_altered_6
		;  REM ????
	MOV	r5, #1
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
	LDMFD	sp!, {r1-r10, pc}
Abbreviation
	STMFD	sp!, {r0-r12, lr}
	ADRL	r0, w_formmb
	LDR	r0, [r0, #8]
	TST	r0, #(1 << 23)
	BEQ	asnormaldot
	MOV	r0, #0
	STR	r0, startslash
	STR	r0, isentity
	LDR	r0, [r10, #12]
	SUB	lr, r0, #1
	STR	lr, storedofsofeow
	MOV	r1, #'('
		; MOV     R2,#ASC"?"
	BL	checkbackone
	BEQ	firstabbrev
		;     LDMFD   R13,{R0-R12,R14}
		;     LDR     R0,[R10,#12]
		;     MOV     R1,#ASC"="
		;     MOV     R2,#ASC" "
		;     BL      checkbackthree
		;     BEQ     thirdabbrev
		;     LDMFD   R13,{R0-R12,R14}
		;     LDR     R0,[R10,#12]
		;     MOV     R1,#ASC"<"
		;     MOV     R2,#ASC">"
		;     BL      checkbacktwo
		;     BEQ     secondabbrev
		;     LDMFD   R13,{R0-R12,R14}
		;     LDR     R0,[R10,#12]
		;     MOV     R1,#ASC"&"
		;     MOV     R2,#ASC" "
		;     BL      checkbackent
		;     BEQ     entityabbrev
asnormaldot
	MOV	r5, #1
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
	LDMFD	sp!, {r0-r12, pc}
		; .secondabbrev
		;     LDR     0,locoftabletwo
		;     LDR     1,storedofsofsow
		;     LDR     2,storedofsofeow
		;     SUB     2,2,1
		;     FNlong_adr("  ",3,AlphaIndex2)
		;     BL      getadrofabrcmd
		;     ; REM returns adress in r7, length in r5.
		;     BEQ     beepandexit
		;
		;     B       insrtstfhre
beepandexit
		;  REM stop full
	LDMFD	sp, {r0-r12, lr}
	ADR	r7, insstrtst
	MOV	r5, #1
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
realbeepandexit
		; SWI     &107
	LDMFD	sp!, {r0-r12, pc}
firstabbrev
	ADRL	r0, TableHere
		; LDR     0,locoftablethree
	LDR	r1, storedofsofsow
	LDR	r2, storedofsofeow
	SUB	r2, r2, r1
	ADRL	r3, AlphaIndex
	BL	getadrofabrcmd
		;  REM returns adress in r7, length in r5.
	BEQ	beepandexit
	B	insrtstfhre
insrtstfhre
	MOV	r2, #31	;  max value
	ADR	r3, deldatahere
	ADRL	r5, w_formmb
	LDR	r5, [r5, #8]
		;     LDR     4,isentity
		;     CMP     4,#0
		;     MOVNE   5,#0
_altered_7
	LDRB	r1, [r7, r2]
		; TST     5,#(1 << 22)
		; BLNE    maker1lower
		; TST     5,#(1 << 21)
		; BLNE    maker1upper
	STRB	r1, [r3, r2]
	SUBS	r2, r2, #1
	BPL	_altered_7
	FNcall	Zap_StartOp
	LDR	r2, delhash
	ADD	r2, r2, #1
	LDR	r1, storedofsofsow
	MOV	r0, #0x2
	FNcall	Zap_Command
	LDR	r2, inshash
	ADR	r3, deldatahere
	LDR	r1, storedofsofsow
	MOV	r0, #0x1
	FNcall	Zap_Command
		;     LDR     0,endtermhere
		;     CMP     0,#ASC"¿"
		;     BNE     noequalsaddedon
		;
		;     FNlong_adr("  ",3,w_formmb + 4)
		;     LDRB    3,[3,#2]
		;     CMP     3,#0
		;     BNE     noequalsaddedon
		;
		;     ADR     3,eqstrhere
		;     LDR     2,inshash
		;     LDR     1,storedofsofsow
		;     ADD     1,1,2
		;     MOV     0,#&1
		;     MOV     2,#1
		;     FNcall(Zap_Command)
		; .noequalsaddedon
		;     FNlong_adr("  ",3,w_formmb + 4)
		;     LDRB    3,[3,#2]
		;     CMP     3,#0
		;     BNE     noclosetagneeded
		;
		;     LDR     1,endtermhere
		;     LDR     0,startslash
		;     TEQ     1,#ASC"º"
		;     TEQNE   0,#ASC"/"
		;     BNE     noclosetagneeded
		;     ADR     3,gtstrhere
		;     LDR     2,inshash
		;     LDR     1,storedofsofsow
		;     ADD     1,1,2
		;     MOV     0,#&1
		;     MOV     2,#1
		;     FNcall(Zap_Command)
		;
		; .noclosetagneeded
	FNcall	Zap_StopOp
	LDMFD	sp!, {r0-r12, pc}
deldatahere
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
insstrtst
	=	"...."
		; .eqstrhere
		;     EQUS "===="
		; .gtstrhere
		;     EQUS ">>>>"
getadrofabrcmd
	STMFD	sp!, {r8-r12, lr}
	MOV	r6, r3
	MOV	r3, r0
	MOV	r4, r1
	MOV	r5, r2
	MOV	r0, r4
	BL	GetCharAtFileOffset
	FNupper	r0
	CMP	r0, #'A'
	BLT	rapidleaving
	CMP	r0, #'Z'
	BGT	rapidleaving
	SUB	r0, r0, #'A'
	ADD	r11, r6, r0, ASL #2
	LDR	r11, [r11]
	ADD	r11, r11, r3
_altered_8
	MVN	r12, #0
_altered_9
	ADD	r12, r12, #1
	ADD	r0, r4, r12
	BL	GetCharAtFileOffset
	LDR	r7, isentity
	TST	r7, #0x100
	BLEQ	maker0upper
	MOV	r2, r0
	LDRB	r1, [r11, r12]
	CMP	r1, #'{'
	BCS	fndcmdend2
	LDR	r7, isentity
	TST	r7, #0x100
	BLEQ	maker1upper
	CMP	r1, r2
	BNE	fndcmdend
dontcomparejn
	CMP	r12, r5
	BLT	_altered_9
		; STMFD   R13!,{R8-R12}
		;
	STR	r12, delhash
	MOV	r7, r11
	MOV	r12, #0
loop4
	ADD	r12, r12, #1
	LDRB	r1, [r11, r12]
	CMP	r1, #' '
	CMPNE	r1, #'{'
	BLT	loop4
	CMP	r1, #' '
	ADDEQ	r11, r11, r12
	LDREQB	r1, [r11, #1]
	STR	r1, endtermhere
	STR	r12, inshash
	MOVS	r5, #8
	LDMFD	sp!, {r8-r12, pc}
fndcmdend
	MOV	r0, r2
	BL	maker0upper
	BL	maker1upper
	CMP	r0, r1
	BEQ	loop3
	CMP	r12, #0
	BEQ	rapidleaving
loop3
	ADD	r12, r12, #1
	LDRB	r1, [r11, r12]
	CMP	r1, #'{'
	BCC	loop3
fndcmdend2
	ADD	r12, r12, #1
	ADD	r11, r11, r12
	B	_altered_8
rapidleaving
	MOVS	r5, #0
	LDMFD	sp!, {r8-r12, pc}
FromMJE11
	STMFD	sp!, {r0-r7, lr}
	LDR	r4, [r10, #12]
	STR	r0, [r10, #12]
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_ReflectCaret
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	SWI	XOS_ReadMonotonicTime
	MOV	r3, r0
	BL	FromMJE26
	ADD	r3, r3, r0
FromMJE12
	MOV	r0, #0x98
	MOV	r1, #0
	SWI	XOS_Byte
	BCC	FromMJE13
	SWI	XOS_ReadMonotonicTime
	CMP	r0, r3
	BLT	FromMJE12
FromMJE13
	STR	r4, [r10, #12]
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_ReflectCaret
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	LDMFD	sp!, {r0-r7, pc}
FromMJE18
	STMFD	sp!, {r3, r4, lr}
	MOV	r3, r0
	MOV	r4, #1
_altered_10
	SUBS	r3, r3, #1
	BLT	FromMJE20a
	MOV	r0, r3
	BL	GetCharAtFileOffset
	TEQ	r0, r2
	ADDEQ	r4, r4, #1
	BEQ	_altered_10
	CMP	r2, #';'
	TEQEQ	r0, #' '
	BEQ	FromMJE20a
	TEQ	r0, r1
	BNE	_altered_10
	SUBS	r4, r4, #1
	BNE	_altered_10
FromMJE20
		; MOVS    0,#0
	MOV	r0, r3
	LDMFD	sp!, {r3, r4, pc}
FromMJE20a
	MOVS	r0, #1
	LDMFD	sp!, {r3, r4, pc}
FromMJE20b
	MOVS	r0, #0
	LDMFD	sp!, {r3, r4, pc}
storedofsofsow
	DCD	0
storedofsofeow
	DCD	0
delhash
	DCD	0
inshash
	DCD	0
endtermhere
	DCD	0
startslash
	DCD	0
isentity
	DCD	0
isfollowingch
	DCD	0
checkbackone
	STMFD	sp!, {r3, r4, lr}
	SUB	r3, r0, #1
_altered_11
	STR	r3, storedofsofsow
	SUBS	r3, r3, #1
	BLT	FromMJE20b
	MOV	r0, r3
	BL	GetCharAtFileOffset
		; TEQ     R0,R2
		; ADDEQ   R4,R4,#1
		; BEQ     loop
	CMP	r0, #'@'
	BCC	FromMJE20b
	TEQ	r0, r1
	BNE	_altered_11
	B	FromMJE20
faspachere
	SUBS	r3, r3, #1
	BLT	FromMJE20a
	MOV	r0, r3
	BL	GetCharAtFileOffset
	CMP	r0, #' '
	BEQ	faspachere
	CMP	r0, #'<'
	BEQ	FromMJE20b
	B	FromMJE20a
possiblepath
	STR	r0, startslash
_altered_12
	SUBS	r3, r3, #1
	BLT	FromMJE20a
	MOV	r0, r3
	BL	GetCharAtFileOffset
	TEQ	r0, #'<'
	BEQ	FromMJE20b
	TEQ	r0, #' '
	BEQ	_altered_12
	B	FromMJE20a
checkbacktwo
	STMFD	sp!, {r3, r4, lr}
	MOV	r4, #0
	SUB	r3, r0, #1
_altered_13
	SUBS	r3, r3, #1
	BLT	FromMJE20a
	MOV	r0, r3
	BL	GetCharAtFileOffset
	CMP	r4, #0
	BNE	overspecchars
	CMP	r0, #' '
	MOVEQ	r4, #1
	ADDEQ	lr, r3, #1
	STREQ	lr, storedofsofsow
	TEQ	r0, #'='
	TEQNE	r0, #'"'
	TEQNE	r0, #'/'
	BEQ	FromMJE20a
overspecchars
	TEQ	r0, #'>'
	BEQ	FromMJE20a
	TEQ	r0, #'<'
	BNE	_altered_13
	CMP	r4, #0
	BEQ	FromMJE20a
	B	FromMJE20b
checkbackthree
	STMFD	sp!, {r3, r4, lr}
	MOV	r4, #0
	SUB	r3, r0, #1
_altered_14
	SUBS	r3, r3, #1
	BLT	FromMJE20a
	MOV	r0, r3
	BL	GetCharAtFileOffset
	CMP	r0, #63
	BCS	_altered_14
	B	afterloopa
_altered_15
	SUBS	r3, r3, #1
	BLT	FromMJE20a
	MOV	r0, r3
	BL	GetCharAtFileOffset
afterloopa
	CMP	r4, #1
	BEQ	oversomechks
	CMP	r4, #2
	BEQ	overmostchks
	CMP	r0, #' '
	MOVEQ	r4, #1
	ADDEQ	r1, r3, #1
	STREQ	r1, storedofsofsow
oversomechks
	TEQ	r0, #'='
	BEQ	fddeqls
	CMP	r0, #' '
	CMPNE	r0, #'@'
	BCC	FromMJE20a
	CMP	r4, #1
	BNE	overmostchks
overmanychks
	TEQ	r0, #'"'
	TEQNE	r0, #'/'
	CMP	r0, #'@'
	BCS	FromMJE20a
overmostchks
	TEQ	r0, #'>'
	BEQ	FromMJE20a
	CMP	r0, #'<'
	BNE	_altered_15
	CMP	r4, #2
	BEQ	FromMJE20b
	B	FromMJE20a
fddeqls
	CMP	r4, #0
	MOV	r4, #2
	BNE	overmostchks
	ADD	r1, r3, #1
	STR	r1, storedofsofsow
	B	overmostchks
checkbackent
	STMFD	sp!, {r3, r4, lr}
	SUB	r3, r0, #1
_altered_16
	STR	r3, storedofsofsow
	SUBS	r3, r3, #1
	BLT	FromMJE20a
	MOV	r0, r3
	BL	GetCharAtFileOffset
	CMP	r0, #'&'
	BCC	FromMJE20a
	BNE	_altered_16
	B	FromMJE20b
FromMJE26
		;  REM get delay
	STMFD	sp!, {r1, r2, lr}
	ADRL	r1, w_formmb
	LDR	r1, [r1, #8]
	CMP	r2, #')'
	BEQ	ampsemi
	ADRL	r2, w_formmb + 4
	LDRB	r0, [r2]
	TST	r1, #(1 << 25)
	MOVEQ	r0, #0
	LDMFD	sp!, {r1, r2, pc}
ampsemi
	ADRL	r2, w_formmb + 4
	LDRB	r0, [r2, #1]
	TST	r1, #(1 << 24)
	MOVEQ	r0, #0
	LDMFD	sp!, {r1, r2, pc}
		; .Zap_insertstuff
		;     STMFD   R13 !,{R7,R14}
		;     MOV     0,#1
		;     LDR     R14,[R12,#0]
		;     ADD     R14,R14,#Zap_DoCommand
		;     STMFD   R13 !,{R14}
		;     MOV     R14,PC
		;     LDMFD   R13 !,{PC}
		;     LDMFD   R13 !,{R7,PC}
FromMJE27
	STMFD	sp!, {r9, r11, lr}
	LDR	r9, [r11, #4]	;  REM mode word...
	LDMFD	sp!, {r11}
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_BaseMode
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	LDMFD	sp!, {r11, pc}
FromMJE28
	LDR	r0, [r10, #12]
	SUBS	r0, r0, #1
	MOVLT	r0, #0
	MOVLT	pc, lr
GetCharAtFileOffset
	STMFD	sp!, {lr}
	LDR	lr, [r9, #f_splito]
	CMP	r0, lr
	LDRCS	lr, [r9, #f_splits]
	ADDCS	r0, r0, lr
	LDR	lr, [r9, #0]
	LDRB	r0, [lr, r0]
	LDMFD	sp!, {pc}
FromMJE30
	LDRB	r2, [r1], #1
	CMP	r2, #0x20
	MOVCC	r2, #0
	STRB	r2, [r0], #1
	BCS	FromMJE30
	SUB	r0, r0, #1
	MOVS	pc, lr
	MOV	r1, r0
	MOV	r0, #0
FromMJE31
	LDRB	r2, [r1, r0]
	ADD	r0, r0, #1
	CMP	r2, #0x20
	BCS	FromMJE31
	MOVS	pc, lr
FromMJE32
	TEQ	r8, #0
	LDRNE	r0, [r8, #40]
	MOVNE	pc, lr
	STMFD	sp!, {r1, lr}
	MOV	r1, #3
	LDR	lr, [r12, #0]
	ADD	lr, lr, #0x48
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	LDMFD	sp!, {r1, pc}
FromMJE33
	TEQ	r8, #0
	LDRNE	r0, [r8, #92]
	MOVNE	pc, lr
	STMFD	sp!, {r1, lr}
	MOV	r1, #2
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_ReadVar
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	LDMFD	sp!, {r1, pc}
GetModeWord
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
	LDR	r2, [r12, #0]
	ADD	r2, r2, #Zap_GetModeWord
	MOV	lr, pc
	MOV	pc, r2
	MOV	r7, r0
	LDMFD	sp!, {r0-r2, pc}
PutModeWord
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
	LDR	r2, [r12, #0]
	ADD	r2, r2, #Zap_PutModeWord
	MOV	lr, pc
	MOV	pc, r2
	LDMFD	sp!, {r0-r2, pc}
	STMFD	sp!, {r0-r2, lr}	;  REM ????
	LDR	r1, [r11, #8]
	B	FromMJE35
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
	B	FromMJE35
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #0]
FromMJE35
	MOV	r0, r7
	LDR	r2, [r12, #0]
	ADD	r2, r2, #0x0168
	MOV	lr, pc
	MOV	pc, r2
	LDMFD	sp!, {r0-r2, pc}
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ALIGN
localstorevalue
	DCD	0
BrunchSave
	STMFD	sp!, {r1, r2, lr}
	FNcall	Zap_SaveFile
	LDMFD	sp!, {r1, r2, lr}
JustRun
	STMFD	sp!, {r0-r12, lr}
	MOV	r0, #6
	MOV	r3, #0x260
	SWI	XOS_Module
	BVS	totalfailure
	LDR	r0, prestoregap
	STR	r2, localstorevalue
	STR	r0, [r2], #4
	LDR	r1, [r9, #12]
	BL	OneA
	LDR	r0, localstorevalue
	SWI	XWimp_StartTask	;  REM "XOS_CLI"
	MOV	r0, #7
	LDR	r2, localstorevalue
	SWI	XOS_Module
totalfailure
	LDMFD	sp!, {r0-r12, pc}
OneA
	LDRB	r0, [r1], #1
	STRB	r0, [r2], #1
	CMP	r0, #0x20
	BCS	OneA
	MOV	r0, #0
	STRB	r0, [r2, #-1]
	MOV	pc, lr
startofsela
	DCD	0
lenofsela
	DCD	0
R8tmp
	DCD	0
R9tmp
	DCD	0
tmpr2
	DCD	0
tmpr0a
	DCD	0
cmdtypeStore
	DCD	0
	DCD	0x8017	;  REM flags...
CmdAct
	MOV	pc, lr
commentdepth
	DCD	0
hadenoughselcmd
	FNcall	Zap_StopOp
endofentcmd
	LDMFD	sp!, {r0-r12, pc}
tohaveajollygoodtime
	STMFD	sp!, {lr}
	BL	checkbackwardsnow
	LDR	lr, [r9, #f_ptr]
	LDR	r0, [r9, #f_splito]
	ADD	r0, r0, lr
	CMP	r7, r0
	LDREQ	r0, [r9, #f_splits]
	ADDEQ	r0, r0, r7
	MOVNE	r0, r7
	LDR	r1, [r9, #f_bufl]
	ADD	r1, lr, r1
	CMP	r0, r1
	LDRCCB	r0, [r0]	;  Hmm...(Beyond end...?)
	AND	r1, r12, #0xFF	;  REM end character... yes! At last...
	TEQ	r0, r1	;  REM  ! the same length as the width
	ADDEQ	r7, r7, #1
	ADDEQ	r11, r11, #1
	LDMFD	sp!, {lr}
	B	tohaveajollygoodback
tocheckbackwardsnow
	ADD	r11, r11, #1	;  REM This code only executed if <CR>...
	BIC	r2, r2, #0xCF000000	;  REM START OF LINE FLAGS...xxx
	BIC	r2, r2, #0x00F00000
		;  B       backcheckbackwardsnow ; yyy
	STMFD	sp!, {lr}
		;  FNlong_adr("  ",1,nlflaghere)
		;  STR     14,[1]
		;  SWI &107 ; REM only at real line ends
	BL	checkbackwardsnow
	LDMFD	sp!, {lr}
	B	backcheckbackwardsnow
checkbackwardsnow
	STMFD	sp!, {r0, r2, lr}
	AND	r1, r2, #0xFF
	TEQ	r1, #0x02
	BNE	endcheckbackontoent
	CMP	r0, #'0'
	BCC	endcheckbackwardsnow
	CMP	r0, #'5'
	BCC	alltizfine
	CMP	r0, #'@'
	BCC	endcheckbackwardsnow
	CMP	r0, #'{'
	BCS	endcheckbackwardsnow
alltizfine
	ADD	r7, r7, #1
	BL	TableChk2
	SUB	r7, r7, #1
endcheckbackwardsnow
	LDMFD	sp!, {r0, r2, pc}
endcheckbackontoent
		;  And     1,2,#&FF
	ADD	r7, r7, #1
		;     TEQ     1,#&02
		;     BNE     secondendofent
		;     MOV     1,#1
		;     B       EntityTest
secondendofent
	SUB	r7, r7, #1
	LDMFD	sp!, {r0, r2, pc}


	DCD	0x8017
Cmdhtmlflagstoggle
	STMFD	sp!, {lr}
	LDR	r10, [r0]
	ADRL	r1, modenumberlocal
	LDR	r1, [r1]
		; CMP     8,#0
		; LDRNEB  0,[8,#w_format]
		; CMPNE   0,1
		; LDMNEFD D !,{PC}
	STMFD	sp!, {r1-r11}
	FNcall	Zap_GetModeWord
	LDMFD	sp!, {r1-r11}
	MOV	r6, r0
	LDR	r7, [r6, #0xC]
	CMP	r2, #15
	BEQ	tickquery
	MOV	r5, #0
	AND	r1, r10, #0xFF
	BL	execute
	MOV	r1, r10, LSR #8
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	MOV	r1, r10, LSR #16
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	MOV	r1, r10, LSR #24
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	STR	r7, [r6, #0xC]
	ADRL	r0, w_formmb
	STR	r7, [r0, #8]
	CMP	r8, #0
	LDMEQFD	sp!, {pc}
	ANDS	r0, r5, #8
	LDMFD	sp!, {pc}
execute
	AND	r2, r1, #0x1F
	CMP	r2, #25
	CMPNE	r2, #24
	ORREQ	r5, r5, #0x08
	MOV	r3, #1
	MOV	r3, r3, LSL r2
	MOV	r2, #0
	MOV	r4, #0
	MOV	r1, r1, LSR #5
	AND	r1, r1, #3
	CMP	r1, #1
	MOVEQ	r2, r3
	CMP	r1, #2
	MOVEQ	r4, r3
	BIC	r7, r7, r2
	ORR	r7, r7, r4
	EOR	r7, r7, r3
	MOV	pc, lr
tickquery
	AND	r2, r10, #0x1F
	MOV	r3, #1
	MOV	r3, r3, LSL r2
	TST	r7, r3
	MOVNE	r0, #1
	MOVEQ	r0, #0
	LDMFD	sp!, {pc}
sortwwout2
	STMFD	sp!, {r5, lr}
	FNcall	Zap_SaveWinStatus
	FNcall	Zap_NewWinStatus	;
	LDMFD	sp!, {r5, pc}


verylocalR8tmp
	DCD	0
	DCD	0

GtIt2
	ADR	r0, AlphaIndex2
	SUB	r7, r8, #'A'
	ADD	r0, r0, r7, LSL #2
	ADRL	r7, locoftabletwo
	LDR	r7, [r7]
	SUB	r7, r1, r7
	STR	r7, [r0]
	B	backinaction2
GtIt3
	ADR	r0, AlphaIndex
	SUB	r7, r8, #'A'
	ADD	r0, r0, r7, LSL #2
	ADRL	r7, locoftablethree
	LDR	r7, [r7]
	SUB	r7, r1, r7
	STR	r7, [r0]
	B	backinaction3

BrunchYYY
	CMP	r0, #'9'
	RSBLSS	r1, r0, #'0'
	BHI	oversimplecharacter
	CMP	r0, #'F'
	RSBLSS	r1, r0, #'A'
	BHI	oversimplecharacter
	TEQ	r0, #'.'
	TEQNE	r0, #'#'
	TEQNE	r0, #'_'
	BEQ	oversimplecharacter
	AND	r1, r2, #0xFF
	CMP	r1, #0x0F
	BICEQ	r2, r2, #0xD	;  leaving &02
		; TST     2,#&30000000
		; BEQ     BeforeColour%
		; BIC     2,2,#&20000000 ; REM ttnow +Zen
		; Orr     2,2,#&10000000 ; REM newtt
	CMP	r6, #0
	BLT	BeforeColour
	MOV	r1, #0x08	;  ???????????????????????
	STRB	r1, [r6, r3]
	PUSH	"r2, r5"
;	STMFD	sp!, {r5, r2}
	SUB	r5, r7, #2
	LDR	r1, [r9, #f_ptr]
	CMP	r5, r1
	BCC	inbothalfafterA
	LDR	r2, [r9, #f_splito]
	ADD	r2, r1, r2
	CMP	r5, r2
	BCC	inbothalfbeforeA1
	LDR	r2, [r9, #f_splite]
	ADD	r2, r1, r2
	CMP	r5, r2
	LDRCC	r2, [r9, #f_splits]
	SUBCC	r5, r5, r2
inbothalfbeforeA1
	LDRB	r1, [r5]
inbothalfafterA
	PULL	"r2, r5"
;	LDMFD	sp!, {r5, r2}
		; CMP     1,#ASC"&"
	CMP	r1, #'R'
	CMPNE	r1, #'r'
	BEQ	atoffsminusone
	B	AfterColour
getmarkersposition
	STMFD	sp!, {r9, r10, lr}
	ADR	r9, getmarkersposition
_altered_18
	LDR	r10, [r9], #4
	CMP	r10, r0
	BNE	_altered_18
	MOV	r0, r9
	LDMFD	sp!, {r9, r10, pc}
		; .indexentitylist
		;     EQUB TRUE; REM 140
		;     EQUB 92;   REM 141
		;     EQUB TRUE; REM 142
		;     EQUB TRUE; REM 143
		;     EQUB 28;   REM 202
		;     EQUB 102;  REM 253 ý
		;     EQUB 89;   REM 254 þ
		;     EQUB 104;  REM 255 ÿ
		;
		; ALIGN
prestoregap
	=	"Run "
AlphaIndex
	=	10, "Greetings from The Mandala Centre.", 10, "Please feel free place any additional commands in the space provided", 10
	ALIGN
AlphaIndex2
	=	10, "Greetings from The Mandala Centre.", 10, "Please feel free place any additional commands in the space provided", 10
	ALIGN
		; .entitylist
		;     EQUS    "amp{"     ; 000
		;     EQUS    "yuml{"    ; 104
		;     EQUS    "zen{"     ; 105
		;     EQUS    "**"
		;
		; ALIGN
firsthashhash
		;     EQUS    CHR$10 + "##" + CHR$10
		;
		; .ThirdParam
		;     EQUS    "All {"
		;
		;     EQUS    "Zero {"
		;     EQUS    "**"
		;     EQUB    10
	=	10, "##", 10
SecondParam
	=	"Access ~", "Address ~", "Adjacent ~", "Aft ~", "Access ~", "Address ~", "Adjacent ~", "Aft ~", "Alignment ~", "Base ~", "Bit_Order ~", "Body_Version ~", "Callable ~", "Caller ~", "Ceiling ~", "Class ~", "Component_Size ~", "Compose ~", "Constrained ~", "Copy_Sign ~", "Count ~", "Definite ~", "Delta ~", "Denorm ~", "Digits ~", "Exponent ~", "External_Tag ~", "First ~", "First_Bit ~", "Floor ~", "Fore ~", "Fraction ~", "Identity ~", "Image ~", "Input ~", "Last ~", "Last_Bit ~", "Leading_Part ~", "Length ~", "Machine ~", "Machine_Emax ~", "Machine_Emin ~", "Machine_Mantissa ~", "Machine_Overflows ~", "Machine_Radix ~", "Machine_Rounds ~", "Max ~", "Max_Size_In_Storage_Elements ~", "Min ~", "Model ~", "Model_Emin ~", "Model_Epsilon ~", "Model_Mantissa ~", "Model_Small ~", "Modulus ~", "Output ~", "Partition_ID ~", "Pos ~", "Position ~", "Pred ~", "Range ~", "Read ~", "Remainder ~", "Round ~", "Rounding ~", "Safe_First ~", "Safe_Last ~", "Scale ~", "Scaling ~", "Signed_Zeros ~", "Size ~", "Small ~", "Storage_Pool ~", "Storage_Size ~", "Succ ~", "Tag ~", "Terminated ~", "Truncation ~", "Unbiased_Rounding ~", "Unchecked_Access ~", "Val ~", "Valid ~", "Value ~", "Version ~", "Wide_Image ~", "Wide_Value ~", "Wide_Width ~", "Width ~", "Write ~", "X-AltSrc ~", "Z-Index ~", "**", 10
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ALIGN
	=	10, "##", 10
TableHere
	=	"abort |", "abs ®", "accept |", "access ", "all ", "and ®", "array ", "at |", "begin |", "body |", "boolean }", "case |", "constant ", "character }", "declare |", "delay |", "delta ", "digits ", "do |", "else |", "elsif |", "end |", "entry |", "exception |", "exit |", "for |", "function |", "float }", "false |", "generic |", "goto |", "if |", "in |", "is ", "integer }", "limited ", "loop |", "mod ®", "new ®", "not ®", "null |", "natural }", "of ", "or ®", "others |", "out |", "package |", "pragma |", "private ", "procedure |", "positive }", "raise |", "range ", "record ", "rem ®", "renames |", "return |", "reverse |", "select |", "separate |", "subtype ", "string }", "task |", "terminate |", "then |", "type ", "true |", "use |", "when |", "while |", "with |", "xor |", "zero |", "**", 10
	ALIGN

	END
