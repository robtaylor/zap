; Zap Util Command Extension
; Copyright (C) 1998 Zap Developers
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
; Cursor util functions and commands.
; Written by James Aylett unless credited separately.
;
; @INSELECTION			- is the cursor in the selection?
; @SELSTR			- return the selection
; @WINDOW, WINDOW		- stack/unstack window of cursor
; @CURSOR, CURSOR		- stack/unstack complete cursor position
; @CURSORCOLUMN			- stack/unstack cursor column
; @SELECTION, SELECTION		- stack/unstack complete selection position
; @LINE, GOTOLINE		- stack/unstack logical line number
; @LINEP, GOTOLINEP		- stack/unstack physical line number
; @ADDRESS, GOTOADDRESS		- stack/unstack address
;
; Notes
; I'd prefer GOTOLINE/GOTOLINEP/GOTOADDRESS n where n is < start(line/addr)
; to simply bottle out. This would _in_theory_ allow us to return a too-low
; number from @LINE/LINEP/ADDRESS without using testing in a command string.
; However note that this will have to be done by loading w_stline / w_addr
; and decrementing it, because (eg) w_stline = -1 is handled properly.
; The current method is not very satisfactory, certainly.

; Includes
		GET	h.ZapUtil
		GET	h.module

; What we give to other people
		EXPORT	cursor_inselection
		EXPORT	cursor_selstr
		EXPORT	cursor_window
		EXPORT	cursor_cursor
		EXPORT	cursor_cursorcolumn
		EXPORT	cursor_selection
		EXPORT	cursor_line
		EXPORT	cursor_gotoline
		EXPORT	cursor_linep
		EXPORT	cursor_gotolinep
		EXPORT	cursor_address
		EXPORT	cursor_gotoaddress

		LOCAL
; @INSELECTION
		DCD	(3:SHL:22)
		; Function only
cursor_inselection
		FNJSR

		CMP	cursorptr,#0
		BEQ	no$l				; no cursor block!

		MOV	r7,windptr

		FNcall	Zap_GetSel
		BVS	no$l
		BCS	no$l
		CMP	r7,windptr
		BNE	no$l				; cursor, sel in different windows

		LDR	r0,[cursorptr,#c_off]
		CMP	r0,r1
		BLT	no$l
		ADD	r1,r1,r2
		CMP	r0,r1
		BGE	no$l

		MOV	r1,#2
		MOV	r0,#-1
		FNRTSS

no$l		MOV	r1,#2
		MOV	r0,#0
		FNRTSS

		LOCAL
; @SELSTR
		DCD	(2:SHL:22)+(2:SHL:24)+(7)
		; Function only, takes word
cursor_selstr
		FNJSR

		FNcall	Zap_ReadSel
		BVS	none$l
		CMP	r3,#0
		BEQ	none$l

		CMP	r0,#0
		ADDEQ	r0,r2,#1
		CMP	r0,r2
		BLT	none$l

		MOV	r0,r3
		ADD	r1,r2,#1
		FNcall	Zap_Ensure
		BVS	none$l

		MOV	r1,#0
		STRB	r1,[r0,r2]
		MOV	r1,#3
		FNRTSS

; No selection - return NULL.
none$l		MOV	r1,#3
		MOV	r0,#0
		FNRTSS

		LOCAL
; @WINDOW, WINDOW
		DCD	(2:SHL:22)+(2:SHL:3)+(1)
		; Command takes word, function takes nothing
cursor_window
		FNJSR
		CMP	r2,#23
		BEQ	function$l

		SUB	r1,r1,#1
		LDR	r0,[r0,r1,LSL #2]		; window offset (last in list)
		FNcall	Zap_ConvWindOff
		CMP	windptr,#0
		FNRTS	EQ

		LDR	r0,[windptr,#w_poff]		; load saved cursor position
		BL	cursor_setcaret			; and use it

		FNRTSS

function$l
		FNcall	Zap_GetWindOff			; doesn't return VS
		MOV	r1,#2
		FNRTSS

		LOCAL
; @CURSORCOLUMN, CURSORCOLUMN
		DCD	(2:SHL:22)+(2:SHL:3)
		; Command takes word, function takes nothing
cursor_cursorcolumn
		FNJSR
		CMP	r2,#23
		BEQ	function$l

		CMP	cursorptr,#0
		FNRTS	EQ

		SUB	r1,r1,#1
		LDR	r4,[r0,r1,LSL #2]		; column (last in list)
		CMP	r4,#0
		FNRTS	LT				; < 0 => illegal column

;		BL	cursor_getcaret			; \X r0-r1 corrupted, r8-r10
;		FNRTS	CS
		LDR	r0,[cursorptr,#c_off]		; current file offset
		FNcall	Zap_OffLineCol			; \X r3 row
		FNRTS	VS
		LDR	r2,[windptr,#w_margin]
		ADD	r2,r2,r4			; column (inc margin)
		FNcall	Zap_FindOffset			; \X r0 file offset
		BLVC	cursor_setcaret

		FNRTS

function$l
		CMP	cursorptr,#0
		BEQ	none$l
;		BL	cursor_getcaret
;		BCS	none$l

;		LDR	r0,[cursorptr,#c_off]
;		FNcall	Zap_OffLineCol			; \X r2 column (inc margin)
;		BVS	none$l
		LDR	r2,[cursorptr,#c_col]		; works with tokenising modes too

		LDR	r4,[windptr,#w_margin]
		SUBS	r0,r2,r4
		MOVLT	r0,#0				; lower bounds check
		MOV	r1,#2
		FNRTSS

none$l		MOV	r1,#2
		MOV	r0,#-1
		FNRTSS

		LOCAL
; GOTOLINE
; Basic idea taken from Daniel Wagenaar's command of the same name.
; However this is completely rewritten, because (a) Daniel used e_
; entries which are now unsafe, and (b) it was faster than reading
; his condensed BASIC assembler :-)
; The main difference is that this doesn't take a string parameter.
; This means it will never prompt from the minibuffer, but if you
; want prompting behaviour, you can use GOTO anyway.
; Daniel's old behaviour of GOTOLINE (P<line>) is now provided by
; GOTOLINEP <line>.
		DCD	(2:SHL:3)
		; Command takes word
cursor_gotoline
		CMP	cursorptr,#0
		MOVEQ	pc,lr

		FNJSR

		SUB	r1,r1,#1
		LDR	r0,[r0,r1,LSL #2]		; line (last in list)
		LDR	r1,[windptr,#w_stline]
		SUB	r0,r0,r1			; figure out base line

		FNcall	Zap_LogicalLine			; \X r0 file offset of line start
		FNRTS	VS
		FNcall	Zap_GotoOffset
		FNRTS

		LOCAL
; @LINE
		DCD	(3:SHL:22)
		; Function only
cursor_line
		FNJSR

		CMP	cursorptr,#0
		BEQ	no$l

		LDR	r0,[cursorptr,#c_off]
		FNcall	Zap_OffsetLine
		BVS	no$l
		MOV	r0,r2				; logical line number
		LDR	r1,[windptr,#w_stline]
		ADD	r0,r0,r1			; figure in base line
		MOV	r1,#2
		FNRTS

no$l		MOV	r0,#-1
		MOV	r1,#2
		FNRTS

		LOCAL
; GOTOLINEP
; See GOTOLINE, above.
		DCD	(2:SHL:3)
		; Command takes word
cursor_gotolinep
		CMP	cursorptr,#0
		MOVEQ	pc,lr

		FNJSR

		SUB	r1,r1,#1
		LDR	r0,[r0,r1,LSL #2]		; line (last in list)
		LDR	r1,[windptr,#w_stline]
		SUB	r0,r0,r1			; figure out base line

		FNcall	Zap_PhysicalLine		; \X r0 file offset of line start
		FNRTS	VS
		FNcall	Zap_GotoOffset
		FNRTS

		LOCAL
; @LINEP
		DCD	(3:SHL:22)
		; Function only
cursor_linep
		FNJSR

		CMP	cursorptr,#0
		BEQ	no$l

;		LDR	r0,[cursorptr,#c_off]
;		FNcall	Zap_OffsetLine			; \X r0 physical line number
;		BVS	no$l
		LDR	r0,[cursorptr,#c_line]		; works in tokenising modes too

		LDR	r1,[windptr,#w_stline]
		ADD	r0,r0,r1			; figure in base line
		MOV	r1,#2
		FNRTS

no$l		MOV	r0,#-1
		MOV	r1,#2
		FNRTS

		LOCAL
; @OFFSET
		DCD	(3:SHL:22)
		; Function only
cursor_address
		FNJSR

		CMP	cursorptr,#0
		LDRNE	r0,[cursorptr,#c_off]
		LDRNE	r1,[windptr,#w_addr]
		ADDNE	r0,r0,r1			; figure in base address
		MOVEQ	r0,#-1
		MOV	r1,#2
		FNRTS

		LOCAL
; GOTOADDRESS
; See GOTOLINE, above.

		DCD	(2:SHL:3)
		; Command takes word
cursor_gotoaddress
		CMP	cursorptr,#0
		MOVEQ	pc,lr

		FNJSR

		SUB	r1,r1,#1
		LDR	r0,[r0,r1,LSL #2]		; address (last in list)
		LDR	r1,[windptr,#w_addr]
		SUB	r0,r0,r1			; figure out base address
		FNcall	Zap_GotoOffset
		FNRTS

		LOCAL
; @SELECTION, SELECTION
		DCD	(2:SHL:22)+(3:SHL:3)
		; Command takes string, function takes nothing
cursor_selection
		FNJSR
		CMP	r2,#23
		BEQ	function$l

		MOV	r1,r0
		BL	util_read_numbers
		FNRTS	VS

		CMP	r1,#3
		FNRTS	NE				; a stacked selection is three numbers!

		LDR	r2,[r0,#4]			; start of selection
		LDR	r3,[r0,#8]			; end of selection
		LDR	r0,[r0]				; window offset
		FNcall	Zap_ConvWindOff			; \X r8/r9
		CMP	windptr,#0
		FNRTS	LE				; window doesn't exist
		FNcall	Zap_Select			; sets caret mode to default too

		FNRTS

function$l
		FNcall	Zap_GetSel			; \X r1 start offset, r2 length, r8/r9
		BCS	none$l
		ADD	r5,r2,r1			; r2 end offset
		FNcall	Zap_GetWindOff			; r0
		CMP	r0,#0
		BLT	none$l

		; r0, r1, r5 need to be written to a block
		; Maximum length is three nine-byte hex numbers, two separators and a terminator
		MOV	r3,r0
		MOV	r0,#30
		FNcall	Zap_Claim
		BVS	none$l

		PUSH	"r0"
		MOV	r4,r1
		; r3 window offset, r4 start offset, r5 end offset
		MOV	r6,#'&'
		STRB	r6,[r0],#1
		MOV	r1,r3
		BL	util_write_hex			; \X r0 updated
		MOV	r7,#','
		STRB	r7,[r0],#1
		STRB	r6,[r0],#1
		MOV	r1,r4
		BL	util_write_hex			; \X r0 updated
		STRB	r7,[r0],#1
		STRB	r6,[r0],#1
		MOV	r1,r5
		BL	util_write_hex
		MOV	r1,#0
		STRB	r1,[r0]
		PULL	"r0"
		MOV	r1,#3
		FNRTSS

none$l		MOV	r0,#0
		MOV	r1,#3
		FNRTSS

		LOCAL
; @CURSOR, CURSOR
		DCD	(2:SHL:22)+(3:SHL:3)
		; Command takes string, function takes nothing
		; This isn't really intended to be called by people -
		; hence no minibuffer prompt.
cursor_cursor
		FNJSR
		CMP	r2,#23
		BEQ	function$l

		MOV	r1,r0
		BL	util_read_numbers
		FNRTS	VS				; typically: not a number (fail silently)

		CMP	r1,#2
		FNRTS	NE				; a stacked cursor is two numbers!

		LDR	r1,[r0,#4]			; cursor offset
		LDR	r0,[r0]				; window offset
		FNcall	Zap_ConvWindOff			; \X r8/r9
		MOV	r0,r1				; cursor offset (again)
		BL	cursor_setcaret			; and use it

		FNRTS

function$l
		CMP	cursorptr,#0
		BEQ	none$l
;		BL	cursor_getcaret			; \X r10
;		BCS	none$l

		MOV	r0,#20				; two 8-digit hex numbers,
							; two '&' base specifiers,
		FNcall	Zap_Claim			; separator and terminator
		BVS	none$l

		LDR	r1,[cursorptr,#c_wind]
		LDR	r5,[cursorptr,#c_off]

		; now we want to write "&<r1>,&<r2>\0" into r0
		MOV	r3,r0				; store
		MOV	r4,#'&'
		STRB	r4,[r0],#1
		BL	util_write_hex			; \E r1 unsigned, r0 buffer; r0 updated
		MOV	r1,#','
		STRB	r1,[r0],#1
		STRB	r4,[r0],#1
		MOV	r1,r5
		BL	util_write_hex
		MOV	r1,#0
		STRB	r1,[r0]

		MOV	r0,r3				; buffer start again
		MOV	r1,#3				; string
		FNRTSS

none$l		MOV	r1,#3				; string
		MOV	r0,#0				; NULL
		FNRTSS

		LOCAL
; \E r0 buffer, r1 unsigned number to write
; \X r0 updated, r2 corrupted
; r0 should always contain enough space to write the number (ie: 8 bytes).
; No terminator is written (r0 points to the appropriate place).
;
; Note that I'm doing this the easy way: printing it with flailing zeroes.
		MACRO
$la		WriteByte	$shift
$la		[	$shift <> 0
		MOV	r2,r1,LSR #$shift
		AND	r2,r2,#&F
		|
		AND	r2,r1,#&F
		]
		CMP	r2,#&A
		ADDLT	r2,r2,#'0'
		ADDGE	r2,r2,#('A'-&A)
		STRB	r2,[r0],#1
		MEND

util_write_hex
		WriteByte	28
		WriteByte	24
		WriteByte	20
		WriteByte	16
		WriteByte	12
		WriteByte	08
		WriteByte	04
		WriteByte	00
		MOV	pc,lr

		LOCAL
; \E r1 string containing comma separated numbers.
; \X r0 pointer to block containing numbers, read by OS_ReadUnsigned.
;    r1 number read
; A maximum of four numbers is read.
block$l		DCD	0
		DCD	0
		DCD	0
		DCD	0

util_read_numbers
		FNJSR	"r2-r4"
		ADR	r3,block$l
		ADD	r4,r3,#16			; !!! increase this to increase maximum read
loop$l		MOV	r0,#10				; default base
		SWI	XOS_ReadUnsigned		; any non-number character can terminate
		FNRTS	VS
		STR	r2,[r3],#4
		CMP	r3,r4
		BGE	end$l
		LDRB	r0,[r1],#1
		CMP	r0,#0
		BEQ	end$l
		B	loop$l

end$l		ADR	r0,block$l
		SUB	r1,r3,r0
		MOV	r1,r1,LSR #2			; / 4 - number read
		FNRTS

		LOCAL
; \E r0 offset r8/r9
; \X r8 updated, r10 created, VS on error
; Put here because we need a fair number of calls to make it
; work properly (probably because I don't really understand
; Zap's cursor handling).
;
; !!! Do NOT uncomment the bits below or they cause CURSORCOLUMN
; to fail (apparently by overwriting part of the mode information
; block?). This is all *very* strange. However the code as stands
; makes perfect sense, so we'll leave it. (The crash is probably
; some hideous interaction because I was constructing r10
; directly; but if I didn't something else fell over. So we'll
; leave the comments in until someone can explain it to me :-)
cursor_setcaret
		FNJSR
		FNcall	Zap_PutCaret			; \E r0, r8/r9
;		ADD	cursorptr,windptr,#w_pwind	; Create r10
;		FNcallc	Zap_ReflectCaret,VC		; \E r10
;		FNcallc	Zap_ShowCursor,VC		; \E r10
		FNcallc	Zap_UpdateWholeWindow,VC	; \E r8/r9
		FNRTS

; !!! Unnecessary (oops - can let the command calling system do this
; for me)
;		LOCAL
; \X r10=input caret, r8/r9 related window, CS if none
;    r0, r1 corrupted
; This is taken from s.Cursors in the Zap source; it may
; ultimately be exported directly from there as a Zap_ call.
; On the other hand the formats involved are unlikely to
; change, and the code here is completely 'safe', so ...
;cursor_getcaret
;		FNJSR
;
;		MOV	r1,#6				; car_input
;		FNcall	Zap_ReadVar
;		MOV	cursorptr,r0
;		LDR	r0,[cursorptr,#c_wind]
;		FNcall	Zap_ConvWindOff
;		ADDS	r0,r0,#0			; CLC
;		TEQ	r8,#0
;		FNRTS	NE
;
;		MOV	r1,#5				; car_cursor
;		FNcall	Zap_ReadVar
;		MOV	cursorptr,r0
;		LDR	r0,[cursorptr,#c_wind]
;		FNcall	Zap_ConvWindOff
;		CMP	windptr,#0
;		ADDNES	r0,r0,#0			; CLC
;		FNRTS

; That's it
		END
