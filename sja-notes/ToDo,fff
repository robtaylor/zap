Beyond v1.40
============

(Old ToDo list follows at end of file.)

Brief note to everyone
*--------------------*

Hi. This probably isn't useful to anyone other than me, especially now we
have a proper bug and wish list. *This* is a list of:

a)	notes about release schedules
b)	bugs in the development version of Zap. These are only when not noted in the
	main buglist for some reason. (Typically they're transient bugs in my own
	development work.)
c)	things I'm working on. This is more for my own notes on where I've got to. If
	you're looking for what I'm planning to do, check which items in the wishlist
	and/or buglist I've claimed responsibility for. (And you can ask to take them
	off me if you want to :-)
d)	things I want to do to extensions, in no order at all.
e)	other things

James Aylett <dj@zap.uk.eu.org>


Release schedules:
------------------

	- v1.44 is the candidate release phase. Dunno when; for as long as possible
	  before v1.45. Basically, we enter here once we've stopped adding features.
	  
	- v1.45 scheduled for "shortly before Wakefield". Therefore, sometime in
	  March need to look at the documentation and update all of that.
	  
	- Ideally at the start of March take a long look at the outstanding bugs
	  from v1.40, with a view to fixing them for v1.45 (if they're easy,
	  back fix them in v1.40 patch 10 or later).

Bugs with v1.41:
----------------

Documentation:
--------------
	- FAQ updated for v1.42 public beta. Erm ... hasn't been yet ... wait till v1.44?
	- Change logs :-/
	- Update thank you list.

Distribution:
-------------
	- TMF config (still wondering how)

Core:
-----

(now in some sort of order)

  bugs intended to fall under the Log of Justice:
  	- app to app xfer to Zap doesn't set modified properly with new system? RAM xfer
  	  works fine, but disc xfer doesn't.
  	- Minibuffer doesn't get its default size from the window it's opened in
  	  Have to think about this a bit: when do we resize automatically? Every time
  	  we open it?
  	- Window swap order on closing a window needs to be reversed.
  	+ REMOVELF works poorly with tabs. By which we mean that a variant of REMOVELF
  	  which folds away whitespace at the start of lines might be useful. However
  	  in the standard Zap way of doing things this requires another *two* commands
  	  ... we could go the emacs route and use the universal argument? It's not as
  	  if multiple executions of this command make any sense anyway ...
  	  Having said that, REMOVELF cheats currently, simply converting returns to
  	  spaces ... something that deals with lwsp would need to use Zap_Command in
  	  some way - this is going to be fairly slow on big files, I'd imagine :-(
  	  You're probably better off piping it through an external command ... is there
  	  something akin to fold(1) which would do this? If not, we could write one
  	  easily enough ...
  	- auto softwrap detection is (a) too slow, (b) too good - a single long line kicks
  	  it in. Could potentially speed this by only detecting some lines out of all?
  	  However I don't see that that's actually going to be much faster ... unless we
  	  say "Let's detect (n/width)/m lines, n = buffer size, m = some constant (perhaps
  	  configurable)" and do it by skipping to a point in the file, and counting from
  	  there to the next line, and the next complete line; either one adds to the tally,
  	  and require a certain proportion to kick in. Or something. Can certainly do
  	  a proportion / minimum number to kick ... it currently is rather dumb about doing
  	  potentially two passes right through the file on finding one long line at the end.
  	  And a 'long' line is simply >= &100 characters; this is, IMO, wrong. Should be
  	  width, or width*2 - not sure which.
  	- long line with selection bugs
  	- fixing the out of memory system ...

  	- two cursors 'sometimes' visible in i-search? Seems to me that they' *always*
  	  visible, and that this is a good thing ... ah, I see. The 'mark' cursor is
  	  left at the abort position, but doesn't get redrawn properly - probably just
  	  want to force a redraw of that. This'll be something in the search system?
  	- change cursor type doesn't update immediately
  	- DataSave to Zap doesn't set focus? This is correct; however it can also corrupt
  	  the cursor.

  	- DataSave sends filetype &FFD for untyped, not -1 as it should. Probably need a
  	  flag in R10?

  	- Fonts: font loading code appears broken
  	- Fonts: error when font file is completely missing (this gets recursive ... ?)
  	- ROM fonts don't get ticked on AA font menu
  	- Fonts: AA fonts aren't always freed
  	- Invert the palette - LH margin isn't redrawn (wrong area get a redraw forced)
  	- changing early module offsets screws redraw ... more generally, redraw isn't
  	  forced for changing one entry in the module table ... could probably get this
  	  somehow by trapping redraw part of the module header -> redraw all of the
  	  module header, but this is rather messy.

  check:
  	- quick print of a range of lines - range ignored
  	- cSpace entry is corrupted by any '&'s in the keys file at all. ?
  	- Throwback: line numbers > &A000000 are coloured wrongly? How do I test this?!

  investigate:
  	+ double/triple/etc dragging. a) backwards works from end of word (currently start).
  	  b) doesn't select until you've hit the end of the word.
  	- app to app xfer seems to claim twice as much memory as Filer -> Zap? RAM xfer
  	  might leak?
  	- raw search can get 'stuck' in code/word modes ... when 'ss'?
  	- throwback affects older view on a file, not most recent / where search started
  	- running out of memory during an insert op leaks memory; is the UNDO op stuff not
  	  being freed?
  	- SENDSEL and CRs problem
  	- menu building with double instantiation of a command that has a leaf dbox crashes.
  	  However separate commands on the same dbox don't (TotalSel, WCSel)
  	- the multicommand with WIMPTASK in it from menu bug ...
  	- multicommand blocks in variable &30E, &30F, &322 cause general bad things.
  	  Iconbar state problems?
  	- colouring in Code mode; colouring options in Code mode; probably need another
  	  word mode ...
  	- out of memory while loading a file doesn't free up the WimpSlot (but does minimise
  	  memory subsequently free things up - ie is it simply that Zap won't auto-shrink its
  	  memory?)
  	- apparently complains about lack of memory when there's clearly enough (in mode 13?)

  think about:
  	+ escape from permanent minibuffer could return cursor to window? Actually - whenever
  	  the minibuffer would normally have been closed, return the focus.
  	+ searching forwards at the start of the file
  	+ strip spaces / DOS file and modified

  bugs where the Log isn't looking big and scary enough yet:
  	- Learned sequences which involve a search dbox corrupt the search string?
  	  I don't think this is easily soluble ... there's no way of passing the search
  	  string back in. Admittedly it probably shouldn't corrupt the saved search string,
  	  but I doubt this is a particularly important area. i-search seems to work fine,
  	  after all ...

  may leave until post v1.45, but would be nice to do earlier:
	+ Core uses c-vars for soft wrap chars, maybe e_returnword?
	+ a generic Autoload directory (or path? - ZapUser:Autoload)
	  (RepeatPath?)

  in progress:
	- TMFs
		- 'boolean' variables, using t/f strings to indicate value?
		- variable substitution
		- per-file variable overrides (setvar) - export as Zap_ call too
		  (do we allow interpolation? ideally, yes ... would be nice to
		   have % as a special mode name meaning 'in this file'?)
		  This may be tricky to do ...
		- dumpvars command? Same for mode?

  things that look fun and/or incredibly useful:
	- keypresses on a hotkey window
	- throwback sets file title to something useful (internal, plus
	  Message_ThrowbackStart -> Message_TaskNameRq)
	  Probably do this by extending create_throwback to take b31
	  of r0 => r1 gives filename to use (for internal), and
	  b30 => use TaskNameRq to look it up. All code in s.Mode11
	  (also need to investigate s.Commands, s.Search, and think
	  about ZapSpell and ZapMJE).
	- commands in file header

  v1.50 things I've started thinking about:
  	- Buttons done centrally ... notes: call on e_start, for kicks to
	  sort everything out. Call on e_openwindow ... note that
	  e_openwindow can be called without e_start being called on that
	  window ... do something about this (possibly just call e_start).
	  Extend Buttons_Misc #3 flags so we can lie things inside the
	  borders. Probably need to add redraw top and bottom margins to get
	  this really swish ... and have all margins configurable per-mode.
	  Ideally do all Buttons configuration via TMFs, except for the
	  positions flags.
	  Call Buttons_Misc #7 (flush redraw cache) automatically on
	  changing the wrap type; don't assume the mode will do it.
	  Tell Buttons when windows close (gets rid of a fudge) ... probably
	  need to ask Tim about this, unless he's commented interally.
	  Similarly, input focus location needs to be called into, I think.
	  See Tim's emails, and check the Buttons source.
	  Why does Buttons currently have its own mode? Kill that off.
	  Extend formats to give interactive help on the buttons. (cf: Menus)
	  (Note that this may be partly implemented - the bottleneck may be
	  in Zap's core ...)
	  Add an e_init or similar flag to say "never do my buttons for me",
	  to allow modes to do sophisticated button stuff.
	  Take out all Buttons code from all modes, unless they need it to do
	  something swish.

  other stuff:
	- close modified -> SaveCBox/SaveOBox => doesn't close save box/window
	  To do this, change save_to_file (called from save_from_leaf/send_data_save),
	  save_text (NOTE: exported; API change!), save_file_date to take r7=0
	  => no leaf window caller, else xfer kill state flag (b3 of r7's flags word)
	  to new window when we create it. This *should* solve things. However it's
	  an API change because of save_text, so I don't want to do it until v1.46.

Extensions: (where not mentioned elsewhere)
-----------

These aren't unlikely to be touched before v1.45; I'm more concerned in
tracking down bugs.

ZapSEd	- parsing StrongED mode files (plus extensions?) - see core
ZapSGML	- colours based on supplied DTD

Other things:
-------------

RCS/CVS for Risc OS, and support within Zap
Perhaps port PuTTY's ssh (scp?) for this?

Probably drop:
--------------

Larch, ZapTerm (=> ssh for Risc OS), ZapW3
Other IDE functions / external tie-in IDE (source browser / makefile management)?

















Things to do
============

									Notes
Core:
-----
e_returnword
	- DELETE "WORD", DELWORDSTART|END	Day ?			Necessary?	?
	  (delete whitespace around also)			-- not binary modes
source
	- All bit field things should use symbols not constants
Newfile
	- Fix cursor positioning bug?
Revert
	- Tie down details?

ZapBASIC:
---------
	- basic_returnword						TMT
	- basic_help							TMT

Command extensions:
-------------------

ZapText
	- SwapCase is nice to BASIC					TMT
ZapProgram
	- New MAKE/CC/etc. commands
	- ??? header/function/TLD finding
	- AssembleADRL/X
	- DataAdd
	- SWIToName, SWIToNumber

v1.50 alterations:
------------------
TMFs
	- setname: param, or if "" search for in-core.
	  This should be configurable by a variable, using
	  InCoreName-Start and InCoreName-End or similar.
	  Also InCoreName-Translate (to-dir-format, maintain-extension,
	  nil).
Mode info block (e_interrogate #14 replacement)
Folding

Internet things:
----------------
ZapSGML
ZapMailer (Larch)
ZapTerm (=> ssh for Risc OS)
ZapW3

Other:
------
CVS for Risc OS
RCS support internal to Zap (or external using a service call?)
Other IDE functions? Source browsing, etc.?				Necessary?
