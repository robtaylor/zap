; Zap Text Command Extension
; Copyright (C) 1998 Zap Developers
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
; Utility routines and quick Zap call jump routines by Darren Salt (from ZapDS)

; Includes
	GET	h.ZapText
	GET	h.coreutils

; What we give to other people
	EXPORT	zap_startop
	EXPORT	zap_stopop
	EXPORT	zap_replacearea
	EXPORT	zap_command
	EXPORT	zap_setprompt
	EXPORT	zap_commandstring

	EXPORT	util_reflectcaret
	EXPORT	util_splitbuffer
	EXPORT	util_replacearea_nowind
	EXPORT	util_doinsert_nowind
	EXPORT	util_commandcur
	EXPORT	util_percentage_on
	EXPORT	util_percentage
	EXPORT	util_findlinestart

;	EXPORT	util_escon
;	EXPORT	util_escoff

; Quick jump routines
; Macro performs tail call (ie: the call returns to the routine which called us).
	MACRO
$la	FNjump	$a
$la	PUSH	"lr,pc"		; stack return and reserve address pointer
	LDR	r14,[zapws,#0]	; start of Zap table
	ADD	r14,r14,#$a	; address of sub
	STR	r14,[sp,#4]	; stack sub address
	PULL	"lr,pc"		; tail call
	MEND

zap_startop	FNjump	Zap_StartOp
zap_stopop	FNjump	Zap_StopOp
zap_replacearea	FNjump	Zap_ReplaceArea
zap_setprompt	FNjump	Zap_MiniPrompt
zap_commandstring
		FNjump	Zap_CommandString

; Do command at the current cursor
util_commandcur	LDR	r1,[cursorptr,#c_off]
zap_command	FNjump	Zap_Command

; Move split to end
util_splitbuffer
	LDR	r0,[fileptr,#f_len]
	MOV	r1,#0
	FNjump	Zap_SplitBuffer

; Do an area replacement but force default mode
util_replacearea_nowind
	FNJSR	"r8"
	MOV	r8,#0
	BL	zap_replacearea
	FNRTS

; Do an insertion but force default mode
util_doinsert_nowind
	FNJSR	"r8"
	MOV	r8,#0
	MOV	r0,#&11
	BL	zap_command
	FNRTS

; \E r0 new cursor offset
util_reflectcaret
	STR	r0,[cursorptr,#c_off]
	FNjump	Zap_ReflectCaret

; util_findlinestart
; \E r1 - file start address
;    r2 - cursor offset
;    r3 - restriction offset (before r2)
; \X r2 - start of line, or r3 if reached
;    r4 - corrupted
;    S  - set by CMP r2,r3
	LOCAL
util_findlinestart
	CMP	r2,r3
	MOVLT	pc,lr
	FNJSR
	LDRB	r14,[windptr,#w_cr]
loop$l	SUB	r2,r2,#1
	CMP	r2,r3
	FNRTS	LT

	LDRB	r4,[r1,r2]
	TEQ	r4,r14
	BNE	loop$l
	CMP	r2,r3
	FNRTS

; util_percentage_on
; Set 'length' for util_percentage
util_percentage_on
	STR	r0,util_percentage_local
	MOV	r0,#0
	B	util_long_op_on

; util_percentage
; Set hourglass percentage to 100 * (len-r2) / len
util_percentage
	FNJSR	"r0-r1"
	LDR	r1,util_percentage_local
	SUB	r0,r1,r2
	BL	util_long_op_display
	FNRTSS

util_percentage_local	& 0

; That's it
	END
