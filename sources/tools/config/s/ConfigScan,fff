OS_File			* 8
OS_GBPB			* &C
OS_GetEnv		* &10
OS_Exit			* &11
OS_GenerateError	* &2B
OS_ReadArgs		* &49
XOS_GBPB		* &2000C
XOS_ReadVarVal		* &20023
XOS_SetVarVal		* &20024
Wimp_SlotSize		* &400EC


	GBLS	regs

	MACRO
	FNJSR	$r
	STMFD	sp!,{$r,lr}
regs	SETS	"$r"
	MEND

	MACRO
	FNRET	$c
	LDM$c.FD sp!,{$regs,pc}^
	MEND

	MACRO
	FNPOP	$c
	LDM$c.FD sp!,{$regs,lr}
	MEND



	AREA	|Asm$$Code|, CODE, READONLY


	= "\n\n"
	= "ConfigScan\n"
	= "Do any of Zap's configuration files need to be rebuilt?\n"
	= "©1999 Darren Salt\n\n"
	ALIGN




; void *malloc(size_t)
; if arg -ve, block is not word aligned
malloc	ROUT
	ldr	ip,=malloc_ptr
	cmp	a1,#0
	ldr	a4,[ip]
	addpl	a4,a4,#3
	bicpl	a4,a4,#3
	addpl	a3,a4,a1
	submi	a3,a4,a1
slotsize
	str	a3,[ip]
	ldr	ip,=slotsize_p
	ldr	a2,[ip]
	cmp	a3,a2
	movls	a1,a4
	movls	pc,lr
	FNJSR	"v1"
	sub	a1,a3,#&8000
	mov	a2,#-1
	swi	Wimp_SlotSize
	add	a1,a1,#&8000
	str	a1,[ip]
	mov	a1,a4
	FNRET


; void *realloc(void *, size_t)
; dumb; assumes that the block was the last allocated
; (this is OK since we're only ever going to reallocate for the new cache)
realloc	ROUT
	movs	a4,a1
	moveq	a1,a2
	beq	malloc
	ldr	ip,=malloc_ptr
	add	a3,a4,a2
	b	slotsize


; size_t strlen(const char *)
strlen	ROUT
	add	a2,a1,#1
0	ldrb	a3,[a1],#1
	teq	a3,#0
	bne	%BT0
	sub	a1,a1,a2
	movs	pc,lr


; char *strcpy(char *, const char *)
; returns address of terminator of copy
strcpy	ldrb	a3,[a2],#1
	strb	a3,[a1],#1
	teq	a3,#0
	bne	strcpy
	sub	a1,a1,#1
	movs	pc,lr


; flags stricmp(const char *, const char *)
stricmp	ROUT
	ldrb	a3,[a1],#1
	ldrb	a4,[a2],#1
	cmp	a3,#'A'
	rsbhss	ip,a3,#'Z'
	addhs	a3,a3,#32
	teq	a3,a4
	movne	pc,lr
	teq	a3,#0
	bne	stricmp
	mov	pc,lr


zapgenpath	= "ZapGenerated$Path"
null		= 0
	ALIGN

; void getcache(const char *)
getcache ROUT
	FNJSR	"v1-v3"
	mov	v3,a1
	mov	a2,a1
	mov	a1,#15
	adr	v1,zapgenpath
	swi	OS_File
	teq	a1,#1
	adrne	a1,null
	movne	a2,a1
	bne	%FT0
	mov	a1,v1
	bl	malloc
	add	a2,a1,v1
0	ldr	a3,=cache
	ldr	a4,=c_end
	str	a1,[a3]
	str	a2,[a4]
	teq	a1,a2
	adrne	v1,zapgenpath
	movne	a4,#0
	movne	a3,a1
	movne	a2,v3
	movne	a1,#14
	swine	OS_File
	FNRET


; void get_dirs(void)
get_dirs ROUT
	FNJSR	"v1-v6"
	mov	a1,#16384	; once only :-)
	bl	malloc
	mov	v6,a1
	mov	v1,#0
	mov	a1,#9
	adr	a2,zapmods
	mov	a3,v6
	mov	v2,#1024
	adr	v3,matchapps
	swi	OS_GBPB
0	subs	a4,a4,#1
	bmi	%FT2
1	ldrb	a1,[a3],#1
	teq	a1,#0
	bne	%BT1
	b	%BT0
2	mov	a1,#0
	strb	a1,[a3],#1
	mov	a1,v6
	sub	a2,a3,a1
	bl	realloc
	ldr	a1,=dir
	str	v6,[a1]
	FNRET


zapmods		= "ZapModules:",0
matchapps	= "!*",0
dot		= ".",0
	ALIGN


; void dofile(const char*, const osgbpb_info *, int country_prefix)
dofile	ROUT
	FNJSR	"v3-v6"
	mov	v6,a1 ; char
	mov	v4,a2 ; gbpb
	movs	v5,a3 ; prfx
	beq	%FT2
	ldr	a4,=country
	ldr	a2,=cty_len
	ldr	a1,[a4] ; write country name if needed
	ldr	a2,[a2]
	bl	write
	mov	a2,#1
	adr	a1,dot
	bl	write
2	mov	a1,v6 ; write filename
	mov	a2,#0
	bl	write
	add	a1,v4,#4 ; and datestamp
	mov	a2,#4
	bl	write
	mov	a1,v4
	mov	a2,#1
	FNPOP
;	b	write


; void write(const char *, size_t)
; size_t==0 -> get string length (plus NUL)
write	ROUT
	FNJSR	"v1-v4"
	mov	v1,a1
	movs	v2,a2
	bleq	strlen
	addeq	v2,a1,#1
	ldr	v3,=outcache
	ldr	v4,=oc_ptr
	ldr	ip,=oc_len
	ldr	a1,[v4]
	ldr	a2,[ip]
	add	a1,a1,v2
	cmp	a1,a2
	ldr	a1,[v3]
	addhi	a2,a2,#&2000
	strhi	a2,[ip]
	blhi	realloc
	strhi	a1,[v3]
	ldr	a2,[v4]
	add	lr,a2,v2
	str	lr,[v4]
	add	a1,a1,a2
0	ldrb	a2,[v1],#1
	subs	v2,v2,#1
	strb	a2,[a1],#1
	bne	%BT0
	FNRET


; long long docache_dir(const char *path, int prfx, long long *found,
;			leaflist, int dowrite)
docache_dir ROUT
	ldr	ip,=country
	ldr	ip,[ip]
	teq	ip,#0
	moveq	a2,#0 ; no country, no point in prefix checking...
	FNJSR	"a4,v1-v6" ; leaf array stacked
	mov	v4,a3 ; found
	mov	v6,v1 ; dowr
	mov	sl,a1 ; path
	mov	fp,a2 ; prefix
	mov	v1,#0 ; sequence
0	mov	a1,#10
	mov	a2,sl
	ldr	a3,=wksp
	mov	a4,#1024
	mov	v2,#1024
	mov	v3,#0
	swi	XOS_GBPB ; read dir
	bvs	%FT1
	movs	v2,a4 ; num read
	beq	%FT2
	ldr	v3,=wksp
	mov	v5,#0
3	ldr	a1,[v3,#16]
	teq	a1,#1 ; is object a file?
	bne	%FT5 ; no - skip it
	mov	a1,#1
	cmp	v5,#32
	bic	lr,v5,#32
	ldrlo	ip,[v4]
	ldrhs	ip,[v4,#4]
	tst	ip,a1,lsl lr
	beq	%FT6 ; no match
	ldr	a2,[sp] ; leaf array
	add	a1,v3,#20 ; leafname from dir
	ldr	a2,[a2,v5,lsl #2] ; leafname from array
	bl	stricmp ; names match?
	bne	%ft6 ; no - check next name
	teq	v6,#0
	ldrne	a1,[sp]
	ldrne	a1,[a1,v5,lsl #2]
	movne	a2,v3
	movne	a3,#1
	andne	a3,fp,a3,lsl v5 ; prefix & 1<<index
	blne	dofile
	mov	a1,#1
	cmp	v5,#32
	bic	lr,v5,#32
	ldrlo	ip,[v4]
	ldrhs	ip,[v4,#4]
	bic	ip,ip,a1,lsl lr
	strlo	ip,[v4]
	strhs	ip,[v4,#4]
	b	%FT5
6	ldr	a2,[sp]
	add	v5,v5,#1
	ldr	a2,[a2,v5,lsl #2]
	teq	a2,#0
	bne	%BT3
5	add	v3,v3,#20 ; skip this object
4	ldr	lr,[v3],#4
	tst	lr,#&FF
	tstne	lr,#&FF00
	tstne	lr,#&FF0000
	tstne	lr,#&FF000000
	bne	%BT4
	mov	v5,#0
	subs	v2,v2,#1 ; more objects?
	bne	%BT3
2	ldmia	v4,{ip,lr}
	orrs	ip,ip,lr ; more to look for
	cmpne	v1,#-1 ; & more in dir?
	bne	%BT0
1	ldmia	v4,{a1,a2}
	FNRET


; long long setfound(leaflist)
setfound ROUT
	sub	a2,a1,#4
	mov	a3,#1
0	ldr	a4,[a2,#4]!
	teq	a4,#0
	bne	%bt0
	sub	a2,a2,a1
	mov	a2,a2,lsr #2
	cmp	a2,#32
	bichs	a2,a2,#32
	mov	a3,a3,lsl a2
	mvnhs	a1,#0
	subhs	a2,a3,#1 ; found bits 0..(n-1) set for n leafnames
	sublo	a1,a3,#1 ; found bits 0..(n-1) set for n leafnames
	movlo	a2,#0
	movs	pc,lr


; long long check(leaflist)
check	ROUT
	FNJSR	"v1"
	mov	v1,a1 ; leaflist
	bl	setfound
	stmfd	sp!,{a1,a2}
	mov	a4,v1
	mov	a3,sp
	mov	a2,#0
	adr	a1,zapgen
	mov	v1,#0
	bl	docache_dir
	add	sp,sp,#8
	FNRET


; void docache(const char *path, const char *dir, int prefix, leaflist)
docache_path ROUT
	FNJSR	"a2-a4"
	mov	a2,a1
	ldr	a1,=file
	bl	strcpy
	FNPOP
;	b	docache


; void docache(const char *path, const char *dir, int prefix, leaflist)
docache	ROUT
	FNJSR	"v1-v6"
	mov	v6,a1 ; path
	mov	v2,a2 ; dir
	mov	v3,a3 ; prefix
	mov	v4,a4 ; leaflist
	mov	a1,a4
	bl	setfound
	stmfd	sp!,{a1,a2}
	mov	v5,sp
	mov	a1,v6
	movs	a2,v2
	blne	strcpy
	mov	v6,a1 ; end of dir name
	teq	v3,#0 ; prefix?
	beq	%FT0
	mov	a2,#'.'
	strb	a2,[a1],#1
	ldr	a2,=country
	ldr	a2,[a2]
	bl	strcpy
	ldr	a1,=file
	mov	a2,v3
	mov	a3,v5
	mov	a4,v4
	mov	v1,#1
	bl	docache_dir
	stmia	v5,{a1,a2}
0	ldmia	v5,{ip,lr}
	orrs	ip,ip,lr
	addeq	sp,sp,#8
	FNRET	EQ
	ldrb	a2,[v6,#-1]
	teq	a2,#'.'
	mov	a2,#0
	streqb	a2,[v6,#-1] ; path+dir '.' terminated
	strneb	a2,[v6] ; not '.' term
	ldr	a1,=file
	mov	a3,v5
	mov	a4,v4
	mov	v1,#1
	bl	docache_dir
	add	sp,sp,#8
	FNRET


zaptemp		= "Zap$Temp",0
zapgen		= "ZapGenerated:",0
zapcountry	= "Zap$Country",0
	ALIGN


	ENTRY
_main
main	ROUT
	ldr	ip,=END
	add	sp,ip,#4096 ; 4K of stack
	ldr	ip,=malloc_ptr
	str	sp,[ip]
	sub	a1,sp,#&8000
	mov	a2,#-1
	swi	Wimp_SlotSize ; ensure memory present
	ldr	a2,=slotsize_p
	add	a1,a1,#&8000
	str	a1,[a2]
	swi	OS_GetEnv
	mov	a2,a1
	adr	a1,syntax_str
	ldr	a3,=wksp
	mov	a4,#1024
	swi	OS_ReadArgs
	ldr	v6,[a3,#4] ; '-boot'
	adr	a1,zapcountry
	ldr	a2,=wksp
	mov	a3,#256
	mov	a4,#0
	mov	v1,#4
	swi	XOS_ReadVarVal
	movvs	a3,#-1
	adds	a1,a3,#1
	ldrne	a4,=cty_len
	strne	a3,[a4]
	movne	a4,#0
	strneb	a4,[a2,a3]
	blne	malloc
	ldrne	a2,=country
	strne	a1,[a2]
	ldrne	a2,=wksp
	blne	strcpy
	bl	get_dirs
	adr	a1,zaptemp
	mov	a2,#-1
	mov	a3,#-1
	mov	a4,#0
	mov	v1,#4
	swi	XOS_SetVarVal
	teq	v6,#0
	adreq	v5,i_run
	adrne	v5,i_boot
	mov	v4,v5
	ldr	a1,[v5],#4 ; cache file
	bl	getcache
	mov	a1,#0
	bl	malloc ; get malloc pointer (rounded up)
	add	a2,a1,#&4000
	sub	a2,a2,#1
	bic	a2,a2,#&00FF
	bic	a2,a2,#&1F00
	ldr	a4,=oc_len
	sub	a1,a2,a1
	str	a1,[a4]
	bl	malloc ; allocate write buffer <=8K
	ldr	a2,=outcache
	str	a1,[a2]
	ldr	a1,[v5],#4 ; check ZapGenerated:
	bl	check
	orrs	a1,a1,a2
	ldrne	a2,=autofail
	strne	a1,[a2]
0	ldmia	v5!,{a1,a3,a4} ; check Zap src text
	teq	a1,#0
	movpl	a2,#0
	blpl	docache_path
	bpl	%BT0
	ldr	v6,=dir
	ldr	v6,[v6]
	ldr	a1,=file
	adrl	a2,zapmods
	bl	strcpy
	mov	v3,a1 ; end of first bit of pathname ("ZapModules:")
1	ldrb	a2,[v6] ; check ZapModules:
	teq	a2,#0
	beq	%FT2
	mov	a1,v6
	mov	a2,#0
	bl	write ; write dir name
	mov	a1,v3
	mov	a2,v6
	ldmdb	v5,{a3,a4}
	bl	docache
	mov	a1,v6
	bl	strlen
	add	v6,v6,a1
	add	v6,v6,#1
	b	%BT1
2	ldr	v1,=outcache
	ldr	v1,[v1]
	teq	v1,#0
	beq	%FT3
	ldr	a1,=file
	adr	a2,zapgen_write
	bl	strcpy
	ldr	a2,[v4]
	bl	strcpy
	mov	a1,#10 ; save the new cache
	ldr	a2,=file
	mov	a3,#&1000
	sub	a3,a3,#3 ; &FFD
	mov	a4,#0
	ldr	v2,=oc_ptr
	ldr	v2,[v2]
	add	v2,v1,v2
	swi	OS_File
3	ldr	a1,=autofail
	ldr	a1,[a1]
	teq	a1,#0
	bne	%FT5
	ldr	a1,=cache
	ldr	a2,=c_end
	ldr	a3,=outcache
	ldr	a4,=oc_ptr
	ldr	a1,[a1]
	ldr	a2,[a2]
	ldr	a3,[a3]
	ldr	a4,[a4]
	sub	a2,a2,a1
	cmp	a2,a4
	bne	%FT5
	teq	a2,#0
	beq	%FT4
	and	v3,a4,#3
	bic	a4,a4,#3
6	ldr	v1,[a1],#4
	ldr	v2,[a3],#4
	teq	v1,v2
	bne	%FT5
	subs	a4,a4,#4
	bne	%BT6
7	subs	v3,v3,#1
	ldrplb	v1,[a1],#1
	ldrplb	v2,[a3],#1
	bmi	%FT4
	teq	v1,v2
	beq	%BT7
5	adr	a1,zaptemp ; flag rebuild needed
	adr	a2,zaptemp_value
	mov	a3,#1
	mov	a4,#0
	mov	v1,#4
	swi	XOS_SetVarVal
4	mov	a1,#0
	ldr	a2,=&58454241
	mov	a3,#0
	swi	OS_Exit

syntax_str	= ",boot/s",0
zaptemp_value	= "1",0

scanboot_file	= "ScanBoot",0
scanrun_file	= "ScanRun",0
zu_config	= "ZapUser:Config",0
zapdir_docs	= "ZapResources:",0
zapgen_write	= "<ZapGenerated$Write>.",0

f_zapboot	= "!zapboot",0
f_zaprun	= "!zaprun",0
f_external	= "external",0
f_types		= "types",0
f_helpdata	= "helpdata",0
f_messages	= "messages",0
f_keys		= "keys",0
f_typeshigh 	= "typeshigh",0
f_typeslow	= "typeslow",0
;f_tmfs		= "tmfs",0
;f_tmfshigh 	= "tmfshigh",0
;f_tmfslow	= "tmfslow",0
f_fileids	= "fileids",0
f_fileidshigh 	= "fileidhigh",0
f_fileidslow	= "fileidlow",0
	ALIGN

i_boot	&	scanboot_file ; cache file
	&	bootlist ; in ZapGenerated:
	&	zu_config, 0, bootlist ; in ZapUser:Config
	&	-1
	&	0, bootlist ; in ZapModules:
i_run	&	scanrun_file ; cache file
	&	runcheck ; in ZapGenerated:
	&	zu_config, 0, runcache ; in ZapUser:Config
	&	zapdir_docs, 3, rundocs ; in <Zap$Dir>.Docs
	&	-1
	&	&18, runcheck ; in ZapModules:

bootlist & f_zapboot, 0
runcheck & f_zaprun, f_external, f_types, f_helpdata, f_messages, f_keys, f_fileids, 0
runcache & f_zaprun, f_typeshigh, f_typeslow, f_fileidshigh, f_fileidslow, 0
rundocs	 & f_helpdata, f_messages, 0



	AREA	|Asm$$Data|, DATA

malloc_ptr	& 0
outcache	& 0
oc_ptr		& 0
oc_len		& 0
country		& 0
autofail	& 0


	AREA	|C$$zidata|,DATA,NOINIT

wksp		% 1024
file		% 1024
dir		% 4
cache		% 4
c_end		% 4
cty_len	% 4
slotsize_p	% 4

END

	END
