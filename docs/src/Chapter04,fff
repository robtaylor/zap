\#
\# $Id: Chapter04,fff,v 1.7 2002-01-22 02:40:29 christian Exp $
\#
\# Manual.Section04/src
\# Selections (including global and local clipboard and processing)
\# Original author: James Aylett
\#
\# This contains bits taken from Section B (Loading, saving, printing and
\# editing) from the original manual.
\#

\C{Selections} Selections

A common need when editing files is to perform an operation on a particular section of the file. For instance you might want to reformat it to a different line length, or move one section so it comes before another. In Zap, as in many editors, you do this by \i\e{selecting} a continuous section of the file; there are then a set of commands that you can perform on that section to do the jobs you need.

\H{make selection} Making a selection

There are several ways to make a selection in Zap. The most obvious is to use the mouse, which we'll cover first.

If there is no selection, then dragging \cw{Select} will select a new region, and clicking/dragging \cw{Adjust} will select between the clicked point and the cursor. If there is already a selection, then dragging \cw{Select} will start a new selection; clicking/dragging \cw{Adjust} will alter the old region. In either case, hold down the \cw{Control} key to leave the cursor unaffected by the selection.

Alternatively, there are a variety of methods for selecting via the keyboard, which can be quicker in some cases because you don't have to move from keyboard to mouse and back again repeatedly. To select via the keyboard, either hold down \cw{Escape} while moving the cursor via the cursor keys (releasing \cw{Escape} ends the selection), or type \c{cSpace} to start the selection, move the cursor to the end, and type \c{cSpace} again.

A third method is to use multiple clicks; double clicking selects a word, triple clicking a line, quadruple clicking a paragraph, and quintuple clicking the entire file. For more information about using the mouse in Zap, see \k{Mouse control}.

You can select the entire text using \c{cT}, and clear the selection by using \c{cZ}.

\H{clipboard} Copying, pasting, cutting, yanking and moving

Zap implements both the \i\e{Edit} style copy/move of selections, and the \i\e{Emacs} style paste/yank. Both of these will work happily across different windows, files and even from one mode to another (although if you copy a selection in, say, Code mode into Text mode you won't get the disassembled text but rather the binary data - see \k{dumping} for a solution to this).

The \i\e{Edit} method: to \i{move} a selection to the cursor position press \c{cV}. To \i{copy} the selection to the cursor position press \c{cC}.

The \i\e{Emacs} method: to move a selection, \i\e{cut} it with \c{cX} and then \i\e{paste} it with \c{cY} (the \i{undo} buffer must be turned on for this to work - see \k{undo}). To copy a selection, grab it with \c{cE} (this is called \I{keep}\e{keeping}) and paste it with \c{cY}. Press \c{scY} to cycle through the previously cut selections (this is called \I{yank}\e{yanking}).

Note that the \c{DELTOEND} (\c{cK}) and \c{DELLINE} (\c{F10}) commands also
produce data which can be pasted by \c{cY}.

Another way to copy text is via the \cw{Copy} key - see \k{basic editing} for more information.

\S{global clipboard} The global clipboard

One very useful (but sadly little\-known) feature common to several \i{RISC OS} applications is the \I{global clipboard}\e{global clipboard}. Put simply, this is a way of using cut and paste,as described above, across different applications. Unlike Zap's 'yank ring' which allows yanking, as described above, the global clipboard can only contain one object at a time.

The way it works in Zap is that when you copy or cut anything to Zap's clipboard (the 'local' clipboard), it also gets put into the global clipboard too, so that other applications can use it. When someone else puts something into the global clipboard, Zap will use that in preference to its own local clipboard when pasting using \c{cY} (the \c{PASTE} command).

If there is something on the global clipboard and you want to use Zap's local clipboard instead, you can use the \c{LOCALPASTE} command (\c{cEscape} will bring up a \i{minibuffer} to type the command into - see \k{Commands}). If Zap has put something on the global clipboard which you don't want available to other applications any more, you can use the \c{Disown clipboard} option which is on the \c{Misc->Clipboard} submenu (the command is \c{CLEARGC}).

\H{save selection} Saving the selection

If you have a selection, you can save it by pressing \c{sF3} to bring up the \i{save selection} dialogue box. This works in exactly the same way as the normal save box (except that it only saves the selection); you can drag the file icon to a Filer window, or another application as you'd expect.

Another way to quickly save the selection is to \cw{Shift} drag it with \cw{Select}. This will save the selection with the filename '\i{Selection}', but is really useful for quickly saving things into other applications. You can even \cw{Shift} drag the selection into a Zap editing window - it will be copied to the point that you drag it to.

\H{processing} Processing the selection

There are a number of actions you can perform on an entire selection; here we will just cover the most important ones. These are all available from the \c{Selection->Process} submenu.

A related topic here is \i{block editing}, which allows you to make alterations on one line in the selection which are mirrored on all the others - see \k{block edit}.

\S{indent} Indent

Indent simply indents the selection by whatever you type into the indent submenu. In other words, it adds text at the beginning of each line of the selection depending on what the parameter is.

If you type in a number to the indent submenu, it will indent the selection by that number of spaces; otherwise it will indent it with whatever you type in. For instance, you might put the string \c{> } in the indent submenu to 'quote' the selection in the manner of an email reply.

Indent is also available by pressing \c{cJ}.

\S{outdent} Outdent

Outdent simply un\-indents the selection depending on whatever is in the indent submenu. If the indent parameter is currently a number, it will remove that many characters from the beginning of each line. If the indent parameter is some text, it will remove the same number of characters as are in the parameter (so two if the parameter is \c{> }, three if it is \c{> >} and so on).

\S{GNU filters} GNU filters

This is a menu containing various GNU filter programs you can apply to the
selection. Darren Salt has ported a range of GNU text filters to RISC OS;
these are available from
\W{ftp://zap.tartarus.org/pub/ds/GNU/}{ftp://zap.tartarus.org/pub/ds/GNU/}.

See \k{filters} for more information on general filtering within Zap.

\S{sort} Sort

This simply sorts the lines of the selection into alphabetical order. See \k{filter sort} for more details.

\S{format} Format

This simply formats the selection to 77 characters, with a first-line indent for each paragraph. See \k{filter format} for more details.

\S{swap case} Swap case

This simply swaps the case of all the characters in the selection. It recognises the full \i{ISO Latin 1} character set, so accented characters will have their cases swapped too.

\S{upper case} Upper case

This does the same as swap case, but leaves all characters in upper case.

\S{lower case} Lower case

This does the same as swap case, but leaves all characters in lower case.

\S{bracket} Bracket ()

This simply places the selection in brackets.

\S{filters} \i{Filters}

Zap provides a way of \e{filtering} the selection (or the entire file, for that matter - see the documentation that comes with \i\e{ZapText}) through an external program. What actually happens is that the selection is fed through the filter program, and the output replaces the selection in the file. Several useful filters are supplied with Zap, and we introduce some of them here. For more information, see the files in \cw{!Zap.Code.Filters.Docs}.

The menu options call these filters using the default options (assuming the filter has options); if you want to use different options you'll need to call the command yourself. The Zap command being used here is \c{FILTERSEL}, and the filters supplied with Zap are kept in a special place which you access by prefixing their names with \c{ZF:}. For instance \c{FILTERSEL ZF:Sort \-descending \-case} will give a case sensitive, descending ASCII sort. For more information, see \k{Commands} and the documentation supplied both with \i\e{ZapText} and the filters.

A number of useful filters are supplied with Zap, and are described below. You can use the \c{Selection->Process->Filter...} menu option to enter their names: eg, for filter \c{ZF:sort}, you would type \c{ZF:sort} at the minibuffer that pops up.

\S{filter sort} Filter \i\c{ZF:sort}

The sort filter sorts in straight ASCII order. The option on the menu (\c{Selection->Process->Sort}) does an ascending case insensitive sort - if you call the filter yourself you can change those options, as well as making it skip leading spaces and tabs on each line.

\S{filter format} Filter \i\c{ZF:format}

The format filter is a simple text formatter. A paragraph is recognised by either starting with a space, or ending with two line feeds. Tab characters are treated as spaces. This filter has a fair number of options, and it's probably easier to read the documentation that comes with it than to describe only part of it here. You'll almost certainly want to call it directly yourself to be able to take advantage of all the features, but it is also on the menu as \c{Selection->Process->Filter}.

Note that Zap has an internal command, \c{FORMATTEXT} (\c{cF6}), which does not work in the same way. For information on that, see \k{wrapping}, which explains Zap's various internal formatting and wrapping modes.

\S{filter untab} Filter \i\c{ZF:untab}

The untab filter simply replaces each tab character in a file with an equivalent number of spaces. It is different to the \c{UNTABIFY} command, which leaves tabs inside quotes ("") alone in program source modes such as C, Java and so on.

\H{send selection} "Sending" the selection

Zap can send the selection straight to the keyboard buffer. You can start this through the \c{Selection->Send} menu option. Zap sends the selection a character at a time; you can abort at any time by pressing \cw{Escape}.

The menu option will strip out control characters; if you need to send them too you'll need to use the \c{SENDSEL} command directly.

Only one selection at a time may be in the process of being sent.

\rule

The next section in the manual is \k{Mouse control}, which gives a complete description of how the mouse is used in Zap.

Alternatively, you might like to move on to \k{Advanced editing}, which covers tabbing, wrapping and formatting, and other advanced editing issues.
