/*	fonts.c
	© James Aylett	*/

#include "fonts.h"

void close_fonts()
{
  FontsOpen=FALSE;
  close_child(FontOpts);

  update_key(0x102, FontOpts, 2);
  update_key(0x104, FontOpts, 3);
  update_key(0x11a, FontOpts, 21);
  update_key(0x11b, FontOpts, 23);
  update_key(0x110, FontOpts, 6);
  update_key(0x111, FontOpts, 13);
  update_key(0x105, FontOpts, 10);
  update_key(0x106, FontOpts, 16);

  /* font redraw style handled by menu */

  save_misc();
  free_keys();
}

void open_fonts()
{
  int fish;
  load_misc();

  /* And setup window ... */
  key_string(0x102, FontOpts, 2, "");
  key_string(0x104, FontOpts, 3, "");
  key_string(0x11a, FontOpts, 21, "");
  key_string(0x11b, FontOpts, 23, "");
  key_string(0x110, FontOpts, 6, "");
  key_string(0x111, FontOpts, 13, "");
  key_string(0x105, FontOpts, 10, "");
  key_string(0x106, FontOpts, 16, "");

  set_flag(FontOpts, 43, ZapGlobalOptions.switches.flags.supress_antialiased_dsa);

  icon_print(FontOpts, 64, "%d", ZapGlobalOptions.margin_width);

  fish=    ZapGlobalOptions.opt_flags.flags.redraw_mode_low    +
       2 * ZapGlobalOptions.opt_flags.flags.redraw_mode_medium +
       4 * ZapGlobalOptions.opt_flags.flags.redraw_mode_high;
  sprintf(output, "RedM%d", fish);
  lookup_message(MessageBlock, output, output, 256);
  set_indtext(windows[FontOpts].openblock.window, 42, output);

  open_child(FontOpts, 2);
  FontsOpen=TRUE;
}

void fontsclick()
{
  int fish;
  if((result->mouse.button.data.menu==1 && result->mouse.icon!=41) ||
     (result->mouse.icon==42 && result->mouse.button.data.menu!=1)) return;
  switch(result->mouse.icon)
  {
    case  7:case  8: number_cycle(FontOpts,  6, result->mouse.icon -  7, 0, NO_MAX); break;
    case 11:case 12: number_cycle(FontOpts, 10, result->mouse.icon - 11, 0, NO_MAX); break;
    case 14:case 15: number_cycle(FontOpts, 13, result->mouse.icon - 14, 0, NO_MAX); break;
    case 17:case 18: number_cycle(FontOpts, 16, result->mouse.icon - 17, 0, NO_MAX); break;
//    case  7:case  8: fontscycle( 6, result->mouse.icon -  7); break;
//    case 11:case 12: fontscycle(10, result->mouse.icon - 11); break;
//    case 14:case 15: fontscycle(13, result->mouse.icon - 14); break;
//    case 17:case 18: fontscycle(16, result->mouse.icon - 17); break;
    case 41: /* the menu icon itself */
    case 42: /* the display field - on menu only */
      fish=    ZapGlobalOptions.opt_flags.flags.redraw_mode_low    +
           2 * ZapGlobalOptions.opt_flags.flags.redraw_mode_medium +
           4 * ZapGlobalOptions.opt_flags.flags.redraw_mode_high;
      if (MenuActive!=NOMENU)
        Wimp_CreateMenu(CloseMenu, 0, 0);
      fontstylemenu(fish);
      break;
    case 43:
      ZapGlobalOptions.switches.flags.supress_antialiased_dsa ^= 1;
      break;
  }
}

/*
void fontscycle(int s, int d)
{
  int i;

  get_indtext(windows[FontOpts].openblock.window, s, output);
  i=atoi(output);

  if(d==0)
  {
    // decrease
    i--;
  }
  else
  {
    // increase
    i++;
  }
  if(i<0) i=0;
  sprintf(output, "%d", i);
  set_indtext(windows[FontOpts].openblock.window, s, output);
}
*/
