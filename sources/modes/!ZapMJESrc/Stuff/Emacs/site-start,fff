;; THIS FILE IS LOADED BEFORE YOUR .EMACS FILE

;; $Id: site-start,fff,v 1.1 1999-04-20 15:39:56 james Exp $
;; Support for the elisp library elib.
(setq load-path (append load-path
			(list "/usr/share/emacs/site-lisp/elib")))

;; Stop Emacs auto extending the file when you press down at eof
(setq next-line-add-newlines nil)

;; Stop completing onto object files
(setq completion-ignored-extensions (append completion-ignored-extensions
					    (list ".ot" ".on" ".at" ".an" ".dt" ".dn" ".flc")))

;; Calendar setup
(setq appt-message-warning-time 0)
(setq appt-issue-message t)
(setq european-calendar-style t)
(add-hook 'diary-hook 'appt-make-list)
(add-hook 'diary-display-hook 'fancy-diary-display)
(setq calendar-time-display-form '(24-hours ":" minutes))
(setq calendar-longtitude -1.4)
(setq calendar-latitude 50.9)
(setq calendar-location-name "Southampton, England")

;; Get the time & column number on the info bar
(setq display-time-24hr-format t)
(display-time)
(column-number-mode 1)

;; Our key bindings
(global-set-key "\M-\C-z"  'scroll-other-window-down)
(global-set-key "\M-g"     'goto-line)
(global-set-key "\C-m"     'newline-and-indent)
(global-set-key "\M-\C-x"  'compile)
(global-set-key "\M-p"     'call-last-kbd-macro)
(global-set-key "\M-o"     'eval-current-buffer)
(global-set-key "\C-xt"    'tags-search)
(global-set-key "\C-x%"    'query-replace-regexp)
(global-set-key "\C-xve"   'vc-ediff)
(global-set-key "\C-xv!"   'vc-version-diff)
(global-set-key "\C-xvz"   'cvs-update)

;; Single space at end of sentence in fill mode
(setq sentence-end-double-space nil)

;; 95 column source width
(setq default-fill-column 95)

;; Cool bracket matching
(require 'paren)

;; Save places in files for when reloading them
(require 'saveplace)
(setq-default save-place t)
(setq save-place-version-control 'never)

;; Resize the minibuffer to show all contents as required
(resize-minibuffer-mode 1)

;; Set auto-uncompress up
(autoload 'uncompress-while-visiting "uncompress")
(setq auto-mode-alist
      (append '(("\\.Z$"  . uncompress-while-visiting)
		("\\.gz$" . uncompress-while-visiting)
		) auto-mode-alist))

;; C & C++
(setq auto-mode-alist
      (append '(("\\.htm[^.]*$" . html-mode)
		("\\.C[^.]*$"   . c++-mode)
		("\\.cpp[^.]*$" . c++-mode)
		("\\.cc[^.]*$"  . c++-mode)
		("\\.c[^.]*$"   . c-mode)
		("\\.h[^.]*$"   . c++-mode)
		("\\.tbl[^.]*$" . tbl-mode)
		) auto-mode-alist))
(add-hook 'c-mode-hook (function (lambda ()
				   (setq c-basic-offset 2)
				   (c-set-offset 'statement-cont        'c-lineup-math)
				   (c-set-offset 'substatement-open     0)
				   (c-set-offset 'case-label            '+)
				   (set (make-local-variable 'dabbrev-case-fold-search) nil)
				   (set (make-local-variable 'dabbrev-case-replace) nil)
				   )))

				     ;;; (load-library "hideshow")

(defun hs-setup () "Enables hideshow and binds some commands"
  (hs-minor-mode 1)
  (local-set-key "\C-ch" 'hs-hide-block)
  (local-set-key "\C-cs" 'hs-show-block)
  (local-set-key "\C-cH" 'hs-hide-all)
  (local-set-key "\C-cS" 'hs-show-all)
  (local-set-key "\C-cR" 'hs-show-region))

(add-hook 'c++-mode-hook (function (lambda ()
				     (setq c-basic-offset 2)
				     (c-set-offset 'statement-cont        'c-lineup-math)
				     (c-set-offset 'substatement-open     0)
				     (c-set-offset 'case-label            '+)
				     (c-set-offset 'access-label          -1)
				     (set (make-local-variable 'dabbrev-case-fold-search) nil)
				     (set (make-local-variable 'dabbrev-case-replace) nil)
				     (hs-setup)
				     )))

;; Assembler mode
(setq auto-mode-alist
      (append '(("\\.asm"   . asm-mode)
		) auto-mode-alist))
(add-hook 'asm-mode-hook
	  (function (lambda ()
		      (local-set-key ";"    'self-insert-command)
		      (local-set-key ":"    'self-insert-command)
		      (local-set-key "\C-m" 'newline)
		      (set (make-local-variable 'dabbrev-case-fold-search) nil)
		      (set (make-local-variable 'dabbrev-case-replace) nil)
		      )))

;; Makefile mode
(setq auto-mode-alist
      (append '(("\\Makefile"   . makefile-mode)
		) auto-mode-alist))

;; Dired mode
(add-hook 'dired-load-hook
	  (function (lambda ()
		      (load "dired-x")
		      (setq dired-guess-shell-gnutar "tar")
		      (setq dired-omit-files "^#\\|^\\.\\|^\\(CVS\\|TAGS\\)$")
		      (setq dired-omit-extensions (append '("flc") dired-omit-extensions))
		      )))
(add-hook 'dired-mode-hook
	  (function (lambda ()
		      (setq dired-omit-files-p t)
		      )))

;; Shell mode
(setq executable-insert nil)
(setq auto-mode-alist
      ;; matches files
      ;;	- that have a suffix .sh, .csh or .shar (shell archive)
      ;;	- that contain ressources for the various shells
      ;;	- startup files for X11
      (cons (cons
	     (concat "\\.c?sh\\'\\|\\.shar\\'\\|/\\.\\(z?profile\\|bash_profile\\|z?login\\|"
		     "bash_login\\|z?logout\\|bash_logout\\|[kz]shrc\\|bashrc\\|t?cshrc\\|"
		     "esrc\\|rcrc\\|[kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'")
	     'sh-mode)
	    auto-mode-alist)
      interpreter-mode-alist
      (nconc '(("ash" . sh-mode)
	       ("bash" . sh-mode)
	       ("csh" . sh-mode)
	       ("dtksh" . sh-mode)
	       ("es" . sh-mode)
	       ("itcsh" . sh-mode)
	       ("jsh" . sh-mode)
	       ("ksh" . sh-mode)
	       ("oash" . sh-mode)
	       ("pdksh" . sh-mode)
	       ("rc" . sh-mode)
	       ("sh" . sh-mode)
	       ("sh5" . sh-mode)
	       ("tcsh" . sh-mode)
	       ("wksh" . sh-mode)
	       ("wsh" . sh-mode)
	       ("zsh" . sh-mode))
	     interpreter-mode-alist))

;; CVS support
;;; @(#) Id: pcl-cvs-startup.el,v 1.4 1993/05/31 18:40:33 ceder Exp 
(autoload 'cvs-update "pcl-cvs"
  "Run a 'cvs update' in the current working directory. Feed the
output to a *cvs* buffer and run cvs-mode on it.
If optional prefix argument LOCAL is non-nil, 'cvs update -l' is run."
  t)
(autoload 'cvs-update-other-window "pcl-cvs"
  "Run a 'cvs update' in the current working directory. Feed the
output to a *cvs* buffer, display it in the other window, and run
cvs-mode on it.

If optional prefix argument LOCAL is non-nil, 'cvs update -l' is run."
  t)
(setq cvs-program "/usr/local/bin/cvs")
(setq cvs-cvsroot (getenv "CVSROOT"))
(setq cvs-inhibit-copyright-message t)
(setq cvs-diff-ignore-marks t)
;(setq cvs-auto-remove-handled t)

;; Give buffers sensible unique filenames
(require 'uniquify)
(setq uniquify-buffer-name-style 'reverse)
(setq uniquify-after-kill-buffer-p t)
(setq uniquify-separator "|")

;; Syntax colouring. X only
(cond (window-system

       ;; C/C++
       (let ((c-keywords
	      ;;	break case continue default do else for goto if
	      ;;	return sizeof switch while
	      (concat "break\\|c\\(ase\\|ontinue\\)\\|d\\(efault\\|o\\)\\|else\\|for\\|"
		      "goto\\|if\\|return\\|s\\(izeof\\|witch\\)\\|while"))
	     (c-type-types
	      ;;	auto char const double enum extern
	      ;;	float int long register
	      ;;	short signed static struct typedef
	      ;;	union unsigned void volatile
	      (concat "auto\\|c\\(har\\|onst\\)\\|double\\|e\\(num\\|xtern\\)\\|"
		      "float\\|int\\|long\\|register\\|"
		      "s\\(hort\\|igned\\|t\\(atic\\|ruct\\)\\)\\|typedef\\|"
		      "un\\(ion\\|signed\\)\\|vo\\(id\\|latile\\)")) ; 6 ()s deep.
	     (c++-keywords
	      ;;	and and_eq asm bitand bitor break
	      ;;	case catch compl const_cast continue
	      ;;	default delete do dynamic_cast
	      ;;	else false for goto if
	      ;;	new not not_eq operator or or_eq
	      ;;	private protected public return reinterpret_cast
	      ;;	sizeof switch this throw true try typeid
	      ;;	using while xor xor_eq
	      (concat "a\\(nd\\(\\|_eq\\)\\|sm\\)\\|b\\(it\\(and\\|or\\)\\|reak\\)\\|"
		      "c\\(a\\(se\\|tch\\)\\|o\\(mpl\\|n\\(st_cast\\|tinue\\)\\)\\)\\|"
		      "d\\(e\\(fault\\|lete\\)\\|o\\|ynamic_cast\\)\\|"
		      "else\\|f\\(alse\\|or\\)\\|goto\\|if\\|"
		      "n\\(ew\\|ot\\(\\|_eq\\)\\)\\|o\\(perator\\|r\\(\\|_eq\\)\\)\\|"
		      "p\\(r\\(ivate\\|otected\\)\\|ublic\\)\\|re\\(turn\\|interpret_cast\\)\\|"
		      "s\\(izeof\\|witch\\)\\|t\\(h\\(is\\|row\\)\\|r\\(ue\\|y\\)\\|ypeid\\)\\|"
		      "using\\|while\\|xor\\(\\|_eq\\)"))
	     (c++-type-types
	      ;;	auto bool char class const
	      ;;	double enum explicit extern false float friend
	      ;;	inline int long mutable namespace register
	      ;;	short signed static struct
	      ;;	template typedef typename union unsigned
	      ;;	virtual void volatile wchar_t
	      (concat "auto\\|bool\\|c\\(har\\|lass\\|onst\\)\\|"
		      "double\\|e\\(num\\|x\\(plicit\\|tern\\)\\)\\|f\\(loat\\|riend\\)\\|"
		      "in\\(line\\|t\\)\\|long\\|mutable\\|namespace\\|register\\|"
		      "s\\(hort\\|igned\\|t\\(atic\\|ruct\\)\\)\\|"
		      "t\\(emplate\\|ype\\(def\\|name\\)\\)\\|un\\(ion\\|signed\\)\\|"
		      "v\\(irtual\\|o\\(id\\|latile\\)\\)\\|wchar_t")) ; 11 ()s deep.
	     (ctoken "[a-zA-Z_][a-zA-Z0-9_]*")
	     )
	 (setq c-font-lock-keywords-local
	       (list
		;;
		;; Fontify filenames in #include <...> preprocessor directives.
		'("^[ \t]*#[ \t]*include[ \t]+\\(<[^>\"\n]+>\\)" 1 font-lock-string-face)
		;;
		;; Fontify function macro names.
		'("^[ \t]*#[ \t]*define[ \t]+\\(\\(\\sw+\\)(\\)" 2 font-lock-function-name-face)
		;;
		;; Fontify otherwise as symbol names, and the preprocessor directive names.
		'("^[ \t]*\\(#[ \t]*[a-z]+\\)\\>[ \t]*\\(\\sw+\\)?"
		  (1 font-lock-reference-face) (2 font-lock-variable-name-face nil t))
		;;
		;; Fontify all storage classes and type specifiers (before declarations).
		(cons (concat "\\<\\(" c-type-types "\\)\\>") 'font-lock-keyword-face)
		;;
		;; Fontify all builtin keywords (except case, default and goto; see below).
		(concat "\\<\\(" c-keywords "\\)\\>")
		;;
		;; Fontify numbers
		(list (concat "\\<\\([0-9][0-9A-Fa-fXxUuLlEe]*\\)\\>") 1 'font-lock-type-face)
		;;
		;; Fontify function names
		(list (concat "\\(" ctoken "\\)[ \t]*(") 1 'font-lock-function-name-face)
		;;
		;; Fontify variable names
		(list (concat "\\<\\(" ctoken "\\)\\>") 1 'font-lock-variable-name-face)
		))
	 (setq c++-font-lock-keywords-local
	       (list
		;;
		;; Fontify filenames in #include <...> preprocessor directives.
		'("^[ \t]*#[ \t]*include[ \t]+\\(<[^>\"\n]+>\\)" 1 font-lock-string-face)
		;;
		;; Fontify function macro names.
		'("^[ \t]*#[ \t]*define[ \t]+\\(\\(\\sw+\\)(\\)" 2 font-lock-function-name-face)
		;;
		;; Fontify otherwise as symbol names, and the preprocessor directive names.
		'("^[ \t]*\\(#[ \t]*[a-z]+\\)\\>[ \t]*\\(\\sw+\\)?"
		  (1 font-lock-reference-face) (2 font-lock-variable-name-face nil t))
		;;
		;; Fontify all storage classes and type specifiers (before declarations).
		(cons (concat "\\<\\(" c++-type-types "\\)\\>") 'font-lock-keyword-face)
		;;
		;; Fontify all builtin keywords (except case, default and goto; see below).
		(concat "\\<\\(" c++-keywords "\\)\\>")
		;;
		;; Fontify numbers
		(list (concat "\\<\\([0-9][0-9A-Fa-fXxUuLlEe]*\\)\\>") 1 'font-lock-type-face)
		;;
		;; Fontify function names
		(list (concat "\\(" ctoken "\\)[ \t]*(") 1 'font-lock-function-name-face)
		;;
		;; Fontify variable names
		(list (concat "\\<\\(" ctoken "\\)\\>") 1 'font-lock-variable-name-face)
		))
	 )

       ;; Makefile mode
       (defconst makefile-font-lock-keywords-local
	 (list
	  ;; Comments
	  '("^\#"                  . font-lock-comment-face)
	  ;; Fontify numbers
	  '("\\<\\([0-9][0-9A-Fa-fXx]*\\)\\>" . font-lock-type-face)
	  ;; Variable assignments
	  '("^\\([A-Za-z0-9_ \t]*\\)\\(=\\|:=\\|\\+=\\)" 1 font-lock-keyword-face)
	  ;; Variable expansions
	  '("\\(\\$([^)]*)\\)" . font-lock-keyword-face)
	  ;; Targets
	  '("^\\([^ \t][^:]*\\):" 1 font-lock-function-name-face)
	  ;; Special variables $@ $% $< $? $^ $+ $*
	  '("\\(\\$[@%<?^+*]\\)" . font-lock-keyword-face)
	  ;; Keywords: define else endef endif export
	  ;;           ifdef ifeq ifndef ifneq include override unexport
	  ;;           vpath
	  (cons (concat "^[ -]*\\<\\(define\\|e\\(lse\\|nd\\(ef\\|if\\)\\|xport\\)\\|"
			"if\\(def\\|eq\\|n\\(def\\|eq\\)\\)\\|include\\|override\\|unexport\\|"
			"vpath\\)\\>") 'font-lock-keyword-face)
	  ;; Fontify variable names
	  '("\\<\\([a-zA-Z_][a-zA-Z0-9_]*\\)\\>" . font-lock-variable-name-face)
	  )
	 "Additional expressions to highlight in Makefile mode.")

       ;; Assembler mode
       (defconst asm-font-lock-keywords-local
	 (list
	  ;; Assembler style comments
	  ;;   '("^\#" . font-lock-comment-face)
	  ;; Fontify filenames in #include <...> preprocessor directives.
	  '("^[ \t]*#[ \t]*include[ \t]+\\(<[^>\"\n]+>\\)" 1 font-lock-string-face)
	  ;; Fontify function macro names.
	  '("^[ \t]*#[ \t]*define[ \t]+\\([a-zA-Z_][a-zA-Z0-9_]*\\)(" 1
	    font-lock-function-name-face)
	  ;; Fontify otherwise as symbol names, and the preprocessor directive names.
	  '("^[ \t]*\\(#[ \t]*[a-z]+\\)\\>[ \t]*\\([a-zA-Z_][a-zA-Z0-9_]*\\)?"
	    (1 font-lock-reference-face) (2 font-lock-variable-name-face nil t))
	  ;; C++ style comments (for when using C++ preprocessor)
	  '("//.*" . font-lock-comment-face)
	  ;; Fontify expression assignments
	  '("\\(^\\|;\\|:\\)[ \t]*\\([a-zA-Z_$][a-zA-Z0-9_$]*\\)[ \t]*=" 2
	    font-lock-variable-name-face)
	  ;; Instructions
	  '("\\(^\\|;\\|:\\)[ \t]*\\([a-zA-Z_.][a-zA-Z0-9_.]*\\)[^:a-zA-Z0-9_$.]" 2
	    font-lock-keyword-face)
	  ;; Registers
	  '("\\<\\(\\%[a-zA-Z0-9]+\\)\\>" . font-lock-function-name-face)
	  ;; Fontify variable names
	  '("\\<\\([a-zA-Z_$][a-zA-Z0-9_$]*\\)" . font-lock-variable-name-face)
	  ;; Fontify numbers
	  '("\\<\\([0-9][0-9A-Fa-fXxh]*\\)\\>" . font-lock-type-face)
	  )
	 "Additional expressions to highlight in Asm mode.")

       ;; Dired mode
       (defconst dired-font-lock-keywords-local
	 '(;; Fontify directory headers
	   ("^  \\(/.+\\|total.+\\)$" 1 font-lock-comment-face)
	   ;; Fontify symbolic links
	   ("^..l.* \\([^ ]+ -> [^ ]+\\)$" 1 font-lock-type-face)
	   ;; Fontify subdirectories
	   ("^..d.* \\([^ ]+\\)$" 1 font-lock-string-face)
	   ;; Fontify devices
	   ("^..[bcs].* \\([^ ]+\\)$" 1 font-lock-function-name-face)
	   ;; Fontify proper executables
	   ("^..-..x.* \\([^ ]+\\)$" 1 font-lock-comment-face)
	   ;; Fontify foreign executables by extension
	   ("^..-.* \\([^ ]+\\.\\(b\\(at\\|tm\\)\\|c\\(md\\|om\\)\\|exe\\)\\)$" 1
	    font-lock-comment-face)
	   ;; Fontify archives/compressed
	   ("^..-.* \\([^ ]+\\.\\(arj||\deb\\|lzh\\|gz\\|t\\(a[rz]\\|gz\\)\\|[Zz]\\|zip\\)\\)$" 1
	    font-lock-plain-face)
	   ;; Fontify backup, autosave, font lock cache, etc. files
	   ("^..-.* \\([^ ]+\\(~\\|\\.flc\\)\\|\\#[^ ]+#\\|\\.#[^ ]+\\)$" 1
	    font-lock-keyword-face)
	   ;; Fontify object etc. files
	   ("^..-.* \\([^ ]+\\.\\(\\(a\\|d\\|o\\)\\(\\|n\\|t\\)\\|elc\\)\\)$" 1
	    font-lock-reference-face)
	   ;; Fontify normal files
	   ("^..-.* \\([^ ]+\\)$" 1 font-lock-variable-name-face)
	   ;; Fontify marked delete lines
	   ("^\\(D[^>]*\\) [^ ]+\\( -> [^ ]+\\|\\)$" 1 font-lock-error-face)
	   ;; Fontify other marked lines
	   ("^\\([^ ][^>]*\\) [^ ]+\\( -> [^ ]+\\|\\)$" 1 font-lock-keyword-face))
	 "Additional expressions to highlight in Dired mode.")

       ;; PCL-CVS
       (defconst cvs-font-lock-keywords-local
	 '(("^In.*$" . font-lock-function-name-face)
	   ("^.* ci .*$" . font-lock-variable-name-face)
	   ("^[ *]*\\(Updated\\|Modified\\|Merged\\|Added\\|Removed\\).*$" .
	    font-lock-keyword-face)
	   ("^[ *]*Conflict.*$" . font-lock-string-face)
	   ("^[ *]*Unknown.*$" . font-lock-string-face)
	   ("^[ *]*Move.*$" . font-lock-error-face)
	   ("^[ *]*Internal.*$" . font-lock-error-face)
	   ("^\\(PCL-CVS\\|  This\\|---\\).*$" . font-lock-comment-face)
	   )
	 "Additional expressions to highlight in PCL-CVS mode.")

       ;; Setup font-lock mode
       (eval-after-load
        "font-lock"
        '(progn
           (require 'thh-font-lock)
           (setq font-lock-defaults-alist
		 (append
		  '((perl-mode          . (perl-font-lock-keywords))
		    (shell-mode         . (shell-font-lock-keywords))
		    (fortran-mode       . (fortran-font-lock-keywords))
		    (mail-mode          . (mail-font-lock-keywords))
		    (rmail-mode         . (mail-font-lock-keywords))
		    (rmail-summary-mode . (rmail-summary-font-lock-keywords))
		    (cvs-mode           . (cvs-font-lock-keywords-local))
		    (compilation-mode   . (compilation-mode-font-lock-keywords)))
		  font-lock-defaults-alist))))
       ;(add-hook 'rmail-show-message-hook 'font-lock-fontify-buffer)
       ;(add-hook 'mail-setup-hook         'font-lock-fontify-buffer)
       (setq font-lock-maximum-decoration t)
       (setq font-lock-face-attributes
             '((font-lock-plain-face         "white"         nil nil nil nil)
	       (font-lock-comment-face       "green"         nil nil nil nil)
	       (font-lock-string-face        "cyan"          nil nil nil nil)
	       (font-lock-keyword-face       "rgb:f0/d0/b0"  nil nil nil nil)
	       (font-lock-type-face          "orange"        nil nil nil nil)
	       (font-lock-function-name-face "light pink"    nil nil nil nil)
	       (font-lock-variable-name-face "rgb:ff/f0/70"  nil nil nil nil)
	       (font-lock-reference-face     "dodger blue"   nil nil nil nil)
	       (font-lock-error-face         "red"           nil nil nil nil)))
       
       ;; Use lazy-lock
       ;(setq font-lock-support-mode 'lazy-lock-mode)
       ;(setq lazy-lock-stealth-time 2)
       ;(setq lazy-lock-stealth-nice 1)
       ;(setq lazy-lock-minimum-size (* 10 1024))
;; --OR--
       ;; Use fast-lock
       (setq font-lock-support-mode 'fast-lock-mode)
       (setq fast-lock-cache-directories '(("^/home/" . ".")
					   ("^/mnt/rayleigh/" . ".")))
       (setq fast-lock-minimum-size (* 5 1024))

       ;; Sort out kill-emacs to confirm first and C-z not to iconify if in X
       (add-hook 'kill-emacs-query-functions
		 (function (lambda ()
			     (y-or-n-p "Are you MAD? "))))
       (global-unset-key "\C-z")
       (global-unset-key "\C-x\C-z")
       
       ;; Set up defaults for server
       (require 'server)
       (setq server-temp-file-regexp "/tmp/\\|/draft$")

       ;; Keep the mouse pointer out of the way
       (mouse-avoidance-mode 'banish)
       ))

;; Fix some irritating behaviour using advice
(defadvice switch-to-buffer (before existing-buffers-only activate preactivate)
  "When called interactively switch to existing buffers only, unless 
when called with a prefix argument."
  (interactive 
   (list (read-buffer "Switch to buffer: " (other-buffer) 
                      (null current-prefix-arg)))))

(defadvice find-file (before existing-files-only activate preactivate)
  "When called interactively find existing files only, unless when
called with a prefix argument."
  (interactive
   (list (read-file-name "Find file: " nil nil (null current-prefix-arg)))))

;; Check the loaded tags file is correct for the source tree before doing any tags commands
;(defadvice find-tag (before find-tag-check-tags activate preactivate)
;  "Check the tags file loaded is the correct one for the current source tree."
;  (if (not (string-equal
;	    (substring tags-file-name 2 (string-match "/src/" tags-file-name))
;	    (substring (expand-file-name default-directory) 2
;		       (string-match "/src/" (expand-file-name default-directory)))))
;      (error "Tags file does not match source tree")))
;
;(defadvice tags-search (before tags-search-check-tags activate preactivate)
;  "Check the tags file loaded is the correct one for the current source tree."
;  (if (not (string-equal
;	    (substring tags-file-name 2 (string-match "/src/" tags-file-name))
;	    (substring (expand-file-name default-directory) 2
;		       (string-match "/src/" (expand-file-name default-directory)))))
;      (error "Tags file does not match source tree")))
;
;(defadvice tags-query-replace (before tags-query-replace-check-tags activate preactivate)
;  "Check the tags file loaded is the correct one for the current source tree."
;  (if (not (string-equal
;	    (substring tags-file-name 2 (string-match "/src/" tags-file-name))
;	    (substring (expand-file-name default-directory) 2
;		       (string-match "/src/" (expand-file-name default-directory)))))
;      (error "Tags file does not match source tree")))

;; My first real lisp function! Adds a DaRT style include into a header file
;; Bound to C-x C-y
(defun dart-insert-include (file &optional local)
  "Insert a guarded #include for the given file into the source."
  (interactive (list (read-file-name "*Include file: "
				     default-directory
				     t)
		     current-prefix-arg))
  (or (stringp file) (signal 'wrong-type-argument (list 'stringp file)))
  (string-match "/src/" file)
  (setq relfile (substring file (match-end 0)))
  (while (= (preceding-char) ?\n)
    (delete-backward-char 1))
  (while (= (following-char) ?\n)
    (delete-char 1))
  (insert "\n\n#ifndef  _")
  (mapcar (function (lambda (s)
		      (if (or (= s ?/) (= s ?.) (= s ?-))
			  (insert "_")
			(insert s))
		      )) relfile)
  (insert "\n#include \"")
  (insert relfile)
  (insert "\"\n#endif\n")
  (if (/= (following-char) ?\n)
      (insert "\n"))
  )
(global-set-key "\C-x\C-y" 'dart-insert-include)

;; Add #include of dart.h into source
(defun dart-insert-include-dart (&optional arg)
  "Insert a #include for dart.h into the source file."
  (interactive "*")
  (insert "#include \"global/dart.h\"\n")
  )
(global-set-key "\C-xw" 'dart-insert-include-dart)

;; Command to build on rayleigh
(setq directory-abbrev-alist '(("^/home/rayleigh/[12]/usr/users/" . "/home/")))
(defun dart-build-rayleigh (&optional arg)
  "Build the current Dart source tree remotely on rayleigh,
and send the output to a compile window."
  (interactive)
  (if (not (string-match "^~/.*/src/" default-directory))
      (error "Not in a dart source tree"))
  (compile (concat "rsh rayleigh \"zsh -l -c 'cd ~/"
		   (substring default-directory 2 (string-match "/src/" default-directory))
		   "/src ; build'\"")))
(global-set-key "\C-cb" 'dart-build-rayleigh)

;; Modifed yank to make it actually work like the text claims it does
(defun yank (&optional arg)
  "Reinsert the last stretch of killed text.
More precisely, reinsert the stretch of killed text most recently
killed OR yanked.  Put point at end, and set mark at beginning.
With just C-u as argument, same but put point at beginning (and mark at end).
With argument N, reinsert the Nth most recently killed stretch of killed
text.
See also the command \\[yank-pop]."
  (interactive "*P")
  ;; If we don't get all the way thru, make last-command indicate that
  ;; for the following command.
  (setq this-command t)
  (push-mark (point))

  (cond ((listp arg) 0)
	((eq arg '-) -1)
	(t (setq kill-ring-yank-pointer kill-ring)))
  
  (insert (current-kill (cond
			 ((listp arg) 0)
			 ((eq arg '-) -1)
			 (t (1- arg)))))
  (if (consp arg)
      ;; This is like exchange-point-and-mark, but doesn't activate the mark.
      ;; It is cleaner to avoid activation, even though the command
      ;; loop would deactivate the mark because we inserted text.
      (goto-char (prog1 (mark t)
		   (set-marker (mark-marker) (point) (current-buffer)))))
  ;; If we do get all the way thru, make this-command indicate that.
  (setq this-command 'yank)
  nil)
