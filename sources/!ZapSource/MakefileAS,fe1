# Make file for Zap Text Editor
# using freeware tools make, AS, DRLink
# (c) Darren Salt

# target "Zap" (or unspecified) = assemble .s file and link
# target "ZapHdrs" = build header files

BUILD	= -DBUILD
# "-n" automatically appended
# leave blank if to use "patch-n" or "[TEST n]"

H1	= t.dispatch t.modulebits t.redraw t.template t.messages
H2	= t.cursors t.createwind t.altertxt t.search t.commands t.execute t.update
H3	= t.mode0 t.mode1 t.mode2 t.mode3 t.mode4 t.modebits t.mode11 t.softwrap
H4	= t.keybits t.strings t.createfile t.undo t.menus
H5	= t.minibuff t.startcode t.startup t.heap t.boxes t.fonts t.exceptions
Hs	= $(H1) $(H2) $(H3) $(H4) $(H5)


OBJECTS1	= o.dispatch o.modulebits o.redraw o.template o.messages
OBJECTS2	= o.cursors o.createwind o.altertxt o.search o.commands o.execute o.update
OBJECTS3	= o.mode0 o.mode1 o.mode2 o.mode3 o.mode4 o.mode4dis o.modebits o.mode11 o.softwrap
OBJECTS4	= o.keybits o.strings o.createfile o.undo o.menus
OBJECTS5	= o.minibuff o.startcode o.startup o.heap o.boxes o.fonts o.exceptions
OBJECTS		= o.objects1 o.objects2 o.objects3 o.objects4 o.objects5

TARGET		= Zap
ZapS		= <ZapSource$$Dir>
link		= drlink
linkPartFlags	= -aof
linkFlags	= -bin -b &00000000 -nounused
as		= testas
asFlags		= -throwback -nolocal -objasm -upper


Zap:		$(OBJECTS)
		$(link) $(linkFlags) -o $(TARGET) $(OBJECTS)
		Settype $(ZapS).$(TARGET) Module
		Run $(ZapS).data.MCopy $(ZapS).$(TARGET) ZapCode:Zap
		@Echo Finished

ZapHdrs:	$(Hs)
		@Echo Made headers

Clean:
		IfThere o.* Then Wipe o.* ~CF~R~V
		IfThere t.* Then Wipe t.* ~CF~R~V


o.objects1:	$(OBJECTS1)
		$(link) $(linkPartFlags) -o o.objects1 $(OBJECTS1)

o.objects2:	$(OBJECTS2)
		$(link) $(linkPartFlags) -o o.objects2 $(OBJECTS2)

o.objects3:	$(OBJECTS3)
		$(link) $(linkPartFlags) -o o.objects3 $(OBJECTS3)

o.objects4:	$(OBJECTS4)
		$(link) $(linkPartFlags) -o o.objects4 $(OBJECTS4)

o.objects5:	$(OBJECTS5)
		$(link) $(linkPartFlags) -o o.objects5 $(OBJECTS5)


t.altertxt:	s.altertxt
	@Run $(ZapS).data.StoH $(ZapS).s.altertxt $(ZapS).h.altertxt
	Create $(ZapS).t.altertxt 0
t.boxes:	s.boxes
	@Run $(ZapS).data.StoH $(ZapS).s.boxes $(ZapS).h.boxes
	Create $(ZapS).t.boxes 0
t.commands:	s.commands
	@Run $(ZapS).data.StoH $(ZapS).s.commands $(ZapS).h.commands
	Create $(ZapS).t.commands 0
t.createfile:	s.createfile
	@Run $(ZapS).data.StoH $(ZapS).s.createfile $(ZapS).h.createfile
	Create $(ZapS).t.createfile 0
t.createwind:	s.createwind
	@Run $(ZapS).data.StoH $(ZapS).s.createwind $(ZapS).h.createwind
	Create $(ZapS).t.createwind 0
t.cursors:	s.cursors
	@Run $(ZapS).data.StoH $(ZapS).s.cursors $(ZapS).h.cursors
	Create $(ZapS).t.cursors 0
t.dispatch:	s.dispatch
	@Run $(ZapS).data.StoH $(ZapS).s.dispatch $(ZapS).h.dispatch
	Create $(ZapS).t.dispatch 0
t.exceptions:	s.exceptions
	@Run $(ZapS).data.StoH $(ZapS).s.exceptions $(ZapS).h.exceptions
	Create $(ZapS).t.exceptions 0
t.execute:	s.execute
	@Run $(ZapS).data.StoH $(ZapS).s.execute $(ZapS).h.execute
	Create $(ZapS).t.execute 0
t.fonts:	s.fonts
	@Run $(ZapS).data.StoH $(ZapS).s.fonts $(ZapS).h.fonts
	Create $(ZapS).t.fonts 0
t.heap:		s.heap
	@Run $(ZapS).data.StoH $(ZapS).s.heap $(ZapS).h.heap
	Create $(ZapS).t.heap 0
t.keybits:	s.keybits
	@Run $(ZapS).data.StoH $(ZapS).s.keybits $(ZapS).h.keybits
	Create $(ZapS).t.keybits 0
t.menus:	s.menus
	@Run $(ZapS).data.StoH $(ZapS).s.menus $(ZapS).h.menus
	Create $(ZapS).t.menus 0
t.messages:	s.messages
	@Run $(ZapS).data.StoH $(ZapS).s.messages $(ZapS).h.messages
	Create $(ZapS).t.messages 0
t.minibuff:	s.minibuff
	@Run $(ZapS).data.StoH $(ZapS).s.minibuff $(ZapS).h.minibuff
	Create $(ZapS).t.minibuff 0
t.mode0:	s.mode0
	@Run $(ZapS).data.StoH $(ZapS).s.mode0 $(ZapS).h.mode0
	Create $(ZapS).t.mode0 0
t.mode1:	s.mode1
	@Run $(ZapS).data.StoH $(ZapS).s.mode1 $(ZapS).h.mode1
	Create $(ZapS).t.mode1 0
t.mode11:	s.mode11
	@Run $(ZapS).data.StoH $(ZapS).s.mode11 $(ZapS).h.mode11
	Create $(ZapS).t.mode11 0
t.mode2:	s.mode2
	@Run $(ZapS).data.StoH $(ZapS).s.mode2 $(ZapS).h.mode2
	Create $(ZapS).t.mode2 0
t.mode3:	s.mode3
	@Run $(ZapS).data.StoH $(ZapS).s.mode3 $(ZapS).h.mode3
	Create $(ZapS).t.mode3 0
t.mode4:	s.mode4
	@Run $(ZapS).data.StoH $(ZapS).s.mode4 $(ZapS).h.mode4
	Create $(ZapS).t.mode4 0
t.modebits:	s.modebits
	@Run $(ZapS).data.StoH $(ZapS).s.modebits $(ZapS).h.modebits
	Create $(ZapS).t.modebits 0
t.modulebits:	s.modulebits
	@Run $(ZapS).data.StoH $(ZapS).s.modulebits $(ZapS).h.modulebits
	Create $(ZapS).t.modulebits 0
t.redraw:	s.redraw
	@Run $(ZapS).data.StoH $(ZapS).s.redraw $(ZapS).h.redraw
	Create $(ZapS).t.redraw 0
t.search:	s.search
	@Run $(ZapS).data.StoH $(ZapS).s.search $(ZapS).h.search
	Create $(ZapS).t.search 0
t.softwrap:	s.softwrap
	@Run $(ZapS).data.StoH $(ZapS).s.softwrap $(ZapS).h.softwrap
	Create $(ZapS).t.softwrap 0
t.startcode:	s.startcode
	@Run $(ZapS).data.StoH $(ZapS).s.startcode $(ZapS).h.startcode
	Create $(ZapS).t.startcode 0
t.startup:	s.startup
	@Run $(ZapS).data.StoH $(ZapS).s.startup $(ZapS).h.startup
	Create $(ZapS).t.startup 0
t.strings:	s.strings
	@Run $(ZapS).data.StoH $(ZapS).s.strings $(ZapS).h.strings
	Create $(ZapS).t.strings 0
t.template:	s.template
	@Run $(ZapS).data.StoH $(ZapS).s.template $(ZapS).h.template
	Create $(ZapS).t.template 0
t.undo:		s.undo
	@Run $(ZapS).data.StoH $(ZapS).s.undo $(ZapS).h.undo
	Create $(ZapS).t.undo 0
t.update:	s.update
	@Run $(ZapS).data.StoH $(ZapS).s.update $(ZapS).h.update
	Create $(ZapS).t.update 0

h.ZapLibrary:	<Zap$$Dir>.Docs.TechCode.E-Library
	Run $(ZapS).data.BasicToAsm <Zap$$Dir>.Docs.TechCode.E-Library $(ZapS).h.ZapLibrary


o.altertxt: s.altertxt h.CreateFile h.CreateWind h.Cursors h.Heap h.Macros \
		h.MiniBuff h.Mode0 h.ModeBits h.Redraw h.SoftWrap \
		h.StartCode h.Strings h.System h.TMTVars h.Undo h.Update \
		h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.altertxt
o.boxes: s.boxes h.CreateFile h.CreateWind h.Cursors h.Heap h.KeyBits \
		h.Macros h.Menus h.MiniBuff h.ModeBits h.Redraw h.Search \
		h.StartCode h.Strings h.System h.Template h.TMTVars h.Undo \
		h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.boxes
o.commands: s.commands h.AlterTxt h.Boxes h.CreateFile h.CreateWind \
		h.Cursors h.Execute h.Fonts h.Heap h.KeyBits h.Macros \
		h.Menus h.MiniBuff h.Mode1 h.Mode11 h.Mode2 h.Mode4 \
		h.ModeBits h.ModuleBits h.Redraw h.Search h.StartCode \
		h.StartUp h.Strings h.System h.Template h.TMTVars h.Undo \
		h.Update h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.commands
o.createfile: s.createfile h.AlterTxt h.CreateWind h.Cursors h.Cursors \
		h.Heap h.KeyBits h.Macros h.MiniBuff h.ModeBits h.Redraw \
		h.Strings h.System h.Template h.TMTVars h.Undo h.ZapHeader \
		h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.createfile
o.createwind: s.createwind h.Commands h.CreateFile h.Cursors h.Heap \
		h.KeyBits h.Macros h.MiniBuff h.ModeBits h.Redraw \
		h.StartCode h.Strings h.Strings h.System h.Template \
		h.TMTVars h.Update h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.createwind
o.cursors: s.cursors h.AlterTxt h.Commands h.CreateFile h.CreateWind \
		h.Execute h.Heap h.KeyBits h.Macros h.MiniBuff h.ModeBits \
		h.Redraw h.Search h.StartCode h.Strings h.System h.TMTVars \
		h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.cursors
o.dispatch: s.dispatch
	$(as) $(asFlags) s.dispatch
o.exceptions: s.exceptions h.Macros h.ModuleBits h.StartCode h.StartUp \
		h.Strings h.System h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.exceptions
o.execute: s.execute h.AlterTxt h.Boxes h.Commands h.CreateFile \
		h.CreateWind h.Cursors h.Fonts h.Heap h.KeyBits h.Macros \
		h.Menus h.MiniBuff h.Mode1 h.Mode11 h.Mode2 h.Mode4 \
		h.ModeBits h.ModuleBits h.Redraw h.Search h.StartCode \
		h.StartUp h.Strings h.System h.Template h.TMTVars h.Undo \
		h.Update h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.execute
o.fonts: s.fonts h.CreateFile h.CreateWind h.Heap h.Macros h.ModeBits \
		h.Strings h.System h.TMTVars h.ZapHeader h.ZapLibrary \
		h.ZapVars
	$(as) $(asFlags) s.fonts
o.heap: s.heap h.Macros h.System h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.heap
o.keybits: s.keybits h.Commands h.CreateFile h.Cursors h.Execute h.Heap \
		h.Macros h.Menus h.MiniBuff h.ModeBits h.Strings h.System \
		h.Template h.TMTVars h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.keybits
o.menus: s.menus h.Commands h.CreateFile h.CreateWind h.Cursors h.Execute \
		h.Heap h.KeyBits h.Macros h.Messages h.MiniBuff h.ModeBits \
		h.ModuleBits h.Redraw h.StartCode h.StartUp h.Strings \
		h.System h.Template h.TMTVars h.ZapHeader h.ZapLibrary \
		h.ZapVars
	$(as) $(asFlags) s.menus
o.messages: s.messages h.Heap h.Macros h.System h.ZapHeader h.ZapLibrary \
		h.ZapVars
	$(as) $(asFlags) s.messages
o.minibuff: s.minibuff h.Commands h.CreateFile h.CreateWind h.Cursors \
		h.Execute h.Heap h.Macros h.StartCode h.Strings h.System \
		h.Template h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.minibuff
o.mode0: s.mode0 h.AlterTxt h.Commands h.Cursors h.Heap h.Macros h.Mode1 \
		h.ModeBits h.Redraw h.SoftWrap h.StartCode h.System \
		h.Template h.TMTVars h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.mode0
o.mode11: s.mode11 h.AlterTxt h.Commands h.CreateFile h.CreateWind \
		h.Cursors h.Execute h.Heap h.Macros h.ModeBits h.Redraw \
		h.Strings h.System h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.mode11
o.mode1: s.mode1 h.AlterTxt h.Commands h.Cursors h.Execute h.Macros h.Menus \
		h.MiniBuff h.Mode0 h.Mode2 h.Mode3 h.Mode4 h.ModeBits \
		h.Redraw h.Strings h.System h.TMTVars h.ZapHeader \
		h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.mode1
o.mode2: s.mode2 h.AlterTxt h.Commands h.Cursors h.Execute h.Heap h.KeyBits \
		h.Macros h.Menus h.MiniBuff h.Mode0 h.Mode1 h.Mode3 h.Mode4 \
		h.ModeBits h.Redraw h.Strings h.System h.ZapHeader \
		h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.mode2
o.mode3: s.mode3 h.AlterTxt h.Cursors h.Macros h.Mode0 h.Mode1 h.ModeBits \
		h.Redraw h.System h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.mode3
o.mode4: s.mode4 h.AlterTxt h.Commands h.CreateWind h.Cursors h.Execute \
		h.Heap h.KeyBits h.Macros h.Menus h.MiniBuff h.Mode0 \
		h.Mode1 h.Mode2 h.ModeBits h.ModuleBits h.Redraw h.Strings \
		h.System h.TMTVars h.Update h.ZapHeader h.ZapLibrary \
		h.ZapVars
	$(as) $(asFlags) s.mode4
o.mode4dis: s.mode4dis data.clib_names h.AlterTxt h.Macros h.System \
		h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.mode4dis
o.modebits: s.modebits h.AlterTxt h.Commands h.CreateFile h.CreateWind \
		h.Fonts h.Heap h.Macros h.Mode0 h.Mode4 h.Redraw h.Search \
		h.Strings h.System h.TMTVars h.ZapHeader h.ZapLibrary \
		h.ZapVars
	$(as) $(asFlags) s.modebits
o.modulebits: s.modulebits h.Commands h.Dispatch h.Execute h.Heap h.Macros \
		h.Messages h.Mode0 h.Mode1 h.Mode2 h.Mode3 h.Mode4 \
		h.ModeBits h.StartCode h.Strings h.System h.Version \
		h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.modulebits
o.redraw: s.redraw h.AlterTxt h.CreateFile h.CreateWind h.Cursors h.Fonts \
		h.Heap h.KeyBits h.Macros h.MiniBuff h.ModeBits h.SoftWrap \
		h.Strings h.System h.TMTVars h.ZapHeader h.ZapLibrary \
		h.ZapVars
	$(as) $(asFlags) s.redraw
o.search: s.search h.AlterTxt h.Commands h.CreateFile h.CreateWind \
		h.Cursors h.Heap h.KeyBits h.Macros h.MiniBuff h.ModeBits \
		h.Redraw h.Strings h.System h.Template h.TMTVars \
		h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.search
o.softwrap: s.softwrap h.Cursors h.Heap h.Macros h.Mode0 h.ModeBits \
		h.Redraw h.System h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.softwrap
o.startcode: s.startcode h.AlterTxt h.Commands h.CreateFile h.CreateWind \
		h.Cursors h.Exceptions h.Execute h.Heap h.KeyBits h.Macros \
		h.Menus h.Menus h.MiniBuff h.ModeBits h.Redraw h.StartUp \
		h.Strings h.System h.Template h.TMTVars h.ZapHeader \
		h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.startcode
o.startup: s.startup h.CreateFile h.Heap h.KeyBits h.Macros h.ModeBits \
		h.Redraw h.Strings h.System h.Version h.ZapHeader \
		h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.startup
o.strings: s.strings h.Heap h.Macros h.System h.ZapHeader h.ZapLibrary \
		h.ZapVars
	$(as) $(asFlags) s.strings
o.template: s.template h.AlterTxt h.Boxes h.CreateFile h.CreateWind \
		h.Cursors h.Heap h.KeyBits h.Macros h.Menus h.MiniBuff \
		h.ModeBits h.ModuleBits h.Redraw h.Search h.StartCode \
		h.Strings h.System h.TMTVars h.Undo h.ZapHeader \
		h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.template
o.undo: s.undo h.AlterTxt h.CreateFile h.CreateWind h.Heap h.Macros \
		h.System h.TMTVars h.ZapHeader h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.undo
o.update: s.update h.AlterTxt h.CreateWind h.Cursors h.Heap h.Macros \
		h.Mode0 h.ModeBits h.Redraw h.System h.ZapHeader \
		h.ZapLibrary h.ZapVars
	$(as) $(asFlags) s.update
