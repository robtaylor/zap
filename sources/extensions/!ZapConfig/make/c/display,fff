/*	display.c
	© James Aylett	*/

#include "display.h"

void close_display()
{
  int code;
  DisplayOpen=FALSE;
  close_child(Display);

  update_key(0x103, Display, 17);
  update_key(0x108, Display, 3);
  update_key(0x109, Display, 10);
  update_key(0x10a, Display, 7);
  update_key(0x10b, Display, 13);
  update_key(0x10c, Display, 24);
  update_key(0x10d, Display, 20);
  update_key(0x118, Display, 28);
  update_key(0x119, Display, 32);

  get_indtext(windows[Display].openblock.window, 42, output);
  code=strlen(output);
  output[code++]=',';
  get_indtext(windows[Display].openblock.window, 46, output+code);
  if(KeysFile[0x11d]!=NULL) memfree(KeysFile[0x11d]);
  KeysFile[0x11d]=memalloc(strlen(output)+1);
  strcpy(KeysFile[0x11d],output);

  ZapGlobalOptions.margin_width=update_number(Display, 36);
//  get_indtext(windows[Display].openblock.window, 36, output);
//  ZapGlobalOptions.margin_width=atoi(output);

  save_misc();
  free_keys();
}

void open_display()
{
  int fish;
  load_misc();

  /* And setup window ... */
  key_string(0x103, Display, 17, "0");
  key_string(0x108, Display, 3, "0");
  key_string(0x109, Display, 10, "0");
  key_string(0x10a, Display, 7, "0");
  key_string(0x10b, Display, 13, "0");
  key_string(0x10c, Display, 24, "0");
  key_string(0x10d, Display, 20, "0");
  key_string(0x118, Display, 28, "0");
  key_string(0x119, Display, 32, "0");

  if(KeysFile[0x11d]!=NULL)
  {
    /* All Tim's fault for deviating from Dominic's one-value-per-variable method */
    strcpy(output,KeysFile[0x11d]);
    fish=0;
    while(output[fish]!=',' && output[fish]!=0) fish++;
    output[fish]=0;
    set_indtext(windows[Display].openblock.window, 42, output);
    fish++;
    if (fish>strlen(KeysFile[0x11d]))
      set_indtext(windows[Display].openblock.window,46,"0");
    else
      set_indtext(windows[Display].openblock.window,46,output+fish);
  }
  else
  {
    set_indtext(windows[Display].openblock.window, 42, "0");
    set_indtext(windows[Display].openblock.window, 46, "0");
  }

  icon_print(Display, 36, "%d", ZapGlobalOptions.margin_width);

  open_child(Display, -1);
  DisplayOpen=TRUE;
}

void displayclick()
{
  if(result->mouse.button.data.menu==1) return;
  switch(result->mouse.icon)
  {
    case  4:case  5: number_cycle(Display,  3, result->mouse.icon -  4, 0, NO_MAX); break;
    case  8:case  9: number_cycle(Display,  7, result->mouse.icon -  8, 0, NO_MAX); break;
    case 11:case 12: number_cycle(Display, 10, result->mouse.icon - 11, 0, NO_MAX); break;
    case 14:case 15: number_cycle(Display, 13, result->mouse.icon - 14, 0, NO_MAX); break;
    case 25:case 26: number_cycle(Display, 24, result->mouse.icon - 25, 0, 16); break;
    case 21:case 22: number_cycle(Display, 20, result->mouse.icon - 21, 0, NO_MAX); break;
    case 18:case 19: number_cycle(Display, 17, result->mouse.icon - 18, 0, NO_MAX); break;
    case 37:case 38: number_cycle(Display, 36, result->mouse.icon - 37, 0, NO_MAX); break;
    case 29:case 30: number_cycle(Display, 28, result->mouse.icon - 29, 0, NO_MAX); break;
    case 33:case 34: number_cycle(Display, 32, result->mouse.icon - 33, 0, NO_MAX); break;
    case 43:case 44: number_cycle(Display, 42, result->mouse.icon - 43, NO_MIN, NO_MAX); break;
    case 47:case 48: number_cycle(Display, 46, result->mouse.icon - 47, NO_MIN, NO_MAX); break;
  }
}
