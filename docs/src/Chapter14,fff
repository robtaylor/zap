\#
\# $Id: Chapter14,fff,v 1.1.1.1 1998-12-03 15:49:05 dj Exp $
\#
\# Manual.Section14/src
\# Developing for Zap: mailing lists, and where to start looking for information
\# Original author: James Aylett
\#
\# This is completely new; it's just a very small section which points
\# the interested programmer in the appropriate directions.
\#

\C{Devel} Developing for Zap

This section of the manual is for people who want to contribute to the Zap development effort. Firstly, it should be made clear that you \e{don't} have to be a programmer to help with this! We also need people to thrash out ideas for future features, to test beta versions of Zap, to help write documentation, and many other things (probably including ones we haven't thought of :\-).

\H{zap-devel} Developer mailing lists

If you want to get involved with Zap, it is advisable to subscribe to one or more of the mailing lists. Whether you are intending to contribute to the main development, or whether you merely want to write an extension for your own use and are looking for help, the mailing lists are a good place to start.

For information on how to subscribe, see \W{http://www.zap.uk.eu.org/lists.html}{http://www.zap.uk.eu.org/lists.html}. The current lists are:

\b \W\c{mailto:buglist@zap.uk.eu.org}{buglist@zap.uk.eu.org} - This is the list where bug reports are discussed until they hang their heads in shame and go away (bug reports should be sent to \W{mailto:bugs@zap.uk.eu.org}{bugs@zap.uk.eu.org}).

\b \W\c{mailto:beta@zap.uk.eu.org}{beta@zap.uk.eu.org} - This is the discussion list for beta versions of Zap (beta bug reports should be sent to \W{mailto:betabugs@zap.uk.eu.org}{betabugs@zap.uk.eu.org}).

\b \W{mailto:features@zap.uk.eu.org}{features@zap.uk.eu.org} - A largely non\-technical list for discussion of proposed new features.

\b \W\c{mailto:devel@zap.uk.eu.org}{devel@zap.uk.eu.org} - Technical discussion of Zap's features; this is basically to stop the other lists from becoming cluttered with detailed discussion about \e{how} to do things, rather than simply \e{if} we should.

\b \W\c{mailto:technical@zap.uk.eu.org}{technical@zap.uk.eu.org} - Other technical issues; this is where to ask questions such as "how do I write a mode to do ...?".

\b \W\c{mailto:announce@zap.uk.eu.org}{announce@zap.uk.eu.org} - A list to which announcements of important changes is made. In general these announcements are also posted to comp.sys.acorn.announce. (This list is moderated; if you send email to it it will be vetted first before going out to the list.).

If you think we need a new mailing list, email \W{mailto:listmaster@zap.uk.eu.org}{listmaster@zap.uk.eu.org} to discuss it.

\H{writing extensions} Writing extensions to Zap

First, it should be noted that in order to write extensions for Zap, you \e{do} need to be able to write in ARM assembler. Although it is possible to write commands and, to a certain extent, modes in C, you still need to be able to use bits of support code, and probably write some of your own as well.

Having said that, it's not quite as difficult as it sounds, because there are plenty of examples for which source is available - more or less all of the Zap distribution is available in source code form, and some of it, particularly the combined command extensions (\i\e{ZapText}, \i\e{ZapUtil} etc.) are specifically designed so that the framework can be quickly re\-used to create new extensions.

Zap extensions are written as RISC OS modules, which allows them to be dynamically loaded, thus giving Zap a smaller memory footprint. In addition, Zap extensions are wrapped up in normal RISC OS application directories, which can then simply be dropped into Zap's \c{!Zap.Modules} directory to install them (you need to reboot Zap to actually recognise new extensions).

You should read the file \c{Docs.Technical.!ReadMe} for an introduction to how to write a Zap extension.

\S{writing commands} Writing additional Zap commands

In order to add commands to Zap, you need to call the Zap call \c{Zap_AddCommands}. This allows you to add a single data table, containing the information about the commands you wish to add. Zap currently has space reserved for 32 command tables, although this can easily be increased.

\S{writing modes} Writing a Zap mode

To add a new mode to Zap, you need to call the Zap call \c{Zap_AddMode}. This adds a mode data table, giving the information about your new mode; as well as things such as the mode's name, it contains all the 'entry points' Zap uses when it needs your mode to do things.

You will probably need to read most of the documentation in \c{Docs.Technical} before attempting to write a mode.

\H{writing core} Working on the Zap core

Zap's core is currently being developed by a group of people. Unfortunately we currently don't use any version control system - we're hoping to put it under CVS in the near future, but there are technical difficulties which are slowing us down at the moment. The core source is available from the ftp site, and you are advised to keep a track of the changes you make so that you can submit only your changes back when you are ready. It will also help us keep the \c{Changes} file a bit more up to date than it has been recently :\-/

Urgent bug\-fix changes should be sent to \W{mailto:bugs@zap.uk.eu.org}{bugs@zap.uk.eu.org}; other changes should either be emailed to \W{mailto:devel@zap.uk.eu.org}{devel@zap.uk.eu.org} (if they are small), or to \W{mailto:tim@zap.uk.eu.org}{Tim Tyler} for inclusion in the main source tree.

Under CVS this will be much easier.

\H{writing docs} Working on Zap's documentation

Zap's documentation is now stored in an internal 'source' format, which can then be easily converted to produce both the text version distributed with Zap itself, and the HTML version used on the web site.

If you want to work on the Zap documentation, the best thing to do is to contact the maintainer directly at \W{mailto:docs@zap.uk.eu.org}{docs@zap.uk.eu.org}.

RULEHERE

The final section of the maual is \k{More info}, which covers other user documentation included with Zap; the future of Zap, and how to get in touch with the Zap development team. It also covers things such as bug reports.
