; **************************************************************************
; *									   *
; *  Project: ZapMJE		    Purpose: Extensions for Zap		   *
; *  Module: Main.h		    Purpose: Main definitions header	   *
; *  © 1997 Martin Ebourne	    Last update: 04-02-97		   *
; *									   *
; **************************************************************************


		GET	ZapSource:h.Macros
		GET	ZapSource:h.System


;		[ :DEF: debug
;		|
;		GBLL	debug
;debug		SETL	{FALSE}
;		]


;  Mode suffixes

		GBLS	C
C		SETS	"_c"
		GBLS	CPP
CPP		SETS	"_cpp"
		GBLS	J
J		SETS	"_java"
		GBLS	ASM
ASM		SETS	"_asm"
		GBLS	P
P		SETS	"_pascal"
		GBLS	H
H		SETS	"_help"


;  Internal mode numbers - Don't change these unless you are looking for trouble

c		EQU	0
cpp		EQU	1
java		EQU	2
asm		EQU	3
pascal		EQU	4


;  Register bindings

column		RN	r2	;  Current column in characters
line		RN	r3	;  Current line in characters
modeblk		RN	r7	;  Mode data block pointer
windowblk	RN	r8	;  Window block pointer
fileblk		RN	r9	;  File block pointer
cursorblk	RN	r10	;  Cursor block pointer
wsblk		RN	r11	;  Extension mode workspace (private word)
zapwsblk	RN	r12	;  Zap's workspace (private word)


;  Workspace

		^	0,wsblk
ws_0		#	0	;  Mode numbers must be at start of block
ws_mode$C	#	4	;  Mode actually assigned for C	       \   |
ws_mode$CPP	#	4	;  Mode actually assigned for C++	\  Keep in sequence with
ws_mode$J	#	4	;  Mode actually assigned for Java	 > internal mode numbers
ws_mode$ASM	#	4	;  Mode actually assigned for Assembler /  Must be 1st in block
ws_mode$P	#	4	;  Mode actually assigned for Pascal   /   |
ws_numinit	#	4	;  Number of modes/command tables registered for when quitting
ws_compiling	#	4	;  Window offset of window from which compile was last issued
ws_selblock	#	4	;  Points to selection block for MJE_HELPTOPIC
ws_percount	#	4	;  Value to reset decrement counter with for hourglass percentage
ws_percent	#	4	;  Current hourglass percentage
ws_oldcwind	#	4	;  Previous value of c_wind, or -1 if cursor mode was != 1
ws_oldcoff	#	4	;  Previous value of c_off
ws_oldwformat	#	4	;  Previous value of w_format
ws_bracketclr	#	4	;  Zap colour number to use for bracket highlight background
ws_bracketoff1	#	4	;  Offset for first bracket to highlight, -1 for none
ws_bracketoff2	#	4	;  Offset for second bracket to highlight, -1 for none
ws_size		EQU	{VAR}-ws_0


;  Constant mode block variables (ie. for all modes)

		^	0,modeblk
m_0		#	0
m_length	#	4	;  Size of block (must be first for Zap)
m_version	#	4	;  Version of mode block layout
m_sharedlength	#	4	;  Size of shared section of block
m_info		#	4	;  Pointer to mode information block
m_matchdelay	#	4	;  Delay in cs for bouncing to respective bracket, 0 to disable
m_sharedflags1	#	4	;  Shared flags word 1
m_sharedsize	EQU	{VAR}-m_0

;  Format of shared flags word 1 is:
;  Bits	  Modes	       Purpose
;  0	  C++,J,P      Set for alternative comment set
;  1-31		       Reserved


;  C/C++/Java/Pascal mode block

		^	0,modeblk
m_0$C		#	m_sharedsize
m_flags1$C	#	4	;  Flags word 1
m_indent$C	#	4	;  Indent; 0 to disable, -ve for by tabs
m_defsize$C	EQU	{VAR}-m_0$C
m_invend$C	#	4	;  End of invalidated region for redraw
m_caddr$C	#	4	;  Address of extra cached point
m_cstate$C	#	4	;  Extra cache to speed up redraws
m_cache$C	#	0	;  Start of syntax cache data
m_cacheaddr$C	#	4	;  Address of cached state
m_cachestate$C	#	4	;  Cached state
m_totsize$C	EQU	{VAR}-m_0$C

;  Format of C/C++/Java flags word 1 is:
;  Bits	  Purpose
;  0	  Set to indent comments
;  1	  Set to highlight preprocessor comments
;  2	  Set to use sophisticated indenting
;  3-31	  Reserved
m_flags1_indentcomments		*	(1:SHL:0)
m_flags1_highlightprepro	*	(1:SHL:1)
m_flags1_smartindenting		*	(1:SHL:2)	; we use the word 'smart' inadvisedly ...

;  Assembler mode block

		^	0,modeblk
m_0$ASM		#	m_sharedsize
m_flags1$ASM	#	4	;  Flags word 1
m_defsize$ASM	EQU	{VAR}-m_0$ASM
m_cstate$ASM	#	4	;  Cached state for assembler update
m_totsize$ASM	EQU	{VAR}-m_0$ASM

;  Format of Assembler flags word 1 is:
;  Bits	  Purpose
;  0	  Set to allow \" to mean "" inside strings
;  1-31	  Reserved
m_flags1_cstrings		*	(1:SHL:0)


;  Mode info block. Keep in step with mode info blocks

		^	0
i_0		#	0
i_intmode	#	4	;  Internal mode number
i_mode		#	4	;  Zap mode number
i_modetitle	#	4	;  Ptr: Mode name
i_modeblkdefl	#	4	;  Length of default mode block
i_modeblktotl	#	4	;  Length of full mode block
i_modeblk	#	4	;  Ptr: Default mode block
i_modedata	#	4	;  Ptr: Default Zap mode block
i_colournames	#	4	;  Ptr: Extra colour names
i_numcolours	#	4	;  Number of extra colours
i_colours	#	4	;  Ptr: Defaults for extra colours
i_compilecmd	#	4	;  Ptr: Command to compile with
i_compileparams	#	4	;  Ptr: Parameters to compile with
i_funcstring	#	4	;  Ptr: Search text for function finding
i_nextfunc	#	4	;  Fn: Jump to next function
i_lastfunc	#	4	;  Fn: Jump to last function
i_opencom	#	4	;  Ptr: Open comment string
i_opencoml	#	4	;  Length of open comment string
i_opencom2	#	4	;  Ptr: Alternative open comment string
i_opencoml2	#	4	;  Length of alternativeopen comment string
i_closecom	#	4	;  Ptr: Close comment string
i_closecoml	#	4	;  Length of close comment string
i_closecom2	#	4	;  Ptr: Alternative close comment string
i_closecoml2	#	4	;  Length of alternative close comment string
i_if		#	4	;  Ptr: If text
i_ifl		#	4	;  Length of if text
i_endif		#	4	;  Ptr: Endif text
i_endifl	#	4	;  Length of endif text
i_directory	#	4	;  Ptr: List of dirs that files of this type are usually in
i_extension	#	4	;  Ptr: List of extensions that files of this type usually have
i_redrawline	#	4	;  Fn: Mode's e_redrawline
i_bracketclr	#	4	;  Zap colour number for bracket highlights
i_menu		#	4	;  Pointer to mode's menu structure created at run time
i_findfunc	#	4	;  Fn: perform FINDFUNTION
i_size		#	{VAR}-i_0


; Pointers to blocks for access from C

		^	0
p_modeblk	#	4
p_windowblk	#	4
p_fileblk	#	4
p_cursorblk	#	4
p_wsblk		#	4
p_zapwsblk	#	4


;  Window block variables

		^	0,windowblk
w_0		#	0
w_handle	#	4	;  Window handle / -1 if deleted
w_minx		#	4	;  Min scn x
w_miny		#	4	;  Min scn y
w_maxx		#	4	;  Max scn x
w_maxy		#	4	;  Max scn y
w_scrollx	#	4	;  X scroll
w_scrolly	#	4	;  Y scroll
w_infront	#	4	;  Window handle of window in front
w_windowflags	#	4	;  Wimp window flags
w_file		#	4	;  Offset in file_list of file showing
w_format	#	4	;  Display format
w_width		#	4	;  Width of work area in chars
w_height	#	4	;  Height of work area in chars
w_txt		#	4	;  Pointer to cached text buffer
w_txth		#	4	;  Height of cached txt buf in lines
w_txtw		#	4	;  Width of cached txt buf in chars (mult 8)
w_txtn		#	4	;  Number of lines cached
w_coff		#	4	;  Offset in text of first cached line
w_cline		#	4	;  Line number in text of first cached line
w_clogl		#	4	;  Logical line number of first cached line
w_tab		#	4	;  Coltab width
w_tabc		#	4	;  Actual tab character code (x4)
w_cr		#	4	;  Code of return/line feed
w_flags		#	4	;  My) window flags
w_title		#	4	;  Pointer to window title buffer
w_bpl		#	4	;  Bytes per line (for mzap) / width of text
w_margin	#	4	;  Actual width of margin (inc line nos)
w_rl		#	4	;  Height in raster lines of each character
w_rw		#	4	;  Width in pixels of each character
w_rh		#	4	;  Text height in pixels (not inc spacing)
w_addr		#	4	;  Address of first byte in display
w_stline	#	4	;  Line number of first line in display
w_titlelen	#	4	;  Title length (excluding 0)
w_titbuf	#	4	;  Address of title showing buffer
w_titlen	#	4	;  Length of title showing string
w_mwidth	#	4	;  User required margin width (no line nos)
w_tabchar	#	4	;  User required tab char code (x4)
w_linesp	#	4	;  User required line spacing
w_savedo	#	4	;  Fixed off / fixed line off before
w_savedl	#	4	;  Pixs from top / phy line of off
w_savedc	#	4	;  Change in phy line for shiftable
w_savedh	#	4	;  W_height at multiop start
w_savedlc	#	4	;  Phy line of fixed for one op
w_wrapwidth	#	4	;  Wordwrap width
w_togminx	#	4	;  Toggle size min x
w_togminy	#	4	;  Toggle size min y
w_togmaxx	#	4	;  Toggle size max x
w_togmaxy	#	4	;  Toggle size max y
w_txtlen	#	4	;  Size of cache line inc col masks
w_palette	#	4	;  Current palette data
w_pwind		#	4	;  Point (=this!) window offset
w_pline		#	4	;  Point row (y coord)
w_pcol		#	4	;  Point column (x coord)
w_poff		#	4	;  Point offset
w_ploff		#	4	;  Point line offset
w_pwidth	#	4	;  Point width
w_saveds	#	4	;  Start of area to redraw offset
w_modedata	#	4	;  Zap handled mode data block
w_basemap	#	1	;  base keymap number
w_currentmap	#	1	;  current keymap number
w_helpmap	#	1	;  previous keymap number (for HELPKEY)
w_defaultmap	#	1	;  default keymap number
w_font		#	4	;  ZapRedraw font handle
w_savedscy	#	4	;  saved scrolly (s_txt_stat) ; (was RW 12)
w_info		#	4	;  w_info (was RW13)
w_dsafontname	#	4	;  bitmap font name to use in DSA mode
w_vdufontname	#	4	;  font name to use in VDU or DSAVDU mode
w_vdufontsize	#	4	;  font size and aspect ratio to use
w_tabstops	#	4	;  16 bit array of columns to next displayed tab stop
w_tabstring	#	4	;  tabstop string (eg "8*") or 0 for default
w_mode0		#	4	;  Mode 0 word
w_mode1		#	4	;  Mode 1 word
w_mode2		#	4	;  Mode 2 word
w_mode3		#	4	;  Mode 3 word
w_mode4		#	4	;  Mode 4 word
w_mode5		#	4	;  Mode 5 word
w_mode6		#	4	;  Mode 6 word
w_mode7		#	4	;  Mode 7 word
w_mode8		#	4	;  Mode 8 word
w_mode9		#	4	;  Mode 9 word
w_mode10	#	4	;  Mode 10 word
w_mode11	#	4	;  Mode 11 word
w_mode12	#	4	;  Mode 12 word
w_mode13	#	4	;  Mode 13 word
w_mode14	#	4	;  Mode 14 word
w_mode15	#	4	;  Mode 15 word
w_mode16	#	4	;  Mode 16 word
w_mode17	#	4	;  Mode 17 word
w_mode18	#	4	;  Mode 18 word
w_mode19	#	4	;  Mode 19 word
w_mode20	#	4	;  Mode 20 word
w_mode21	#	4	;  Mode 21 word
w_mode22	#	4	;  Mode 22 word
w_mode23	#	4	;  Mode 23 word
w_mode24	#	4	;  Mode 24 word
w_mode25	#	4	;  Mode 25 word
w_mode26	#	4	;  Mode 26 word
w_mode27	#	4	;  Mode 27 word
w_mode28	#	4	;  Mode 28 word
w_mode29	#	4	;  Mode 29 word
w_mode30	#	4	;  Mode 30 word
w_mode31	#	4	;  Mode 31 word
w_endmark	#	4	;  End of list marker


;  File block variables

		^	0,fileblk
f_0		#	0
f_ptr		#	4	;  Pointer to file buffer / -1 if deleted
f_bufl		#	4	;  Length of file buffer
f_len		#	4	;  Length of file
f_name		#	4	;  Pointer to filename
f_load		#	4	;  Load address of file
f_exec		#	4	;  Exec address of file
f_flags		#	4	;  File flags
f_uptr		#	4	;  Pointer to undo buffer
f_ubufl		#	4	;  Length of undo buffer
f_ulen		#	4	;  Length of valid data in undo buffer (l)
f_undo		#	4	;  Offset of main undo pointer (u)
f_undop		#	4	;  Offset of undo block sub-pointer (p)
f_yank		#	4	;  -1 if not in yank / off of yank pointer
f_splito	#	4	;  Offset in file (&buf) of start of split
f_splite	#	4	;  Offset in buf of end of split
f_splits	#	4	;  Size  of split=splite-splito
f_mptr		#	4	;  Pointer to marker buffer
f_mbufl		#	4	;  Length of marker buffer
f_mlen		#	4	;  Length of valid data in marker buffer
f_mark		#	4	;  Current offset in marker buffer (EA)
f_docom		#	4	;  Current command being 'done'
f_source	#	4	;  Source word corresponding to create type
f_dolen		#	4	;  Length of insertion/deletion
f_dodata	#	4	;  Data to be inserted/replace with
f_altered	#	4	;  First altered offset in file /-1
f_shiftable	#	4	;  First shiftable offset in file /-1
f_change	#	4	;  Signed change of shiftable offset
f_depth		#	4	;  Multiple operation depth / 0
f_links		#	4	;  V links to other files
f_cmode		#	4	;  Mode which 'owns' file / -1
f_attr		#	4	;  file attributes
f_chklen	#	4	;  initial length
f_chksum	#	4	;  initial checksum
f_oflags	#	4	;  old flags (used by startop/stopop)
f_proposed_name #	4	;  proposed file name
f_tag		#	4	;  tag number for this file
f_endmark	#	4	;  End of list marker


;  Cursor block variables

		^	0,cursorblk
c_0		#	0
c_wind		#	4	;  Offset of window with this caret
c_line		#	4	;  Line of caret in work area
c_col		#	4	;  Column of caret in work area
c_off		#	4	;  Offset of caret in text
c_loff		#	4	;  Start of line offset
c_width		#	4	;  Width of cursor in chars
c_owind		#	4	;  Old window / -1 if none
c_oline		#	4	;  Old plotted line
c_ocol		#	4	;  Old plotted col
c_owidth	#	4	;  Old width / offset for selected regions
c_blklen	#	4	;  Length of a cursor block


;  Zap variable numbers

v_scnxos	EQU	0	;  Screen horizontal size (in os coords)
v_scnyos	EQU	1	;  Screen vertical size (in os coords)
v_optflags	EQU	2	;  Config file flags word  (see E-Flags)
v_optformat	EQU	3	;  Config file format word (see E-Format)
v_wimptask	EQU	4	;  Zaps task handle
v_carcursor	EQU	5	;  Cursor caret block pointer (see E-Cursors)
v_carinput	EQU	6	;  Input caret block pointer (see E-Cursors)
v_carselection	EQU	7	;  Selection caret block pointer (see E-Cursors)
v_windnum	EQU	8	;  Number of window blocks (see E-Windows)
v_filenum	EQU	9	;  Number of file blocks (see E-File)
v_carmode	EQU	10	;  Current cursor editing mode (see E-Cursors)
v_wimpversion	EQU	11	;  Version number Zaps logged on as (200/300)
v_keydefault	EQU	12	;  Default key map number
v_keybasemap	EQU	13	;  Basemap number
v_keylast	EQU	14	;  Zap key code of last key processed
v_keylastcom	EQU	15	;  Address of last key command executed
v_miniptr	EQU	16	;  Address of minibuffer
v_minibufl	EQU	17	;  Size of minibuffer
v_minilen	EQU	18	;  Size of data in minibuffer
v_minioff	EQU	19	;  Offset of cursor in minibuffer
v_minimark	EQU	20	;  Offset of mark in minibuffer (see Zap_MiniWrite)
v_yankptr	EQU	21	;  Address of kill ring buffer
v_yanklen	EQU	22	;  Size of data in kill ring buffer
v_keycurrent	EQU	23	;  Current keymap number
v_reserved	EQU	24	;  (was control character set number)
v_opttab	EQU	25	;  Default column tab for windows
v_optaddr	EQU	26	;  Default address of first byte of file
v_optstline	EQU	27	;  Default number of first line of file
v_optlinesp	EQU	28	;  Default line spacing in 1/8ths char
v_envstart	EQU	29	;  Bottom of Zaps stack (&8000 except in test modes)
v_envtop	EQU	30	;  Start of free memory
v_wimpiconbar	EQU	31	;  Handle of iconbar icon
v_wimptimefmt	EQU	32	;  Standard time format string
v_wimpdatefmt	EQU	33	;  Standard date format string
v_optmode0	EQU	&100	;  Text mode word (see E-Flags for format)
v_optmode1	EQU	&101	;  Byte mode word
v_optmode2	EQU	&102	;  Word mode word
v_optmode3	EQU	&103	;  Ascii mode word
v_optmode4	EQU	&104	;  Code mode word
v_optmode5	EQU	&105	;  Basic mode word
v_optmode6	EQU	&106	;  Mode 6 word
v_optmode7	EQU	&107	;  Mode 7 word
v_optmode8	EQU	&108	;  Mode 8 word
v_optmode9	EQU	&109	;  Mode 9 word
v_optmode10	EQU	&10A	;  Mode 10 word
v_optmode11	EQU	&10B	;  Throwback mode word
v_optmode12	EQU	&10C	;  Taskwindow mode word
v_optmode13	EQU	&10D	;  Mode 13 word
v_optmode14	EQU	&10E	;  Mode 14 word
v_optmode15	EQU	&10F	;  Mode 15 word
v_optmode16	EQU	&110	;  Mode 16 word
v_optmode17	EQU	&111	;  Mode 17 word
v_optmode18	EQU	&112	;  Mode 18 word
v_optmode19	EQU	&113	;  Mode 19 word
v_optmode20	EQU	&114	;  Mode 20 word
v_optmode21	EQU	&115	;  Mode 21 word
v_optmode22	EQU	&116	;  Mode 22 word
v_optmode23	EQU	&117	;  Mode 23 word
v_optmode24	EQU	&118	;  Mode 24 word
v_optmode25	EQU	&119	;  Mode 25 word
v_optmode26	EQU	&11A	;  Mode 26 word
v_optmode27	EQU	&11B	;  Mode 27 word
v_optmode28	EQU	&11C	;  Mode 28 word
v_optmode29	EQU	&11D	;  Mode 29 word
v_optmode30	EQU	&11E	;  Mode 30 word
v_optmode31	EQU	&11F	;  Mode 31 word


;  Zap entry points

			^ 0
Zap_AddMode		# 4	;  Add new mode to zap
Zap_Claim		# 4	;  Claim heap block
Zap_Ensure		# 4	;  Ensure heap block
Zap_Free		# 4	;  Free heap block
Zap_MoveBytes		# 4	;  Move data
Zap_SplitBuffer		# 4	;  Split text buffer at given point
Zap_NewTxtStatus	# 4	;  Refresh screen after file changed
Zap_SaveTxtStatus	# 4	;  Save info before file changed
Zap_Command		# 4	;  Execute insert/delete command
Zap_NewWinStatus	# 4	;  Recreate window after change
Zap_SaveWinStatus	# 4	;  Save window status before change
Zap_ReplaceArea		# 4	;  Replace one string by another
Zap_PlotCaret		# 4	;  Plot caret at given position
Zap_ReflectCaret	# 4	;  Plot caret at posn only using c_off
Zap_SetCaret		# 4	;  Draw caret
Zap_ClearCaret		# 4	;  Draw old caret position (remove caret)
Zap_DoCommand		# 4	;  Perform the command
Zap_ShowCursor		# 4	;  Make sure given cursor is visible
Zap_ReadVar		# 4	;  Read a zap variable
Zap_WriteVar		# 4	;  Write a zap variable
Zap_SaveFile		# 4	;  Save a file to disc
Zap_FillWords		# 4	;  Fill a given area of memory
Zap_UpdateLns		# 4	;  Update line numbers column
Zap_EachWindow		# 4	;  Call sub for each window on file
Zap_UpdateCaret		# 4	;  Updates caret posn from offset
Zap_GetWindState	# 4	;  Update R8 block with wind posn
Zap_StartOp		# 4	;  Start multiop
Zap_StopOp		# 4	;  Stop multiop
Zap_CallMode		# 4	;  Call a mode entry point using R8
Zap_CallGivenMode	# 4	;  Call mode in R10
Zap_ReadMode		# 4	;  Read info on a mode
Zap_FindFile		# 4	;  Find window on a given file name
Zap_FindWindow		# 4	;  Find window on a loaded file
Zap_ConvWindOff		# 4	;  Convert window off to blk ptr
Zap_ConvFileOff		# 4	;  Convert file off to blk ptr
Zap_GetWindOff		# 4	;  Convert window blk ptr to off
Zap_GetFileOff		# 4	;  Convert file blk ptr to off
Zap_GoToOffset		# 4	;  Move cursor to given posn + mark
Zap_JumpToOffset	# 4	;  Move cursor to given posn nomark
Zap_FindOffset		# 4	;  Find file offset from x,y coord
Zap_NewFileTitle	# 4	;  Update titlebars on a file
Zap_InsertString	# 4	;  Insert string into file
Zap_CreateFile		# 4	;  Create an empty file
Zap_NewLinkEntry	# 4	;  Add an entry to the links table
Zap_DefaultClick	# 4	;  Default mouse click handling
Zap_PutCaret		# 4	;  Put new caret in file
Zap_DiscardFile		# 4	;  Kill file
Zap_DeleteFile		# 4	;  Prompt then kill
Zap_DiscardWindow	# 4	;  Kill window
Zap_DeleteWindow	# 4	;  Prompt then kill window
Zap_BuildMenu		# 4	;  Create a variable length menu
Zap_ClearSel		# 4	;  Clear selected area
Zap_CreateFileBlk	# 4	;  Create a new file block in R9
Zap_CreateWindBlk	# 4	;  Create a new window block in R8
Zap_GetSel		# 4	;  Get info on selected region
Zap_InsertMark		# 4	;  Insert marker at given offset
Zap_InstallFile		# 4	;  Load a file into Zap
Zap_NewMode		# 4	;  Change mode of a file
Zap_NewTitle		# 4	;  Update the title of a window
Zap_CallBaseMode	# 4	;  *** DO NOT USE - Use Zap_BaseMode instead ***
Zap_NewView		# 4	;  Open a new window on a file
Zap_ReadSel		# 4	;  Read the selected region
Zap_Replace		# 4	;  Perform a search and replace
Zap_Search		# 4	;  Perform a file search
Zap_Select		# 4	;  Select a region
Zap_AlterSel		# 4	;  Alter selected region
Zap_OffLineCol		# 4	;  Convert file offset to X,Y
Zap_AddCommands		# 4	;  Add a command table
Zap_MiniWrite		# 4	;  Insert chars in minibuffer
Zap_MiniPrompt		# 4	;  Set/change the minibuffer prompt
Zap_MiniUpdate		# 4	;  Update minibuffer on screen
Zap_AddYankRegion	# 4	;  Add a region to kill ring
Zap_FindCommand		# 4	;  Convert command name to address
Zap_ProcessCommand	# 4	;  Call a zap command
Zap_FindKeyEntry	# 4	;  Read a keymap entry
Zap_FindLeafName	# 4	;  Find leaf part of a filename
Zap_NewFileName		# 4	;  Change the name of a file
Zap_CheckFileName	# 4	;  See if file contains a path
Zap_GetCurrDir		# 4	;  Find the current directory name
Zap_MiniWriteC		# 4	;  Write a character to minibuffer
Zap_MiniClear		# 4	;  Clear minibuffer
Zap_MiniStart		# 4	;  Start up a new minibuffer
Zap_MiniEval		# 4	;  Turn string into number
Zap_CommandString	# 4	;  Execute a string command
Zap_ProcessKeys		# 4	;  Process a list of keys
Zap_ProcessAKey		# 4	;  Process a single key as if typed
Zap_OpenWindow		# 4	;  Open a zap window
Zap_RestoreModeWord	# 4	;  Restore mode options on e_start
Zap_SaveModeWord	# 4	;  Save mode options on e_end
Zap_GetModeWord		# 4	;  Read the mode word
Zap_PutModeWord		# 4	;  Write the mode word
Zap_BaseMode		# 4	;  Call the base mode
Zap_ReadWord		# 4	;  Read a word from the file buffer
Zap_ReplaceWord		# 4	;  Replace a word in the file buffer
Zap_ModeColour		# 4	;  Read colour definitions
Zap_FindInput		# 4	;  Find input position
Zap_ClipCache		# 4	;  Move the cache reference point
Zap_ModeData		# 4	;  Read/write Zap data mode words
Zap_WhichMode		# 4	;  Which mode to load a file into
Zap_ModeNumber		# 4	;  Convert mode name to number
Zap_SendDataSave	# 4	;  Initiate data transfer protocol
Zap_Warning		# 4	;  Show warning message
Zap_AllWindow		# 4	;  Call sub for all windows
Zap_ReadMenu		# 4	;  Create text menu to data
Zap_LoadMenu		# 4	;  Load a text menu file
Zap_OpenMenu		# 4	;  Open a menu on the screen
Zap_CallBack		# 4	;  Call back at given time
Zap_DragBox		# 4	;  Perform your own drag box
Zap_SendMessage		# 4	;  Send a message via Zap
Zap_Reply		# 4	;  Reply to a message via Zap
Zap_Extend		# 4	;  Extend a heap block
Zap_ModeColourNum	# 4	;  Change size of palette
Zap_CreateThrowback	# 4	;  Create a throwback file
Zap_Throwback		# 4	;  Insert a throwback line
Zap_TestModeName	# 4	;  Find if a mode is loaded
Zap_UpdateArea		# 4	;  Force window redraw
Zap_UpdateWindow	# 4	;  Force window redraw
Zap_UpdateWholeWindow	# 4	;  Force window redraw
Zap_AllFiles		# 4	;  Force window redraw
Zap_ReadValidateCommand # 4	;  String -> command block
Zap_ProcessKeyCommand	# 4	;  Execute a given command block
Zap_ReturnWord		# 4	;  Return delimited word at cursor
Zap_DoReplaceArea	# 4	;  Calls Zap_ReplaceArea with R8=0
Zap_LogicalLine		# 4	;  Calls base mode's e_clnlog
Zap_PhysicalLine	# 4	;  Calls base mode's e_clnphy
Zap_OffsetLine		# 4	;  Calls base mode's e_clnoff
Zap_NextLine		# 4	;  Calls base mode's e_nextline
Zap_EvaluateExpression  # 4	;  Calls base mode's e_nextline
Zap_ClaimMessage	# 4	;  Claim/forward the next message
Zap_TestChanged		# 4	;  Tests to see if file modified
Zap_MarkChanged		# 4	;  Marks the file changed/unchanged
Zap_CalculateChecksum	# 4	;  Calculates the file's chksum
Zap_LookupToken		# 4	;  Looks up token in Zap's messages file
Zap_LookupTokenGS	# 4	;  ...with GS translation (OS_GStrans)
Zap_LookupError		# 4	;  ...for error generation
Zap_LookupTokenR0	# 4	;  LookupToken with R2=R3=0
Zap_ExpandMenu		# 4	;  Expands a tokenised menu
Zap_MiniWriteToken	# 4	;  insert chars in minibuffer (ditto)
Zap_MiniPromptToken	# 4	;  set/change the minibuffer prompt (ditto)
Zap_TestIfCloneBase	# 4	;  is given mode clone base of current mode?
Zap_ReadVariable	# 4	;  read a user configuration variable
Zap_BuildMenuWithHelp	# 4	;  build a Zap menu structure with help data
Zap_CharDelDispatch	# 4	;  do a column of changes if in a selection
Zap_SelectHistoryBuffer # 4	;  choose/create a history buffer
Zap_GetFileMode		# 4	;  choose the mode for a file with FileIds
Zap_AddFilter		# 4	;  add a mode filter
Zap_RemoveFilter	# 4	;  remove a mode filter
Zap_AddCallTable	# 4	;  add an extension call 'table'
Zap_CallExtension	# 4	;  call an extension
Zap_RedrawTab		# 4	;  redraw a Tab character


;  Module entry points for Zap

		^	0
e_module	#	4	;  Table offset from start of module
e_title		#	4	;  Title of mode
e_author	#	4	;  Author's name
e_basemode	#	4	;  Base mode number (text)
e_mode		#	4	;  This mode number
e_init		#	4	;  Initialisation code
e_menu		#	4	;  Menu to be attached to 'Mode' menu
e_len		#	4	;  Total length of entry table
e_postload	#	4	;  Called after file is loaded
e_presave	#	4	;  Called before file is saved
e_loading	#	4	;  Called when file loaded into window
e_start		#	4	;  Called when window enters this mode
e_end		#	4	;  Called when window leaves this mode
e_width		#	4	;  Called when window (re)created to find width
e_linecol	#	4	;  Column offset to file offset
e_lineoff	#	4	;  File offset to column offset
e_clnlog	#	4	;  Logical line to file offset/physical line
e_clnphy	#	4	;  Physical line to file offset
e_clnoff	#	4	;  File offset to physical/logical line & offset
e_nextline	#	4	;  Return first line shiftable with no redraw
e_minus		#	4	;  Move left one char
e_plus		#	4	;  Move right one char
e_splus		#	4	;  Move left one word
e_sminus	#	4	;  Move right one word
e_cminus	#	4	;  Move to start of line
e_cplus		#	4	;  Move to end of line
e_redrawline	#	4	;  Redraw single line of display
e_redrawlnum	#	4	;  Check if physical line is start of logical
e_char		#	4	;  Insert character(s)
e_delete	#	4	;  Delete character(s)
e_tab		#	4	;  Perform tab(s)
e_return	#	4	;  Insert return(s)
e_renumber	#	4	;  Perform renumber
e_saveandrun	#	4	;  Perform save and run
e_linestart	#	4	;  Returns pos of first character of line
e_lineend	#	4	;  Returns pos of last character of line
e_linenext	#	4	;  Returns pos of actual line end (eg. at &0A)
e_lineprev	#	4	;  Returns pos of actual line start (for BASIC)
e_copy		#	4	;  Called when copying with copy key
e_joinline	#	4	;  Called when joinline pressed
e_splitline	#	4	;  Called when splitline pressed
e_aligncaret	#	4	;  Align caret (& reset counters)
e_command	#	4	;  Called when Zap_Command issued
e_compile	#	4	;  Called when compile pressed
e_formattext	#	4	;  Called when formattext pressed
e_run		#	4	;  Called when run pressed
e_runandquit	#	4	;  Called when run and quit pressed
e_basic		#	4	;  Called when enter BASIC pressed
e_search	#	4	;  Called to validate search
e_replace	#	4	;  Called to replace area
e_selection	#	4	;  Check selection
e_click		#	4	;  Called when user clicks on window
e_message	#	4	;  Called when unrecognised messages received
e_setwidth	#	4	;  Called when user changes width of window
e_listfns	#	4	;  Create function browser
e_prevline	#	4	;  Find start of update region
e_openwindow	#	4	;  Window changing size or moving
e_interrogate	#	4	;  Zap's questions
e_returnword	#	4	;  return bounds of word at cursor
e_help		#	4	;  return possible help keywords
e_stripspaces	#	4	;  space-stripping help requests
e_length	#	0	;  maximum entry size

;  Zap redraw offsets

		^	0
r_flags		#	4	;  redraw flags
r_minx		#	4	;  Min x in pixs inc
r_miny		#	4	;  Min y in pixs inc (from top)
r_maxx		#	4	;  Max x in pixs exc
r_maxy		#	4	;  Max y in pixs exc (from top)
r_screen	#	4	;  Address of the screen
r_bpl		#	4	;  Bytes per raster line
r_bpp		#	4	;  Log base 2 of bpp
r_charw		#	4	;  Width of a character in pixs
r_charh		#	4	;  Height of a character in pixs
r_caddr		#	4	;  Cache address / font name
r_cbpl		#	4	;  Bytes per cached line
r_cbpc		#	4	;  Bytes per cached character
r_linesp	#	4	;  Line spacing in pixels
r_data		#	4	;  Address of data to print
r_scrollx	#	4	;  X scroll offset in pixs
r_scrolly	#	4	;  Y scroll offset in pixs
r_palette	#	4	;  Address of palette data
r_for		#	4	;  Start forground colour
r_bac		#	4	;  Start background colour
r_workarea	#	4	;  Address of work area
r_magx		#	4	;  Log 2 of num of x os per pixel
r_magy		#	4	;  Log 2 of num of y os per pixel
r_xsize		#	4	;  Screen width in pixels
r_ysize		#	4	;  Screen height in pixels
r_mode		#	4	;  Screen mode
; the rest of this block is optional (depending on r_flags
r_length	#	4	;  total length of redraw block
r_lmargin	#	4	;  left margin (pixels)
r_tmargin	#	4	;  top margin (pixels)
r_end		#	4	;  end of longest possible redraw block


;  Flags for extra commands

x_nor10		EQU	1<<0	;  Doesn't need r10 on entry  (eg. called from
x_nor8		EQU	1<<1	;  Doesn't need r8 on entry        a menu)
x_nor9		EQU	1<<2	;  Doesn't need r9 on entry
x_noparams	EQU	0<<3	;  Parameters required: None
x_byteparam	EQU	1<<3	;			List of bytes
x_wordparam	EQU	2<<3	;			List of words
x_stringparam	EQU	3<<3	;			String
x_blockparam	EQU	4<<3	;			Block of data
x_beforemb	EQU	1<<6	;  Call before minibuffer opened
x_everyupdate	EQU	1<<7	;  Call after every minibuffer update
x_beforekey	EQU	1<<8	;  Call before key inserted into minibuffer
x_completion	EQU	1<<9	;  Activate filename completion in minibuffer (TAB)
x_maykill	EQU	1<<10	;  May want to kill minibuffer before opened
x_maystayopen	EQU	1<<11	;  May want minibuffer to stay open when command finished
x_multiplyarg	EQU	1<<12	;  Universal Arg does r1=r1*n, rather than call n times
x_callforeach	EQU	1<<13	;  Call for each time buffered
x_noexecute	EQU	1<<14	;  Command shouldn't be executed when loading a file
x_tickable	EQU	1<<15	;  Entry is tickable when in a menu
x_submenu	EQU	1<<16	;  Can create submenu or leaf window
x_defaultstring	EQU	1<<17	;  Provides default string for menu entries
x_menutext	EQU	1<<18	;  Provides menu entry text
x_specifysub	EQU	1<<19	;  Specifies submenu
x_allowremove	EQU	1<<20	;  May want to remove the menu entry


		[ 1=0

;  Support stuff for macros

		GBLS	StackedRegs
StackedRegs	SETS	""
		GBLL	StackedSet
StackedSet	SETL	{FALSE}
		GBLA	LocalCount
LocalCount	SETA	1
		GBLS	L
L		SETS	"$LocalCount"
;		[	$debug :LAND: (:DEF: |header.h|)={FALSE}
;		IMPORT	debughandle
;		]


;  Macro to add register to remembered list
;  Syntax:	ADDREG	{register}

		MACRO
		ADDREG	$register
		ASSERT	StackedSet
		[	"$register"<>"" :LAND: "$StackedRegs"<>""
StackedRegs	SETS	"$StackedRegs,$register"
		|
StackedRegs	SETS	"$StackedRegs.$register"
		]
		MEND


;  Macro to remember register list. lr implied
;  Syntax:	REGS	{reg-list}

		MACRO
		REGS	$p0,$p1,$p2,$p3,$p4,$p5,$p6,$p7,$p8,$p9,$p10,$p11,$p12,$p13,$p14,$p15
		ASSERT	StackedSet={FALSE}
StackedSet	SETL	{TRUE}
StackedRegs	SETS	"$p0"
		ADDREG	$p1
		ADDREG	$p2
		ADDREG	$p3
		ADDREG	$p4
		ADDREG	$p5
		ADDREG	$p6
		ADDREG	$p7
		ADDREG	$p8
		ADDREG	$p9
		ADDREG	$p10
		ADDREG	$p11
		ADDREG	$p12
		ADDREG	$p13
		ADDREG	$p14
		ADDREG	$p15
		MEND


;  Macro to save given registers. lr implied
;  Syntax:	SAVE	{reg-list}

		MACRO
$label		SAVE	$p0,$p1,$p2,$p3,$p4,$p5,$p6,$p7,$p8,$p9,$p10,$p11,$p12,$p13,$p14,$p15
		REGS	$p0,$p1,$p2,$p3,$p4,$p5,$p6,$p7,$p8,$p9,$p10,$p11,$p12,$p13,$p14,$p15
		[	"$StackedRegs"=""
$label		STMFD	sp!,{lr}
		|
$label		STMFD	sp!,{$StackedRegs,lr}
		]
		MEND


;  Macro to push registers. lr implied
;  Syntax:	PUSH	{condition}

		MACRO
$label		PUSH	$cc
		ASSERT	StackedSet
		[	"$StackedRegs"=""
$label		STM$cc.FD sp!,{lr}
		|
$label		STM$cc.FD sp!,{$StackedRegs,lr}
		]
		MEND


;  Macro to pull registers. lr implied
;  Syntax:	PULL	{condition}

		MACRO
$label		PULL	$cc
		ASSERT	StackedSet
		[	"$StackedRegs"=""
$label		LDM$cc.FD sp!,{lr}
		|
$label		LDM$cc.FD sp!,{$StackedRegs,lr}
		]
		MEND


;  Macro to pull registers and return
;  Syntax:	RTS	{condition}

		MACRO
$label		RTS	$cc
		[	StackedSet
		[	"$StackedRegs"=""
$label		LDM$cc.FD sp!,{pc}
		|
$label		LDM$cc.FD sp!,{$StackedRegs,pc}
		]
		|
$label		MOV	pc,lr
		]
		MEND


;  Macro to pull registers and return, reinstating the flags
;  Syntax:	RTSS	{condition}

		MACRO
$label		RTSS	$cc
		[	StackedSet
		[	"$StackedRegs"=""
$label		LDM$cc.FD sp!,{pc}^
		|
$label		LDM$cc.FD sp!,{$StackedRegs,pc}^
		]
		|
$label		MOVS	pc,lr
		]
		MEND


;  Macro to reset stacked registers record to start another routing
;  Syntax:	NEWREGS

		MACRO
		NEWREGS
StackedRegs	SETS	""
StackedSet	SETL	{FALSE}
		MEND


;  A decent way of implementing local variables
;  Call LOCAL between routines. Then label$L is local to that routine
;  Syntax:	LOCAL

		MACRO
		LOCAL
StackedRegs	SETS	""
StackedSet	SETL	{FALSE}
LocalCount	SETA	LocalCount+1
L		SETS	"$LocalCount"
		MEND

		]

;  Macro to call Zap
;  Code is more efficient if temporary register provided (NOT lr)
;  Syntax:	CALL	{routine}[,[{register}][,{condition}]]

		MACRO
$label		CALL	$routine,$register,$cc
		[	"$register"=""
$label		LDR$cc	lr,[zapwsblk]
		ADD$cc	lr,lr,#$routine
		STM$cc.FD sp!,{lr}
		MOV$cc	lr,pc
		LDM$cc.FD sp!,{pc}
		|
		ASSERT	$register<>lr
$label		LDR$cc	$register,[zapwsblk]
		MOV$cc	lr,pc
		ADD$cc	pc,$register,#$routine
		]
		MEND


;  Macro to call Zap without return. Requires temporary register (NOT lr)
;  Syntax:	JMP	{routine},{register}[,{condition}]

		MACRO
$label		JMP	$routine,$register,$cc
		ASSERT	$register<>lr
$label		LDR$cc	$register,[zapwsblk]
		ADD$cc	pc,$register,#$routine
		MEND


;  Macro to write byte to debug stream
;  Syntax:	BYTE	{value},[{condition}]

;		MACRO
;$label		BYTE	$value,$cc
;		[	$debug
;$label		B$cc	%f00
;		B	%f01
;00		STMFD	sp!,{r0,r1,lr}
;		STMFD	sp!,{pc}
;		MOV	r0,$value
;	LDR	r1,=debughandle		;	ADRL	r1,debughandle
;	LDR	lr,={PC}+12
;	ADD	r1,pc,r1
;	SUB	r1,r1,lr
;		LDR	r1,[r1]
;		SWI	XOS_BPut
;		SWI	XOS_BPut
;		SWI	XOS_BPut
;		SWI	XOS_BPut
;		LDMFD	sp!,{lr}
;		TEQP	lr,#0
;		MOV	r0,r0
;		LDMFD	sp!,{r0,r1,lr}
;01
;		]
;		MEND


;  Macro to write word to debug stream
;  Syntax:	WORD	{value},[{condition}]

;		MACRO
;$label		WORD	$value,$cc
;		[	$debug
;$label		B$cc	%f00
;		B	%f01
;00		STMFD	sp!,{r0,r1,lr}
;		STMFD	sp!,{pc}
;		ADD	sp,sp,#4*4
;		MOV	r0,$value
;		SUB	sp,sp,#4*4
;	LDR	r1,=debughandle		;	ADRL	r1,debughandle
;	LDR	lr,={PC}+12
;	ADD	r1,pc,r1
;	SUB	r1,r1,lr
;		LDR	r1,[r1]
;		SWI	XOS_BPut
;		MOV	r0,r0,LSR #8
;		SWI	XOS_BPut
;		MOV	r0,r0,LSR #8
;		SWI	XOS_BPut
;		MOV	r0,r0,LSR #8
;		SWI	XOS_BPut
;		LDMFD	sp!,{lr}
;		TEQP	lr,#0
;		MOV	r0,r0
;		LDMFD	sp!,{r0,r1,lr}
;01
;		]
;		MEND


;  Macro to dump memory block to debug stream
;  Meaningless results if start==pc, length==pc, or length==sp
;  Syntax:	DUMP	{start},{length},[{condition}]

;		MACRO
;$label		DUMP	$start,$length,$cc
;		[	$debug
;$label		B$cc	%f00
;		B	%f02
;00		STMFD	sp!,{r0-r3,lr}
;		STMFD	sp!,{r2,pc}
;		ADD	sp,sp,#7*4
;		MOV	r2,$start
;		SUB	sp,sp,#7*4
;		STMFD	sp!,{r2}
;		LDR	r2,[sp,#4]
;		MOV	r3,$length
;		LDR	r2,[sp],#8
;	LDR	r1,=debughandle		;	ADRL	r1,debughandle
;	LDR	lr,={PC}+12
;	ADD	r1,pc,r1
;	SUB	r1,r1,lr
;		LDR	r1,[r1]
;		MOV	r0,#'>'
;		SWI	XOS_BPut
;		SWI	XOS_BPut
;		SWI	XOS_BPut
;		SWI	XOS_BPut
;		ADD	r3,r2,r3
;01		LDRB	r0,[r2],#1
;		SWI	XOS_BPut
;		CMP	r2,r3
;		BLO	%b01
;		MOV	r0,#'<'
;		SWI	XOS_BPut
;		SWI	XOS_BPut
;		SWI	XOS_BPut
;		SWI	XOS_BPut
;		LDMFD	sp!,{lr}
;		TEQP	lr,#0
;		MOV	r0,r0
;		LDMFD	sp!,{r0-r3,lr}
;02
;		]
;		MEND


		END
