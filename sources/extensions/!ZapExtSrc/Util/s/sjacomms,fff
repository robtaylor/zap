; Zap Util Command Extension
; $Id: sjacomms,fff,v 1.5 1999-03-30 23:31:20 ds Exp $
; Copyright (C) 1998-1999 Zap Developers
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
; Util commands by James Aylett
;
; COMMANDSEL		- Perform command with the selection as parameter
; NEXT(FILE|WINDOW|VIEW)
;			- Moves cursor to the next (file|window|view on file)
; SETNAMEINCORE		- Sets filename based on in-core text, configured by c-vars

; Includes
		GET	h.ZapUtil
		GET	h.dsutils
		GET	h.module
		GET	h.coreutils

; What we give to other people
		EXPORT	sja_commandsel
		EXPORT	sja_nextview
		EXPORT	sja_nextwindow
		EXPORT	sja_nextfile
		EXPORT	sja_setname

; SETNAMEINCORE - find SetNameStart, find SetNameEnd; whatever's between them
; is the in-core filename. Ultimately SetNameTranslation will enable us to do
; format translations, although quite how this can work I don't know; we need
; to be able to do Unix <-> RISC OS filename handling somehow. Any ideas, shout.
		LOCAL

		&	0
		; basically: nothing ...
sja_setname	TEQ	r2,#0
		TEQNE	r8,#0
		TEQNE	r9,#0
		MOVNE	pc,lr

		FNJSR

		BL	util_splitbuffer	; do this now because it uses r0,r1

		ADR	r0,start$l
		FNcall	Zap_ReadVariable
		FNRTS	EQ			; no such variable!

		MOV	r1,#2			; no output
		MOV	r3,#-1			; from start
		MOV	r4,#1			; forward
		MOV	r5,#zsearch_CaseSensitive :OR: zsearch_NoMacros :OR: zsearch_DontBeep :OR: zsearch_ReturnEndOfMatch
		FNcall	Zap_Search
		FNRTS	VS

		CMP	r0,#0
		MOVLT	r0,#0
		FNRTS	LT			; couldn't find it

		MOV	r3,r1			; position to start searching for end from ...
		MOV	r6,r1			; and store it

		ADR	r0,end$l
		FNcall	Zap_ReadVariable
		FNRTS	EQ

		MOV	r1,#2
		MOV	r4,#1
		MOV	r5,#zsearch_CaseSensitive :OR: zsearch_NoMacros :OR: zsearch_DontBeep :OR: zsearch_ReturnEndOfMatch
		FNcall	Zap_Search
		FNRTS	VS

		CMP	r0,#0
		MOVLT	r0,#0
		FNRTS	LT

		; r6 -> start of filename
		; r0 -> char after end of filename
		; we may have boundary issues with both ...
		; !!! at this point we'd do the filename translation ...
		SUB	r1,r0,#1		; -> last char of filename
		SUB	r0,r1,r6		; length of filename
		ADD	r0,r0,#2		; and a NUL, and correct for r1 SUB above
                FNcall	Zap_Claim
		FNRTS	VS
		MOV	r4,r0			; preserve buffer
		LDR	r3,[fileptr,#f_ptr]
		ADD	r2,r6,r3		; pointers are now into
		ADD	r1,r1,r3		; the real data ...
		BL	strcopy_limit
		MOV	r0,r4			; restore buffer

		FNcall	Zap_NewFileName		; update filename (corrupts R0)
		FNcallc	Zap_NewFileTitle,VC	; update title bar - only if previous worked
		MOV	r0,r4			; restore it again ...
		FNcall	Zap_Free		; release buffer

		FNRTS

start$l		=	"SetNameStart", 0
end$l		=	"SetNameEnd", 0
;translation$l	=	"SetNameTranslation", 0
		ALIGN

; COMMANDSEL - call a single command, substituting the current selection for
; the string parameter
		LOCAL

		&	(3<<3)+(1<<6)+(1<<11)+(1<<12)
		; string param, call me before opening the minibuff,
		; don't close minibuff, universal arg affects r1
sja_commandsel
		TEQ	r2,#6
		BEQ	minibuff$l		; minibuffer opening

		FNJSR
		LDRB	r14,[r0]
		TEQ	r14,#0			; first character NUL?
		MOVEQ	r0,#0
		FNRTS	EQ			; close minibuffer

		FNcall	Zap_FindCommand
		FNRTS	VS
		CMP	r0,#0
		FNRTS	EQ			; couldn't find the command

		MOV	r7,r0			; command address

		FNcall	Zap_ReadSel		; preserves r1
		FNRTS	VS
		CMP	r3,#0
		FNRTS	EQ			; no selection
		MOV	r0,r3			; r0 data, r2 data length
		PUSH	"r3"			; need to preserve

		LDR	r3,[r7,#-4]		; flags for command
		AND	r3,r3,#(3<<3)		; parameter type
		CMP	r3,#(1<<3)		; list of bytes
		MOVEQ	r1,r2
		CMP	r3,#(2<<3)		; list of words
		MOVEQ	r1,r2,LSR #2		; rounding down
		; otherwise r1 still contains the 'n' repeat time, as required
		MOV	r2,#(1<<31)		; execute, don't learn
		; r7 already points to the command address
		; windptr-cursorptr have also been preserved
		FNcall	Zap_ProcessCommand	; actually do it
		; ### if params are word or byte, only gets done once
		; ### if this returns an error, we lose it

		MOVVC	r5,r0			; preserve
		MOVVS	r5,#0			; close minibuffer

		PULL	"r0"
		FNcall	Zap_Free		; free heap block we used

		CMP	r5,#0
		MOVPL	r0,#0
		MOVMI	r0,#1			; if minibuffer opened, leave it
		FNRTSS				; (shouldn't happen anyway)
		; Note that we have to use FNRTSS, even if Zap_ProcessCommand
		; returns an error, because we lose the error pointer.

minibuff$l	ADR	r0,miniprompt$l
		B	zap_setprompt

miniprompt$l	StrZA	"zaputil_p_commandsel", "Command (sel): "

; NEXTFILE
		LOCAL

		&	0
		; r8-r10 gives cursor caret. Go to last marker offset
		; in the next file in the list.
sja_nextfile	CMP	windptr,#0
		CMPNE	fileptr,#0
		MOVEQ	pc,lr

		FNJSR
		MOV	r1,#9			; file_num
		FNcall	Zap_ReadVar		; maximum file offset
		FNRTS	VS
		MOV	r5,r0

		LDR	r0,[windptr,#w_file]	; file offset
		MOV	r3,r0			; store

loop$l		ADD	r0,r0,#1		; next offset
		CMP	r0,r5
		MOVGE	r0,#0			; go back to first

		FNcall	Zap_ConvFileOff		; \X fileptr
		FNRTS	VS
		CMP	fileptr,#0
		BEQ	loop$l			; invalid

		LDR	r1,[fileptr,#f_ptr]
		CMP	r1,#-1
		BEQ	loop$l			; deleted

		; fileptr is valid as the file to switch to
		CMP	r0,r3
		FNRTS	EQ			; back to where we started

		FNcall	Zap_FindWindow
		FNRTS	VS
;		LDR	r1,[cursorptr,#c_wind]	; is this window
;		FNcall	Zap_GetWindOff		; where we started (irrelevant!)

		LDR	r0,[windptr,#w_poff]	; "point" offset
		FNcall	Zap_PutCaret

		FNRTS

		LOCAL
		&	0
sja_nextwindow	CMP	windptr,#0
		CMPNE	fileptr,#0
		MOVEQ	pc,lr

		FNJSR

		MOV	r1,#8			; wind_num
		FNcall	Zap_ReadVar		; maximum window offset
		FNRTS	VS
		MOV	r5,r0

		FNcall	Zap_GetWindOff		; \X r0
		FNRTS	VS
		MOV	r3,r0			; store

loop$l		ADD	r0,r0,#1		; next offset
		CMP	r0,r5
		MOVGE	r0,#0			; go back to first

		FNcall	Zap_ConvWindOff		; \X windptr, fileptr
		FNRTS	VS
		CMP	windptr,#0
		BEQ	loop$l			; invalid

		LDR	r1,[windptr,#w_handle]
		CMP	r1,#-1
		BEQ	loop$l			; deleted

		; windptr is valid as the window to switch to
		CMP	r0,r3
		FNRTS	EQ			; back to where we started

		LDR	r0,[windptr,#w_poff]
		FNcall	Zap_PutCaret

		FNRTS

		LOCAL
		&	0
sja_nextview	CMP	windptr,#0
		CMPNE	fileptr,#0
		MOVEQ	pc,lr

		FNJSR

		MOV	r1,#8			; wind_num
		FNcall	Zap_ReadVar		; maximum window offset
		FNRTS	VS
		MOV	r5,r0			; store

		FNcall	Zap_GetWindOff		; \X r0
		FNRTS	VS
		MOV	r3,r0			; store
;		FNcall	Zap_GetFileOff		; \X r0
;		FNRTS	VS
		MOV	r4,fileptr		; store
;		MOV	r0,r3			; window offset

loop$l		ADD	r0,r0,#1		; next offset
		CMP	r0,r5
		MOVGE	r0,#0			; go back to first

		FNcall	Zap_ConvWindOff		; \X windptr, fileptr
		FNRTS	VS
		CMP	windptr,#0
		BEQ	loop$l			; invalid

		LDR	r1,[windptr,#w_handle]
		CMP	r1,#-1
		BEQ	loop$l			; deleted

		CMP	r0,r3
		FNRTS	EQ			; back to where we started

;		MOV	r1,r0			; store over GetFileOff call
;		FNcall	Zap_GetFileOff		; \X r0
;		FNRTS	VS
;		CMP	r0,r4			; same file?
;		MOV	r0,r1

		CMP	r4,fileptr		; same file?
		BNE	loop$l

		; windptr is valid as the window to switch to
		LDR	r0,[windptr,#w_poff]
		FNcall	Zap_PutCaret

		FNRTS

; That's it
		END
