/*
 * $Id: MenuConf,fff,v 1.4 2000-03-15 13:14:28 james Exp $
 * -*- c -*-
 * MenuConf
 * Configure which options to use in building the Menus file, and then build it.
 *
 * (c) James Aylett 1999, 2000. <dj@zap.uk.eu.org>
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Options are stupidly written as a linked list, because I didn't have to think to
 * do that. They should be an expanding array, because then we don't have to keep
 * searching through them dumbly.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <limits.h>

#include "coopt.h"

#define VERSION_STRING "v0.4 (c) James Aylett 2000"

struct option
{
  struct option *next;
  struct option *last;
  char *option;
  char *help;
  union
  {
    int value;
    struct
    {
      unsigned int selected : 1;
    } data;
  } flags;
};

struct option *new_option(void);
void *xmalloc (int);
void *xrealloc (void *, int);
void do_error(char *, ...);
void fatal_error(char *, ...);
void help(void);
char *get_country(void);
char *xstrdup(char *);
unsigned long add_string(char **, unsigned long *, unsigned long, char *);

const char *program_name;
char *country=NULL;
struct option *list_head;

int
main(int argc, char const * const * argv)
{
#define BUFFER_PAGE_SIZE 256
  unsigned long current_buffer_limit = BUFFER_PAGE_SIZE;
  char *buffer;
  unsigned long offset = 0;
  FILE *in=NULL;

  static const struct coopt_option option[] = {
    { 'i', COOPT_REQUIRED_PARAM, "input" },
    { 'o', COOPT_REQUIRED_PARAM, "output" },
    { 'c', COOPT_REQUIRED_PARAM, "country" },
    { 'g', COOPT_REQUIRED_PARAM, "generator" },
    { 'E', COOPT_REQUIRED_PARAM, "extraopts" },
    { 'n', COOPT_NO_PARAM, "noprompt" },
    { 'f', COOPT_REQUIRED_PARAM, "configfrom" },
    { 'h', COOPT_NO_PARAM, "help" },
    { 'V', COOPT_NO_PARAM, "version" }
  };

  struct coopt_state state;
  struct coopt_return ret;

  int interactive=1, bogey=1;

  char *infile=NULL, *outfile=NULL;
  char *generator=NULL;
  char *extraopts=NULL;
  char *configfrom=NULL;
  struct option *opt=NULL;

  list_head = (struct option *)xmalloc(sizeof(struct option));
  list_head->next=list_head;
  list_head->last=list_head;

  program_name = argv[0];
  coopt_init(&state, option, sizeof(option) / sizeof(struct coopt_option),
	     argc-1, argv+1);

  do
  {
    ret = coopt(&state);
    if (!coopt_is_error(ret.result))
    {
      if (ret.opt!=NULL)
      {
        switch (ret.opt->short_option)
        {
          case 'i':
            if (infile!=NULL)
              fatal_error("you can't specify more than one input file");
            infile = (char *)ret.param;
            break;
          case 'o':
            if (outfile!=NULL)
              fatal_error("you can't specify more than one output file");
            outfile = (char *)ret.param;
            break;
          case 'c':
            if (country!=NULL)
              fatal_error("you can't specify more than one country");
            country = (char *)ret.param;
            break;
          case 'E':
            if (extraopts!=NULL)
              fatal_error("you can't specify more than one set of extra options");
            extraopts = (char *)ret.param;
            break;
          case 'f':
            if (configfrom!=NULL)
              fatal_error("you can't take config from more than one file");
            configfrom = (char *)ret.param;
            break;
          case 'g':
            if (generator!=NULL)
              fatal_error("you can't specify more than one generator");
            generator = (char *)ret.param;
            break;
          case 'n':
            interactive=0;
            break;
          case 'V':
            printf ("%s %s\n", program_name, VERSION_STRING);
            exit(0);
          case 'h':
            help();
            break;
        }
      }
      else if (coopt_is_okay(ret.result)) /* ie: it's a parameter */
      {
        if (infile==NULL)
          infile=(char *)ret.param;
        else
          fatal_error("you can't specify more than one input file");
      }
    }
  } while (coopt_is_okay(ret.result));

  if (coopt_is_error(ret.result))
  {
    char err[255];
    coopt_serror(err, 255, &ret, &state);
    fatal_error("fatal error in options parsing: %s", err);
  }

#define SOURCE_DIR "ZapUser:Config.Menus.Source"
#define DEST_DIR "ZapUser:Config.Menus"
  if (infile==NULL)
  {
    infile = (char *)xmalloc(strlen(SOURCE_DIR)+strlen(get_country())+4);
    sprintf(infile, "%s.%s", SOURCE_DIR, get_country());
  }
  if (outfile==NULL)
  {
    outfile = (char *)xmalloc(strlen(DEST_DIR)+strlen(get_country())+4);
    sprintf(outfile, "%s.%s", DEST_DIR, get_country());
  }

  if ((in=fopen(infile, "r"))==NULL)
    fatal_error("Couldn't open source file %s.", infile);

  /* processing */
  {
    int c;
    int state=0; /* 1 = reading options, 2 = done */

    buffer = (char *)xmalloc((size_t)current_buffer_limit);

    while (!feof(in) && !ferror(in) && state<2)
    {
      offset=0;
      /* get a line into the buffer */
      do
      {
        c = fgetc(in);
        if (feof(in) || ferror(in) || c=='\n' || c==0)
          c=0;

        buffer[offset++]=(char)c;
        if (offset==current_buffer_limit)
        {
          current_buffer_limit+=BUFFER_PAGE_SIZE;
          buffer = (char *)xrealloc((void *)buffer, (size_t)current_buffer_limit);
        }
      } while (c!=0);
      /* process the line */
      if (strcmp(buffer, "| Start options")==0)
      {
        state=1;
      }
      else if (strcmp(buffer, "| End options")==0)
      {
        state=2;
      }
      else if (state==1)
      {
        /* process the option */
        char *ptr = buffer;
        char *start_ptr;
        while (*ptr == '|' || *ptr == ' ' || *ptr == 9)
          ptr++;
        start_ptr = ptr;
        while (*ptr != ' ' && *ptr != 9 && *ptr != 0)
          ptr++;
        if (*ptr != 0)
          *ptr++=0;
        while (*ptr == ' ' || *ptr == 9)
          ptr++;
        /* option goes from start_ptr; help text goes from ptr
         * if the line terminated early, option is from start_ptr, and ptr -> a NUL byte
         * so it still works acceptably
         */
        opt = new_option();
        if (*start_ptr == '*')
        {
          if (configfrom==NULL) /* ignore source default if working from a config file */
            opt->flags.data.selected = 1;
          start_ptr++;
        }
        opt->option = xstrdup(start_ptr);
        opt->help = xstrdup(ptr);
      }
    }
  }

  fclose(in);

  /* if there was a config file specified, alter the options based on that */
  if (configfrom!=NULL)
  {
    in = fopen(configfrom, "r");
    if (in!=NULL)
    {
      int state = 0;
      char c;

      while (!feof(in) && !ferror(in) && state==0)
      {
        offset=0;
        /* get a line into the buffer */
        do
        {
          c = fgetc(in);
          if (feof(in) || ferror(in) || c=='\n' || c==0)
            c=0;

          buffer[offset++]=(char)c;
          if (offset==current_buffer_limit)
          {
            current_buffer_limit+=BUFFER_PAGE_SIZE;
            buffer = (char *)xrealloc((void *)buffer, (size_t)current_buffer_limit);
          }
        } while (c!=0);
        /* Process the line in buffer */
/*        printf("Processing line '%s'\n", buffer);*/
        if (strncmp(buffer, "| Arguments", 11)==0)
        {
          /* found the configuration line - read the options */
          unsigned long off = 0;
          while (off < offset)
          {
/*            printf("Testing '%c'\n", buffer[off]);*/
            if (buffer[off] == '-' && off < offset)
            {
              off++;
/*              printf("Testing '%c'\n", buffer[off]);*/
              if (buffer[off] == 'D' && off < offset)
              {
                unsigned long start_off;
/*                printf("  Found -D\n");*/
                off++;
                while (buffer[off] == ' ' && off < offset)
                  off++;
                start_off = off;
                while (buffer[off] != ' ' && off < offset)
                  off++;
/*                printf("  Option from %i to %i\n", start_off, off);*/
                /*
                 * we now have a configuration option from buffer+start_off to
                 * buffer+off-1
                 */
                if (start_off < off) /* otherwise don't bother */
                {
                  opt = list_head->next;
                  while (opt!=list_head)
                  {
                    if (strncmp(buffer+start_off, opt->option, (int)(off-start_off))==0)
                    {
                      opt->flags.data.selected=1;
                      opt=list_head;
                    }
                    else
                      opt = opt->next;
                  }
                }
              }
            }
            off++;
          }
          state=1; /* so stop this loop */
        }
      }

      fclose(in);
    }
    else
      do_error("couldn't open config file %s; all options off by default", configfrom);
  }

  /* user input */
  while (interactive && bogey)
  {
    int i;
    long opt_input, store_input;
    opt = list_head->next;
    i=1;
    while (opt!=list_head)
    {
      printf("%s%4i: %s\n        %s\n",
             (opt->flags.data.selected)?(" *"):("  "),
             i, opt->option,
             opt->help);
      opt = opt->next;
      i++;
    };
    do
    {
      char tempbuf[10];
      opt_input=-1;
      printf("\nSelect an option to toggle, or Q to generate using these options: ");
      if (fgets(tempbuf, 10, stdin)==NULL)
        opt_input=-1;
      else
      {
        /* remember that fgets() reads the '\n' as well */
        if (strcmp(tempbuf,"Q\n")==0 || strcmp(tempbuf,"q\n")==0)
        {
          opt_input=0;
        }
        else
        {
          opt_input = strtol(tempbuf, NULL, 10);
          if (opt_input==0 || opt_input==LONG_MAX || opt_input==LONG_MIN)
            opt_input=-1;
        }
      }
    } while (opt_input==-1);
    if (opt_input==0)
      bogey=0;
    else if (opt_input>0)
    {
      store_input = opt_input;
      opt = list_head->next;
      while (opt_input>1 && opt!=list_head)
      {
        opt=opt->next;
        opt_input--;
      }
      if (opt==list_head)
      {
        printf("%li isn't a valid option!\n\n", store_input);
      }
      else
      {
        opt->flags.data.selected = 1 - opt->flags.data.selected;
        printf("Toggled option %li.\n\n", store_input);
      }
    }
  }

  /* and generate! */
  offset=0;
  if (generator==NULL)
    generator = "ZapCode:Tools.MakeMenus.MakeMenus";
  offset = add_string(&buffer, &current_buffer_limit, offset, generator);
  opt = list_head->next;
  while (opt!=list_head)
  {
    if (opt->flags.data.selected)
    {
      offset = add_string(&buffer, &current_buffer_limit, offset, " -D ");
      offset = add_string(&buffer, &current_buffer_limit, offset, opt->option);
    }
    opt = opt->next;
  }
  if (extraopts!=NULL)
  {
    offset = add_string(&buffer, &current_buffer_limit, offset, " ");
    offset = add_string(&buffer, &current_buffer_limit, offset, extraopts);
  }
  offset = add_string(&buffer, &current_buffer_limit, offset, " --output ");
  offset = add_string(&buffer, &current_buffer_limit, offset, outfile);
  offset = add_string(&buffer, &current_buffer_limit, offset, " ");
  offset = add_string(&buffer, &current_buffer_limit, offset, infile);
/*  printf("\n\nwould use string:\n%s\n\n", buffer);*/
  if ((bogey = system(buffer))!=0)
/*    fatal_error("generator failed - menus file may be invalid (errno = %i, command = %s)", bogey, buffer);*/
    fatal_error("generator failed - menus file may be invalid");
  if (interactive)
    printf("\nGenerated Menus file.\n");

  return 0;
}

/* grotty way of doing this ... */
unsigned long add_string(char **buf, unsigned long *limit, unsigned long offset, char *string)
{
  unsigned long i = strlen(string);
  while (offset+i >= *limit)
  {
    *buf = (char *)xrealloc((void *)*buf, (size_t)(*limit + BUFFER_PAGE_SIZE));
    *limit += BUFFER_PAGE_SIZE;
  }
  strcpy(*buf + offset, string);
  return (offset + strlen(string));
}

char *get_country()
{
  if (country!=NULL)
    return country;
  else
    country = getenv("Zap$Country");
  if (country!=NULL)
    country = xstrdup(country);
  else
    fatal_error("Couldn't read country.");
  return country;
}

struct option *new_option()
{
  struct option *opt = (struct option *)xmalloc(sizeof(struct option));
  opt->option=NULL;
  opt->help=NULL;
  opt->flags.value=0;
  opt->next = list_head;
  opt->last = list_head->last;
  list_head->last->next = opt;
  list_head->last = opt;
  return opt;
}

char *xstrdup(char *in)
{
  char *out = xmalloc(strlen(in)+1);
  strcpy(out, in);
  return out;
}

void *
xmalloc (int size)
{
  void *ptr = malloc (size);
  if (!ptr)
  {
    fprintf(stderr, "%s: %salloc failed\n", "m", program_name);
    exit (2);
  }
  return ptr;
}

void *
xrealloc (void *ptr, int size)
{
  ptr = realloc (ptr, size);
  if (!ptr)
  {
    fprintf(stderr, "%s: %salloc failed\n", "re", program_name);
    exit (2);
  }
  return ptr;
}

void fatal_error(char *format, ...)
{
  va_list ap;
  va_start(ap, format);
  vfprintf(stderr, format, ap);
  putc('\n', stderr);
  va_end(ap);
  exit(EXIT_FAILURE);
}

void do_error(char *format, ...)
{
  va_list ap;
  va_start(ap, format);
  vfprintf(stderr, format, ap);
  putc('\n', stderr);
  va_end(ap);
}

void
help(void)
{
  printf (
"usage: %s [options] [--output OUTFILE] [[--input] INFILE]\n"
"\n"
"  -i, --input INFILE      source file read from INFILE; stdin used if not given\n"
"                          if -i not given, a single argument will be used\n"
"  -o, --output OUTFILE    final menu file written to OUTFILE\n"
"\n"
"  -c, --country COUNTRY   sets the country to use when auto-finding files\n"
"  -g, --generator FILE    sets the MakeMenus executable to use\n"
"  -f, --configfrom FILE   read defaults from MakeMenus-generated FILE\n"
"  -E, --extraopts OPTIONS extra options to pass through to MakeMenus\n"
"\n"
"  -n, --noprompt          don't prompt; just use defaults from source file\n"
"  -h, --help              display this help message and quit\n"
"  -V, --version           display version string and quit\n"
    , program_name);
  exit(0);
}
