; $Id: module,fff,v 1.2 2003-03-04 19:20:05 christian Exp $
; converted from sql/sql.bas by bas2asm.pl

	GET	h.SQL

	ENTRY

	DCD	0x00
	DCD	StartUpHere
	DCD	0x00
	DCD	0x00
	DCD	D1
	DCD	ModHelpString
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	mod_flags


D1	=	"ZapSQL",0
ModHelpString
	=	"ZapSQL",9,9,"0.04 (00 Jan 0000) © "
lp1	=	"Tim Tyler", 0x00

mod_flags	DCD	1				; 32 bit compatible


Data3
	=	"Zap", 0x00
	DCD	0x00
StartUpHere
	STMFD	sp!, {lr}
	LDR	r2, [r12, #0]
	CMP	r2, #0
	BNE	ModuleInit
	MOV	r0, #6
	MOV	r3, #0x20
	SWI	XOS_Module
	LDMVSFD	sp!, {pc}
	STR	r2, [r12, #0]
	ADRL	r0, Data47
	STR	r2, [r0, #0]
	MOV	r0, #0
	STR	r0, [r2, #20]
ModuleInit
	MOV	r0, #4
	STR	r0, [r2, #12]
	MOV	r0, #0x12
	ADR	r1, Data3
	SWI	XOS_Module
	MOVVC	r0, #0x0C
	SWIVC	XOS_Module
	LDMVSFD	sp!, {pc}
	MOV	r12, r4
	LDR	r2, [r3, #20]
	ADD	r3, r3, r2
	LDRB	r0, [r3, #3]
	TEQ	r0, #'X'
	ADDEQ	r3, r3, #1
	LDRB	r0, [r3, #5]
	CMP	r0, #'9'
	RSBLSS	r0, r0, #'1'
	BHI	MakeError
	BNE	RefDataTab
	LDRB	r0, [r3, #7]
	CMP	r0, #'9'
	RSBLSS	r0, r0, #'0'
	BHI	MakeError
	BNE	RefDataTab
	LDRB	r0, [r3, #8]
	CMP	r0, #'9'
	RSBLSS	r0, r0, #'0'
	BHI	MakeError
RefDataTab
	ADR	r0, DataTable
	FNcall	0
	LDMFD	sp!, {pc}
MakeError
	ADR	r0, ErrorMess
	SWI	OS_GenerateError
ErrorMess
	DCD	0x00
	=	"ZapSQL requires Zap version 1.00 or greater."
	DCW	0x0
	ALIGN


PERLLabeled
	=	"SQL", 0x00
	DCD	0x00
		; EQUD &00
DataTable
	DCD	DataTable
	DCD	PERLLabeled
	DCD	lp1
	DCD	0x00	;  REM = BaseMode = Text
	DCD	0x40D	;  REM mode = 13 ; bit 10 = workspace, please!
	DCD	Initialisation	;  REM init
	DCD	0x00	;  MnuDta; REM &00 ; menu...extension menu
	DCD	Initialisation - DataTable	;  REM size of table ; len
	DCD	0x00	;  postload
	DCD	0x00	;  REM beforesave ; e_presave   \ called before saved
	DCD	0x00
	DCD	0 ;E_Start	;  REM e_start           \ window entering mode
	DCD	0 ;E_End	;  REM e_end               \ window leaving mode
	DCD	0x00	;  REM e-width             \ find work area width
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00	;  REM lp7 ; e_clnphy        \ physical to file offs
	DCD	0x00	;  REM clnlog
	DCD	0x00	;  REM clnphy
	DCD	0x00	;  REM clnoff
	DCD	0x00
	DCD	0x00	;  e_sminus      \ perform shift-left
	DCD	0x00	;  e_splus       \ perform shift-right
	DCD	0x00
	DCD	0x00
	DCD	redrawline	;  REM e_redrawline   \ redraw line of display
	DCD	0x00
	DCD	brackmatchchar	;  0 ; charchar
	DCD	0x00
	DCD	0x00	;  e_tab       \ tab key pressed
	DCD	0x00
	DCD	0x00
	DCD	0x00	;  trytwo    \  REM e_saveandrun
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00	;  e_compile \ compile & run and don't exit
	DCD	0x00
	DCD	0x00	;  e_run \ run the program being edited
	DCD	0x00	;  e_runandquit \ run
	DCD	0x00	;  \ drops into language...?
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00	;  REM e_setwidth - changing window width
	DCD	0x00
	DCD	redrawA	;  REM e_prevline \ find start of update reg'n; Easy!
	DCD	0	;  gotoopenwindow ; REM ; e_openwindow
	DCD	mode_interrogate	;  REM ; e__interrogate


Initialisation
	STMFD	sp!, {r1, r7, r8, lr}
	CMP	r1, #1
	BLCC	Tk1frm12andret
	STREQ	r0, [r11, #4]
	STREQ	r0, modenumberlocal
	TEQ	r1, #6
	ADREQ	r1, MenuExtension
	LDMEQFD	sp!, {r0, r7, r8, pc}
	TEQ	r1, #2
	LDMNEFD	sp!, {r1, r7, r8, pc}
		;  REM here? yes!
	STMFD	sp!, {r0, r1, r7}
		; ADR     R0,CmdTable
		; FNcall(Zap_AddCommands)
	MOV	r8, #'A'
	ADRL	r1, TableHere
loop2
	LDRB	r0, [r1]
	CMP	r0, r8
	BGE	GtIt
loop
	LDRB	r0, [r1], #1
	CMP	r0, #'z'
	BLE	loop
	LDRB	r0, [r1]
	CMP	r0, #'*'
	BNE	loop2
backinaction
	ADD	r8, r8, #1
	CMP	r8, #'Z'
	BLE	loop2
	LDMFD	sp!, {r0, r1, r7}
	MOV	r8, #0
	BL	GetModeWord
	TEQ	r7, #0
	LDMNEFD	sp!, {r1, r7, r8, pc}
		;  REM no !Config...?
	MOV	r0, #0x11
	FNcall	Zap_ModeColourNum	;  REM change palette size.
	MOVVC	r0, #16	;  REM memory required
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #4	;  REM zap call - start heap block
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	MOVVC	r7, r0
	BLVC	OnToWrtMdeWrd
	MOVVC	r0, #8
	STRVC	r0, [r7, #0]
	MOVVC	r0, #0
	STRVC	r0, [r7, #4]
	LDRVC	r0, SDsasa	;  REM DATA 5%/8% !!! vc= no !config file ?
	LDRVC	r1, [r11, #4]
	MOVVC	r2, #0
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #Zap_ModeData	;  REM call - RD/WRT Zap data mode words.
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	BLVC	UnkPreColBit	;  REM to set up colours with zmcs
	LDMFD	sp!, {r1, r7, r8, pc}
GtIt
	ADRL	r0, AlphaIndex
	SUB	r7, r8, #'A'
	ADD	r0, r0, r7, LSL #2
	ADRL	r7, TableHere
	SUB	r7, r1, r7
	STR	r7, [r0]
	B	backinaction
MnuDta
	=	"SQL", 0
	DCD	0
	DCD	0
	DCD	128
	DCD	0	;  Brunswick5% ; REM PreMenu
	DCD	0x00
	DCD	delaysubmnu
	DCD	0	;  REM indexword
	DCD	0	;  Brunswick7% ; REM  module offset
	=	"Pause", 0
	ALIGN
		; EQUD &00
		; EQUD indentsubmnu
		; EQUD 0 ; REM indexword
		; EQUD 0 ; Brunswick7% ; REM  module offset
		; EQUS "Indent"
		; EQUB 0
		; ALIGN
	DCD	-1
	DCD	-1


MenuExtension
	=	"Comments",0
	=	:CHR:34:CC:"-strings",0
	=	"FutExp",0
	=	"FutExp",0
	=	"Keywords",0
	=	"Punctuation",0
	=	"Numbers",0
	=	"FutExp",0
	=	"FutExp",0
	=	"Functions",0
	=	"`-strings",0
	=	"'-strings",0
	=	0
	ALIGN

R8tmp	DCD	0
R9tmp	DCD	0
R12tmp	DCD	0


		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
UnkPreColBit
	STMFD	sp!, {r1-r4, lr}
	ADR	r3, DefaultColours
	LDR	r1, [r11, #4]	;  REM normally 0
PreZModColBit
	MOV	r2, #0x09	;  REM start colours
ZModColBit
	LDRB	r0, [r3], #1
	FNcall	Zap_ModeColour	;  REM Read colour definitions
	LDMVSFD	sp!, {r1-r4, pc}
	ADD	r2, r2, #1
	TEQ	r2, #0x15	;  REM max colours
	BNE	ZModColBit
	LDMFD	sp!, {r1-r4, pc}
DefaultColours
		;  REM Colour Numbers :
	=	0x0A	;  REM Comment Colour =&9
	=	0x0F	;  REM String colour  =&A
	=	0x01	;  REM Punctuation    =&B
	=	0x04	;  REM Embedded {}    =&C
	=	0x09	;  REM Commands       =&D
	=	0x0C	;  REM Misc Punct.    =&E
	=	0x0E	;  REM Number colour  =&F
	=	0x02	;  REM Error colour   =&10
	=	0x0D	;  REM GSTrans        =&11
	=	0x03	;  REM Unknown        =&12
	=	0x0F	;  REM String colour  =&13
	=	0x0F	;  REM String colour  =&14
		; EQUB &08 ; REM excmd          =&15
	=	0x00, 0x00	;  REM double zero termination !
	ALIGN


Tk1frm12andret
	LDR	r0, [r11, #12]
	SUBS	r0, r0, #1
	STR	r0, [r11, #12]
	MVNNE	r0, #0
	MOV	pc, lr

OnToWrtMdeWrd
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
WrtMdeWrd
	MOV	r0, r7
	LDR	r2, [r12, #0]
	ADD	r2, r2, #0x0168	;  REM zap call...write the mode word
	MOV	lr, pc
	MOV	pc, r2
	LDMFD	sp!, {r0-r2, pc}


SDsasa	DCD	0x1201004D


		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
basemode
	LDR	r9, modenumberlocal
	FNjump	Zap_BaseMode

modenumberlocal
	DCD	0
regexpdelchar
	DCD	0
regexpdelcharflg
	DCD	0
redrawline
	STMFD	sp!, {r6, r12, lr}
	STMFD	sp!, {r7, r11}
	BL	Branch208
	BL	GetModeWord
	LDR	r2, [r7, #8]	;  REM Preserved start colour & flags
	LDMFD	sp!, {r7, r11}	;  REM calls...
	LDR	r3, [r8, #60]	;  REM char width of cached line (x 8)
	ADRL	r12, w_formmb
	STR	r4, [r12]
	LDRB	r12, [r8, #88]	;  REM code of lf...?
	BIC	r2, r2, #0x700
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0D
	ORR	r2, r2, #0xF000	;  REM ! ; fe? ; ff000
	BIC	r2, r2, #0x00E00000	;  REM HERE? &0F000000
	LDR	r5, [r9, #0]	;  REM ?
	LDR	r10, [r9, #4]	;  REM ?
	ADD	r10, r10, r5
	TEQ	r7, r10
	LDMEQFD	sp!, {r6, r12, pc}	;  REM end - return for good!
	LDR	r10, [r9, #56]	;  REM ?
	ADD	r10, r10, r5
	CMP	r7, r10
	MOVCC	r10, r5
	MOV	r6, #0
BitAftStart
	SUB	r6, r6, #1
	LDRB	r0, [r7], #-1
	TEQ	r0, r12
	BEQ	UpToStart
	CMP	r7, r10
	BCS	BitAftStart
	TEQ	r5, r10
	LDRNE	r10, [r9, #60]
	SUBNE	r7, r7, r10
	MOVNE	r10, r5
	CMP	r7, r10
	BCS	BitAftStart
	SUB	R6,R6,#1		; cl fix
	SUB	R7,R7,#1		;
UpToStart				;
	ADDS	r6, r6, #2		;
	ADD	r7, r7, #2		;
	SUBPL	r7, r7, r6
	LDMPLFD	sp, {r6}
	TEQ	r5, r10
	LDREQ	r10, [r9, #52]	;  REM ?
	ADDEQ	r10, r10, r5
	LDRNE	r10, [r9, #60]	;  REM ?
	ADDNE	r5, r5, r10
	LDRNE	r10, [r9, #8]	;  REM ?
	ADDNE	r10, r10, r5
	LDRB	r0, [r8, #0x90]	;  REM tabchar?
	ORR	r12, r12, r0, LSL #24
	LDR	r0, [r8, #100]	;  REM bytes per line / width of text
	ORR	r12, r12, r0, LSL #12
RtAtStrtA
	MOV	lr, #0
RtAtStrtB
	CMP	r7, r10	;  REM EOF?
	BCC	Branch13
	LDR	r10, [r9, #8]
	ADD	r10, r10, r5
	CMP	r7, r10
	LDMCSFD	sp!, {r6, r12, pc}
	LDR	r1, [r9, #60]	;  REM ???
	ADD	r7, r7, r1
	ADD	r5, r5, r1
	ADD	r10, r10, r1
Branch13
	LDRB	r0, [r7], #1	;  REM get char
	AND	r1, r12, #0xFF
	EOR	r2, r2, #0x0400	;  REM newline? ; alternating colour...
	TEQ	r0, r1
	TSTEQ	r2, #0x0400
	BICEQ	r2, r2, #0x700	;  REM THIS CODE IS NEVER EXECUTED...
	BICEQ	r2, r2, #0xFF
	ORREQ	r2, r2, #0x0D
	BEQ	RtAtStrtB
	BIC	r2, r2, #0x0400
	TEQ	r0, r1
	BEQ	BranchNL	; REM Jeez, what a mess...
	CMP	r6, #0	;  REM wed morn-reinit
	MOVGT	r1, #1	;  REM @@@@ re init this?
	STRGTB	r1, [r6, r3,LSL #1]
	AND	r1, r2, #0xFF
	CMP	r1, #0x0D
	BEQ	BNL2
Backhome
	AND	r1, r2, #0xFF	;  REM Here begins the |G-type GStrans Testing
	STR	r1, oldrtwo
	CMP	r1, #0x09	;  REM comment
	BEQ	aftertestA
		; TEQ     R0,#ASC">" ; REM GSTrans Testing1
		; BEQ     GSTtest
GSTstop
	CMP	r6, #0	;  REM Here begins the |G-type GStrans testing
	BLE	aftert7
	LDRB	r1, [r6, #-1]
	CMP	r1, #'\'
	BNE	aftertestA
	SUB	r1, r3, #1
	LDRB	r1, [r6, r1]
	TEQ	r1, #0x11
	BEQ	aftertestA
	SUB	r1, r3, #1
	MOV	r0, #0x0B
	STRB	r0, [r6, r1]
	MOV	r0, #0x11
	STRB	r0, [r6, r3]
	LDRB	r0, [r7, #-1]
	B	BeforeColour	;  AfterColour%
aftert7
	LDR	r1, Sol7
	ADD	r1, r1, #2
	CMP	r7, r1
	BLE	aftertestA	;  REM code never fires?
	LDRB	r1, [r7, #-2]	;  REM in hope
	CMP	r1, #'\'
	BEQ	BeforeColour	;  AfterColour%
		; SUB     R1,R3,#1
		; LDRB    R1,[R6,R1]
		; TEQ     R1,#&11
		; BEQ     aftertestA ; REM forget about ||
aftertestA
	MOV	r1, #0
	STR	r1, justdoneweirdquote
	TEQ	r0, #'"'
	BEQ	QuoteBit
	TEQ	r0, #'`'
	BEQ	slantQuoteBit
	TEQ	r0, #'''
	BEQ	singleQuoteBit
afterquotetest
	AND	r1, r2, #0xFF
	CMP	r1, #0x09
	BEQ	ComCodeRestart
	LDR	r1, regexpdelcharflg
	CMP	r1, #0
	MOVNE	r1, #0
	STRNE	r1, regexpdelcharflg
		;  STRNE   0,regexpdelchar
	LDR	r1, regexpdelchar
	TEQ	r0, r1
	STREQ	r2, justdoneweirdquote
	BEQ	CurlyBrackOpen
notaREGEXP2
	CMP	r1, #0x0A
	CMPNE	r1, #0x0C
	CMPNE	r1, #0x14
	CMPNE	r1, #0x13
	BEQ	NotatStart
	CMP	r6, #0	;  REM Here begins the |G-type GStrans testing
	BLE	aftertestforcomsta
	LDRB	r1, [r6, #-1]
	TEQ	r1, #'-'
	BNE	aftertestforcomsta
	TEQ	r0, #'-'
	TSTEQ	r2, #0x04000000
	BEQ	CommentStart
aftertestforcomsta
		; CMP     R0,#ASC"/"  ; REM   what about "*." who cares...; make yellow?
		; OrrEQ   R2,R2,#&10000000
		; BICEQ   R2,R2,#&FF  ; REM COL cream/normal - lt grey (= &0B);
		; OrrEQ   R2,R2,#&0E  ; REM testing very dubious TST code...
		; MovEQ   R1,#&0D
		; BEQ     fromslash
NotatStart
	TST	r2, #0x0100	;  REM ok
	BICNE	r2, r2, #0xFF	;  REM COL cream/normal - lt grey (= &0B);
	ORRNE	r2, r2, #0x0E	;  REM testing very dubious TST code...
	LDR	r1, justdoneweirdquote
	CMP	r1, #0
	BNE	Bother
	AND	r1, r2, #0xFF
	TEQ	r1, #0x0C	;  REM COL Errors/Redirection  ...new
	BEQ	BranchYYY
afterteststop
		; LDR     1,justdoneweirdquote
		; CMP     1,#0
		; BNE     Bother
	AND	r1, r2, #0xFF
	TEQ	r1, #0x02	;  REM ????
	BEQ	NotANumber
	TEQ	r1, #0x0D	;  REM COL Command! c .... NO NuffinUMBERS...
	BICEQ	r2, r2, #0xFF
	ORREQ	r2, r2, #0x0E
	ANDEQ	r1, r2, #0xFF
	TEQ	r1, #0x0E	;  REM COL cream/normal ... NO NUMBERS...
	TEQNE	r1, #0x0F	;  REM COL Orange/Numbers?
	BNE	BeforeColour
	TST	r2, #0x08000000
	BNE	NotANum2
	CMP	r0, #'.'
	BEQ	PreTisNum2
aftercheckdot
	CMP	r0, #'9'
	RSBLSS	r1, r0, #'0'
	BLS	PreTisNum
	AND	r1, r2, #0xFF
	TEQ	r1, #0x0F	;  REM COL = Orange/NUMBERS?
	BNE	NotANumber
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0E
	CMP	r0, #'%'
	BLE	NotANumber
	TEQ	r0, #'.'
	TEQNE	r0, #':'
	BEQ	pointinnum
	AND	r1, r0, #0xDF
	TEQ	r1, #'K'
	TEQNE	r0, #'_'
	BEQ	TisANumber
	CMP	r1, #'X'
	BEQ	TisANumber
	CMP	r1, #'F'
	RSBLSS	r1, r1, #'A'
	BHI	NotANumber
TisANumber
		;  REM not numbers?
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0F
	TST	r2, #0x80000000
	BICNE	r2, r2, #0x90000000
	B	BeforeColour
NotANumber
		; CMP     R0,#ASC"_"
		; BEQ     PlainNoOSChk
	CMP	r0, #'"'
	CMPNE	r0, #'/'
	CMPNE	r0, #'\'
	BNE	Bother
	CMP	r0, #128
	BCS	PlainNoOSChk
	AND	r1, r0, #0xDF
	CMP	r1, #'Z'
	RSBLSS	r1, r1, #'@'
	BLS	PlainNoOSChk
itsoknow
		; TST     R2,#&10000000 ; REM START OF LINE FLAGS SET...
		; BEQ     Bother
		; TST     R2,#&60000000 ; REM IF/THEN FLAGS SET?
		; BEQ     DontBother
Bother
	STMFD	sp!, {lr}
	BL	TableChk2	;  REM **************************
	LDMFD	sp!, {lr}
		; TEQ     R0,#ASC"."
		; TEQEQ   R1,#&EA00
		; BEQ     AfterColour%
		; TST     R2,#&10000000 ; REM START OF LINE FLAGS SET...
		; TSTEQ   R2,#&04000000
		; TEQ     R0,#ASC"#"
		; BEQ     CommentStart% ; REM bugs
DontBother
		; TST     R2,#&00E00000
		; BNE     CmdCntChk
AfterCmdCntChk
	AND	r1, r2, #0xFF
	TEQ	r1, #0x09
	BEQ	BeforeColour
	TEQ	r1, #0x02
	BNE	SymbolChecking	;  REM  BR if not normal colour...
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0E
	TEQ	r0, #'_'	;  REM If numbers check for end of numbers
	BEQ	PlainNoOSChk
	CMP	r0, #'9'
	RSBLSS	r1, r0, #'/'	;  REM = asc "0"
PlainNoOSChk
		; BICLS   R2,R2,#&FF
		; OrrLS   R2,R2,#&02
		; BLS     BeforeColour%
		; BIC   R2,R2,#&FF
		; Orr   R2,R2,#&02
		; B     BeforeColour%
SymbolChecking
	CMP	r6, #0
	BLT	BeforeColour	;  REM BLT     BeforeColour%
	TST	r2, #0x8000000
	BNE	ErrEchConf
	TEQ	r0, #'@'
	TEQNE	r0, #'%'
	TEQNE	r0, #'$'
	MOVEQ	r1, #0x0B
		; .fromslash
	STREQB	r1, [r6, r3]
	BEQ	AfterColour
BeforeColour
		;  REM NUMBERS?
	TEQ	r0, #' '
	TEQNE	r0, r12, LSR #24	;  REM = tab?
	BEQ	TabbingSub
Branch24
	CMP	r6, #0
	BLE	firstpass	;  REM new addition to test
	ANDGT	r1, r2, #0x1F	;  REM write colours
	STRGTB	r1, [r6, r3]
AfterColour
		; CMP     R0,#&0D
		; MovEQ   R0,#ASC"!"
	CMP	r6, #0
	STRGTB	r0, [r6], #1	;  REM write text
firstpass
	ADD	lr, lr, #1
BeginOfEnd
	AND	r1, r12, #0xFF	;  REM end character... yes! At last...
	TEQ	r0, r1	;  REM end character... yes!
		; ADDEQ   R11,R11,#1  ; REM This code only executed if <CR>...
	BICEQ	r2, r2, #0x78000000	; REM START OF LINE FLAGS...
	CMP	r6, #0
	ADDLTS	r6, r6, #1
	BMI	RtAtStrtB	;  REM round loop...
	LDMEQFD	sp, {r6}	;  REM huh?
	BEQ	RtAtStrtA
	AND	r1, r12, #0xFF	;  REM end character... yes! At last...
	TEQ	r0, r1	;  REM end character... yes!
	ADDEQ	r11, r11, #1	;  REM This code only executed if <CR>...
	BICEQ	r2, r2, #0xFF000000	;  REM START OF LINE FLAGS...
	BICEQ	r2, r2, #0x00F00000	;
	ORRNE	r2, r2, #0x0400
	BIC	r0, r12, #0xFF000000	;  REM if not width...
	CMP	lr, r0, LSR #12
	BICLT	r2, r2, #0x0400
	BLT	RtAtStrtB	;  REM go round loop...
	LDREQB	r0, [r7]	;  REM      ! Tif's fix for lines that are
	TEQEQ	r0, #0x0A	;  REM      ! the same length as the width
	BEQ	haveajollygoodtime
haveajollygoodback
	BIC	r0, r12, #0xFF000000
	CMP	lr, r0, LSR #12
	BICGE	r2, r2, #0x0400	;  REM NE
	AND	r0, r12, #0x0200
	ORR	r2, r2, r0
	LDMFD	sp!, {r6, r12}
	STMFD	sp!, {r7, r11}
	BL	Branch208
	BL	GetModeWord
	STR	r2, [r7, #8]
	LDMFD	sp!, {r7, r11, pc}	;  REM on exit set things up... r7...
haveajollygoodtime
	ADD	r7, r7, #1	;
	STMFD	sp!, {lr}
	BL	TableChk2
	LDMFD	sp!, {lr}
	B	haveajollygoodback
oldrtwo
	DCD	0
fromslash
	CMP	r6, #0
	BLT	BeforeColour	;  REM BLT     BeforeColour%
	STRB	r1, [r6, r3]
	B	AfterColour
		;  REMB       BeforeColour%
ComCodeRestart
	TEQ	r0, #'_'
	BEQ	AfterCmdCntChk
	AND	r1, r0, #0xDF
	CMP	r1, #'Z'
	RSBLSS	r1, r1, #'@'
	BLS	AfterCmdCntChk
	B	itsoknow
ErrEchConf
	CMP	r6, #0
	BLE	AfterColour
	AND	r1, r2, #0xFF
	CMP	r1, #0x0F
	BEQ	BeforeColour
	CMP	r1, #0x0E
	MOVEQ	r1, #0x02
	STREQB	r1, [r6, r3]
	TEQ	r0, #' '
	TEQNE	r0, r12, LSR #24	;  REM = tab?
	BEQ	TabbingSub
	B	AfterColour
NotANum2
	CMP	r6, #0
	BLE	NotANumber
	CMP	r0, #'%'
	BGT	NotANumber
	SUB	r1, r3, #1
	LDRB	r1, [r6, r1]
	AND	r1, r1, #0xFF
	CMP	r1, #0x0F
	BNE	NotANumber
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0E
	B	NotANumber
BranchNL
	MOV	r1, #'/'
	STR	r1, regexpdelchar
	MOV	r1, #0
	STR	r1, regexpdelcharflg
		; TST     R2,#&10000000 ; REM START OF LINE FLAGS SET...
		; BEQ     Bother2
		; TST     R2,#&60000000 ; REM IF/THEN FLAGS SET?
		; BEQ     DontBother2
Bother2
	STMFD	sp!, {lr}
	BL	TableChk2	;  REM swap with sect below?;;;
	LDMFD	sp!, {lr}
DontBother2
	MOV	lr, #0x70000000	;  REM        ;;Jeez, what a mess!;;
	B	BeginOfEnd
BNL2
	BIC	r2, r2, #0x10000000	;  REM START OF LINE FLAGS SET...
	STR	r6, Sol6
	SUB	r1, r7, #1
	STR	r1, Sol7
	B	Backhome
PreTisNum
		;  REM not numbers?
	CMP	r6, #0
	BLT	TisANumber
	LDRB	r1, [r6, #-1]
	CMP	r1, #' '
	BEQ	TisANumber
	TEQ	r1, #'.'
	TEQNE	r1, #':'
	BNE	TisANumber
	ADD	r1, r6, r3
	LDRB	r1, [r1, #-1]
	AND	r1, r1, #0x0F
	CMP	r1, #0x0F
	BEQ	TisANumber
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x02
	B	BeforeColour
PreTisNum2
	CMP	r6, #0
	BLT	TisANumber
	LDRB	r1, [r6, #-1]
	CMP	r1, #' '
	BEQ	TisANumber
	B	aftercheckdot
Sol6

	DCD	0
Sol7

	DCD	0
BranchYYY
	CMP	r6, #0
	BLT	BeforeColour	;  REM BLT     BeforeColour%
	CMP	r0, #'9'
	RSBLSS	r1, r0, #'0'
	MOVLS	r1, #0x0C
	STRLSB	r1, [r6, r3]
	BLS	AfterColour
	LDR	r1, Sol7
	ADD	r1, r1, #2
	CMP	r7, r1
	MOVLE	r1, #10
	LDRGTB	r1, [r7, #-2]	;  REM danger
	TEQ	r0, #'.'	;  REM if in number
	BNE	TryNextA
	CMP	r1, #'9'
	BGT	TryNextA
	CMP	r1, #'0'
	BLT	TryNextA
	MOV	r1, #0x0C
	STRB	r1, [r6, r3]
	B	AfterColour
TryNextA
	TEQ	r0, #'_'	;  REM if in number
	BNE	BeforeColour
	CMP	r1, #'9'
	BGT	BeforeColour
	CMP	r1, #'0'
	BLT	BeforeColour
	MOV	r1, #0x0C
	STRB	r1, [r6, r3]
	B	AfterColour
pointinnum
	LDRB	r1, [r7, #-2]
	CMP	r1, #'9'
	BGT	NotANumber
	CMP	r1, #'/'
	BLE	NotANumber
	LDRB	r1, [r7]
	CMP	r1, #'9'
	BGT	NotANumber
	CMP	r1, #'/'
	BLE	NotANumber
	B	TisANumber	;  REM in a number...
testampersand
	CMP	r6, #0
	BLE	afterteststop
	LDRB	r1, [r6, #-1]
	TEQ	r1, #'&'
	BNE	afterteststop
	SUB	r1, r3, #1
	MOV	r0, #0x02
	STRB	r0, [r6, r1]
	LDRB	r0, [r7, #-1]
	B	afterteststop
REGEXPtest
		; CMP     6,#0
		; BLT     notaREGEXP
	MOV	r0, #0
gstchklp
	SUB	r0, r0, #1
	ADD	r6, r6, r0
	LDR	r1, Sol6
	SUB	r1, r1, #1
	CMP	r1, r6
	SUB	r6, r6, r0
	BGE	gotoarexp
	ADD	r1, r6, r0
	CMP	r1, #0
	BLT	notaREGEXP
	LDRB	r1, [r6, r0]
	CMP	r1, #' '
	BLT	notaREGEXP
	CMP	r1, #127
	BGT	notaREGEXP
	CMP	r1, #'~'
	BEQ	gotoarexp
	CMP	r1, #' '
	BLT	gotoarexp
	CMP	r1, #' '
	CMPNE	r1, #'@'
	BCS	gstchklp
	CMP	r1, #'"'
	CMPNE	r1, #'('
	CMPNE	r1, #','
	CMPNE	r1, #';'
	BNE	notaREGEXP
gotoarexp
	LDR	r0, regexpdelchar
		; MOV     0,#ASC"/"
	B	aREGEXP
notaREGEXP
	LDR	r0, regexpdelchar
		; MOV     R0,#ASC"/"
	B	notaREGEXP2bef
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
justdoneweirdquote
	DCD	0
CommentStart
		;  REM | comment..........
	AND	r1, r2, #0xFF
	CMP	r1, #0x0A	;  REM in quotes?
	CMPNE	r1, #0x14	;  REM in quotes?
	CMPNE	r1, #0x13	;  REM in quotes?
	BEQ	BeforeColour
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x09
	ORR	r2, r2, #0x10000000
	AND	r1, r2, #0x1F
	SUB	r3, r3, #1
	STRB	r1, [r6, r3]
	ADD	r3, r3, #1
	B	BeforeColour
slantQuoteBit
	AND	r1, r2, #0xFF
	CMP	r1, #0x09
	CMPNE	r1, #0x0C
	CMPNE	r1, #0x0A
	CMPNE	r1, #0x13
	BEQ	BeforeColour
	CMP	r1, #0x14
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #0x14
	ORRNE	r2, r2, #0x20000000
	STRNE	r2, justdoneweirdquote
	BNE	afterquotetest
	BIC	r2, r2, #0x20000000
	B	CurlyBrack
singleQuoteBit
	AND	r1, r2, #0xFF
	CMP	r1, #0x09
	CMPNE	r1, #0x0C
	CMPNE	r1, #0x0A
	CMPNE	r1, #0x14
	BEQ	BeforeColour
	CMP	r1, #0x13
	BICEQ	r2, r2, #0x20000000
	BEQ	CurlyBrack
		; CMP     6,#0
		; BMI     BeforeColour%
		; LDRB    1,[6,#-1]
		; CMP     1,#ASC"$"
		; CMPNE   1,#ASC"&"
		; CMPNE   1,#ASC"?"
		; BGE     afterquotetest
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x13
	ORR	r2, r2, #0x20000000
	STR	r2, justdoneweirdquote
	B	afterquotetest
QuoteBit
		;  REM "Quotes"
	AND	r1, r2, #0xFF
	CMP	r1, #0x09
	CMPNE	r1, #0x0C
	CMPNE	r1, #0x13
	CMPNE	r1, #0x14
	BEQ	BeforeColour
	CMP	r1, #0x0A
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #0x0A
	ORRNE	r2, r2, #0x20000000
	STRNE	r2, justdoneweirdquote
	BNE	afterquotetest	;  BeforeColour%
	BIC	r2, r2, #0x20000000
CurlyBrack
		;  REM "No {} NUFFIN"
	CMP	r6, #0
	ANDGT	r1, r2, #0x1F
	STRGTB	r1, [r6, r3]
	BIC	r2, r2, #0xFF
	MOV	r1, r2, LSR #24
	AND	r1, r1, #0x01	;  REM Bits for {} depth
	CMP	r1, #0x00
	ORREQ	r2, r2, #0x0E	;  REM COL Cream/Normal
	ORRNE	r2, r2, #0x0C	;  REM COL Grey/Redirected
	B	AfterColour
CurlyBrack2
	CMP	r6, #0
	ANDGT	r1, r2, #0x1F
	STRGTB	r1, [r6, r3]
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0A
	B	AfterColour
CurlyBrackOpen
		;  REM originally for ' these ' ; "{"
	AND	r1, r2, #0xFF
	TEQ	r1, #0x0C
	BEQ	CurlyBrackClose
	TEQ	r1, #0x09
	TEQNE	r1, #0x0A
	TEQNE	r1, #0x13
	TEQNE	r1, #0x14
	BEQ	BeforeColour
	B	REGEXPtest
aREGEXP
	ORR	r2, r2, #0x10000000
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0C
	ORR	r2, r2, #0x1000000
	ORR	r12, r12, #0x0200
notaREGEXP2bef
	STR	r2, justdoneweirdquote
	B	notaREGEXP2
CurlyBrackClose
		;  REM originally for ' these ' ; "}"
	LDR	r1, parsetriple
	SUBS	r1, r1, #1
	STRPL	r1, parsetriple
	BPL	BeforeColour
	BIC	r2, r2, #0x10000000
	AND	r1, r2, #0xFF
	TEQ	r1, #0x0A
	TEQNE	r1, #0x09
	BEQ	BeforeColour
	BIC	r2, r2, #0x1000000
	ANDS	r1, r2, #0x20000000
	BNE	CurlyBrack2
	MOV	r1, r2, LSR #24
	AND	r1, r1, #0x01	;  REM Bits for {} depth
	TEQ	r1, #0x00
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #0x0C	;  REM COL Grey/Redirected
	ORRNE	r12, r12, #0x0200
	BNE	BeforeColour
	BIC	r12, r12, #0x0200
	B	CurlyBrack
TabbingSub
	AND	r1, r2, #0xF
	TEQ	r1, #0x0D
	TEQNE	r1, #0x0B
	ORREQ	r2, r2, #0x0100
	AND	r1, r4, #0x3000
	TEQ	r1, #0
	TEQEQ	r0, r12, LSR #24
	BEQ	AfterColour
	TEQ	r0, #' '
	BEQ	Branch24
	CMP	r6, #0
	BLT	BeginOfEnd
	MOV	r0, #9	;  REM tab!
	TEQ	r1, #0x1000
	MOVEQ	r0, #0x20	;  REM " "!!!!
	TEQ	r1, #0x3000
	MOVEQ	r0, #'-'	;  REM "-"!!!!
TabLoop
	MOV	r1, #8	;  REM = COL control Character...
	STRB	r1, [r6, r3]	; @@@@
	MOV	r1, #1
	STRB	r1, [r6, r3,LSL #1]	;  REM wrong?
	STRB	r0, [r6], #1	;  REM @@@@@@
	ADD	lr, lr, #1
	AND	r1, r4, #0x3000
	TEQ	r1, #0x2000
	MOVEQ	r0, #0x20
	BIC	r1, r12, #0xFF000000
	TEQ	lr, r1, LSR #12
	TSTNE	lr, #7
	BNE	TabLoop
	AND	r0, r4, #0x3000
	TEQ	r0, #0x3000
	MOVEQ	r0, #9	;  REM  | ?
	STREQB	r0, [r6, #-1]	;  REM @@@@ ???
	MOV	r0, r12, LSR #24
	B	BeginOfEnd
redrawA
		;  REM redraw the screen and so forth
	SUBS	r0, r0, #32
	MOVMI	r0, #0
	MOV	pc, lr
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TableChk1
	STMFD	sp!, {r4-r12, lr}
	LDR	r6, [r9, #f_ptr]
	MVN	r11, #1
_altered_0
	ADD	r9, r7, r11
	SUB	r11, r11, #1
	CMP	r9, r6
	BLT	ZnotANYone
	LDRB	r1, [r9]
	CMP	r1, #'|'
	CMPNE	r1, #'{'
	CMPNE	r1, #'}'
	CMPNE	r1, #'['
	CMPNE	r1, #']'
	CMPNE	r1, #'^'
	CMPNE	r1, #'@'
	BGT	_altered_0
	CMP	r1, #'2'
	CMPNE	r1, #'3'
	BEQ	_altered_0
	CMP	r1, #'@'
	CMPNE	r1, #'$'
	CMPNE	r1, #'''
	CMPNE	r1, #'%'
	CMPNE	r1, #'*'
	CMPNE	r1, #'&'
	BEQ	ZnotANYone
	ADD	r11, r11, #1
	ADD	r9, r7, r11
		; SUB     R9,R9,#2
	LDRB	r1, [r9]
	FNupper	r1
	CMP	r1, #'_'
	MOVEQ	r1, #'Z'
	CMP	r1, #'A'
	BLT	ZnotANYone
	CMP	r1, #'Z'
	BGT	ZnotANYone
	SUB	r1, r1, #'A'
	ADRL	r12, AlphaIndex
	ADD	r1, r12, r1, ASL #2
	LDR	r1, [r1]
	ADRL	r12, TableHere
	ADD	r12, r12, r1
		; TST     R2,#&04000000
		; FNlong_adr("NE",12,TableEval)
Zlpa2
	MOV	r8, #0	;  REM tablepointer
Zlpa1
	LDRB	r1, [r12, r8]
	FNupper	r1
	CMP	r1, #'z'
	BGT	Zgotmatch2
	MOV	r5, r1
	LDRB	r1, [r9, r8]
	FNupper	r1
	TEQ	r5, #' '
	BEQ	Ztabovr1
	TEQ	r1, #'.'
	ADDEQ	r8, r8, #1
	BEQ	Zgotmatch2
Ztabovr1
	CMP	r1, #'{'
	CMPNE	r1, #';'
	CMPNE	r1, #'"'
	CMPNE	r1, #'['
	CMPNE	r1, #'''
	CMPNE	r1, #'`'
	CMPNE	r1, #'\'
	CMPNE	r1, #'>'
	CMPNE	r1, #'/'
	MOVLE	r1, #' '
	ADD	r8, r8, #1
	CMP	r5, r1
	BGT	Zbigger1
	BEQ	Zlpa1
Zmaybenot
	ADD	r12, r12, r8
	SUB	r12, r12, #1
_altered_1
	LDRB	r1, [r12], #1
	CMP	r1, #'z'
	BLE	_altered_1
	LDRB	r1, [r12]
	CMP	r1, #'*'
	BNE	Zlpa2
Zcouldnotfindit
	TST	r2, #0x1C000000
	LDMNEFD	sp!, {r4-r12, pc}
	ORR	r2, r2, #0x10000000
		;  REM ChooseYerColour?
ZnotANYone
	LDMFD	sp!, {r4-r12, pc}
Zbigger1
	CMP	r8, #1
	BEQ	Zcouldnotfindit
	B	Zmaybenot
Zgotmatch2
	BL	CheckRoutine
	LDMFD	sp!, {r4-r12, pc}
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
parsetriple
	DCD	0x0
TableChk2
	MOV	r1, #0
	STR	r1, parsetriple
	CMP	r6, #0
	BLE	TableChk1
	CMPGE	r0, #31
	STRGEB	r0, [r6]	;  REM write text - dubious code.
	STMFD	sp!, {r4-r12, lr}
		; REM LDR     R7,Sol6
	MVN	r11, #0
_altered_2
	ADD	r9, r6, r11
	SUB	r11, r11, #1
	CMP	r9, #0
	BMI	notANYone
	LDR	r7, Sol6
	SUB	r7, r7, #1	;  REM 1 13/10
	MOV	r1, #10
	CMP	r9, r7	;  REM new lines
	BMI	notANYone
	LDRGTB	r1, [r9]
	CMP	r1, #'|'
	CMPNE	r1, #'{'
	CMPNE	r1, #'}'
	CMPNE	r1, #'['
	CMPNE	r1, #']'
	CMPNE	r1, #'^'
	CMPNE	r1, #'@'
	BGT	_altered_2
	CMP	r1, #'-'
	BEQ	_altered_2
	ADD	r11, r11, #1
	ADD	r9, r6, r11
	ADD	r11, r11, #1
	ADD	r9, r9, #1
	LDRB	r1, [r9]
	FNupper	r1
	CMP	r1, #'_'
	MOVEQ	r1, #'Z'
	CMP	r1, #'A'
	BLT	notANYone
	CMP	r1, #'Z'
	BGT	notANYone
	SUB	r1, r1, #'A'
	ADRL	r12, AlphaIndex
	ADD	r1, r12, r1, ASL #2
	LDR	r1, [r1]
	ADRL	r12, TableHere
	ADD	r12, r12, r1
lpa2
	MOV	r8, #0	;  REM tablepointer
lpa1
	LDRB	r1, [r12, r8]
	FNupper	r1
	CMP	r1, #'z'
	MOVGT	r10, r8
	BGT	gotexactmatch
	MOV	r5, r1
	LDRB	r1, [r9, r8]
	FNupper	r1
		; TEQ     R5,#ASC" " : ;BEQ tabovr1
		; TEQ     R1,#ASC"." : ;ADDEQ R10,R8,#1 : ;BEQ gotexactmatch
tabovr1
	CMP	r1, #'-'
	BEQ	justplainvanilla
	CMP	r1, #'{'
	CMPNE	r1, #';'
	CMPNE	r1, #'>'
	CMPNE	r1, #'"'
	CMPNE	r1, #'['
	CMPNE	r1, #'''
	CMPNE	r1, #'`'
	CMPNE	r1, #'\'
	CMPNE	r1, #'/'
	MOVLE	r1, #' '
justplainvanilla
	ADD	r8, r8, #1
	CMP	r5, r1
	BGT	bigger1
	BEQ	lpa1
maybenot
	ADD	r12, r12, r8
	SUB	r12, r12, #1
_altered_3
	LDRB	r1, [r12], #1
	CMP	r1, #'z'
	BLE	_altered_3
	LDRB	r1, [r12]
	CMP	r1, #'*'
	BNE	lpa2
couldnotfindit
	TST	r2, #0x1C000000
	LDMNEFD	sp!, {r4-r12, pc}
	RSB	r8, r11, #0
		; Orr     R2,R2,#&10000000
		; LDRB    R1,[R6]
		; CMP     R1,#ASC"."
	ADD	r8, r8, #1
	MOV	r1, #0x12
	B	ChooseYerColour
notANYone
	LDMFD	sp!, {r4-r12, pc}
bigger1
	CMP	r8, #1
	BEQ	couldnotfindit
	B	maybenot
ChooseYerColour
	ADD	r4, r6, r3
	LDRB	r4, [r4, r11]	;  REM QUICK FIX...
	CMP	r4, #0x0A	;  REM ""
	CMPNE	r4, #0x09	;  REM numbers
	CMPNE	r4, #0x0F	;  REM numbers
	CMPNE	r4, #0x14	;  REM ""
	CMPNE	r4, #0x13	;  REM ""
	LDMEQFD	sp!, {r4-r12, pc}
	MOV	r4, #0
	ADD	r6, r6, r3
	ADD	r6, r6, r11
lasdwAO
	STRB	r1, [r6, r4]	; @@@@
	ADD	r4, r4, #1
	CMP	r4, r8
	BLT	lasdwAO
	MOV	r1, #0xEA00
	LDMFD	sp!, {r4-r12, pc}
Prefixbit
	RSBEQ	r10, r11, #0
	LDRB	r1, [r6]
	CMP	r1, #'.'
	ADDEQ	r10, r10, #1
	MOV	r1, #0x0D
	TEQ	r4, #141
	MOVEQ	r1, #0x10
	TEQ	r4, #140
	MOVEQ	r1, #0x15
	B	ChooseColour2
Prefixbit2A
	RSBEQ	r10, r11, #0
	LDRB	r1, [r6]
	CMP	r1, #'.'
	ADDEQ	r10, r10, #1
	MOV	r1, #0x0D
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0F
	B	ChooseColour2
gotexactmatch
	BL	CheckRoutine
		; TEQ     R8,R10
		; TEQEQ   R4,#ASC"{"
		; BEQ     Prefixbit
	TEQ	r8, r10
	TEQEQ	r4, #141
	BEQ	Prefixbit
	TEQ	r8, r10
	TEQEQ	r4, #140
	BEQ	Prefixbit
		; TEQ     R8,R10
		; TEQEQ   R4,#ASC""
		; BEQ     Prefixbit2A
	RSBEQ	r10, r11, #0
		; TEQ     R4,#ASC""
		; LDMEQFD R13!,{R4-R12,PC}
	MOV	r1, #0x0D
		; TEQ     R4,#ASC"¿"
		; MovEQ   R1,#&0E
ChooseColour2
	ADD	r4, r6, r3
	LDRB	r4, [r4, r11]	;  REM QUICK FIX...
	CMP	r4, #0x0A	;  REM ""
	CMPNE	r4, #0x09	;  REM numbers
	CMPNE	r4, #0x0F	;  REM numbers
	CMPNE	r4, #0x14	;  REM ""
	CMPNE	r4, #0x13	;  REM ""
	LDMEQFD	sp!, {r4-r12, pc}
	MOV	r4, #0
	ADD	r7, r6, r11
	ADD	r6, r7, r3
		; LDR     R5,w_formmb
lasdwA
		; TST     R5,#&08000000
		; LDRNEB  R9,[R12,R4]
		; STRNEB  R9,[R7,R4]
lasdwA1
	STRB	r1, [r6, r4]
	ADD	r4, r4, #1
	CMP	r4, r8
	BLT	lasdwA
	CMP	r4, r10
	BLT	lasdwA1
	MOV	r1, #0xEA00
	LDMFD	sp!, {r4-r12, pc}
w_formmb

	DCD	0
ErrorSet2
		;  REM code is still here?
	MOV	r4, #0	;
	ADD	r6, r6, r3	;
	ADD	r6, r6, r11	;
	MOV	r10, #0x10	;
lasdwB
	LDRB	r1, [r6, r4]
	CMP	r1, #0xC	;  REM {} or error
	CMPNE	r1, #0xA	;  REM ""
	CMPNE	r1, #0x9	;  REM | Comment
	STRNEB	r10, [r6, r4]
	ADD	r4, r4, #1
	CMP	r4, r8
	BLT	lasdwB
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0F
	LDMFD	sp!, {r4-r12, pc}
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CheckRoutine
	ADD	r1, r12, r8
	SUB	r1, r1, #1
_altered_4
	LDRB	r4, [r1], #1
	CMP	r4, #'z'
	BLE	_altered_4
	TEQ	r4, #136	;  REM else
	BNE	NotAnElse
	TST	r2, #0x40000000
	LDMEQFD	sp!, {r4-r12, pc}
	TST	r2, #0x20000000
	LDMEQFD	sp!, {r4-r12, pc}
	BIC	r2, r2, #0xFC000000
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0D	;  REM dubious code... ???...
NotAnElse
	BIC	r2, r2, #0x08000000
	MOV	r1, #0
	CMP	r4, #191
	MOVEQ	r1, #1
	STREQ	r1, parsetriple
	STR	r1, regexpdelcharflg
	MOV	pc, lr


Data47
	DCD	0x0
Branch208
	LDR	r11, Data47
	MOV	pc, lr


Branch210
	STMFD	sp!, {r0, r1, lr}
	LDR	r11, Data47
	LDR	r0, [r8, #w_format]	;  REM w_format
	AND	r0, r0, #0xFF
	MVN	lr, #0
	LDR	r1, [r11, #8]
	TEQ	r0, r1
	ADDEQ	lr, lr, #1
	LDRNE	r1, [r11, #4]
	TEQNE	r0, r1
	ADDEQ	lr, lr, #1
		; LDRNE   R1,[R11,#0]
		; TEQNE   R0,R1
	ADDEQ	lr, lr, #1
	LDMFD	sp!, {r0, r1, pc}
	STMFD	sp!, {r11, lr}
	LDR	r11, Data47
	TEQ	r1, #0
	BLEQ	Tk1frm12andret
	LDMFD	sp!, {r11, pc}
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Brunswick5
		;  REM premenu code...
	MOV	r0, r6, LSR #19
	AND	r0, r0, #0x7F
	ADD	r1, r10, #40
	LDR	r1, [r1]
	MOV	r2, #3
	SWI	OS_ConvertCardinal1
	MOV	pc, lr

indenthandle
	DCD	4
delayhandle
	DCD	20
Brunswick7
		;  REM interpret code...
	STMFD	sp!, {lr}
	MOV	r5, r1
	MOV	r1, r10
	MOV	r0, #10
	MOV	r2, #0xFF
	SWI	OS_ReadUnsigned
	CMP	r8, #0
	BEQ	Brunswick8
	ADR	r1, delayhandle
	CMP	r1, r5
	BEQ	dodelaystf
	CMP	r2, #7
	MOVCS	r2, #7
	BIC	r6, r6, #(&07 << 25)
	ORR	r6, r6, r2, LSL #25	;  REM IN our own copy of menu
	STR	r6, [r8, #w_format]
	LDMFD	sp!, {pc}
dodelaystf
		;  REM csdelay...
	CMP	r2, #0x7F
	MOVCS	r2, #0x7F
	BIC	r6, r6, #(&1F << 19)
	ORR	r6, r6, r2, LSL #19	;  REM IN our own copy of menu
	STR	r6, [r8, #w_format]
	LDMFD	sp!, {pc}
Brunswick8
	ADR	r1, delayhandle
	CMP	r1, r5
	BEQ	dodelaystfB8
	CMP	r2, #7
	MOVCS	r2, #7
	BIC	r0, r6, #(&07 << 25)
	ORR	r0, r0, r2, LSL #25	;  REM IN our own copy of menu
	MOV	r1, #3
	FNcall	Zap_WriteVar
	LDMFD	sp!, {pc}
dodelaystfB8
	CMP	r2, #0x7F
	MOVCS	r2, #0x7F
	BIC	r0, r6, #(&1F << 19)
	ORR	r0, r0, r2, LSL #19	;  REM IN our own copy of menu
	MOV	r1, #3
	FNcall	Zap_WriteVar
	LDMFD	sp!, {pc}
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ALIGN



brackmatchchar
	STMFD	sp!, {lr}
	MOV	r1, #0
FromMJE4
	CMP	r1, r5
	BGE	FromMJE5
	LDRB	r0, [r7, r1]
	TEQ	r0, #'}'
	TEQNE	r0, #')'
	TEQNE	r0, #']'
	ADDNE	r1, r1, #1
	BNE	FromMJE4
	CMP	r5, #2
	ADDCS	r1, r1, #1
	BCS	FromMJE4
	BL	FromMJE6
	SUB	r5, r5, r1
	ADD	r7, r7, r1
	TEQ	r0, #'}'
	BLEQ	FromMJE7
	TEQ	r0, #')'
	BLEQ	FromMJE9
	TEQ	r0, #']'
	BLEQ	FromMJE10
	SUB	r5, r5, #1
	ADD	r7, r7, #1
	MOV	r1, #0
	B	FromMJE4
FromMJE5
	BL	FromMJE6
	LDMFD	sp!, {pc}
FromMJE6
	CMP	r1, #0
	MOVLE	pc, lr
	STMFD	sp!, {r1-r10, lr}
	MOV	r5, r1
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
	LDMFD	sp!, {r1-r10, pc}
FromMJE7
	STMFD	sp!, {r1-r10, lr}
	LDR	r0, [r10, #12]
	MOV	r1, #'{'
	MOV	r2, #'}'
	BL	FromMJE18
	BLT	FromMJE8
	BL	FromMJE11
		; MOV     R9,#&8C
		; BL      FromMJE27%
		; BL      FromMJE15%
		; BL      FromMJE21%
		; BL      FromMJE23%
FromMJE8
	MOV	r5, #1
	MOV	r9, #0x70
	BL	FromMJE27
	LDMFD	sp!, {r1-r10, pc}
FromMJE9
	STMFD	sp!, {r1-r10, lr}
	LDR	r0, [r10, #12]
	MOV	r1, #'('
	MOV	r2, #')'
	BL	FromMJE18
	BLEQ	FromMJE11
	MOV	r5, #1
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
	LDMFD	sp!, {r1-r10, pc}
FromMJE10
	STMFD	sp!, {r1-r10, lr}
	LDR	r0, [r10, #12]
	MOV	r1, #0x5B
	MOV	r2, #0x5D
	BL	FromMJE18
	BLEQ	FromMJE11
	MOV	r5, #1
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
	LDMFD	sp!, {r1-r10, pc}
FromMJE11
	STMFD	sp!, {r0-r7, lr}
	LDR	r4, [r10, #12]
	STR	r0, [r10, #12]
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_ReflectCaret
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	SWI	XOS_ReadMonotonicTime
	MOV	r3, r0
	BL	FromMJE26
	ADD	r3, r3, r0
FromMJE12
	MOV	r0, #0x98
	MOV	r1, #0
	SWI	XOS_Byte
	BCC	FromMJE13
	SWI	XOS_ReadMonotonicTime
	CMP	r0, r3
	BLT	FromMJE12
FromMJE13
	STR	r4, [r10, #12]
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_ReflectCaret
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	LDMFD	sp!, {r0-r7, pc}
FromMJE14
	LDR	r0, [r10, #12]
FromMJE15
	STMFD	sp!, {r1-r3, lr}
	MOV	r2, r0
	MOV	r9, #Zap_ConvFileOff
	BL	FromMJE27
	MOV	r1, r0
	MOV	r3, #0
FromMJE16
	CMP	r1, r2
	BGE	FromMJE17
	MOV	r0, r1
	ADD	r1, r1, #1
	BL	FromMJE29
	TEQ	r0, #' '
	ADDEQ	r3, r3, #1
	BEQ	FromMJE16
	LDRB	lr, [r8, #144]
	TEQ	r0, lr
	ADDEQ	r3, r3, #8
	BICEQ	r3, r3, #7
	BEQ	FromMJE16
FromMJE17
	MOV	r0, r3
	LDMFD	sp!, {r1-r3, pc}
FromMJE14A
	LDR	r0, [r10, #12]
FromMJE15A
	STMFD	sp!, {r1-r3, lr}
	MOV	r2, r0
	MOV	r9, #Zap_ConvFileOff
	BL	FromMJE27
	MOV	r1, r0
	MOV	r3, #0
FromMJE16A
	CMP	r1, r2
	BGE	FromMJE17A
	MOV	r0, r1
	ADD	r1, r1, #1
	BL	FromMJE29
	CMP	r0, #' '
		; SUBLT   R3,R3,#1
		; CMP     R0,#ASC"z"
	ADDCS	r3, r3, #1
	BCS	FromMJE16A
	LDRB	lr, [r8, #144]
	TEQ	r0, lr
	ADDEQ	r3, r3, #8
	BICEQ	r3, r3, #7
	BEQ	FromMJE16A
FromMJE17A
	MOV	r0, r3
	LDMFD	sp!, {r1-r3, pc}
FromMJE18
	STMFD	sp!, {r3, r4, lr}
	MOV	r3, r0
	MOV	r4, #1
FromMJE19
	SUBS	r3, r3, #1
	BLT	FromMJE20
	MOV	r0, r3
	BL	FromMJE29
	TEQ	r0, r2
	ADDEQ	r4, r4, #1
	BEQ	FromMJE19
	TEQ	r0, r1
	BNE	FromMJE19
	SUBS	r4, r4, #1
	BNE	FromMJE19
FromMJE20
	MOV	r0, r3
	LDMFD	sp!, {r3, r4, pc}
FromMJE21
	STMFD	sp!, {r0, r1, lr}
	MOV	r1, r0
FromMJE22
	BL	FromMJE14
	CMP	r0, r1
	LDMLEFD	sp!, {r0, r1, pc}
	BL	FromMJE28
	TEQ	r0, #0x20
	LDRNEB	lr, [r8, #144]
	TEQNE	r0, lr
	LDMNEFD	sp!, {r0, r1, pc}
	LDR	r0, [r10, #12]
	TEQ	r0, #0
	LDMEQFD	sp!, {r0, r1, pc}
	STMFD	sp!, {r1-r10}
	MOV	r5, #1
	LDR	r6, [r8, #40]
	MOV	r7, #0
	MOV	r9, #Zap_CallGivenMode
	BL	FromMJE27
	LDMFD	sp!, {r1-r10}
	B	FromMJE22
cntrtmp
	DCD	0
FromMJE23
	STMFD	sp!, {r0, r1, lr}
	MOV	r1, #0
	STR	r1, cntrtmp
	MOV	r1, r0

FromMJE26
		;  REM get delay
	LDR	r0, w_formmb
	MOV	r0, r0, LSR #19
	AND	r0, r0, #0xFF
	MOV	pc, lr
Zap_insertstuff
	STMFD	sp!, {r7, lr}
	MOV	r0, #1
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_DoCommand
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	LDMFD	sp!, {r7, pc}
FromMJE27
	STMFD	sp!, {r9, r11, lr}
	LDR	r9, [r11, #4]	;  REM mode word...
	LDMFD	sp!, {r11}
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_BaseMode
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	LDMFD	sp!, {r11, pc}
FromMJE28
	LDR	r0, [r10, #12]
		; MOV     0,#2 ; REM 2 new
	SUBS	r0, r0, #1
	MOVLT	r0, #0
	MOVLT	pc, lr
FromMJE29
	STMFD	sp!, {lr}
	LDR	lr, [r9, #52]
	CMP	r0, lr
	LDRCS	lr, [r9, #60]
	ADDCS	r0, r0, lr
	LDR	lr, [r9, #0]
	LDRB	r0, [lr, r0]
	LDMFD	sp!, {pc}
FromMJE30
	LDRB	r2, [r1], #1
	CMP	r2, #0x20
	MOVCC	r2, #0
	STRB	r2, [r0], #1
	BCS	FromMJE30
	SUB	r0, r0, #1
	MOVS	pc, lr
	MOV	r1, r0
	MOV	r0, #0
FromMJE31
	LDRB	r2, [r1, r0]
	ADD	r0, r0, #1
	CMP	r2, #0x20
	BCS	FromMJE31
	MOVS	pc, lr
FromMJE32
	TEQ	r8, #0
	LDRNE	r0, [r8, #40]
	MOVNE	pc, lr
	STMFD	sp!, {r1, lr}
	MOV	r1, #3
	LDR	lr, [r12, #0]
	ADD	lr, lr, #0x48
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	LDMFD	sp!, {r1, pc}
FromMJE33
	TEQ	r8, #0
	LDRNE	r0, [r8, #92]
	MOVNE	pc, lr
	STMFD	sp!, {r1, lr}
	MOV	r1, #2
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_ReadVar
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	LDMFD	sp!, {r1, pc}
GetModeWord
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
	LDR	r2, [r12, #0]
	ADD	r2, r2, #Zap_GetModeWord
	MOV	lr, pc
	MOV	pc, r2
	MOV	r7, r0
	LDMFD	sp!, {r0-r2, pc}
PutModeWord
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
	LDR	r2, [r12, #0]
	ADD	r2, r2, #Zap_PutModeWord
	MOV	lr, pc
	MOV	pc, r2
	LDMFD	sp!, {r0-r2, pc}
	STMFD	sp!, {r0-r2, lr}	;  REM ????
	LDR	r1, [r11, #8]
	B	FromMJE35
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
	B	FromMJE35
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #0]
FromMJE35
	MOV	r0, r7
	LDR	r2, [r12, #0]
	ADD	r2, r2, #0x0168
	MOV	lr, pc
	MOV	pc, r2
	LDMFD	sp!, {r0-r2, pc}
		; .indentsubmnu
		;     EQUS "Indent" : EQUW0 : EQUD0
		;     EQUD 80
		;     EQUD Brunswick6%  ; REM PreMenu
		;
		;     EQUD &04
		;     EQUD 0 ; submnu
		;     EQUD indenthandle ; REM indexword
		;     EQUD Brunswick7%  ; REM  module offset
		; .markdepth
		;     EQUS "4"
		;     EQUB 0
		;     ALIGN
		;     EQUD -1
delaysubmnu
	=	"Pause", 0, 0
	=	0
	DCD	0
	DCD	80
	DCD	Brunswick5	;  REM PreMenu
	DCD	0x04
	DCD	0	;  submnu
	DCD	delayhandle	;  REM indexword
	DCD	Brunswick7	;  REM  module offset
markdelay
	=	"20", 0
	ALIGN
	DCD	-1
mode_interrogate
	CMP	r0, #25
	MOVEQ	r0, #0
	MOVEQ	pc, lr
	STMFD	sp!, {r9, r11, lr}
	MOV	r11, #e_interrogate
	BL	basemode
	LDMFD	sp!, {r9, r11, pc}
AlphaIndex
	=	10, "Greetings from The Mandala Centre."
	=	10, "Please feel free place any additional commands in the space provided"
	ALIGN
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	DCD	0x2A2A0A2E
TableHere
	=	"ABSOLUTE |"
	=	"ACTION |"
	=	"ADD |"
	=	"ALL |"
	=	"ALLOCATE |"
	=	"ALTER |"
	=	"AND |"
	=	"ANY |"
	=	"ARE |"
	=	"AS |"
	=	"ASC |"
	=	"ASSERTION |"
	=	"AT |"
	=	"AUTHORIZATION |"
	=	"AVG |"
	=	"BEGIN |"
	=	"BETWEEN |"
	=	"BIT |"
	=	"BIT_LENGTH |"
	=	"BOTH |"
	=	"BY |"
	=	"B |"
	=	"CASCADE |"
	=	"CASCADED |"
	=	"CASE |"
	=	"CAST |"
	=	"CATALOG |"
	=	"CHAR |"
	=	"CHARACTER |"
	=	"CHAR_LENGTH |"
	=	"CHARACTER_LENGTH |"
	=	"CHECK |"
	=	"CLOSE |"
	=	"COALESCE |"
	=	"COLLATE |"
	=	"COLLATION |"
	=	"COLUMN |"
	=	"COMMIT |"
	=	"CONNECT |"
	=	"CONNECTION |"
	=	"CONSTRAINT |"
	=	"CONSTRAINTS |"
	=	"CONTINUE |"
	=	"CONVERT |"
	=	"CORRESPONDING |"
	=	"COUNT |"
	=	"CREATE |"
	=	"CROSS |"
	=	"CURRENT |"
	=	"CURRENT_DATE |"
	=	"CURRENT_TIME |"
	=	"CURRENT_TIMESTAMP |"
	=	"CURRENT_USER |"
	=	"CURSOR |"
	=	"DATE |"
	=	"DAY |"
	=	"DEALLOCATE |"
	=	"DEC |"
	=	"DECIMAL |"
	=	"DECLARE |"
	=	"DEFAULT |"
	=	"DEFERRABLE |"
	=	"DEFERRED |"
	=	"DELETE |"
	=	"DESC |"
	=	"DESCRIBE |"
	=	"DESCRIPTOR |"
	=	"DIAGNOSTICS |"
	=	"DISCONNECT |"
	=	"DISTINCT |"
	=	"DOMAIN |"
	=	"DOUBLE |"
	=	"DROP |"
	=	"ELSE |"
	=	"END |"
	=	"END-EXEC |"
	=	"ESCAPE |"
	=	"EXCEPT |"
	=	"EXCEPTION |"
	=	"EXEC |"
	=	"EXECUTE |"
	=	"EXISTS |"
	=	"EXTERNAL |"
	=	"EXTRACT |"
	=	"FALSE |"
	=	"FETCH |"
	=	"FIRST |"
	=	"FLOAT |"
	=	"FOR |"
	=	"FOREIGN |"
	=	"FOUND |"
	=	"FROM |"
	=	"FULL |"
	=	"GET |"
	=	"GLOBAL |"
	=	"GO |"
	=	"GOTO |"
	=	"GRANT |"
	=	"GROUP |"
	=	"HAVING |"
	=	"HOUR |"
	=	"H |"
	=	"IDENTITY |"
	=	"IMMEDIATE |"
	=	"IN |"
	=	"INDICATOR |"
	=	"INITIALLY |"
	=	"INNER |"
	=	"INPUT |"
	=	"INSENSITIVE |"
	=	"INSERT |"
	=	"INT |"
	=	"INTEGER |"
	=	"INTERSECT |"
	=	"INTERVAL |"
	=	"INTO |"
	=	"IS |"
	=	"ISOLATION |"
	=	"JOIN |"
	=	"KEY |"
	=	"LANGUAGE |"
	=	"LAST |"
	=	"LEADING |"
	=	"LEFT |"
	=	"LEVEL |"
	=	"LIKE |"
	=	"LOCAL |"
	=	"LOWER |"
	=	"MATCH |"
	=	"MAX |"
	=	"MIN |"
	=	"MINUTE |"
	=	"MODULE |"
	=	"MONTH |"
	=	"NAMES |"
	=	"NATIONAL |"
	=	"NATURAL |"
	=	"NCHAR |"
	=	"NEXT |"
	=	"NO |"
	=	"NOT |"
	=	"NULL |"
	=	"NULLIF |"
	=	"NUMERIC |"
	=	"N |"
	=	"OCTET_LENGTH |"
	=	"OF |"
	=	"ON |"
	=	"ONLY |"
	=	"OPEN |"
	=	"OPTION |"
	=	"OR |"
	=	"ORDER |"
	=	"OUTER |"
	=	"OUTPUT |"
	=	"OVERLAPS |"
	=	"PAD |"
	=	"PARTIAL |"
	=	"POSITION |"
	=	"PRECISION |"
	=	"PREPARE |"
	=	"PRESERVE |"
	=	"PRIMARY |"
	=	"PRIOR |"
	=	"PRIVILEGES |"
	=	"PROCEDURE |"
	=	"PUBLIC |"
	=	"READ |"
	=	"REAL |"
	=	"REFERENCES |"
	=	"RELATIVE |"
	=	"RESTRICT |"
	=	"REVOKE |"
	=	"RIGHT |"
	=	"ROLLBACK |"
	=	"ROWS |"
	=	"SCHEMA |"
	=	"SCROLL |"
	=	"SECOND |"
	=	"SECTION |"
	=	"SELECT |"
	=	"SESSION |"
	=	"SESSION_USER |"
	=	"SET |"
	=	"SIZE |"
	=	"SMALLINT |"
	=	"SOME |"
	=	"SPACE |"
	=	"SQL |"
	=	"SQLCODE |"
	=	"SQLERROR |"
	=	"SQLSTATE |"
	=	"SUBSTRING |"
	=	"SUM |"
	=	"SYSTEM_USER |"
	=	"TABLE |"
	=	"TEMPORARY |"
	=	"THEN |"
	=	"TIME |"
	=	"TIMESTAMP |"
	=	"TIMEZONE_HOUR |"
	=	"TIMEZONE_MINUTE |"
	=	"TO |"
	=	"TRAILING |"
	=	"TRANSACTION |"
	=	"TRANSLATE |"
	=	"TRANSLATION |"
	=	"TRIM |"
	=	"TRUE |"
	=	"UNION |"
	=	"UNIQUE |"
	=	"UNKNOWN |"
	=	"UPDATE |"
	=	"UPPER |"
	=	"USAGE |"
	=	"USER |"
	=	"USING |"
	=	"VALUE |"
	=	"VALUES |"
	=	"VARCHAR |"
	=	"VARYING |"
	=	"VIEW |"
	=	"WHEN |"
	=	"WHENEVER |"
	=	"WHERE |"
	=	"WITH |"
	=	"WORK |"
	=	"WRITE |"
	=	"YEAR |"
	=	"ZONE |"
	=	"**", 10

	END
