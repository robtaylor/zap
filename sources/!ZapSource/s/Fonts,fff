; Contains font code
; $Id: Fonts,fff,v 2.6 2004-11-02 21:43:34 christian Exp $
; -*- armasm -*-

 GET h.ZapHeader
 GET h.Heap
 GET h.Strings
 GET h.CreateWind
 GET h.Messages
 GET h.MiniBuff

 EXPORT correct_font
 EXPORT	find_font
 EXPORT	lose_font
 EXPORT	read_font_sizes
 EXPORT	read_dsa_font_name
 EXPORT	read_vdu_font_name

 EXPORT Bitmapfont
 EXPORT Outlinefont
 EXPORT Fontsize
 EXPORT Fontaspect
 EXPORT Encoding

; find the font we're going to be using for redraw
; determine the redraw mode from w_flags and use the appropriate settings
; use the font named in the window block, or the defaults if not set
; E R8
; X w_font setup
		FNAME 	find_font
find_font	FNJSR	"R11"

		LDR	R11,[R8,#w_flags]		; get redraw flags
		AND	R11,R11,#redraw_font_mask

		LDR	R0,[R8,#w_vdufontsize]		; init font size if not set
		TEQ	R0,#0
		FNLDR	R0,font_size,EQ
		STREQ	R0,[R8,#w_vdufontsize]

		LDR	R0,[R8,#w_dsafontname]
		TEQ	R0,#0
		BNE	bitmapnamed$l
		FNLDR	R0,scn_magy			; choose high/low res font
		CMP	R0,#2
		FNLDR	R0,font_namehigh,LO
		FNLDR	R0,font_namelow,HS

bitmapnamed$l	MOV	R1,#0				; ZapRedraw_FindFont flags

		TEQ	R11,#redraw_vdu_system		; system font
		MOVEQ	R0,#0
		MOVEQ	R1,#1

		TEQ	R11,#redraw_vdu_font		; VDU font
		TEQNE	R11,#redraw_fast_font
		BNE	notvdu$l
		ORR	R1,R1,#3
		LDR	R0,[R8,#w_vdufontname]
		LDR	R2,[R8,#w_vdufontsize]
		TEQ	R0,#0				; use default font if not set
		FNLDR	R0,font_name,EQ			;
		MOV	R3,R2,LSR #16			; aspect ratio
		MOV	R2,R2,LSL #16
		MOV	R2,R2,LSR #12			; font size (points / 16)
		ADD	R4,R12,#font_leftred

notvdu$l	SWI	XZapRedraw_FindFont
		STRVC	R0,[R8,#w_font]
		FNRTS	VC

		; font not found - use the system font
		MOV	R0,#0
		MOV	R1,#1
		SWI	XZapRedraw_FindFont
		STRVC	R0,[R8,#w_font]
		LDRVC	R0,[R8,#w_flags]		; force system font redraw
		BICVC	R0,R0,#redraw_font_mask
		ORRVC	R0,R0,#redraw_vdu_system
		STRVC	R0,[R8,#w_flags]
		FNRTS


		LOCAL


; lose the font currently used in the window
; E R8
; X
		FNAME	lose_font
lose_font	LDR	R0,[R8,#w_font]
		TEQ	R0,#0
		SWINE	XZapRedraw_LoseFont
		MOV	PC,R14


		LOCAL

; read the font sizes into the window block
; E R8 with w_font setup
; X w_rh, w_rl, w_rh filled in
		FNAME	read_font_sizes
read_font_sizes	MOV	R2,#0

		LDR	R0,[R8,#w_flags]
		AND	R0,R0,#redraw_font_mask

		TEQ	R0,#redraw_vdu_system		; set VDU flag
		TEQNE	R0,#redraw_vdu_font
		TEQNE	R0,#redraw_fast_font
		ORREQ	R2,R2,#rf_vdu
		TEQ	R0,#redraw_dsa_system_doubleheight ; set scale flag
		ORREQ	R2,R2,#rf_doubleheight
		TEQ	R0,#redraw_dsa_system_scaled	; set autoscale flag
		ORREQ	R2,R2,#rf_autoscale

		FNSTR	R2,red_flags
		ADD	R1,R12,#red_flags
		LDR	R0,[R8,#w_linesp]
		STR	R0,[R1,#r_linesp]

		LDR	R0,[R8,#w_font]
		MOV	R2,#4				; return pixels
		SWI	XZapRedraw_ReadCharSize

		STRVC	R2,[R8,#w_rw]
		STRVC	R3,[R8,#w_rh]

		LDRVC	R0,[R8,#w_font]			; add linespacing this time
		ADDVC	R1,R12,#red_flags
		MOVVC	R2,#6
		SWIVC	XZapRedraw_ReadCharSize
		STRVC	R3,[R8,#w_rl]

		MOV	PC,R14


		LOCAL

; read the VDU font name for a given window
; E R8
; X R0 -> font name (read only)
read_vdu_font_name
		TEQ	R8,#0
		LDRNE	R0,[R8,#w_vdufontname]		; get name
		TEQNE	R0,#0
		FNLDR	R0,font_name,EQ			; use default if not set
		MOV	PC,R14

; read the DSA font name for a given window
; E R8
; X R0 -> font name (read only)
read_dsa_font_name
		TEQ	R8,#0
		LDRNE	R0,[R8,#w_dsafontname]		; get name
		TEQNE	R0,#0
		MOVNE	PC,R14

		FNLDR	R0,scn_magy			; choose high/low res font
		CMP	R0,#2
		FNLDR	R0,font_namehigh,LO
		FNLDR	R0,font_namelow,HS
		MOV	PC,R14


		LOCAL

; setup font parameters for a font change
; E R8
; X w_font, w_rh, w_rl, w_rw setup
		FNAME	correct_font
correct_font	FNJSR
		BL	lose_font			; lose current w_font
		BL	find_font			; get new font based on current settings
		BL	read_font_sizes			; read its size
		FNRTS


		LOCAL

; BITMAPFONT <string> command
		FNAME	Bitmapfont
		DCD	&19
Bitmapfont	TEQ	R2,#0				; execute?
		MOVNE	PC,R14

		ADD	R2,R8,#w_dsafontname		; point to var
newfont$l	FNJSR
		MOV	R1,R0				; keep name
		LDR	R0,[R2]				; free existing name
		TEQ	R0,#0
		BLNE	heap_free

		BL	strdup
		STRVC	R0,[R2]

		BL	save_window_status		; update the window
		BL	new_window_status

		FNRTS


; OUTLINEFONT <string> command
		FNAME	Outlinefont
		DCD	&19
Outlinefont	TEQ	R2,#0				; execute?
		MOVNE	PC,R14

		LDR	R1,[R8,#w_vdufontname]		; store size if first named font
		TEQ	R1,#0
		FNLDR	R1,font_size,EQ
		STREQ	R1,[R8,#w_vdufontsize]

		ADD	R2,R8,#w_vdufontname
		LDRB	R3,[R0]				; 1.45 backwards compatibility
		CMP	R3,#'#'
		ADDEQ	R0,R0,#1
		B	newfont$l


		LOCAL


; FONTASPECT <number> command
		FNAME	Fontaspect
		DCD 	7+c_Param_Words+c_ProvidesDefaultMenuString
Fontaspect	FNJSR
		TEQ	R2,#17				; wants default menu string
		BEQ	defmenu$l

		LDR	R0,[R0]
		TEQ	R8,#0
		LDRNE	R14,[R8,#w_vdufontsize]
		FNLDR	R14,font_size,EQ
		MOV	R14,R14,LSL #16
		MOV	R14,R14,LSR #16
		ORR	R0,R14,R0,LSL #16
		STRNE	R0,[R8,#w_vdufontsize]
		FNSTR	R0,font_size,EQ
		FNRTS	EQ

		BL	save_window_status		; update the window if provided
		BL	new_window_status
		FNRTS

defmenu$l	TEQ	R0,#0
		ADREQ	R0,s$l
		BLEQ	lookup_token_R0
		TEQ	R0,#1
		BEQ	returnaspect$l
		TEQ	R0,#2
		MOVEQ	R0,#9				; suggested buffer length
		FNRTS

returnaspect$l	TEQ	R8,#0
		FNLDR	R0,font_size,EQ
		LDRNE	R0,[R8,#w_vdufontsize]
		MOVS	R0,R0,LSR #16
		MOVEQ	R0,#100
		STR	R0,local_fontaspect
		ADR	R0,local_fontaspect
		FNRTS

s$l		FNS ("zap_m_faspect")
local_fontaspect
		DCD	0


		LOCAL

; FONTSIZE <number> command
		FNAME	Fontsize
		DCD	7+c_Param_Words+c_ProvidesDefaultMenuString
Fontsize	FNJSR
		TEQ	R2,#17				; provide default menu string
		BEQ	defmenu$l

		LDR	R0,[R0]				; execute
		TEQ	R8,#0
		LDRNE	R14,[R8,#w_vdufontsize]
		FNLDR	R14,font_size,EQ
		MOV	R14,R14,LSR #16
		MOV	R14,R14,LSL #16
		ORR	R0,R14,R0
		FNSTR	R0,font_size,EQ
		STRNE	R0,[R8,#w_vdufontsize]
		FNRTS	EQ

		BL	save_window_status		; update the window if provided
		BL	new_window_status
		FNRTS

defmenu$l	TEQ	R0,#0				; read menu title
		ADREQ	R0,s$l
		BLEQ	lookup_token_R0
		TEQ	R0,#1				; read existing value
		BEQ	returnsize$l
		TEQ	R0,#2				; suggested buffer size
		MOVEQ	R0,#9
		FNRTS

returnsize$l	TEQ	R8,#0
		FNLDR	R0,font_size,EQ
		LDRNE	R0,[R8,#w_vdufontsize]
		MOV	R0,R0,LSL #16
		MOV	R0,R0,LSR #16
		STR	R0,local_fontaspect
		ADR	R0,local_fontaspect
		FNRTS

s$l		FNS ("zap_m_fsize")

		LOCAL

; ENCODING <string> command
		FNAME	Encoding
		DCD	c_NoR10 + c_Param_String + c_PreMinibuffer
Encoding	TEQ	R2,#6
		BEQ	prompt$l
		TEQ	R2,#0				; execute?
		TEQNE	R2,#1
		MOVNE	PC,R14

		FNJSR
		MOV	R1,R0				; keep name
		LDR	R0,[R8,#w_encoding]		; free existing name
		TEQ	R0,#0
		BLNE	heap_free

		BL	strdup
		STRVC	R0,[R8,#w_encoding]

		BL	save_window_status		; update the window
		BL	new_window_status
		FNRTS

prompt$l	ADR	R0,p$l
		B	minibuffer_prompt_token

p$l		FNS	("zap_p_encoding")

 END
