; s/module,fff
; converted from perl.bas by bas2asm.pl
	GET	h.Perl

	DCD	0x00
	DCD	StartUpHere
	DCD	0x00
	DCD	0x00
	DCD	D1
	DCD	ModHelpString
	DCD	D1
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	module_flags

w_formmb
	DCD	0
	DCD	0
	DCD	0

D1	=	"ZapPerl",0
	DCD	0
	DCD	0
	DCD	0
	DCD	D2
	=	0
D2	=	27,0," provides support for",27,2,"Zap editor.",13
	=	"It provides a syntax-colouring mode for Perl ",27,7,"s.",0
	ALIGN

ModHelpString
	=	"ZapPerl", 9 ,9
	=	"0.19 (00 Jan 0000) © "
lp1	=	"Tim Tyler",0
	ALIGN

module_flags
	DCD	1			; 32 bit compatible


Data3	=	"Zap",0
	DCD	0

StartUpHere
	STMFD	sp!, {lr}
	LDR	r2, [r12, #0]
	CMP	r2, #0
	BNE	ModuleInit
	MOV	r0, #6
	MOV	r3, #0x20
	SWI	XOS_Module
	LDMVSFD	sp!, {pc}
	STR	r2, [r12, #0]
	ADRL	r0, Data47
	STR	r2, [r0, #0]
	MOV	r0, #0
	STR	r0, [r2, #20]
ModuleInit
	MOV	r0, #4
	STR	r0, [r2, #12]
	MOV	r0, #0x12
	ADR	r1, Data3
	SWI	XOS_Module
;	MOVVC	r0, #0x0C
;	SWIVC	XOS_Module
;	LDMVSFD	sp!, {pc}
	MOV	r12, r4
;	LDR	r2, [r3, #20]
;	ADD	r3, r3, r2
;	LDRB	r0, [r3, #3]
;	TEQ	r0, #'X'
;	ADDEQ	r3, r3, #1
;	LDRB	r0, [r3, #5]
;	CMP	r0, #'9'
;	RSBLSS	r0, r0, #'1'
;	BHI	MakeError
;	BNE	RefDataTab
;	LDRB	r0, [r3, #7]
;	CMP	r0, #'9'
;	RSBLSS	r0, r0, #'0'
;	BHI	MakeError
;	BNE	RefDataTab
;	LDRB	r0, [r3, #8]
;	CMP	r0, #'9'
;	RSBLSS	r0, r0, #'0'
;	BHI	MakeError
RefDataTab
	ADR	r0, DataTable
	FNcall	0
	ADR	r0, CmdTable
	FNcall	Zap_AddCommands
	LDMFD	sp!, {pc}
;MakeError
;	ADR	r0, ErrorMess
;	SWI	OS_GenerateError
;ErrorMess
;	DCD	0x00
;	=	"ZapPerl requires Zap version 1.00 or greater.", 0
;	=	0
;	ALIGN


PERLLabeled
	=	"Perl",0
	ALIGN

DataTable
	DCD	DataTable
	DCD	PERLLabeled
	DCD	lp1
	DCD	0x00	;  REM = BaseMode = Text
	DCD	0x40D	;  REM mode = 13 ; bit 10 = workspace, please!
	DCD	Initialisation	;  REM init
	DCD	0	;  MnuDta; REM &00 ; menu...extension menu
	DCD	Initialisation - DataTable	;  REM size of table ; len
	DCD	0	; postload
	DCD	0	;  REM beforesave ; e_presave   \ called before saved
	DCD	0
	DCD	E_Start	;  REM e_start           \ window entering mode
	DCD	E_End	;  REM e_end               \ window leaving mode
	DCD	0x00	;  REM e-width             \ find work area width
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00	;  REM lp7 ; e_clnphy        \ physical to file offs
	DCD	0x00	;  REM clnlog
	DCD	0x00	;  REM clnphy
	DCD	0x00	;  REM clnoff
	DCD	0x00
	DCD	0	; sminus ; REM lp3 ;e_sminus      \ perform shift-left
	DCD	0	; splus  ; REM lp4 ;e_splus       \ perform shift-right
	DCD	0x00
	DCD	0x00
	DCD	redrawline	;  REM e_redrawline   \ redraw line of display
	DCD	0x00
	DCD	brackmatchchar	;  REM e_char
	DCD	0x00
	DCD	0x00	;  REM Tabular ; e_tab       \ tab key pressed
	DCD	returnpressed	;  REM e_returnchhar
	DCD	0x00
	DCD	BranchSave	;  REM &00 trytwo    \  REM e_saveandrun
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	BranchSave	;  REM e_compile \ compile & run and don't exit
	DCD	0x00
	DCD	JustRun	;  REM e_run     \ run the program being edited
	DCD	JustRun	;  REM e_runandquit \  run
	DCD	0x00	;  REM e_basic   \ drops into language...?
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00	;  REM e_setwidth - changing window width
	DCD	0x00
	DCD	redrawA	;  REM e_prevline \ find start of update reg'n; Easy!
	DCD	gotoopenwindow	;  REM ; e_openwindow


Initialisation
	CMP	r1, #7
	BEQ	amenucreation
	CMP	r1, #1
	MOVCC	pc, lr
	STREQ	r0, [r11, #4]
	STREQ	r0, modenumberlocal
	TEQ	r1, #6
	ADREQ	r1, MenuExtension
	MOVEQ	pc, lr
	TEQ	r1, #2
	MOVNE	pc, lr
	STMFD	sp!, {r1, r7, r8, lr}
	;  REM here? yes!
	STMFD	sp!, {r0, r1, r7}
	MOV	r8, #'A'
	ADRL	r1, TableHere
loop2
	LDRB	r0, [r1]
	CMP	r0, r8
	BGE	GtIt
loop
	LDRB	r0, [r1], #1
	CMP	r0, #'z'
	BLE	loop
	LDRB	r0, [r1]
	CMP	r0, #'*'
	BNE	loop2
backinaction
	ADD	r8, r8, #1
	CMP	r8, #'Z'
	BLE	loop2
	LDMFD	sp!, {r0, r1, r7}
	MOV	r8, #0
	BL	ZapModeWord
	TEQ	r7, #0
	BEQ	nocfginit
	LDR	r0, [r7, #0]
	CMP	r0, #zizeofcfgwksp
	LDMEQFD	sp!, {r1, r7, r8, pc}
	;  REM no !Config...?
nocfginit
	MOV	r0, #0x11
	FNcall	Zap_ModeColourNum	;  REM change palette size.
	TEQ	r7, #0
	BEQ	noheapblkatall
	LDR	r1, [r7, #0]
	TEQ	r1, #zizeofcfgwksp
	BEQ	justendtheresnoneed
	MOV	r1, #zizeofcfgwksp	;  REM all vc
	MOV	r0, r7
	LDR	lr, [r12, #0]
	ADD	lr, lr, #8	;  REM zap call - ensure heap block
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	MOV	r7, r0
	STR	r1, [r7, #0]
	BL	OnToWrtMdeWrd
noheapblkatall
	MOV	r0, #zizeofcfgwksp
	LDR	lr, [r12, #0]
	ADD	lr, lr, #4	;  REM zap call - start heap block
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	MOV	r7, r0
	BL	OnToWrtMdeWrd
	MOV	r0, #zizeofcfgwksp	;  REM vc
	STR	r0, [r7]
	MOV	r0, #0
	STR	r0, [r7, #4]
	MOV	r0, #0x0D
	STR	r0, [r7, #8]
	LDR	r0, startupformatwd
	STR	r0, [r7, #0x0C]
	LDRVC	r0, SDsasa	;  REM DATA 5%/8% ! vc= no !config file ?
	LDRVC	r1, [r11, #4]
	MOVVC	r2, #0
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #0x0184	;  REM call - RD/WRT Zap data mode words.
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	BLVC	UnkPreColBit	;  REM to set up colours with zmcs
justendtheresnoneed
	LDMFD	sp!, {r1, r7, r8, pc}
amenucreation
	STMFD	sp!, {r0, lr}
	BL	loadmenuifrequired
	FNcall	Zap_ReadMenu
	LDR	r1, [r0, #4]
	LDMFD	sp!, {r0, pc}
CmdTable
	DCD	CmdTable
	DCD	0
	=	"PERL_FLAGSTOGGLE", 0, "", 0, "", 0, "", 0, ""
	DCD	Cmdhtmlflagstoggle
	=	"PERL_SETDELAY", 0, "", 0, "", 0, ""
	DCD	CmdPerlSetDelay
	=	"PERL_SETINDENT", 0, "", 0, ""
	DCD	CmdPerlSetIndent
	DCD	0	;  REM flags...
GtIt
	ADRL	r0, AlphaIndex
	SUB	r7, r8, #'A'
	ADD	r0, r0, r7, LSL #2
	ADRL	r7, TableHere
	SUB	r7, r1, r7
	STR	r7, [r0]
	B	backinaction
modenumberlocal
	DCD	0
startupformatwd
	DCD	0x77800404
MenuExtension
	=	"Comments",0
	=	:CHR:0x22:CC:"-strings",0
	=	"&$@",0
	=	"RegExps",0
	=	"Keywords",0
	=	"Punctuation",0
	=	"Numbers",0
	=	"System",0
	=	"EscChar",0
	=	"Functions",0
	=	"`-strings",0
	=	"'-strings",0
	=	"Types",0
	ALIGN

R8tmp	DCD	0
R9tmp	DCD	0
R12tmp	DCD	0

callzapcommand
	STMFD	sp!, {r0-r12, lr}
	MOV	r0, #0x03	;  REM replace
	MOV	r2, r8	;  REM R8
	MOV	r3, r12	;  REM from...
	LDR	r8, R8tmp
	LDR	r9, R9tmp
	LDR	r12, R12tmp
	LDR	r6, [r9, #f_ptr]
	SUB	r1, r5, r6
	LDR	r7, [r9, #f_splito]
	CMP	r1, r7
	LDRGE	r7, [r9, #f_splits]
	SUBGE	r1, r1, r7
	FNcall	Zap_DoCommand
	LDMFD	sp!, {r0-r12, pc}


		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
UnkPreColBit
	STMFD	sp!, {r1-r4, lr}
	ADR	r3, DefaultColours
	LDR	r1, [r11, #4]	;  REM normally 0
PreZModColBit
	MOV	r2, #0x09	;  REM start colours
ZModColBit
	LDRB	r0, [r3], #1
	FNcall	Zap_ModeColour	;  REM Read colour definitions
	LDMVSFD	sp!, {r1-r4, pc}
	ADD	r2, r2, #1
	TEQ	r2, #0x16	;  REM max colours
	BNE	ZModColBit
	LDMFD	sp!, {r1-r4, pc}
DefaultColours
		;  REM Colour Numbers :
	=	0x0A	;  REM Comment Colour =&9
	=	0x0F	;  REM String colour  =&A
	=	0x01	;  REM Punctuation    =&B
	=	0x04	;  REM Embedded {}    =&C
	=	0x09	;  REM Commands       =&D
	=	0x0C	;  REM Misc Punct.    =&E
	=	0x0E	;  REM Number colour  =&F
	=	0x02	;  REM Error colour   =&10
	=	0x0D	;  REM GSTrans        =&11
	=	0x03	;  REM Unknown        =&12
	=	0x0F	;  REM String colour  =&13
	=	0x0F	;  REM String colour  =&14
	=	0x08	;  REM excmd          =&15
	=	0x00, 0x00	;  REM double zero termination !
	ALIGN


Tk1frm12andret
	LDR	r0, [r11, #12]
	SUBS	r0, r0, #1
	STR	r0, [r11, #12]
	MVNNE	r0, #0
	MOVS	pc, lr

OnToWrtMdeWrd
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
WrtMdeWrd
	MOV	r0, r7
	LDR	r2, [r12, #0]
	ADD	r2, r2, #0x0168	;  REM zap call...write the mode word
	MOV	lr, pc
	MOV	pc, r2
	LDMFD	sp!, {r0-r2, pc}
ZapModeWord
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
	LDR	r2, [r12, #0]
	ADD	r2, r2, #0x0164	;  REM Zap_GetModeWord - read the mode word
	MOV	lr, pc
	MOV	pc, r2
	MOV	r7, r0
	LDMFD	sp!, {r0-r2, pc}
localdefltmw
	DCD	0
initialiseheap
	STMFD	sp!, {r1-r6, r8-r12, lr}
	MOV	r0, #zizeofcfgwksp
	LDR	lr, [r12, #0]
	ADD	lr, lr, #4
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	MOV	r7, r0
	MOV	r0, #zizeofcfgwksp
	STR	r0, [r7]
	LDR	r0, localdefltmw
	LDR	r0, [r0, #0xC]
	STR	r0, [r7, #0xC]
	MOV	r0, #0x0D
	STR	r0, [r7, #8]	;  REM AT THE START MAKE COLOUR OK?
	BL	OnToWrtMdeWrd
	LDMFD	sp!, {r1-r6, r8-r12, pc}
E_Start
	STMFD	sp!, {r1, r7, lr}
	STMFD	sp!, {r1-r12, lr}
	LDRB	r1, [r11, #4]
	ORR	r1, r1, #0x100
	FNcall	Zap_ReadVar
	STR	r0, localdefltmw
	LDMFD	sp!, {r1-r12, lr}
	BL	ZapModeWord
	CMP	r7, #0
	BLEQ	initialiseheap
	TEQ	r8, #0
	BEQ	BeforeAllare8
	LDRVC	r1, [r7, #0]
	TEQVC	r1, #zizeofcfgwksp
	BEQ	BeforeAllare8
	MOVVC	r1, #zizeofcfgwksp
	MOVVC	r0, r7
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #8
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	MOVVC	r7, r0
	STRVC	r1, [r7, #0]
	BLVC	OnToWrtMdeWrd
BeforeAll
	LDR	r0, localdefltmw
	LDR	r0, [r0, #0xC]
	STR	r0, [r7, #0xC]
	MOV	r0, #0x0D
	STR	r0, [r7, #8]	;  REM AT THE START MAKE COLOUR OK?
BeforeAllare8
	LDRVC	r0, [r11, #4]
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #0x015C	;  REM  restore mode options on e_start
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	LDR	r1, [r7, #0x0C]
	ADRL	r0, w_formmb
	STR	r1, [r0, #8]
	CMP	r8, #0
	LDMEQFD	sp!, {r1, r7, pc}
	BL	destroyanypanes
	BLVC	gomakepanehappen
	LDMFD	sp!, {r1, r7, pc}
E_End
	STMFD	sp!, {r7, lr}
	CMP	r8, #0
	BLNE	destroyanypanes
	BL	ZapModeWord
	LDRVC	r0, [r11, #4]
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #Zap_SaveModeWord	;  REM - save on e_end
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	LDMFD	sp!, {r7, pc}
SDsasa
	DCD	0x1201004D


		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
regexpdelchar
	DCD	0
regexpdelcharflg
	DCD	0
adrofrsix
	DCD	0
redrawline
	STMFD	sp!, {r6, r12, lr}
	STMFD	sp!, {r7, r11}
	STR	r6, adrofrsix
	BL	Branch208
	BL	GetModeWord
	BL	ZapModeWord
	LDR	r2, [r7, #8]	;  REM Preserved start colour & flags
	LDR	r3, [r7, #0x0C]
	ADRL	r12, w_formmb
	STR	r3, [r12, #8]
	LDMFD	sp!, {r7, r11}	;  REM calls...
	LDR	r3, [r8, #60]	;  REM char width of cached line (x 8)
	STR	r4, [r12]
	LDRB	r12, [r8, #88]	;  REM code of lf...?
	BIC	r2, r2, #0x700
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0D
	ORR	r2, r2, #0xF000	;  REM ! ; fe? ; ff000
	BIC	r2, r2, #0x00E00000	;  REM HERE? &0F000000
	LDR	r5, [r9, #0]	;  REM ?
	LDR	r10, [r9, #4]	;  REM ?
	ADD	r10, r10, r5
	TEQ	r7, r10
	LDMEQFD	sp!, {r6, r12, pc}	;  REM end - return for good!
	LDR	r10, [r9, #56]	;  REM ?
	ADD	r10, r10, r5
	CMP	r7, r10
	MOVCC	r10, r5
	MOV	r6, #0
BitAftStart
	SUB	r6, r6, #1
	LDRB	r0, [r7], #-1
	TEQ	r0, r12
	BEQ	UpToStart
	CMP	r7, r10
	BCS	BitAftStart
	TEQ	r5, r10
	LDRNE	r10, [r9, #60]
	SUBNE	r7, r7, r10
	MOVNE	r10, r5
	CMP	r7, r10
	BCS	BitAftStart
	SUB	R6,R6,#1	; cl fix
	SUB	R7,R7,#1	;
UpToStart			;
	ADDS	r6, r6, #2	;
	ADD	r7, r7, #2	;
	SUBPL	r7, r7, r6
	LDMPLFD	sp, {r6}
	TEQ	r5, r10
	LDREQ	r10, [r9, #52]	;  REM ?
	ADDEQ	r10, r10, r5
	LDRNE	r10, [r9, #60]	;  REM ?
	ADDNE	r5, r5, r10
	LDRNE	r10, [r9, #8]	;  REM ?
	ADDNE	r10, r10, r5
	LDRB	r0, [r8, #0x90]	;  REM tabchar?
	ORR	r12, r12, r0, LSL #24
	LDR	r0, [r8, #100]	;  REM bytes per line / width of text
	ORR	r12, r12, r0, LSL #12
RtAtStrtA
	MOV	lr, #0
RtAtStrtB
	CMP	r7, r10	;  REM EOF?
	BCC	Branch13
	LDR	r10, [r9, #8]
	ADD	r10, r10, r5
	CMP	r7, r10
	LDMCSFD	sp!, {r6, r12, pc}
	LDR	r1, [r9, #60]	;  REM ???
	ADD	r7, r7, r1
	ADD	r5, r5, r1
	ADD	r10, r10, r1
Branch13
	LDRB	r0, [r7], #1	;  REM get char
	AND	r1, r12, #0xFF
	EOR	r2, r2, #0x0400	;  REM newline? ; alternating colour...
	TEQ	r0, r1
	TSTEQ	r2, #0x0400
	BICEQ	r2, r2, #0x700	;  REM THIS CODE IS NEVER EXECUTED...
	BICEQ	r2, r2, #0xFF
	ORREQ	r2, r2, #0x0D
	BEQ	RtAtStrtB
	BIC	r2, r2, #0x0400
	TEQ	r0, r1
	BEQ	BranchNL	; REM Jeez, what a mess...
	CMP	r6, #0	;  REM wed morn-reinit
	MOVGT	r1, #1	;  REM @@@@ re init this?
	STRGTB	r1, [r6, r3,LSL #1]
	AND	r1, r2, #0xFF
	CMP	r1, #0x0D
	BEQ	BNL2
Backhome
	AND	r1, r2, #0xFF	;  REM Here begins the |G-type GStrans Testing
	STR	r1, oldrtwo
	TEQ	r1, #0x0A	;  REM comment
	TEQNE	r1, #0x13	;  REM comment
	TEQNE	r1, #0x14	;  REM comment
	TEQNE	r1, #0x0C	;  REM comment
	BNE	aftertestA
	CMP	r6, #0	;  REM Here begins the |G-type GStrans testing
	BLE	aftert7
	LDRB	r1, [r6, #-1]
	CMP	r1, #'\'
	BNE	aftertestA
	SUB	r1, r3, #1
	LDRB	r1, [r6, r1]
	TEQ	r1, #0x11
	BEQ	aftertestA
	SUB	r1, r3, #1
	MOV	r0, #0x0B
	STRB	r0, [r6, r1]
	MOV	r0, #0x11
	STRB	r0, [r6, r3]
	LDRB	r0, [r7, #-1]
	B	BeforeColour	;  AfterColour%
aftert7
	LDR	r1, Sol7
	ADD	r1, r1, #2
	CMP	r7, r1
	BLE	aftertestA	;  REM code never fires?
	LDRB	r1, [r7, #-2]	;  REM in hope
	CMP	r1, #'\'
	BEQ	BeforeColour	;  /why?/
aftertestA
	MOV	r1, #0
	STR	r1, justdoneweirdquote
	TEQ	r0, #'"'
	BEQ	QuoteBit
	TEQ	r0, #'`'
	BEQ	slantQuoteBit
	TEQ	r0, #'''
	BEQ	singleQuoteBit
afterquotetest
	AND	r1, r2, #0xFF
	CMP	r1, #0x09
	BEQ	ComCodeRestart
	LDR	r1, regexpdelcharflg
	CMP	r1, #0
	MOVNE	r1, #0
	STRNE	r1, regexpdelcharflg
	LDR	r1, regexpdelchar
	TEQ	r0, r1
	STREQ	r2, justdoneweirdquote
	BEQ	CurlyBrackOpen
notaREGEXP2
	CMP	r1, #0x0A
	CMPNE	r1, #0x0C
	CMPNE	r1, #0x14
	CMPNE	r1, #0x13
	BEQ	NotatStart
	CMP	r6, #0	;  REM Here begins the |G-type GStrans testing
	BLE	justdothedamncomment
	LDRB	r1, [r6, #-1]
	TEQ	r1, #'$'
	TEQNE	r1, #'^'
	BEQ	aftertestforcomsta
justdothedamncomment
	TEQ	r0, #'#'
	TSTEQ	r2, #0x04000000
	BEQ	CommentStart
aftertestforcomsta
NotatStart
	TST	r2, #0x0100	;  REM ok
	BICNE	r2, r2, #0xFF	;  REM COL cream/normal - lt grey (= &0B);
	ORRNE	r2, r2, #0x0E	;  REM testing very dubious TST code...
	LDR	r1, justdoneweirdquote
	CMP	r1, #0
	BNE	Bother
	AND	r1, r2, #0xFF
	TEQ	r1, #0x0C	;  REM COL Errors/Redirection  ...new
	BEQ	BranchYYY
afterteststop
	AND	r1, r2, #0xFF
	TEQ	r1, #0x02	;  REM ????
	BEQ	NotANumber
	TEQ	r1, #0x0D	;  REM COL Command! c .... NO NuffinUMBERS...
	BICEQ	r2, r2, #0xFF
	ORREQ	r2, r2, #0x0E
	ANDEQ	r1, r2, #0xFF
	TEQ	r1, #0x0E	;  REM COL cream/normal ... NO NUMBERS...
	TEQNE	r1, #0x0F	;  REM COL Orange/Numbers?
	BNE	BeforeColour
	TST	r2, #0x08000000
	BNE	NotANum2
	CMP	r0, #'9'
	RSBLSS	r1, r0, #'0'
	BLS	PreTisNum
	AND	r1, r2, #0xFF
	TEQ	r1, #0x0F	;  REM COL = Orange/NUMBERS?
	BNE	NotANumber
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0E
	CMP	r0, #'%'
	BLE	NotANumber
	TEQ	r0, #'.'
	TEQNE	r0, #':'
	BEQ	pointinnum
	AND	r1, r0, #0xDF
	TEQ	r1, #'K'
	TEQNE	r0, #'_'
	BEQ	TisANumber
	CMP	r1, #'X'
	BEQ	TisANumber
	CMP	r1, #'F'
	RSBLSS	r1, r1, #'A'
	BHI	NotANumber
TisANumber
	;  REM not numbers?
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0F
	TST	r2, #0x80000000
	BICNE	r2, r2, #0x90000000
	B	BeforeColour
NotANumber
	CMP	r0, #'_'
	BEQ	PlainNoOSChk
	CMP	r0, #'"'
	CMPNE	r0, #'/'
	CMPNE	r0, #'\'
	CMPNE	r0, #'}'
	CMPNE	r0, #'|'
	BEQ	Bother
	CMP	r0, #128
	BCS	PlainNoOSChk
	AND	r1, r0, #0xDF
	CMP	r1, #'Z'
	RSBLSS	r1, r1, #'@'
	BLS	PlainNoOSChk
itsoknow
Bother
	STMFD	sp!, {lr}
	BL	TableChk2	;  REM **************************
	LDMFD	sp!, {lr}
DontBother
AfterCmdCntChk
	AND	r1, r2, #0xFF
	TEQ	r1, #0x09
	BEQ	BeforeColour
	TEQ	r1, #0x02
	BNE	SymbolChecking	;  REM  BR if not normal colour...
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0E
	TEQ	r0, #'_'	;  REM If numbers check for end of numbers
	BEQ	PlainNoOSChk
	CMP	r0, #'9'
	RSBLSS	r1, r0, #'/'	;  REM = asc "0"
PlainNoOSChk
SymbolChecking
	CMP	r6, #0
	BLT	BeforeColour	;  REM BLT     BeforeColour%
	TST	r2, #0x8000000
	BNE	ErrEchConf
	TEQ	r0, #'@'
	TEQNE	r0, #'%'
	TEQNE	r0, #'$'
	MOVEQ	r1, #0x0B
	STREQB	r1, [r6, r3]
	BEQ	AfterColour
BeforeColour
	;  REM NUMBERS?
	TEQ	r0, #' '
	TEQNE	r0, r12, LSR #24	;  REM = tab?
	BEQ	TabbingSub
Branch24
	CMP	r6, #0
	BLE	firstpass	;  REM new addition to test
	ANDGT	r1, r2, #0x1F	;  REM write colours
	STRGTB	r1, [r6, r3]
AfterColour
	CMP	r6, #0
	STRGTB	r0, [r6], #1	;  REM write text
firstpass
	ADD	lr, lr, #1
BeginOfEnd
	AND	r1, r12, #0xFF	;  REM end character... yes! At last...
	TEQ	r0, r1	;  REM end character... yes!
	BICEQ	r2, r2, #0x78000000	; REM START OF LINE FLAGS...
	CMP	r6, #0
	ADDLTS	r6, r6, #1
	BMI	RtAtStrtB	;  REM round loop...
	LDMEQFD	sp, {r6}	;  REM huh?
	BEQ	RtAtStrtA
	TEQ	r0, r1	;  REM end character... yes!
	BEQ	tocheckbackwardsnow
	ORRNE	r2, r2, #0x0400
backcheckbackwardsnow
	BIC	r1, r12, #0xFF000000	;  REM if not width...
	CMP	lr, r1, LSR #12
	BICLT	r2, r2, #0x0400
	BLT	RtAtStrtB	;  REM go round loop...
	BEQ	tohaveajollygoodtime
tohaveajollygoodback
	BIC	r0, r12, #0xFF000000
	CMP	lr, r0, LSR #12
	BICGE	r2, r2, #0x0400	;  REM NE
	AND	r0, r12, #0x0200
	ORR	r2, r2, r0
	LDMFD	sp!, {r6, r12}
	STMFD	sp!, {r7, r11}
	BL	Branch208
	BL	GetModeWord
	STR	r2, [r7, #8]
	LDMFD	sp!, {r7, r11, pc}	;  REM on exit set things up... r7...

oldrtwo
	DCD	0
fromslash
	CMP	r6, #0
	BLT	BeforeColour	;  REM BLT     BeforeColour%
	STRB	r1, [r6, r3]
	B	AfterColour

ComCodeRestart
	TEQ	r0, #'_'
	BEQ	AfterCmdCntChk
	AND	r1, r0, #0xDF
	CMP	r1, #'Z'
	RSBLSS	r1, r1, #'@'
	BLS	AfterCmdCntChk
	B	itsoknow
ErrEchConf
	CMP	r6, #0
	BLE	AfterColour
	AND	r1, r2, #0xFF
	CMP	r1, #0x0F
	BEQ	BeforeColour
	CMP	r1, #0x0E
	MOVEQ	r1, #0x02
	STREQB	r1, [r6, r3]
	TEQ	r0, #' '
	TEQNE	r0, r12, LSR #24	;  REM = tab?
	BEQ	TabbingSub
	B	AfterColour
NotANum2
	CMP	r6, #0
	BLE	NotANumber
	CMP	r0, #'%'
	BGT	NotANumber
	SUB	r1, r3, #1
	LDRB	r1, [r6, r1]
	AND	r1, r1, #0xFF
	CMP	r1, #0x0F
	BNE	NotANumber
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0E
	B	NotANumber
BranchNL
	MOV	r1, #'/'
	STR	r1, regexpdelchar
	MOV	r1, #0
	STR	r1, regexpdelcharflg
Bother2
	STMFD	sp!, {lr}
	BL	TableChk2	;  REM swap with sect below?;;;
	LDMFD	sp!, {lr}
DontBother2
	MOV	lr, #0x70000000	;  REM        ;;Jeez, what a mess!;;
	B	BeginOfEnd
BNL2
	BIC	r2, r2, #0x10000000	;  REM START OF LINE FLAGS SET...
	STR	r6, Sol6
	SUB	r1, r7, #1
	STR	r1, Sol7
	B	Backhome
PreTisNum
	;  REM not numbers?
	CMP	r6, #0
	BLT	TisANumber
	LDRB	r1, [r6, #-1]
	CMP	r1, #' '
	BEQ	TisANumber
	TEQ	r1, #'.'
	TEQNE	r1, #':'
	BNE	TisANumber
	ADD	r1, r6, r3
	LDRB	r1, [r1, #-1]
	AND	r1, r1, #0x0F
	CMP	r1, #0x0F
	BEQ	TisANumber
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x02
	B	BeforeColour
Sol6

	DCD	0
Sol7

	DCD	0
BranchYYY
	CMP	r6, #0
	BLT	BeforeColour	;  REM BLT     BeforeColour%
	CMP	r0, #'9'
	RSBLSS	r1, r0, #'0'
	MOVLS	r1, #0x0C
	STRLSB	r1, [r6, r3]
	BLS	AfterColour
	LDR	r1, Sol7
	ADD	r1, r1, #2
	CMP	r7, r1
	MOVLE	r1, #10
	LDRGTB	r1, [r7, #-2]	;  REM danger
	TEQ	r0, #'.'	;  REM if in number
	BNE	TryNextA
	CMP	r1, #'9'
	BGT	TryNextA
	CMP	r1, #'0'
	BLT	TryNextA
	MOV	r1, #0x0C
	STRB	r1, [r6, r3]
	B	AfterColour
TryNextA
	TEQ	r0, #'_'	;  REM if in number
	BNE	BeforeColour
	CMP	r1, #'9'
	BGT	BeforeColour
	CMP	r1, #'0'
	BLT	BeforeColour
	MOV	r1, #0x0C
	STRB	r1, [r6, r3]
	B	AfterColour
pointinnum
	LDRB	r1, [r7, #-2]
	CMP	r1, #'9'
	BGT	NotANumber
	CMP	r1, #'/'
	BLE	NotANumber
	LDRB	r1, [r7]
	CMP	r1, #'9'
	BGT	NotANumber
	CMP	r1, #'/'
	BLE	NotANumber
	B	TisANumber	;  REM in a number...
testampersand
	CMP	r6, #0
	BLE	afterteststop
	LDRB	r1, [r6, #-1]
	TEQ	r1, #'&'
	BNE	afterteststop
	SUB	r1, r3, #1
	MOV	r0, #0x02
	STRB	r0, [r6, r1]
	LDRB	r0, [r7, #-1]
	B	afterteststop
REGEXPtest
	MOV	r0, #0
gstchklp
	SUB	r0, r0, #1
	ADD	r6, r6, r0
	LDR	r1, Sol6
	SUB	r1, r1, #1
	CMP	r1, r6
	SUB	r6, r6, r0
	BGE	gotoarexp
	ADD	r1, r6, r0
	CMP	r1, #0
	BLT	notaREGEXP
	LDRB	r1, [r6, r0]
	CMP	r1, #' '
	BLT	notaREGEXP
	CMP	r1, #127
	BGT	notaREGEXP
	CMP	r1, #'~'
	BEQ	gotoarexp
	CMP	r1, #' '
	BLT	gotoarexp
	CMP	r1, #' '
	CMPNE	r1, #'@'
	BCS	gstchklp
	CMP	r1, #'"'
	CMPNE	r1, #'('
	CMPNE	r1, #','
	CMPNE	r1, #';'
	BNE	notaREGEXP
gotoarexp
	LDR	r0, regexpdelchar
	B	aREGEXP
notaREGEXP
	LDR	r0, regexpdelchar
	B	notaREGEXP2bef


		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
justdoneweirdquote
	DCD	0
CommentStart
	; | comments
	AND	r1, r2, #0xFF
	CMP	r1, #0x0A	;  REM in quotes?
	CMPNE	r1, #0x0C	;  REM in quotes?
	CMPNE	r1, #0x14	;  REM in quotes?
	CMPNE	r1, #0x13	;  REM in quotes?
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #0x09
	ORRNE	r2, r2, #0x10000000
	B	BeforeColour
slantQuoteBit
	AND	r1, r2, #0xFF
	CMP	r1, #0x09
	CMPNE	r1, #0x0C
	CMPNE	r1, #0x0A
	CMPNE	r1, #0x13
	BEQ	BeforeColour
	CMP	r1, #0x14
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #0x14
	ORRNE	r2, r2, #0x20000000
	STRNE	r2, justdoneweirdquote
	BNE	afterquotetest
	BIC	r2, r2, #0x20000000
	B	CurlyBrack
singleQuoteBit
	AND	r1, r2, #0xFF
	CMP	r1, #0x09
	CMPNE	r1, #0x0C
	CMPNE	r1, #0x0A
	CMPNE	r1, #0x14
	BEQ	BeforeColour
	CMP	r1, #0x13
	BICEQ	r2, r2, #0x20000000
	BEQ	CurlyBrack
	CMP	r6, #0
	BMI	sfinebrackogt
	LDRB	r1, [r6, #-1]
	CMP	r1, #'\'	;  should be an odd number...
	BEQ	afterquotetest
	CMP	r1, #'['	;  was {?
	CMPNE	r1, #']'	;  was {?
	CMPNE	r1, #'|'	;  was {?
	CMPNE	r1, #'{'	;  was {?
	BCS	sfinebrackogt
	CMP	r1, #'$'
	CMPNE	r1, #'&'
	CMPNE	r1, #'?'
	BGE	afterquotetest
sfinebrackogt
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x13
	ORR	r2, r2, #0x20000000
	STR	r2, justdoneweirdquote
	B	afterquotetest

QuoteBit
	;  REM "Quotes"
	AND	r1, r2, #0xFF
	CMP	r1, #0x09
	CMPNE	r1, #0x0C
	CMPNE	r1, #0x13
	CMPNE	r1, #0x14
	BEQ	BeforeColour
	CMP	r1, #0x0A
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #0x0A
	ORRNE	r2, r2, #0x20000000
	STRNE	r2, justdoneweirdquote
	BNE	afterquotetest	;  BeforeColour%
	BIC	r2, r2, #0x20000000

CurlyBrack
	;  REM "No {} NUFFIN"
	CMP	r6, #0
	ANDGT	r1, r2, #0x1F
	STRGTB	r1, [r6, r3]
	BIC	r2, r2, #0xFF
	MOV	r1, r2, LSR #24
	AND	r1, r1, #0x01	;  REM Bits for {} depth
	CMP	r1, #0x00
	ORREQ	r2, r2, #0x0E	;  REM COL Cream/Normal
	ORRNE	r2, r2, #0x0C	;  REM COL Grey/Redirected
	B	AfterColour
CurlyBrack2
	CMP	r6, #0
	ANDGT	r1, r2, #0x1F
	STRGTB	r1, [r6, r3]
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0A
	B	AfterColour

CurlyBrackOpen
	;  REM originally for ' these ' ; "{"
	AND	r1, r2, #0xFF
	TEQ	r1, #0x0C
	BEQ	CurlyBrackClose
	TEQ	r1, #0x09
	TEQNE	r1, #0x0A
	TEQNE	r1, #0x13
	TEQNE	r1, #0x14
	BEQ	BeforeColour
	B	REGEXPtest
aREGEXP
	ORR	r2, r2, #0x10000000
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0C
	ORR	r2, r2, #0x1000000
	ORR	r12, r12, #0x0200
notaREGEXP2bef
	STR	r2, justdoneweirdquote
	B	notaREGEXP2

CurlyBrackClose
	;  REM originally for ' these ' ; "}"
	TST	r2, #0x02000000
	BICNE	r2, r2, #0x02000000
	BNE	BeforeColour
	BIC	r2, r2, #0x10000000
	AND	r1, r2, #0xFF
	TEQ	r1, #0x0A
	TEQNE	r1, #0x09
	BEQ	BeforeColour
	BIC	r2, r2, #0x1000000
	ANDS	r1, r2, #0x20000000
	BNE	CurlyBrack2
	MOV	r1, r2, LSR #24
	AND	r1, r1, #0x01	;  REM Bits for {} depth
	TEQ	r1, #0x00
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #0x0C	;  REM COL Grey/Redirected
	ORRNE	r12, r12, #0x0200
	BNE	BeforeColour
	BIC	r12, r12, #0x0200
	B	CurlyBrack

TabbingSub
	AND	r1, r2, #0xF
	TEQ	r1, #0x0D
	TEQNE	r1, #0x0B
	ORREQ	r2, r2, #0x0100
	AND	r1, r4, #0x3000
	TEQ	r1, #0
	TEQEQ	r0, r12, LSR #24
	BEQ	AfterColour
	TEQ	r0, #' '
	BEQ	Branch24
	CMP	r6, #0
	BLT	BeginOfEnd
	MOV	r0, #9	;  REM tab!
	TEQ	r1, #0x1000
	MOVEQ	r0, #0x20	;  REM " "!!!!
	TEQ	r1, #0x3000
	MOVEQ	r0, #'-'	;  REM "-"!!!!
TabLoop
	MOV	r1, #8	;  REM = COL control Character...
	STRB	r1, [r6, r3]	; @@@@
	MOV	r1, #1
	STRB	r1, [r6, r3,LSL #1]	;  REM wrong?
	STRB	r0, [r6], #1	;  REM @@@@@@
	ADD	lr, lr, #1
	AND	r1, r4, #0x3000
	TEQ	r1, #0x2000
	MOVEQ	r0, #0x20
	BIC	r1, r12, #0xFF000000
	TEQ	lr, r1, LSR #12
	TSTNE	lr, #7
	BNE	TabLoop
	AND	r0, r4, #0x3000
	TEQ	r0, #0x3000
	MOVEQ	r0, #9	;  REM  | ?
	STREQB	r0, [r6, #-1]	;  REM @@@@ ???
	MOV	r0, r12, LSR #24
	B	BeginOfEnd


; ----------- e_prevline --------------

redrawA
	SUBS	r0, r0, #32
	MOVMI	r0, #0
	MOV	pc, lr


storedr6flu
	DCD	0
cntcharback
	DCD	0
lastcharacterfound
	DCD	0

TableChk2
	STR	r6, storedr6flu
	BIC	r2, r2, #0x02000000
	STMFD	sp!, {r4-r12, lr}
	MOV	r8, #0
	MVN	r11, #0
_altered_0
	SUB	r11, r11, #1
	ADD	r4, r7, r11
	LDR	r1, [r9, #f_ptr]
	CMP	r4, r1
	BCC	atvsof
	LDR	r12, [r9, #f_splito]
	ADD	r12, r1, r12
	CMP	r4, r12
	BCC	inbothalfTC2
	LDR	r12, [r9, #f_splite]
	ADD	r12, r1, r12
	CMP	r4, r12
	LDRCC	r1, [r9, #f_splits]
	SUBCC	r4, r4, r1
inbothalfTC2
	LDR	r1, [r9, #f_ptr]
	CMP	r4, r1
	BCC	atvsof	;  to avoid bug ;-(
	LDRB	r1, [r4]
	CMP	r1, #'|'
	CMPNE	r1, #'{'
	CMPNE	r1, #'}'
	CMPNE	r1, #'['
	CMPNE	r1, #']'
	CMPNE	r1, #'^'
	CMPNE	r1, #'@'
	ORRGT	r8, r8, #1
	BGT	_altered_0
	CMP	r1, #'2'
	CMPNE	r1, #'3'
	BEQ	_altered_0
	CMP	r1, #'@'
	CMPNE	r1, #'$'
	CMPNE	r1, #'''
	CMPNE	r1, #'%'
	CMPNE	r1, #'*'
	CMPNE	r1, #'&'
	BEQ	notANYone
	CMP	r8, #0
	BEQ	notANYone
atvsof
	STR	r1, lastcharacterfound
	ADD	r11, r11, #1
	ADD	r4, r7, r11
	ADD	r11, r11, #1
	RSBS	r1, r11, #0
	BEQ	notANYone			; nothing to do
	STR	r1, cntcharback
	LDR	r1, [r9, #f_ptr]
	CMP	r4, r1
	BCC	notANYone
	LDR	r12, [r9, #f_splito]
	ADD	r12, r1, r12
	CMP	r4, r12
	BCC	inbothalfTC3
	LDR	r12, [r9, #f_splite]
	ADD	r12, r1, r12
	CMP	r4, r12
	LDRCC	r1, [r9, #f_splits]
	SUBCC	r4, r4, r1
inbothalfTC3
	LDRB	r1, [r4]
	FNupper	r1	;  perl is case sensitive...
	CMP	r1, #'A'
	BLT	notANYone
	CMP	r1, #'Z'
	BGT	notANYone
	SUB	r1, r1, #'A'
	ADRL	r12, AlphaIndex
	ADD	r1, r12, r1, ASL #2
	LDR	r1, [r1]
	ADRL	r12, TableHere
	ADD	r12, r12, r1
lpa2
	MOV	r8, #0	;  REM tablepointer
lpa1
	LDRB	r1, [r12, r8]
	CMP	r1, #'z'
	MOVGT	r10, r8
	BGT	gotexactmatch
anunderscorehere
	MOV	r7, r1
	ADD	r5, r4, r8
	LDR	r1, [r9, #f_ptr]
	LDR	lr, [r9, #f_splito]
	ADD	lr, r1, lr
	CMP	r5, lr
	BCC	inbothalfTC4
	LDR	lr, [r9, #f_splite]
	ADD	lr, r1, lr
	CMP	r5, lr
	LDRCC	r1, [r9, #f_splits]
	ADDCC	r5, r5, r1
inbothalfTC4
	LDRB	r1, [r5]
	CMP	r1, #'{'
	CMPNE	r1, #';'
	CMPNE	r1, #'>'
	CMPNE	r1, #'"'
	CMPNE	r1, #'['
	CMPNE	r1, #'}'
	CMPNE	r1, #'|'
	CMPNE	r1, #'''
	CMPNE	r1, #'`'
	CMPNE	r1, #'\'
	CMPNE	r1, #'/'
	MOVLE	r1, #' '
tabovr1
	ADD	r8, r8, #1
	CMP	r7, r1
	BGT	bigger1
	BEQ	lpa1
maybenot
	ADD	r12, r12, r8
	SUB	r12, r12, #1
_altered_1
	LDRB	r1, [r12], #1
	CMP	r1, #'z'
	BLE	_altered_1
	LDRB	r1, [r12]
	CMP	r1, #'*'
	BNE	lpa2
couldnotfindit
	TST	r2, #0x1C000000
	LDMNEFD	sp!, {r4-r12, pc}
	RSB	r8, r11, #0
	ADD	r8, r8, #1
	MOV	r1, #0x12
	B	ChooseYerColour
notANYone
	LDMFD	sp!, {r4-r12, pc}
bigger1
	CMP	r8, #1
	BEQ	couldnotfindit
	B	maybenot
ChooseYerColour
	LDR	r9, storedr6flu
	CMP	r9, #0
	BLE	notANYone

inChooseYerColour
	ADD	r9, r6, r3
	LDRB	r9, [r9, r11]	;  REM QUICK FIX...
	CMP	r9, #0x0A	;  REM ""
	CMPNE	r9, #0x09	;  REM numbers
	CMPNE	r9, #0x0F	;  REM numbers
	CMPNE	r9, #0x14	;  REM ""
	CMPNE	r9, #0x13	;  REM ""
	LDMEQFD	sp!, {r4-r12, pc}
	MOV	r9, #0
	ADD	r7, r6, r11
	ADD	r6, r7, r3
	LDR	r11, adrofrsix
lasdwAO
	ADD	r4, r7, r9
	CMP	r4, r11
	STRCSB	r1, [r6, r9]
	ADD	r9, r9, #1
	CMP	r9, r8
	BLT	lasdwAO
	MOV	r1, #0xEA00
	LDMFD	sp!, {r4-r12, pc}

Prefixbit
	RSBEQ	r10, r11, #0
	LDRB	r1, [r6]
	CMP	r1, #'.'
	ADDEQ	r10, r10, #1
	MOV	r1, #0x0D
	TEQ	r9, #141
	MOVEQ	r1, #0x10
	TEQ	r9, #140
	MOVEQ	r1, #0x15
	B	ChooseColour2
Prefixbit2A
	RSBEQ	r10, r11, #0
	LDRB	r1, [r6]
	CMP	r1, #'.'
	ADDEQ	r10, r10, #1
	MOV	r1, #0x0D
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0F
	B	ChooseColour2
gotexactmatch
	BL	CheckRoutine
	LDR	r1, storedr6flu
	CMP	r1, #0
	BLE	notANYone
	TEQ	r8, r10
	TEQEQ	r9, #141
	BEQ	Prefixbit
	TEQ	r8, r10
	TEQEQ	r9, #140
	BEQ	Prefixbit
	RSBEQ	r10, r11, #0
	MOV	r1, #0x0D

ChooseColour2
	CMP	r6, #0
	LDMMIFD	sp!, {r4-r12, pc}
	ADD	r9, r6, r3
	LDRB	r9, [r9, r11]	;  REM QUICK FIX...<eeek!>
	CMP	r9, #0x0A	;  REM ""
	CMPNE	r9, #0x09	;  REM numbers
	CMPNE	r9, #0x0F	;  REM numbers
	CMPNE	r9, #0x14	;  REM ""
	CMPNE	r9, #0x13	;  REM ""
	LDMEQFD	sp!, {r4-r12, pc}
	MOV	r9, #0
	ADD	r7, r6, r11
	ADD	r6, r7, r3
	LDR	r11, adrofrsix

lasdwA
	ADD	r4, r7, r9
	CMP	r4, r11
	BCC	beforesolhereargh
lasdwA1
	ADD	r4, r7, r9
	CMP	r4, r11
	STRCSB	r1, [r6, r9]
beforesolhereargh
	ADD	r9, r9, #1
	LDR	r4, cntcharback
	ADD	r4, r4, #1
	CMP	r9, r4
	BCS	colouringrapidexit
	CMP	r9, r8
	BLT	lasdwA
	CMP	r9, r10
	BLT	lasdwA1
colouringrapidexit
	MOV	r1, #0xEA00
	LDMFD	sp!, {r4-r12, pc}

ErrorSet2
		;  REM code is still here?
	MOV	r9, #0	;
	ADD	r6, r6, r3	;
	ADD	r6, r6, r11	;
	MOV	r10, #0x10	;
lasdwB
	LDRB	r1, [r6, r9]
	CMP	r1, #0xC	;  REM {} or error
	CMPNE	r1, #0xA	;  REM ""
	CMPNE	r1, #0x9	;  REM | Comment
	STRNEB	r10, [r6, r9]
	ADD	r9, r9, #1
	CMP	r9, r8
	BLT	lasdwB
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0F
	LDMFD	sp!, {r4-r12, pc}

		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

CheckRoutine
	ADD	r1, r12, r8
	SUB	r1, r1, #1
_altered_2
	LDRB	r9, [r1], #1
	CMP	r9, #'z'
	BLE	_altered_2
	TEQ	r9, #136	;  REM else
	MOVNE	PC,R14			; I think this brach is _always_ taken - cl
	TST	r2, #0x40000000
	LDMEQFD	sp!, {r4-r12, pc}
	TST	r2, #0x20000000
	LDMEQFD	sp!, {r4-r12, pc}
	BIC	r2, r2, #0xFC000000
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0D	;  REM dubious code... ???...

	BIC	r2, r2, #0x08000000
	MOV	r1, #0
	CMP	r9, #191
	ORREQ	r2, r2, #0x02000000
	STR	r1, regexpdelcharflg	; ?
	MOV	pc, lr


Data47
	DCD	0x0
Branch208
	LDR	r11, Data47
	MOV	pc, lr
;Branch210
;	STMFD	sp!, {r0, r1, lr}
;	LDR	r11, Data47
;	LDR	r0, [r8, #w_format]	;  REM w_format
;	AND	r0, r0, #0xFF
;	MVN	lr, #0
;	LDR	r1, [r11, #8]
;	TEQ	r0, r1
;	ADDEQ	lr, lr, #1
;	LDRNE	r1, [r11, #4]
;	TEQNE	r0, r1
;	ADDEQ	lr, lr, #1
;	ADDEQ	lr, lr, #1
;	LDMFD	sp!, {r0, r1, pc}
;	STMFD	sp!, {r11, lr}
;	LDR	r11, Data47
;	TEQ	r1, #0
;	BLEQ	Tk1frm12andret
;	LDMFD	sp!, {r11, pc}

localstorevalue
	DCD	0
BranchSave
	STMFD	sp!, {r1, r2, lr}
	FNcall	Zap_SaveFile
	LDMFD	sp!, {r1, r2, lr}
JustRun
	STMFD	sp!, {r0-r12, lr}
	MOV	r0, #6
	MOV	r3, #0x260
	SWI	XOS_Module
	BVS	totalfailure
	LDR	r0, prestoregap
	STR	r2, localstorevalue
	STR	r0, [r2], #4
	LDR	r1, [r9, #12]
	BL	OneA
	LDR	r0, localstorevalue
	SWI	XWimp_StartTask	;  REM "XOS_CLI"
	MOV	r0, #7
	LDR	r2, localstorevalue
	SWI	XOS_Module
totalfailure
	LDMFD	sp!, {r0-r12, pc}
OneA
	LDRB	r0, [r1], #1
	STRB	r0, [r2], #1
	CMP	r0, #0x20
	BCS	OneA
	MOV	r0, #0
	STRB	r0, [r2, #-1]
	MOV	pc, lr
prestoregap
	=	"Run "


		;   ************************************************
returnpressed
	STMFD	sp!, {lr}
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_StartOp
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	STMFD	sp!, {r0, r1, r2}
	MOV	r0, #0x81
	MOV	r1, #0xFE
	MOV	r2, #0xFF
	SWI	OS_Byte
	CMP	r1, #0xFF
	BEQ	TTFromMJE2
	MOV	r0, #0x81
	MOV	r1, #0xFF
	MOV	r2, #0xFF
	SWI	OS_Byte
	CMP	r1, #0xFF
	BEQ	TTFromMJE2
	LDMFD	sp!, {r0, r1, r2}
	BL	FromMJE28
	TEQ	r0, #'{'
	BNE	FromMJE2
	BL	FromMJE14
	MOV	r2, r0
	BL	FromMJE25
	ADD	r2, r2, r0
	STMFD	sp!, {r1, r2, r8-r10}
	MOV	r1, #1
	MOV	r9, #'|'
	BL	FromMJE27
	LDMFD	sp!, {r1, r2, r8-r10}
	SUB	r1, r1, #1
	BL	FromMJE14
	SUBS	r0, r2, r0
	BLE	FromMJE2
	STMFD	sp!, {r1, r8-r10}
	MOV	r5, r0
	BL	FromMJE33
	MOV	r4, r0
	BL	FromMJE32
	MOV	r6, r0
	ADR	r7, adrspaces
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
	LDMFD	sp!, {r1, r8-r10}
FromMJE2
	CMP	r1, #0
	BLE	FromMJE3
	MOV	r9, #'|'
	BL	FromMJE27
FromMJE3
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_StopOp
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	LDMFD	sp!, {pc}
TTFromMJE2
	LDMFD	sp!, {r0, r1, r2}
	B	FromMJE2
adrspaces
	=	"                                "
	DCD	0x00000000


		;   ************************************************
brackmatchchar
	STMFD	sp!, {lr}
	MOV	r1, #0
FromMJE4
	CMP	r1, r5
	BGE	FromMJE5
	LDRB	r0, [r7, r1]
	TEQ	r0, #'}'
	TEQNE	r0, #')'
	TEQNE	r0, #']'
	ADDNE	r1, r1, #1
	BNE	FromMJE4
	CMP	r5, #2
	ADDCS	r1, r1, #1
	BCS	FromMJE4
	BL	FromMJE6
	SUB	r5, r5, r1
	ADD	r7, r7, r1
	TEQ	r0, #'}'
	BLEQ	FromMJE7
	TEQ	r0, #')'
	BLEQ	FromMJE9
	TEQ	r0, #']'
	BLEQ	FromMJE10
	SUB	r5, r5, #1
	ADD	r7, r7, #1
	MOV	r1, #0
	B	FromMJE4
FromMJE5
	BL	FromMJE6
	LDMFD	sp!, {pc}

FromMJE6
	CMP	r1, #0
	MOVLE	pc, lr
	STMFD	sp!, {r1-r10, lr}
	MOV	r5, r1
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
	LDMFD	sp!, {r1-r10, pc}

FromMJE7
	STMFD	sp!, {r1-r10, lr}
	LDR	r0, [r10, #12]
	MOV	r1, #'{'
	MOV	r2, #'}'
	BL	FromMJE18
	BLT	FromMJE8
	BL	FromMJE11
	MOV	r9, #0x8C
	BL	FromMJE27
	BL	FromMJE15
	BL	FromMJE21
	BL	FromMJE23

FromMJE8
	MOV	r5, #1
	MOV	r9, #0x70
	BL	FromMJE27
	LDMFD	sp!, {r1-r10, pc}

FromMJE9
	STMFD	sp!, {r1-r10, lr}
	LDR	r0, [r10, #12]
	MOV	r1, #'('
	MOV	r2, #')'
	BL	FromMJE18
	BLEQ	FromMJE11
	MOV	r5, #1
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
	LDMFD	sp!, {r1-r10, pc}

FromMJE10
	STMFD	sp!, {r1-r10, lr}
	LDR	r0, [r10, #12]
	MOV	r1, #0x5B
	MOV	r2, #0x5D
	BL	FromMJE18
	BLEQ	FromMJE11
	MOV	r5, #1
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
	LDMFD	sp!, {r1-r10, pc}

FromMJE11
	STMFD	sp!, {r0-r7, lr}
	LDR	r4, [r10, #12]
	STR	r0, [r10, #12]
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_ReflectCaret
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	SWI	XOS_ReadMonotonicTime
	MOV	r3, r0
	BL	FromMJE26
	ADD	r3, r3, r0
FromMJE12
	MOV	r0, #0x98
	MOV	r1, #0
	SWI	XOS_Byte
	BCC	FromMJE13
	SWI	XOS_ReadMonotonicTime
	CMP	r0, r3
	BLT	FromMJE12
FromMJE13
	STR	r4, [r10, #12]
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_ReflectCaret
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	LDMFD	sp!, {r0-r7, pc}

FromMJE14
	LDR	r0, [r10, #12]
FromMJE15
	STMFD	sp!, {r1-r3, lr}
	MOV	r2, r0
	MOV	r9, #Zap_ConvFileOff
	BL	FromMJE27
	MOV	r1, r0
	MOV	r3, #0
FromMJE16
	CMP	r1, r2
	BGE	FromMJE17
	MOV	r0, r1
	ADD	r1, r1, #1
	BL	FromMJE29
	TEQ	r0, #' '
	ADDEQ	r3, r3, #1
	BEQ	FromMJE16
	LDRB	lr, [r8, #144]
	TEQ	r0, lr
	ADDEQ	r3, r3, #8
	BICEQ	r3, r3, #7
	BEQ	FromMJE16
FromMJE17
	MOV	r0, r3
	LDMFD	sp!, {r1-r3, pc}

FromMJE14A
	LDR	r0, [r10, #12]
FromMJE15A
	STMFD	sp!, {r1-r3, lr}
	MOV	r2, r0
	MOV	r9, #Zap_ConvFileOff
	BL	FromMJE27
	MOV	r1, r0
	MOV	r3, #0
FromMJE16A
	CMP	r1, r2
	BGE	FromMJE17A
	MOV	r0, r1
	ADD	r1, r1, #1
	BL	FromMJE29
	CMP	r0, #' '
	ADDCS	r3, r3, #1
	BCS	FromMJE16A
	LDRB	lr, [r8, #144]
	TEQ	r0, lr
	ADDEQ	r3, r3, #8
	BICEQ	r3, r3, #7
	BEQ	FromMJE16A
FromMJE17A
	MOV	r0, r3
	LDMFD	sp!, {r1-r3, pc}

FromMJE18
	STMFD	sp!, {r3, r4, lr}
	MOV	r3, r0
	MOV	r4, #1
FromMJE19
	SUBS	r3, r3, #1
	BLT	FromMJE20
	MOV	r0, r3
	BL	FromMJE29
	TEQ	r0, r2
	ADDEQ	r4, r4, #1
	BEQ	FromMJE19
	TEQ	r0, r1
	BNE	FromMJE19
	SUBS	r4, r4, #1
	BNE	FromMJE19
FromMJE20
	MOV	r0, r3
	LDMFD	sp!, {r3, r4, pc}

FromMJE21
	STMFD	sp!, {r0, r1, lr}
	MOV	r1, r0
FromMJE22
	BL	FromMJE14
	CMP	r0, r1
	LDMLEFD	sp!, {r0, r1, pc}
	BL	FromMJE28
	TEQ	r0, #0x20
	LDRNEB	lr, [r8, #144]
	TEQNE	r0, lr
	LDMNEFD	sp!, {r0, r1, pc}
	LDR	r0, [r10, #12]
	TEQ	r0, #0
	LDMEQFD	sp!, {r0, r1, pc}
	STMFD	sp!, {r1-r10}
	MOV	r5, #1
	LDR	r6, [r8, #40]
	MOV	r7, #0
	MOV	r9, #Zap_CallGivenMode
	BL	FromMJE27
	LDMFD	sp!, {r1-r10}
	B	FromMJE22

cntrtmp
	DCD	0

FromMJE23
	STMFD	sp!, {r0, r1, lr}
	MOV	r1, #0
	STR	r1, cntrtmp
	MOV	r1, r0
FromMJE24
	BL	FromMJE14A
	SUBS	r0, r1, r0
	;  REM now r0 = indentation of relevant line...
	LDMLEFD	sp!, {r0, r1, pc}
	STMFD	sp!, {r0-r11}
	MOV	r2, r0
	MOV	r0, #1
	LDR	r1, [r10, #12]
	CMP	r2, #0x20
	MOVGE	r2, #0x20
	ADRL	r3, adrspaces
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_Command
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	LDR	r1, cntrtmp
	ADD	r1, r1, #1
	STR	r1, cntrtmp
	CMP	r1, #8
	LDMFD	sp!, {r0-r11}
	BCC	FromMJE24
	LDMFD	sp!, {r0, r1, pc}

FromMJE25
	;  REM get indent
	ADRL	r0, w_formmb
	LDR	r0, [r0, #8]
	TST	r0, #(1 << 19)
	AND	r0, r0, #0xFF
	MOVEQ	r0, #0
	MOV	pc, lr

FromMJE26
	;  REM get delay
	ADRL	r0, w_formmb
	LDR	r0, [r0, #8]
	TST	r0, #(1 << 18)
	AND	r0, r0, #0xFF00
	MOV	r0, r0, LSR #8
	MOVEQ	r0, #0
	MOV	pc, lr

;Zap_insertstuff
;	STMFD	sp!, {r7, lr}
;	MOV	r0, #1
;	LDR	lr, [r12, #0]
;	ADD	lr, lr, #Zap_DoCommand
;	STMFD	sp!, {lr}
;	MOV	lr, pc
;	LDMFD	sp!, {pc}
;	LDMFD	sp!, {r7, pc}

FromMJE27
	STMFD	sp!, {r9, r11, lr}
	LDR	r9, [r11, #4]	;  REM mode word...
	LDMFD	sp!, {r11}
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_BaseMode
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	LDMFD	sp!, {r11, pc}

FromMJE28
	LDR	r0, [r10, #12]
	SUBS	r0, r0, #1
	MOVLT	r0, #0
	MOVLT	pc, lr
FromMJE29
	STMFD	sp!, {lr}
	LDR	lr, [r9, #52]
	CMP	r0, lr
	LDRCS	lr, [r9, #60]
	ADDCS	r0, r0, lr
	LDR	lr, [r9, #0]
	LDRB	r0, [lr, r0]
	LDMFD	sp!, {pc}

;FromMJE30
;	LDRB	r2, [r1], #1
;	CMP	r2, #0x20
;	MOVCC	r2, #0
;	STRB	r2, [r0], #1
;	BCS	FromMJE30
;	SUB	r0, r0, #1
;	MOVS	pc, lr
;	MOV	r1, r0
;	MOV	r0, #0
;FromMJE31
;	LDRB	r2, [r1, r0]
;	ADD	r0, r0, #1
;	CMP	r2, #0x20
;	BCS	FromMJE31
;	MOVS	pc, lr

FromMJE32
	TEQ	r8, #0
	LDRNE	r0, [r8, #40]
	MOVNE	pc, lr
	STMFD	sp!, {r1, lr}
	MOV	r1, #3
	LDR	lr, [r12, #0]
	ADD	lr, lr, #0x48
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	LDMFD	sp!, {r1, pc}

FromMJE33
	TEQ	r8, #0
	LDRNE	r0, [r8, #92]
	MOVNE	pc, lr
	STMFD	sp!, {r1, lr}
	MOV	r1, #2
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_ReadVar
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	LDMFD	sp!, {r1, pc}

GetModeWord
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
	LDR	r2, [r12, #0]
	ADD	r2, r2, #Zap_GetModeWord
	MOV	lr, pc
	MOV	pc, r2
	MOV	r7, r0
	LDMFD	sp!, {r0-r2, pc}

;PutModeWord
;	STMFD	sp!, {r0-r2, lr}
;	LDR	r1, [r11, #4]
;	LDR	r2, [r12, #0]
;	ADD	r2, r2, #Zap_PutModeWord
;	MOV	lr, pc
;	MOV	pc, r2
;	LDMFD	sp!, {r0-r2, pc}
;	STMFD	sp!, {r0-r2, lr}	;  REM ????
;	LDR	r1, [r11, #8]
;	B	FromMJE35
;	STMFD	sp!, {r0-r2, lr}
;	LDR	r1, [r11, #4]
;	B	FromMJE35
;	STMFD	sp!, {r0-r2, lr}
;	LDR	r1, [r11, #0]
;FromMJE35
;	MOV	r0, r7
;	LDR	r2, [r12, #0]
;	ADD	r2, r2, #0x0168
;	MOV	lr, pc
;	MOV	pc, r2
;	LDMFD	sp!, {r0-r2, pc}



tohaveajollygoodtime
	STMFD	sp!, {lr}
	BL	checkbackwardsnow
	LDR	lr, [r9, #f_ptr]
	LDR	r0, [r9, #f_splito]
	ADD	r0, r0, lr
	CMP	r7, r0
	LDREQ	r0, [r9, #f_splits]
	ADDEQ	r0, r0, r7
	MOVNE	r0, r7
	LDR	r1, [r9, #f_bufl]
	ADD	r1, lr, r1
	CMP	r0, r1
	LDRCCB	r0, [r0]	;  Hmm...(Beyond end...?)
	AND	r1, r12, #0xFF	;  REM end character... yes! At last...
	TEQ	r0, r1	;  REM  ! the same length as the width
	ADDEQ	r7, r7, #1
	ADDEQ	r11, r11, #1
	LDMFD	sp!, {lr}
	B	tohaveajollygoodback
tocheckbackwardsnow
	ADD	r11, r11, #1	;  REM This code only executed if <CR>...
	BIC	r2, r2, #0xCF000000	;  REM START OF LINE FLAGS...xxx
	BIC	r2, r2, #0x00F00000
	STMFD	sp!, {lr}
	BL	checkbackwardsnow
	LDMFD	sp!, {lr}
	B	backcheckbackwardsnow
checkbackwardsnow
	STMFD	sp!, {r0, r2, lr}
	CMP	r0, #'@'
	BCC	endcheckbackwardsnow
	CMP	r0, #'{'
	BCS	endcheckbackwardsnow
alltizfine
	ADD	r7, r7, #1
	BL	TableChk2
	SUB	r7, r7, #1
endcheckbackwardsnow
	LDMFD	sp!, {r0, r2, pc}


; ------------ Buttons code -----------------

callmiscentrypt
	STMFD	sp!, {r0-r12, lr}
	ADRL	lr, w_formmb
	LDR	lr, [lr, #8]
	ANDS	lr, lr, #1 << 20
	LDMEQFD	sp!, {r0-r12, pc}
	ADRL	r0, buttonsamed2
	FNcall	Zap_TestModeName
	CMP	r0, #1
	LDMMIFD	sp!, {r0-r12, pc}
	MOV	r0, #18
	ADR	r1, buttonsamed
	SWI	XOS_Module
	LDMMIFD	sp!, {r0-r12, pc}
	ADD	r3, r3, #0x2C
	STR	r3, alocaljumper
	LDMFD	sp, {r0-r12, lr}
	MOV	lr, pc
	LDR	pc, alocaljumper
	MOV	r0, r0
	LDMFD	sp!, {r0-r12, pc}
gotoopenwindow
	STMFD	sp!, {lr}
	BL	openwindowroutine
	CMP	r0, #0	;  REM If there was a pane then no problem
	LDMNEFD	sp!, {pc}	;  REM just return...
	BL	gomakepanehappen	;  REM ...otherwise try to make one...
	BL	openwindowroutine	;  REM ...and redraw it...
	LDMFD	sp!, {pc}
openwindowroutine
	STMFD	sp!, {r0-r12, lr}
	ADRL	lr, w_formmb
	LDR	lr, [lr, #8]
	TST	lr, #(1 << 20)
	TSTEQ	lr, #(1 << 31)
	LDMEQFD	sp!, {r0-r12, pc}
	BL	trytoloadmode
	ADRL	r0, buttonsamed2
	FNcall	Zap_TestModeName
	CMP	r0, #1
	BMI	_altered_3
	MOV	r0, #18
	ADR	r1, buttonsamed
	SWI	XOS_Module
	BVS	_altered_3
	ADD	r3, r3, #0x28
	STR	r3, alocaljumper
	LDMFD	sp!, {r0-r12, lr}
	ADRL	r2, w_formmb
	LDR	r2, [r2, #8]
	ANDS	r2, r2, #1 << 31
	MOVNE	r2, #0xFF
	LDR	pc, alocaljumper
nojuice2
	LDMFD	sp, {r0-r12, lr}
	ADRALL	r9, modenumberlocal
	LDR	r9, [r9]
	MOV	r11, #e_openwindow
	FNcall	Zap_BaseMode
	LDMFD	sp!, {r0-r12, pc}
gomakepanehappen
	STMFD	sp!, {r1-r12, lr}
	STMFD	sp!, {r1-r11}
	ADRL	r1, modenumberlocal
	LDRB	r1, [r1]
	FNcall	Zap_GetModeWord
	LDMFD	sp!, {r1-r11}
	LDR	r0, [r0, #0x0C]
	STR	r0, alocaljumper
	ANDS	r0, r0, #1 << 20
	LDMEQFD	sp!, {r1-r12, pc}
	ADR	r0, buttonsamed2
	FNcall	Zap_TestModeName
	CMP	r0, #0
	BMI	nojuice1
backinthethickofit
	MOV	r0, #18
	ADR	r1, buttonsamed
	SWI	XOS_Module
	LDMVSFD	sp!, {r0-r12, pc}
	ADD	r10, r3, #0x24
	LDR	r0, alocaljumper
	MOV	r4, #0
	ANDS	r1, r0, #1 << 28
	ORRNE	r4, r4, #8
	ANDS	r1, r0, #1 << 29
	ORRNE	r4, r4, #4
	ANDS	r1, r0, #1 << 30
	ORRNE	r4, r4, #2
	LDR	r0, adrofscri
	CMP	r0, #0
	BLEQ	getthethreeelements
	LDMVSFD	sp!, {r1-r12, pc}
	MOV	r7, #0
	MOV	r6, #0
	LDR	r5, adrofmenu
	LDR	r3, adrofscri
	LDR	r2, adroftemp
	LDR	r1, adrofspri
	MOV	r0, #0
	MOV	lr, pc
	MOV	pc, r10
	MOV	r0, r0
	LDMFD	sp!, {r1-r12, pc}
buttonsamed
	=	"Zap"
buttonsamed2
	=	"Buttons", 0, "", 0, ""
alocaljumper
	DCD	0
nojuice1
	BL	trytoloadmode
	CMP	r0, #0
	BPL	backinthethickofit
	LDMFD	sp!, {r0-r12, pc}
trytoloadmode
	STMFD	sp!, {lr}
	ADR	r0, buttonsamed2
	FNcall	Zap_ModeNumber
	LDMFD	sp!, {pc}
destroyanypanes
	STMFD	sp!, {r0-r12, lr}
	ADR	r0, buttonsamed2
	FNcall	Zap_TestModeName
	CMP	r0, #0
	BMI	nojuice4
	MOV	r0, #18
	ADR	r1, buttonsamed
	SWI	XOS_Module
	LDMVSFD	sp!, {r0-r12, pc}
	ADR	r0, buttndelhere
	MOV	R1,#0
	FNcall	Zap_CommandString
nojuice4
	LDMFD	sp!, {r0-r12, pc}
closeanypanes
	STMFD	sp!, {r0-r12, lr}
	ADR	r0, buttonsamed2
	FNcall	Zap_TestModeName
	CMP	r0, #0
	BMI	nojuice4
	MOV	r0, #18
	ADR	r1, buttonsamed
	SWI	XOS_Module
	LDMVSFD	sp!, {r0-r12, pc}
	ADR	r0, buttnclohere
	MOV	R1,#0
	FNcall	Zap_CommandString
	LDMFD	sp!, {r0-r12, pc}
buttndelhere
	=	"BUTTONS_DELETE",0,0
buttnclohere
	=	"BUTTONS_CLOSE",0,0,0
_altered_3
	LDMFD	sp, {r0-r12, lr}
	ADRALL	r9, modenumberlocal
	LDR	r9, [r9]
	MOV	r11, #e_openwindow
	FNcall	Zap_BaseMode
	LDMFD	sp!, {r0-r12, pc}


		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
getthethreeelements
	STMFD	sp!, {r1-r4, lr}
	ADR	r1, markcmdpath
	BL	loadandretptr
	STRVC	r0, adrofscri
	BLVC	changeLFto00
	ADRVC	r1, marksprpath
	BLVC	loadandretptr2
	ADRVC	r1, marktempath
	BLVC	loadandretptr
	STRVC	r0, adroftemp
	BLVC	loadmenuifrequired
	LDMFD	sp!, {r1-r4, pc}
loadmenuifrequired
	STMFD	sp!, {lr}
	LDR	r0, adrofmenu
	CMP	r0, #0
	LDMNEFD	sp!, {pc}
	ADR	r1, markmenpath
	BL	loadandretptr
	STR	r0, adrofmenu
	LDMFD	sp!, {pc}
loadandretptr
	FNJSR	"r1-r5"
	MOV	r0, #5
	SWI	OS_File
	FNRTS	VS
	STR	r4, tempS2
	ADD	r0, r4, #7
	BIC	r0, r0, #3
	FNcall	Zap_Claim
	STRVC	r0, tempS1
	MOVVC	r3, #0
	MOVVC	r2, r0
	MOVVC	r0, #255
	SWIVC	OS_File
	FNRTS	VS
	LDR	r0, tempS1
	LDR	r1, tempS2
	MOV	r2, #0
	B	zerotest_sja
zeroloop_sja
	STRB	r2, [r0, r1]
	ADD	r1, r1, #1
zerotest_sja
	TST	r1, #3
	BNE	zeroloop_sja
	STR	r2,[ r0, r1]
	FNRTS
loadandretptr2
	STMFD	sp!, {r1-r5, lr}
	MOV	r0, #5
	SWI	XOS_File
	LDMVSFD	sp!, {r1-r5, pc}
	BIC	r0, r4, #3
	ADD	r0, r0, #0x10
	FNcall	Zap_Claim
	STR	r0, adrofspri
	ADD	r4, r4, #5
	STR	r4, [r0]
	MOV	r3, #0
	ADD	r2, r0, #4
	MOV	r0, #255
	SWI	XOS_File
	LDMFD	sp!, {r1-r5, pc}
tempS1
	DCD	0
tempS2
	DCD	0
adrofmenu
	DCD	0
adroftemp
	DCD	0
adrofspri
	DCD	0
adrofscri
	DCD	0
markcmdpath
	=	"<ZapPerl$Scripts>", 0
	ALIGN
marksprpath
	=	"<ZapPerl$Sprites>", 0
	ALIGN
marktempath
	=	"<ZapPerl$Templates>", 0
	ALIGN
markmenpath
	=	"<ZapPerl$Menus>", 0
	ALIGN

changeLFto00
	LDR	r1, [r0]
	CMP	r1, #0
	MOVEQ	pc, lr
	AND	r2, r1, #0xFF
	CMP	r2, #0x0A
	BICEQ	r1, r1, #0xFF
	AND	r2, r1, #0xFF00
	CMP	r2, #0x0A00
	BICEQ	r1, r1, #0xFF00
	AND	r2, r1, #0xFF0000
	CMP	r2, #0x0A0000
	BICEQ	r1, r1, #0xFF0000
	AND	r2, r1, #0xFF000000
	CMP	r2, #0x0A000000
	BICEQ	r1, r1, #0xFF000000
	STR	r1, [r0], #4
	B	changeLFto00


titlestrD
	=	"Delay",0
	ALIGN

; SETDELAY command
	DCD	0x2000F
CmdPerlSetDelay
	;  REM csdelay...
	CMP	r2, #17
	BEQ	providedftval
	STMFD	sp!, {lr}
	MOV	r6, r0
	ADRL	r1, modenumberlocal
	LDR	r1, [r1]
	STMFD	sp!, {r1-r11}
	FNcall	Zap_GetModeWord
	LDMFD	sp!, {r1-r11}
	LDRB	r6, [r6]
	STRB	r6, [r0, #0xD]
	LDMFD	sp!, {pc}
providedftval
	CMP	r0, #0
	ADREQ	r0, titlestrD
	MOVEQ	pc, lr
	CMP	r0, #2
	MOVEQ	r0, #4
	MOVEQ	pc, lr
	CMP	r0, #1
	MOVNE	pc, lr
	STMFD	sp!, {r1-r12, lr}
	ADRL	r1, modenumberlocal
	LDR	r1, [r1]
	STMFD	sp!, {r1-r11}
	FNcall	Zap_GetModeWord
	LDMFD	sp!, {r1-r11}
	LDRB	r1, [r0, #0xD]
	ADR	r0, adrofthisbyte
	STR	r1, [r0]
endherenow
	ADR	r0, adrofthisbyte
	LDMFD	sp!, {r1-r12, pc}
adrofthisbyte
	DCD	0x0


; SETINDENT command
	DCD	0x2000F
CmdPerlSetIndent
	CMP	r2, #17
	BEQ	proviindftval
	STMFD	sp!, {lr}
	MOV	r6, r0
	ADRL	r1, modenumberlocal
	LDR	r1, [r1]
	STMFD	sp!, {r1-r11}
	FNcall	Zap_GetModeWord
	LDMFD	sp!, {r1-r11}
	LDRB	r6, [r6]
	STRB	r6, [r0, #0xC]
	LDMFD	sp!, {pc}
proviindftval
	CMP	r0, #0
	ADREQ	r0, titlestrI
	MOVEQ	pc, lr
	CMP	r0, #2
	MOVEQ	r0, #4
	MOVEQ	pc, lr
	CMP	r0, #1
	MOVNE	pc, lr
	STMFD	sp!, {r1-r12, lr}
	ADRL	r1, modenumberlocal
	LDR	r1, [r1]
	STMFD	sp!, {r1-r11}
	FNcall	Zap_GetModeWord
	LDMFD	sp!, {r1-r11}
	LDRB	r1, [r0, #0xC]
	ADR	r0, adrofthisbyte
	STR	r1, [r0]
_altered_4
	ADR	r0, adrofthisbyte
	LDMFD	sp!, {r1-r12, pc}
titlestrI
	=	"Depth",0
	ALIGN


; FLAGSTOGGLE command
	DCD	0x8017
Cmdhtmlflagstoggle
	STMFD	sp!, {lr}
	LDR	r10, [r0]
	ADRL	r1, modenumberlocal
	LDR	r1, [r1]
	STMFD	sp!, {r1-r11}
	FNcall	Zap_GetModeWord
	LDMFD	sp!, {r1-r11}
	MOV	r6, r0
	LDR	r7, [r6, #0xC]
	CMP	r2, #15
	BEQ	tickquery
	MOV	r5, #0
	AND	r1, r10, #0xFF
	BL	execute
	MOV	r1, r10, LSR #8
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	MOV	r1, r10, LSR #16
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	MOV	r1, r10, LSR #24
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	STR	r7, [r6, #0xC]
	ADRL	r0, w_formmb
	STR	r7, [r0, #8]
	CMP	r8, #0
	LDMEQFD	sp!, {pc}
	ANDS	r0, r5, #2
	BLNE	sortbbout
	ANDS	r0, r5, #0x10
	BLNE	sortwwout3
	ANDS	r0, r5, #8
	BLNE	sortwwout2
	ANDS	r0, r5, #4
	BLNE	sortwwout
	ANDS	r0, r5, #1
	BLNE	sortbuttonsout
	LDMFD	sp!, {pc}
execute
	AND	r2, r1, #0x1F
	CMP	r2, #20
	ORREQ	r5, r5, #1
	CMP	r2, #28
	CMPNE	r2, #29
	CMPNE	r2, #30
	ORREQ	r5, r5, #2	;  REM only 2 needed...?
	CMP	r2, #31
	ORREQ	r5, r5, #0x1C
	CMP	r2, #27
	CMPNE	r2, #24
	ORREQ	r5, r5, #0x08
	MOV	r3, #1
	MOV	r3, r3, LSL r2
	MOV	r2, #0
	MOV	r4, #0
	MOV	r1, r1, LSR #5
	AND	r1, r1, #3
	CMP	r1, #1
	MOVEQ	r2, r3
	CMP	r1, #2
	MOVEQ	r4, r3
	BIC	r7, r7, r2
	ORR	r7, r7, r4
	EOR	r7, r7, r3
	MOV	pc, lr
tickquery
	AND	r2, r10, #0x1F
	MOV	r3, #1
	MOV	r3, r3, LSL r2
	TST	r7, r3
	MOVNE	r0, #1
	MOVEQ	r0, #0
	LDMFD	sp!, {pc}
sortwwout
	STMFD	sp!, {r5, lr}
	BL	tmt_updatewindow
	LDMFD	sp!, {r5, pc}
sortwwout2
	STMFD	sp!, {r5, lr}
	FNcall	Zap_SaveWinStatus
	FNcall	Zap_NewWinStatus	;
	LDMFD	sp!, {r5, pc}
sortwwout3
	STMFD	sp!, {r5, lr}
	MOV	r0, #7
	BL	callmiscentrypt
	LDMFD	sp!, {r5, pc}
sortbbout
	STMFD	sp!, {r5, lr}
	ADR	r4, verylocalR8tmp
	STR	r7, [r4, #4]
	FNcall	Zap_GetWindOff
	STR	r0, [r4]
	MOV	r0, #2
	ADR	r1, sortwindowsplease
	BL	callmiscentrypt
	LDMFD	sp!, {r5, pc}
tmt_updatewindow
	STMFD	sp!, {lr}
	ADR	r0, tmtupdwstr
	MOV	R1,#0
	FNcall	Zap_CommandString
	LDMFD	sp!, {pc}
tmtupdwstr
	=	"UPDATEWINDOW",0
	ALIGN
sortbuttonsout
	STMFD	sp!, {r5, lr}
	ANDS	r0, r7, #(1 << 20)
	BLEQ	closeanypanes	;  REM buttons have been toggled off
	ANDS	r0, r7, #(1 << 20)
	LDMEQFD	sp!, {r5, pc}
	BL	gomakepanehappen	;  REM buttons have been toggled on
	BL	gotoopenwindow	;  REM Redraws the BBs - has to be done
	BL	gotoopenwindow	;  REM twice - due to the first such
		;  REM call after an open is ignored.
	LDMFD	sp!, {r5, pc}

verylocalR8tmp
	DCD	0
	DCD	0
sortwindowsplease
	STMFD	sp!, {r0-r12, lr}
	LDR	r0, [r11, #b_window]
	LDR	r10, verylocalR8tmp
	CMP	r10, r0
	LDMNEFD	sp!, {r0-r12, pc}
	LDR	r0, [r11, #b_flags]
	LDR	r5, verylocalR8tmp + 4
	BIC	r0, r0, #0xE
	TST	r5, #1 << 30
	ORRNE	r0, r0, #2
	TST	r5, #1 << 29
	ORRNE	r0, r0, #4
	TST	r5, #1 << 28
	ORRNE	r0, r0, #8
	STR	r0, [r11, #b_flags]
	LDMFD	sp!, {r0-r12, pc}
AlphaIndex
	=	10,"Greetings from The Mandala Centre."
	=	10,"Please feel free place any additional commands in the space provided"
	ALIGN

		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	DCD	0x2A2A0A2E
TableHere
	=	"abs |"
	=	"accept |"
	=	"add |"
	=	"aelemfast |"
	=	"aelem |"
	=	"alarm |"
	=	"andassign |"
	=	"and |"
	=	"anoncode |"
	=	"anonhash |"
	=	"anonlist |"
	=	"ARGV "
	=	"aslice |"
	=	"array "
	=	"aassign |"
	=	"atan2 |"
	=	"AUTOLOAD "
	=	"av2arylen |"
	=	"BEGIN "
	=	"backtick |"
	=	"bind |"
	=	"binmode |"
	=	"bitwise "
	=	"bit_and |"
	=	"bit_or |"
	=	"bit_xor |"
	=	"bless |"
	=	"break |"
	=	"caller |"
	=	"char "
	=	"chdir |"
	=	"chmod |"
	=	"chomp |"
	=	"chop |"
	=	"chown |"
	=	"chr |"
	=	"chroot |"
	=	"closedir |"
	=	"close |"	;  ?
	=	"cmp |"
	=	"complement |"
	=	"concat |"
	=	"cond_expr |"
	=	"connect |"
	=	"const "
	=	"continue |"
	=	"CORE "
	=	"cos |"
	=	"crypt |"
	=	"DATA "
	=	"dbmclose |"
	=	"dbmopen |"
	=	"dbstate |"
	=	"default |"
	=	"defined |"
	=	"define |"
	=	"delete |"
	=	"DESTROY "
	=	"die |"
	=	"divide |"
	=	"dofile |"
	=	"dump |"
	=	"do |"
	=	"each |"
	=	"else |"
	=	"elsif |"
	=	"egrent |"
	=	"ehostent |"
	=	"enum "
	=	"endgrent |"
	=	"endhostent |"
	=	"endnetent |"
	=	"endprotoent |"
	=	"endpwent |"
	=	"endservent |"
	=	"END "
	=	"enetent |"
	=	"entereval |"
	=	"entertry |"
	=	"enteriter |"
	=	"enterloop |"
	=	"enterwrite |"
	=	"entersub |"
	=	"enter |"
	=	"eof |"
	=	"EOF "
	=	"eprotoent |"
	=	"epwent |"
	=	"eq |"
	=	"eservent |"
	=	"evalonce |"
	=	"eval |"
	=	"exec |"
	=	"exists |"
	=	"exit |"
	=	"exp |"
	=	"EXT "
	=	"fcntl |"
	=	"fileno |"
	=	"flip |"
	=	"flop |"
	=	"flock |"
	=	"foreach |"
	=	"for |"
	=	"fork |"
	=	"format |"
	=	"formline |"
	=	"ft |"
	=	"ftrread |"
	=	"ftrwrite |"
	=	"ftrexec |"
	=	"fteread |"
	=	"ftewrite |"
	=	"fteexec |"
	=	"ftis |"
	=	"fteowned |"
	=	"ftrowned |"
	=	"ftzero |"
	=	"ftsize |"
	=	"ftmtime |"
	=	"ftatime |"
	=	"ftctime |"
	=	"ftsock |"
	=	"ftchr |"
	=	"ftblk |"
	=	"ftfile |"
	=	"ftdir |"
	=	"ftpipe |"
	=	"ftlink |"
	=	"ftsuid |"
	=	"ftsgid |"
	=	"ftsvtx |"
	=	"fttty |"
	=	"fttext |"
	=	"ftbinary |"
	=	"getc |"
	=	"getgrent |"
	=	"getgrgid |"
	=	"getgrnam |"
	=	"gethostbyaddr |"
	=	"gethostbyname |"
	=	"gethostent |"
	=	"getlogin |"
	=	"getnetbyaddr |"
	=	"getnetbyname |"
	=	"getnetent |"
	=	"getpeername |"
	=	"getpgrp |"
	=	"getppid |"
	=	"getpriority |"
	=	"getprotobyname |"
	=	"getprotobynumber |"
	=	"getprotobyent |"
	=	"getprotoent |"
	=	"getpwent |"
	=	"getpwnam |"
	=	"getpwuid |"
	=	"getservbyname |"
	=	"getservbyport |"
	=	"getservent |"
	=	"getsockname |"
	=	"getsockopt |"
	=	"ge |"
	=	"ggrent |"
	=	"ggrgid |"
	=	"ggrnam |"
	=	"ghbyname |"
	=	"ghbyaddr |"
	=	"ghostent |"
	=	"glob |"
	=	"gmtime |"
	=	"gnbyname |"
	=	"gnbyaddr |"
	=	"gnetent |"
	=	"goto |"
	=	"gpbyname |"
	=	"gpbynumber |"
	=	"gprotoent |"
	=	"gpwnam |"
	=	"gpwent |"
	=	"gpwuid |"
	=	"grep |"
	=	"gsbyname |"
	=	"gsbyport |"
	=	"grepstart |"
	=	"grepwhile |"
	=	"gservent |"
	=	"gsockopt |"
	=	"gt |"
	=	"gvsv |"
	=	"gv |"
	=	"HEAD "
	=	"helem |"
	=	"hex |"
	=	"hslice |"
	=	"if |"
	=	"index |"
	=	"integer "
	=	"int |"
	=	"ioctl |"
	=	"import |"
	=	"iter |"
	=	"i_add |"
	=	"i_divide |"
	=	"i_eq |"
	=	"i_ge |"
	=	"i_gt |"
	=	"i_le |"
	=	"i_lt |"
	=	"i_modulo |"
	=	"i_multiply |"
	=	"i_ncmp |"
	=	"i_negate |"
	=	"i_ne |"
	=	"i_postinc |"
	=	"i_postdec |"
	=	"i_preinc |"
	=	"i_predec |"
	=	"i_subtract |"
	=	"join |"
	=	"keys |"
	=	"kill |"
	=	"known "
	=	"KW "
	=	"last |"
	=	"lcfirst |"
	=	"lc |"
	=	"leaveloop |"
	=	"leaveeval |"
	=	"leavesub |"
	=	"leavetry |"
	=	"leavewrite |"
	=	"leave |"
	=	"left_shift |"
	=	"le |"
	=	"length |"
	=	"lineseq |"
	=	"line |"
	=	"link |"
	=	"listen |"
	=	"list |"
	=	"localtime |"
	=	"local |"	;  ?
	=	"log |"
	=	"lslice |"
	=	"lstat |"
	=	"lt |"
	=	"mapstart |"
	=	"mapwhile |"
	=	"map |"
	=	"match |"
	=	"method |"
	=	"MINI "
	=	"mkdir |"
	=	"modulo |"
	=	"msgctl |"
	=	"msgget |"
	=	"msgrcv |"
	=	"msgsnd |"
	=	"multiply |"
	=	"MYDIR "
	=	"my |"
	=	"m |"
	=	"ncmp |"
	=	"negate |"
	=	"ne |"
	=	"nextstate |"
	=	"next |"
	=	"not |"
	=	"no |"
	=	"null "
	=	"numeric "
	=	"oct |"
	=	"OC "
	=	"orassign |"
	=	"ord |"
	=	"or |"
	=	"opendir |"
	=	"open_dir |"
	=	"open |"
	=	"OP "
	=	"OUTFILE "
	=	"pack |"
	=	"package |"
	=	"padany |"
	=	"padav |"
	=	"padhv |"
	=	"padsv |"
	=	"pipe_op |"
	=	"pipe |"
	=	"pop |"
	=	"postinc |"
	=	"postdec |"
	=	"pos |"
	=	"pow |"
	=	"preinc |"
	=	"prototype |"
	=	"predec |"
	=	"printf |"
	=	"print |"
	=	"private "
	=	"prtf |"
	=	"pushmark |"
	=	"pushre |"
	=	"push |"
	=	"qq |"
	=	"quotemeta |"
	=	"qw |"
	=	"qx |"
	=	"q |"
	=	"rand |"
	=	"range |"
	=	"rcatline |"	;  REM 3...
	=	"readc |"
	=	"readdir |"
	=	"readline |"
	=	"readlink |"
	=	"readpipe |"
	=	"read |"
	=	"recv |"
	=	"redo |"
	=	"refgen |"
	=	"ref |"
	=	"regcmaybe |"
	=	"regcomp |"
	=	"regexp "
	=	"reg |"
	=	"rename |"
	=	"repeat |"
	=	"require |"
	=	"reset |"
	=	"return |"
	=	"reverse |"
	=	"rewinddir |"
	=	"right_shift |"
	=	"rindex |"
	=	"rmdir |"
	=	"rv2av |"
	=	"rv2cv |"
	=	"rv2hv |"
	=	"rv2gv |"
	=	"rv2sv |"
	=	"safe "
	=	"scmp |"
	=	"sassign |"
	=	"scalar |"
	=	"schomp |"
	=	"schop |"
	=	"scmp |"
	=	"scope |"
	=	"seekdir |"
	=	"seek |"
	=	"select |"
	=	"semget |"
	=	"semctl |"
	=	"semop |"
	=	"send |"	;  REM 3	=	"seq |"
	=	"setgrent |"
	=	"setpwent |"
	=	"setnetent |"
	=	"setppid |"
	=	"sethostent |"
	=	"setpgrp |"
	=	"setpriority |"
	=	"setprotoent |"
	=	"setpwent |"
	=	"setservent |"
	=	"setsockopt |"
	=	"sge |"
	=	"sgrent |"
	=	"sgt |"
	=	"shift |"
	=	"shmget |"
	=	"shmctl |"
	=	"shmread |"
	=	"shmwrite |"
	=	"shutdown |"
	=	"shostent |"
	=	"sin |"
	=	"sleep |"
	=	"sle |"
	=	"slt |"
	=	"sne |"	;  ?
	=	"snetent |"
	=	"socketpair |"
	=	"socket |"
	=	"sockpair |"
	=	"sort |"
	=	"SOURCEDIR "
	=	"stdin |"
	=	"stdout |"
	=	"stderr |"
	=	"STDIN "
	=	"STDOUT "
	=	"STDERR "
	=	"spool |"
	=	"spaceship "
	=	"splice |"
	=	"split |"
	=	"sprintf |"
	=	"sprotoent |"
	=	"spwent |"
	=	"sqrt |"
	=	"srand |"
	=	"srefgen |"	;  ...
	=	"sref |"	;  ...
	=	"sselect |"
	=	"sservent |"
	=	"ssockopt |"
	=	"stat |"
	=	"stringify |"
	=	"string "
	=	"stub "
	=	"study |"
	=	"substr |"
	=	"substcont |"
	=	"subst |"
	=	"subtract |"
	=	"sub |"
	=	"sv2len |"
	=	"symlink |"
	=	"syscall |"
	=	"sysread |"
	=	"sysopen |"
	=	"sysseek |"
	=	"system |"
	=	"syswrite |"
	=	"s ¿"
	=	"TAIL "
	=	"telldir |"
	=	"tell |"
	=	"Test |"
	=	"Then |"
	=	"tie |"
	=	"tied |"
	=	"times |"
	=	"time |"
	=	"tms |"
	=	"trans |"
	=	"truncate |"
	=	"tr ¿"
	=	"TYPEDEF |"
	=	"U32 "
	=	"ucfirst |"
	=	"uc |"
	=	"umask |"
	=	"undef |"
	=	"unless |"
	=	"unlink |"
	=	"unpack |"
	=	"unshift |"
	=	"unstack |"
	=	"untie |"
	=	"until |"
	=	"use |"
	=	"utime |"
	=	"values |"
	=	"vec |"
	=	"waitpidd|"
	=	"wantarray |"
	=	"waitpid |"
	=	"wait |"
	=	"warn |"
	=	"write |"
	=	"while |"
	=	"xor |"
	=	"X |"
	=	"Y |"
	=	"y ¿"
	=	"Zap |"
	=	"**", 10


 END
