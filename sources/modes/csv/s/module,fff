; csv/s/module,fff
; converted from csv/csv.bas by bas2asm.pl

	GET	h.CSV

	DCD	0x00
	DCD	StartUpHere
	DCD	0x00
	DCD	0x00
	DCD	D1
	DCD	ModHelpString
	DCD	D1
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	module_flags

D1	=	"ZapCSV"
	DCW	0
	DCD	0
	DCD	0
	DCD	0
	DCD	D2
	=	0
D2	=	27,0," provides support for",27,2,"Zap editor.",13
	= 	"It provides a syntax-colouring mode for CSV ",27,7,"s.",0
	ALIGN

ModHelpString
	=	"ZapCSV",9,9,"0.08 (00 Jan 0000) © "
lp1	=	"Tim Tyler",0
	ALIGN


module_flags
	DCD	1			; 32 bit compatible

w_formmb
	DCD	0
	DCD	0
	DCD	0

Data3
	=	"Zap",0
	DCD	0

StartUpHere
	STMFD	sp!, {lr}
	LDR	r2, [r12, #0]
	CMP	r2, #0
	BNE	ModuleInit
	MOV	r0, #6
	MOV	r3, #0x20
	SWI	XOS_Module
	LDMVSFD	sp!, {pc}
	STR	r2, [r12, #0]
	ADRL	r0, Data47
	STR	r2, [r0, #0]
	MOV	r0, #0
	STR	r0, [r2, #20]

ModuleInit
	MOV	r0, #4
	STR	r0, [r2, #12]
	MOV	r0, #0x12
	ADR	r1, Data3
	SWI	XOS_Module
;	MOVVC	r0, #0x0C
;	SWIVC	XOS_Module
	LDMVSFD	sp!, {pc}
	MOV	r12, r4
;	LDR	r2, [r3, #20]
;	ADD	r3, r3, r2
;	LDRB	r0, [r3, #3]
;	TEQ	r0, #'X'
;	ADDEQ	r3, r3, #1
;	LDRB	r0, [r3, #5]
;	CMP	r0, #'9'
;	RSBLSS	r0, r0, #'1'
;	BHI	MakeError
;	BNE	RefDataTab
;	LDRB	r0, [r3, #7]
;	CMP	r0, #'9'
;	RSBLSS	r0, r0, #'0'
;	BHI	MakeError
;	BNE	RefDataTab
;	LDRB	r0, [r3, #8]
;	CMP	r0, #'9'
;	RSBLSS	r0, r0, #'0'
;	BHI	MakeError
RefDataTab
	ADR	r0, DataTable
	FNcall	0
	ADR	r0, CmdTable
	FNcall	Zap_AddCommands
	LDMFD	sp!, {pc}
;MakeError
;	ADR	r0, ErrorMess
;	SWI	OS_GenerateError
;ErrorMess
;	DCD	0x00
;	=	"ZapCSV requires Zap version 1.00 or greater."
;	DCW	0x0
;	ALIGN

CSVLabeled
	=	"CSV",0
	DCD	0

DataTable
	DCD	DataTable
	DCD	CSVLabeled
	DCD	lp1
	DCD	0x00	;  REM = BaseMode = Text
	DCD	0x40D	;  REM mode = 13 ; bit 10 = workspace, please!
	DCD	Initialisation	;  REM init
	DCD	0x00	;  MnuDta; REM &00 ; menu...extension menu
	DCD	Initialisation - DataTable	;  REM size of table ; len
	DCD	0x00	;  postload
	DCD	0x00	;  REM beforesave ; e_presave   \ called before saved
	DCD	0x00
	DCD	E_Start	;  REM e_start           \ window entering mode
	DCD	E_End	;  REM e_end               \ window leaving mode
	DCD	0x00	;  REM e-width             \ find work area width
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00	;  REM lp7 ; e_clnphy        \ physical to file offs
	DCD	0x00	;  REM clnlog
	DCD	0x00	;  REM clnphy
	DCD	0x00	;  REM clnoff
	DCD	0x00
	DCD	0x00	;  e_sminus      \ perform shift-left
	DCD	0x00	;  e_splus       \ perform shift-right
	DCD	0x00
	DCD	0x00
	DCD	redrawline	;  REM e_redrawline   \ redraw line of display
	DCD	0x00
	DCD	0	;  charchar
	DCD	0x00
	DCD	0x00	;  e_tab       \ tab key pressed
	DCD	0x00
	DCD	0x00
	DCD	0x00	;  trytwo    \  REM e_saveandrun
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00	;  e_compile \ compile & run and don't exit
	DCD	0x00
	DCD	0x00	;  e_run \ run the program being edited
	DCD	0x00	;  e_runandquit \ run
	DCD	0x00	;  \ drops into language...?
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00	;  REM e_setwidth - changing window width
	DCD	0x00
	DCD	0	;  redrawA ; REM e_prevline \ find start of update reg'n; Easy!
	DCD	gotoopenwindow	;  REM ; e_openwindow
	DCD	mode_interrogate	;  REM ; e__interrogate


Initialisation
	CMP	r1, #7
	BEQ	amenucreation
	CMP	r1, #1
	MOVCC	pc, lr
	STREQ	r0, [r11, #4]
	STREQ	r0, modenumberlocal
	TEQ	r1, #6
	ADREQ	r1, MenuExtension
	MOVEQ	pc, lr
	TEQ	r1, #2
	MOVNE	pc, lr
	STMFD	sp!, {r1, r7, r8, lr}
	;  REM here? yes!
	MOV	r8, #0
	BL	ZapModeWord
	TEQ	r7, #0
	BEQ	nocfginit
	LDR	r0, [r7, #0]
	CMP	r0, #zizeofcfgwksp
	LDMEQFD	sp!, {r1, r7, r8, pc}
	;  REM no !Config...
nocfginit
	MOV	r0, #0x0D
	FNcall	Zap_ModeColourNum	;  REM change palette size.
	TEQ	r7, #0
	BEQ	noheapblkatall
	LDR	r1, [r7, #0]
	TEQ	r1, #zizeofcfgwksp
	BEQ	justendtheresnoneed
	MOVVC	r1, #zizeofcfgwksp
	MOVVC	r0, r7
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #8
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	MOVVC	r7, r0
	STRVC	r1, [r7, #0]
	BLVC	OnToWrtMdeWrd
noheapblkatall
	MOV	r0, #zizeofcfgwksp
	LDR	lr, [r12, #0]
	ADD	lr, lr, #4	;  REM zap call - start heap block
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	MOV	r7, r0
	BLVC	OnToWrtMdeWrd
	MOVVC	r0, #zizeofcfgwksp
	STRVC	r0, [r7, #0]
	MOVVC	r0, #0
	STRVC	r0, [r7, #4]
	MOVVC	r0, #0x0D
	STRVC	r0, [r7, #8]
	LDRVC	r0, startupformatwd
	STRVC	r0, [r7, #0x0C]
	LDRVC	r0, SDsasa	;  REM Dater 5%/8% !! vc= no !config file ?
	LDRVC	r1, [r11, #4]
	MOVVC	r2, #0
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #Zap_ModeData	;  REM call - RD/WRT Zap Dater mode words.
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	BLVC	UnkPreColBit	;  REM to set up colours with zmcs
justendtheresnoneed
	LDMFD	sp!, {r1, r7, r8, pc}
amenucreation
	STMFD	sp!, {r0, lr}
	BL	loadmenuifrequired
	FNcall	Zap_ReadMenu
	LDR	r1, [r0, #4]
	LDMFD	sp!, {r0, pc}


; Command table
CmdTable
	DCD	CmdTable
	DCD	0
	=	"CSV_FLAGSTOGGLE",0
	ALIGN
	DCD	Cmdhtmlflagstoggle
	DCD	0

basemode
	LDR	r9, modenumberlocal
	FNjump	Zap_BaseMode

modenumberlocal
	DCD	0

startupformatwd
	DCD	0x07800000

MenuExtension
	=	"Comments",0
	=	"Strings",0
	=	"Numbers",0
	=	"Other",0
	ALIGN


		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
UnkPreColBit
	STMFD	sp!, {r1-r4, lr}
	ADR	r3, DefaultColours
	LDR	r1, [r11, #4]	;  REM normally 0
PreZModColBit
	MOV	r2, #0x09	;  REM start colours
ZModColBit
	LDRB	r0, [r3], #1
	FNcall	Zap_ModeColour	;  REM Read colour definitions
	LDMVSFD	sp!, {r1-r4, pc}
	ADD	r2, r2, #1
	TEQ	r2, #0x0D	;  REM max colours
	BNE	ZModColBit
	LDMFD	sp!, {r1-r4, pc}
DefaultColours
			; Colour Numbers :
	=	0x0A	; Comment Colour =&9
	=	0x0F	; String colour  =&A
	=	0x0E	; Punctuation    =&B
	=	0x0C	; Embedded {}    =&C
	ALIGN

;Tk1frm12andret
;	LDR	r0, [r11, #12]
;	SUBS	r0, r0, #1
;	STR	r0, [r11, #12]
;	MVNNE	r0, #0
;	MOVS	pc, lr

ZapModeWord
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
	LDR	r2, [r12, #0]
	ADD	r2, r2, #0x0164	;  REM Zap_GetModeWord - read the mode word
	MOV	lr, pc
	MOV	pc, r2
	MOV	r7, r0
	LDMFD	sp!, {r0-r2, pc}

OnToWrtMdeWrd
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
WrtMdeWrd
	MOV	r0, r7
	LDR	r2, [r12, #0]
	ADD	r2, r2, #0x0168	;  REM zap call...write the mode word
	MOV	lr, pc
	MOV	pc, r2
	LDMFD	sp!, {r0-r2, pc}

localdefltmw
	DCD	0

initialiseheap
	STMFD	sp!, {r1-r6, r8-r12, lr}
	MOV	r0, #zizeofcfgwksp
	LDR	lr, [r12, #0]
	ADD	lr, lr, #4
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	MOV	r7, r0
	STR	r1, [r7, #0]
	LDR	r0, localdefltmw
	LDR	r0, [r0, #0xC]
	STR	r0, [r7, #0xC]
	MOV	r0, #0x0D
	STR	r0, [r7, #8]	;  REM AT THE START MAKE COLOUR OK?
	BL	OnToWrtMdeWrd
	LDMFD	sp!, {r1-r6, r8-r12, pc}


; --------- e_start ------------

E_Start
	STMFD	sp!, {r1, r6, r7, lr}
	STMFD	sp!, {r1-r12, lr}
	LDRB	r1, [r11, #4]
	ORR	r1, r1, #0x100
	FNcall	Zap_ReadVar
	STR	r0, localdefltmw
	LDMFD	sp!, {r1-r12, lr}
	BL	ZapModeWord
	CMP	r7, #0
	BLEQ	initialiseheap
	TEQ	r8, #0
	BEQ	BeforeAllare8
	LDRVC	r1, [r7, #0]
	TEQVC	r1, #zizeofcfgwksp
	BEQ	BeforeAllare8
	MOVVC	r1, #zizeofcfgwksp
	MOVVC	r0, r7
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #8
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	MOVVC	r7, r0
	STRVC	r1, [r7, #0]
	BLVC	OnToWrtMdeWrd
BeforeAll
	LDR	r0, localdefltmw
	LDR	r0, [r0, #0xC]
	STR	r0, [r7, #0xC]
	MOV	r0, #0x0D
	STR	r0, [r7, #8]	;  REM AT THE START MAKE COLOUR OK?
BeforeAllare8
	LDRVC	r0, [r11, #4]
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #0x015C	;  REM restore mode options on e_start
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	LDR	r1, [r7, #0x0C]
	ADRL	r0, w_formmb
	STR	r1, [r0, #0x08]
	CMP	r8, #0
	LDMEQFD	sp!, {r1, r6, r7, pc}
	BL	destroyanypanes
	BL	gomakepanehappen
	LDMFD	sp!, {r1, r6, r7, pc}


; ------------ e_end -------------

E_End
	STMFD	sp!, {r7, lr}
	CMP	r8, #0
	BLNE	destroyanypanes
	BL	ZapModeWord
	LDRVC	r0, [r11, #4]
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #Zap_SaveModeWord	;  REM - save on e_end
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	LDMFD	sp!, {r7, pc}
SDsasa
	DCD	0x1202004D


; ------------ e_redrawline ------------

adrofrsix
	DCD	0
redrawline
	STMFD	sp!, {r6, r12, lr}
	STMFD	sp!, {r7, r11}
	STR	r6, adrofrsix
	BL	Branch208
	BL	ZapModeWord
	LDR	r2, [r7, #8]	;  REM Preserved start colour & flags
	LDR	r3, [r7, #0x0C]
	ADRL	r12, w_formmb
	STR	r3, [r12, #8]
	LDMFD	sp!, {r7, r11}	;  REM calls...
	LDR	r3, [r8, #60]	;  REM char width of cached line (x 8)
	LDRB	r12, [r8, #88]	;  REM code of lf...?
	BIC	r2, r2, #0x700
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0D
	ORR	r2, r2, #0xF000	;  REM ! ; fe? ; ff000
	BIC	r2, r2, #0x00E00000	;  REM HERE? &0F000000
	LDR	r5, [r9, #0]	;  REM ?
	LDR	r10, [r9, #4]	;  REM ?
	ADD	r10, r10, r5
	TEQ	r7, r10
	LDMEQFD	sp!, {r6, r12, pc}	;  REM end - return for good!
	LDR	r10, [r9, #56]	;  REM ?
	ADD	r10, r10, r5
	CMP	r7, r10
	MOVCC	r10, r5
	MOV	r6, #0
BitAftStart
	SUB	r6, r6, #1
	LDRB	r0, [r7], #-1
	TEQ	r0, r12
	BEQ	UpToStart
	CMP	r7, r10
	BCS	BitAftStart
	TEQ	r5, r10
	LDRNE	r10, [r9, #60]
	SUBNE	r7, r7, r10
	MOVNE	r10, r5
	CMP	r7, r10
	BCS	BitAftStart
	SUB	R6,R6,#1	; cl fix
	SUB	R7,R7,#1	;
UpToStart			;
	ADDS	r6, r6, #2	;
	ADD	r7, r7, #2	;
	SUBPL	r7, r7, r6
	LDMPLFD	sp, {r6}
	TEQ	r5, r10
	LDREQ	r10, [r9, #52]	;  REM ?
	ADDEQ	r10, r10, r5
	LDRNE	r10, [r9, #60]	;  REM ?
	ADDNE	r5, r5, r10
	LDRNE	r10, [r9, #8]	;  REM ?
	ADDNE	r10, r10, r5
	LDRB	r0, [r8, #0x90]	;  REM tabchar?
	ORR	r12, r12, r0, LSL #24
	LDR	r0, [r8, #100]	;  REM bytes per line / width of text
	ORR	r12, r12, r0, LSL #12
RtAtStrtA
	MOV	lr, #0
RtAtStrtB
	CMP	r7, r10	;  REM EOF?
	BCC	Branch13
	LDR	r10, [r9, #8]
	ADD	r10, r10, r5
	CMP	r7, r10
	LDMCSFD	sp!, {r6, r12, pc}
	LDR	r1, [r9, #60]	;  REM ???
	ADD	r7, r7, r1
	ADD	r5, r5, r1
	ADD	r10, r10, r1
Branch13
	LDRB	r0, [r7], #1	;  REM get char
	AND	r1, r12, #0xFF
	EOR	r2, r2, #0x0400	;  REM newline? ; alternating colour...
	TEQ	r0, r1
	TSTEQ	r2, #0x0400
	BICEQ	r2, r2, #0x700	;  REM THIS CODE IS NEVER EXECUTED...
	BICEQ	r2, r2, #0xFF
	ORREQ	r2, r2, #0x0D
	BEQ	RtAtStrtB
	BIC	r2, r2, #0x0400
	TEQ	r0, r1
	BEQ	BranchNL	; REM Jeez, what a mess...
	CMP	r6, #0	;  REM wed morn-reinit
	MOVGT	r1, #1	;  REM @@@@ re init this?
	STRGTB	r1, [r6, r3,LSL #1]
	AND	r1, r2, #0xFF
	CMP	r1, #0x0D
	BEQ	BNL2
Backhome
aftertestA
	TEQ	r0, #'"'
	BEQ	QuoteBit	;  mon ok1
	AND	r1, r2, #0xFF
	CMP	r1, #0x09
	BEQ	ComCodeRestart
	CMP	r1, #0x0A
	BEQ	BeforeColour
	TST	r2, #0x10000000	;  REM START OF LINE FLAG...
	BNE	NotatStart
	TEQ	r0, #'%'
	TSTEQ	r2, #0x04000000
	BEQ	CommentStart
NotatStart
	TST	r2, #0x0100	;  REM ok
	BICNE	r2, r2, #0xFF	;  REM COL cream/normal - lt grey (= &0B);
	ORRNE	r2, r2, #0x0C	;  REM testing very dubious TST code...
	AND	r1, r2, #0xFF
	TEQ	r1, #0x0C	;  REM COL Errors/Redirection  ...new
	BEQ	BranchYYY
afterteststop
	AND	r1, r2, #0xFF
	TEQ	r1, #0x0D	;  REM COL Command! c .... NO NuffinUMBERS...
	BICEQ	r2, r2, #0xFF
	ORREQ	r2, r2, #0x0C
	AND	r1, r2, #0xFF
	TEQ	r1, #0x09	;  REM COL cream/normal ... NO NUMBERS...
	TEQEQ	r1, #0x0A	;  REM COL Orange/Numbers?
	BEQ	BeforeColour
	TEQ	r0, #'&'
	TEQNE	r0, #'+'
	TEQNE	r0, #'-'
	BEQ	TisANumber
	TEQ	r0, #'&'
	BEQ	PreTisNum
	CMP	r0, #'9'
	RSBLSS	r1, r0, #'0'
	BLS	PreTisNum
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0C
	CMP	r0, #'%'
	BLE	NotANumber
	TEQ	r0, #'.'
	TEQNE	r0, #':'
	BEQ	pointinnum
	AND	r1, r0, #0xDF
	TEQ	r1, #'K'
	TEQNE	r0, #'_'
	BEQ	TisANumber
	CMP	r1, #'F'
	RSBLSS	r1, r1, #'A'
	BHI	NotANumber
TisANumber
	;  REM not numbers?
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0B
	TST	r2, #0x80000000
	BICNE	r2, r2, #0x90000000
	B	BeforeColour
NotANumber
	CMP	r0, #'_'
	BEQ	PlainNoOSChk
	CMP	r0, #128
	BCS	PlainNoOSChk
	AND	r1, r0, #0xDF
	CMP	r1, #'Z'
	RSBLSS	r1, r1, #'@'
	BLS	PlainNoOSChk
itsoknow
Bother
DontBother
	TST	r2, #0x00E00000
	BNE	CmdCntChk
AfterCmdCntChk
	AND	r1, r2, #0xFF
	TEQ	r1, #0x09
	TEQNE	r1, #0x0B
	BEQ	BeforeColour
PlainNoOSChk
	AND	r1, r2, #0xFF
	TEQ	r1, #0x0A
	TEQNE	r1, #0x0B
	BEQ	BeforeColour
SymbolChecking
	CMP	r6, #0
	BLT	BeforeColour	;  REM BLT     BeforeColour%
	TST	r2, #0x8000000
	BNE	ErrEchConf
	TEQ	r0, #','
	MOVEQ	r1, #0x0C
	TEQ	r0, #'.'
	TEQNE	r0, #'+'
	TEQNE	r0, #'-'
	TEQNE	r0, #'&'
	MOVEQ	r1, #0x0B
fromslash
	STREQB	r1, [r6, r3]
	BEQ	AfterColour
BeforeColour
	;  REM NUMBERS?
	MOV	r1, r12, LSR #24
	TEQ	r0, r1
	BEQ	TabbingSub
Branch24
	CMP	r6, #0
	BLE	firstpass	;  REM new addition to test
	ANDGT	r1, r2, #0x0F	;  REM write colours
	STRGTB	r1, [r6, r3]
AfterColour
	CMP	r6, #0
	STRGTB	r0, [r6], #1	;  REM write text
firstpass
	ADD	lr, lr, #1
BeginOfEnd
	AND	r1, r12, #0xFF	;  REM end character... yes! At last...
	TEQ	r0, r1	;  REM end character... yes!
	BICEQ	r2, r2, #0x78000000	; REM START OF LINE FLAGS...
	CMP	r6, #0
	ADDLTS	r6, r6, #1
	BMI	RtAtStrtB	;  REM round loop...
	LDMEQFD	sp, {r6}	;  REM huh?
	BEQ	RtAtStrtA
	AND	r1, r12, #0xFF	;  REM end character... yes! At last...
	TEQ	r0, r1	;  REM end character... yes!
	ADDEQ	r11, r11, #1	;  REM This code only executed if <CR>...
	BICEQ	r2, r2, #0xFF000000	;  REM START OF LINE FLAGS...
	BICEQ	r2, r2, #0x00F00000	;
	ORRNE	r2, r2, #0x0400
	BIC	r0, r12, #0xFF000000	;  REM if not width (no, tabch...)...
	CMP	lr, r0, LSR #12
	BICLT	r2, r2, #0x0400
	BLT	RtAtStrtB	;  REM go round loop...
	;BEQ	tohaveajollygoodtime
tohaveajollygoodback
	BIC	r0, r12, #0xFF000000
	CMP	lr, r0, LSR #12
	BICGE	r2, r2, #0x0400	;  REM NE
	AND	r0, r12, #0x0200
	ORR	r2, r2, r0
	LDMFD	sp!, {r6, r12}
	STMFD	sp!, {r7, r11}
	BL	Branch208
	BL	ZapModeWord
	STR	r2, [r7, #8]
	LDMFD	sp!, {r7, r11, pc}	;  REM on exit set things up... r7...
;tohaveajollygoodtime
;	STMFD	sp!, {lr}
;	LDR	lr, [r9, #f_ptr]
;	LDR	r0, [r9, #f_splito]
;	ADD	r0, r0, lr
;	CMP	r7, r0
;	LDREQ	r0, [r9, #f_splits]
;	ADDEQ	r0, r0, r7
;	MOVNE	r0, r7
;	LDR	r1, [r9, #f_bufl]
;	ADD	r1, lr, r1
;	CMP	r0, r1
;	LDRCCB	r0, [r0]	;  Hmm...(Beyond end...?)
;	AND	r1, r12, #0xFF	;  REM end character... yes! At last...
;	TEQ	r0, r1	;  REM  ! the same length as the width
;	ADDEQ	r7, r7, #1
;	ADDEQ	r11, r11, #1
;	LDMFD	sp!, {lr}
;	B	tohaveajollygoodback
;_altered_0
;	CMP	r6, #0
;	BLT	BeforeColour	;  REM BLT     BeforeColour%
;	STRB	r1, [r6, r3]
;	B	AfterColour
ComCodeRestart
	TEQ	r0, #'_'
	BEQ	AfterCmdCntChk
	AND	r1, r0, #0xDF
	CMP	r1, #'Z'
	RSBLSS	r1, r1, #'@'
	BLS	AfterCmdCntChk
	B	itsoknow
CmdCntChk
	CMP	r0, #32
	BNE	AfterCmdCntChk
	CMP	r6, #0
	BGT	r6version
	LDR	r1, Sol7
	ADD	r1, r1, #2	;  REM ???
	CMP	r7, r1
	CMP	r6, #0
	MOVLE	r1, #10
	LDRGTB	r1, [r7, #-2]	;  REM danger
overdangerperhaps
	CMP	r1, #32
	BEQ	AfterCmdCntChk
	MOV	r1, r2, LSR #21
	AND	r1, r1, #7
	SUBS	r1, r1, #1
	BICEQ	r2, r2, #0x10000000
	BIC	r2, r2, #0x00E00000
	ORR	r2, r2, r1, LSL #21
	B	AfterCmdCntChk
r6version
	LDR	r1, Sol6	;  REM 13/10
	SUB	r1, r1, #1
	CMP	r6, r1	;  REM 13/10
	LDRGTB	r1, [r6, #-1]	;  REM 13/10
	BGT	overdangerperhaps	;  REM 13/10
	MOV	r1, #' '
	B	AfterCmdCntChk	;  REM 13/10
ErrEchConf
	CMP	r6, #0
	BLE	AfterColour
	AND	r1, r2, #0xFF
	CMP	r1, #0x0B
	BEQ	BeforeColour
	CMP	r1, #0x0C
	MOVEQ	r1, #0x02
	STREQB	r1, [r6, r3]
	TEQ	r0, r12, LSR #24
	BEQ	TabbingSub
	B	AfterColour
NotANum2
	CMP	r6, #0
	BLE	NotANumber
	CMP	r0, #'%'
	BGT	NotANumber
	SUB	r1, r3, #1
	LDRB	r1, [r6, r1]
	AND	r1, r1, #0xFF
	CMP	r1, #0x0B
	BNE	NotANumber
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0C
	B	NotANumber
BranchNL
	TST	r2, #0x10000000	;  REM START OF LINE FLAGS SET...
	BEQ	Bother2
	TST	r2, #0x60000000	;  REM IF/THEN FLAGS SET?
	BEQ	DontBother2
Bother2
DontBother2
	MOV	lr, #0x70000000	;  REM        ;;Jeez, what a mess!;;
	B	BeginOfEnd
BNL2
	BIC	r2, r2, #0x10000000	;  REM START OF LINE FLAGS SET...
	STR	r6, Sol6
	SUB	r1, r7, #1
	STR	r1, Sol7
	B	Backhome
PreTisNum
	;  REM not numbers?
	CMP	r6, #0
	BLT	TisANumber
	LDRB	r1, [r6, #-1]
	CMP	r1, #' '
	BEQ	TisANumber
	TEQ	r1, #'.'
	TEQNE	r1, #':'
	TEQNE	r1, #'$'
	BNE	TisANumber
	ADD	r1, r6, r3
	LDRB	r1, [r1, #-1]
	AND	r1, r1, #0x0F
	CMP	r1, #0x0B
	BEQ	TisANumber
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0C
	SWI	0x107
	B	BeforeColour

Sol6	DCD	0
Sol7	DCD	0
BranchYYY
	CMP	r6, #0
	BLT	BeforeColour	;  REM BLT     BeforeColour%
	TEQ	r0, #'&'
	TEQNE	r0, #'+'
	TEQNE	r0, #'-'
	BEQ	yyyTisnan
	CMP	r0, #'9'
	RSBLSS	r1, r0, #'0'
	MOVLS	r1, #0x0B
	STRLSB	r1, [r6, r3]
	BLS	AfterColour
	LDR	r1, Sol7
	ADD	r1, r1, #2
	CMP	r7, r1
	MOVLE	r1, #10
	LDRGTB	r1, [r7, #-2]	;  REM danger
	TEQ	r0, #'.'	;  REM if in number
	BNE	TryNextA
	CMP	r1, #'9'
	BGT	TryNextA
	CMP	r1, #'0'
	BLT	TryNextA
	MOV	r1, #0x0B
	STRB	r1, [r6, r3]
	B	AfterColour
yyyTisnan
	MOV	r1, #0x0B
	STRB	r1, [r6, r3]
	B	AfterColour
TryNextA
	TEQ	r0, #'_'	;  REM if in number
	BNE	BeforeColour
	CMP	r1, #'9'
	BGT	BeforeColour
	CMP	r1, #'0'
	BLT	BeforeColour
	MOV	r1, #0x0B
	STRB	r1, [r6, r3]
	B	AfterColour
pointinnum
	LDRB	r1, [r7, #-2]
	CMP	r1, #'9'
	BGT	NotANumber
	CMP	r1, #'/'
	BLE	NotANumber
	LDRB	r1, [r7]
	CMP	r1, #'9'
	BGT	NotANumber
	CMP	r1, #'/'
	BLE	NotANumber
	B	TisANumber	;  REM in a number...
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CommentStart
	;  REM | comment..........
	AND	r1, r2, #0xFF
	CMP	r1, #0x0A	;  REM in quotes?
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #0x09
	ORRNE	r2, r2, #0x10000000
	B	BeforeColour
QuoteBit
		;  REM "Quotes"
	AND	r1, r2, #0xFF
	CMP	r1, #0x09
	BEQ	BeforeColour
	CMP	r1, #0x0A
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #0x0A
	BNE	BeforeColour
CurlyBrack
		;  REM "No {} NUFFIN"
	CMP	r6, #0
	ANDGT	r1, r2, #0x0F
	STRGTB	r1, [r6, r3]
	BIC	r2, r2, #0xFF
	MOV	r1, r2, LSR #24
	AND	r1, r1, #0x01	;  REM Bits for {} depth
	CMP	r1, #0x00
	ORREQ	r2, r2, #0x0C	;  REM COL Cream/Normal
	ORRNE	r2, r2, #0x02	;  REM COL Grey/Redirected
	B	AfterColour
CurlyBrackOpen
		;  REM originally for ' these ' ; "{"
	ORR	r2, r2, #0x10000000
	AND	r1, r2, #0xFF
	TEQ	r1, #0x0A
	TEQNE	r1, #0x09
	BEQ	BeforeColour
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0C
	ORR	r2, r2, #0x1000000
	ORR	r12, r12, #0x0200
	B	BeforeColour
CurlyBrackClose
		;  REM originally for ' these ' ; "}"
	ORR	r2, r2, #0x10000000
	AND	r1, r2, #0xFF
	TEQ	r1, #0x0A
	TEQNE	r1, #0x09
	BEQ	BeforeColour
	BIC	r2, r2, #0x1000000
	MOV	r1, r2, LSR #24
	AND	r1, r1, #0x01	;  REM Bits for {} depth
	TEQ	r1, #0x00
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #0x0C	;  REM COL Grey/Redirected
	ORRNE	r12, r12, #0x0200
	BNE	BeforeColour
	BIC	r12, r12, #0x0200
	B	CurlyBrack
TabbingSub
	AND	r1, r12, #0xFF000000
	CMP	r1, #0x2C000000
	BEQ	CommaSub
		; And     R1,R2,#&F
		; TEQ     R1,#&0D
		; TEQNE   R1,#&0B
		; BEQ     BeginOfEnd
	ORREQ	r2, r2, #0x0100
	AND	r1, r4, #0x3000
	TEQ	r1, #0
	TEQEQ	r0, r12, LSR #24
	BEQ	AfterColour
	TEQ	r0, #' '
	BEQ	Branch24
	CMP	r6, #0
	BLT	BeginOfEnd
	MOV	r0, #9	;  REM tab!
	TEQ	r1, #0x1000
	MOVEQ	r0, #0x20	;  REM " "!!!!
	TEQ	r1, #0x3000
	MOVEQ	r0, #'-'	;  REM "-"!!!!
	STMFD	sp!, {r0-r2}
	LDR	r2, [r8, #w_format]	;  REM w_format
	MOV	r2, r2, LSR #19
	AND	r2, r2, #0x7F
	MOV	r2, #8	;  XXX
	MOV	r1, #0
	MOV	r0, lr, LSL #20
	MOV	r0, r0, LSR #20
loop
	ADD	r1, r1, r2
	CMP	r1, r0
	BLE	loop
	STR	r1, localr2store
	LDMFD	sp!, {r0-r2}
TabLoop
	MOV	r1, #8	;  REM = COL control Character...
	STRB	r1, [r6, r3]
	MOV	r1, #1
	STRB	r1, [r6, r3,LSL #1]	;  REM wrong?
	STRB	r0, [r6], #1	;  REM @@@@@@
	ADD	lr, lr, #1
	AND	r1, r4, #0x3000
	TEQ	r1, #0x2000
	MOVEQ	r0, #0x20
	BIC	r1, r12, #0xFF000000
	TEQ	lr, r1, LSR #12
	BEQ	contstrtontb
		; TST     R14,#7
	LDR	r1, localr2store
	EOR	r1, r1, lr
	MOVS	r1, r1, LSL #20
	BNE	TabLoop
contstrtontb
	AND	r0, r4, #0x3000
	TEQ	r0, #0x3000
	MOVEQ	r0, #9	;  REM  | ?
	STREQB	r0, [r6, #-1]	;  REM @@@@ ???
	MOV	r0, r12, LSR #24
	B	BeginOfEnd
localr2store
	DCD	0
CommaSub
		; And     R1,R2,#&0F
		; TEQ     R1,#&09
		; TEQNE   R1,#&0A
		; BEQ     Branch24%
	TEQ	r1, #0x0D
	TEQNE	r1, #0x0B
	ORREQ	r2, r2, #0x0100
	AND	r1, r4, #0x3000
	TEQ	r1, #0
	BEQ	AfterColour
		; MOV     0,12,LSR #24
		; TEQ     0,#9
		; TEQNE   0,#ASC","
	MOV	r0, #','
		; BNE     AfterColour%
	CMP	r6, #0
	BLT	BeginOfEnd
	MOV	r0, #','	;  REM comma/tab!
		; TEQ     R1,#&1000
		; MovEQ   R0,#ASC" "     ; REM " "!!!!
		; TEQ     R1,#&3000
		; MovEQ   R0,#ASC","  ; REM "-"!!!!
	STMFD	sp!, {r0-r2}
	LDR	r2, [r8, #w_format]	;  REM w_format
	MOV	r2, r2, LSR #19
	AND	r2, r2, #0x7F
	MOV	r2, #8
	MOV	r1, #0
	MOV	r0, lr, LSL #20
	MOV	r0, r0, LSR #20
_altered_1
	ADD	r1, r1, r2
	CMP	r1, r0
	BLE	_altered_1
	STR	r1, localr2store
	LDMFD	sp!, {r0-r2}
CommaLoop
	MOV	r1, #0x0C	;  REM = COL ordinary
	CMP	r0, #140
	MOVEQ	r1, #0x08
	STRB	r1, [r6, r3]	; @@@@
	MOV	r1, #1
	STRB	r1, [r6, r3,LSL #1]	;  REM wrong?
	STRB	r0, [r6], #1	;  REM @@@@@@
	ADD	lr, lr, #1
	AND	r1, r4, #0x3000
		; TEQ     R1,#&2000
	MOV	r0, #' '
	TEQ	r1, #0x3000
	MOVEQ	r0, #140
	BIC	r1, r12, #0xFF000000
	TEQ	lr, r1, LSR #12
	TEQ	lr, r1, LSR #12
	BEQ	contstrtoncma
	LDR	r1, localr2store
	EOR	r1, r1, lr
	MOVS	r1, r1, LSL #20
	BNE	CommaLoop
contstrtoncma
	LDRB	r0, [r6, #-1]	;  REM @@@@ ???
	CMP	r0, #','
	STRNEB	r0, [r6, #-1]	;  REM @@@@ ???
	AND	r0, r4, #0x3000
	MOV	r0, r12, LSR #24
	B	BeginOfEnd
redrawA
		;  REM redraw the screen and so forth
	SUBS	r0, r0, #32
	MOVMI	r0, #0
	MOV	pc, lr
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Data47
	DCD	0x0
Branch208
	LDR	r11, Data47
	MOV	pc, lr
;Branch210
;	STMFD	sp!, {r0, r1, lr}
;	LDR	r11, Data47
;	LDR	r0, [r8, #w_format]	;  REM w_format
;	AND	r0, r0, #0xFF
;	MVN	lr, #0
;	LDR	r1, [r11, #8]
;	TEQ	r0, r1
;	ADDEQ	lr, lr, #1
;	LDRNE	r1, [r11, #4]
;	TEQNE	r0, r1
;	ADDEQ	lr, lr, #1
;	LDRNE	r1, [r11, #0]
;	TEQNE	r0, r1
;	ADDEQ	lr, lr, #1
;	LDMFD	sp!, {r0, r1, pc}
;	STMFD	sp!, {r11, lr}
;	LDR	r11, Data47
;	TEQ	r1, #0
;	BLEQ	Tk1frm12andret
;	LDMFD	sp!, {r11, pc}

		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
newelinecol
	STMFD	sp!, {r2-r6, lr}
	LDR	r6, [r8, #w_format]	;  REM w_format
	MOV	r6, r6, LSR #19
	AND	r6, r6, #0x7F
	MOV	r5, #','
	MOV	r4, #0
_altered_2
	MOV	r2, r0
	LDR	r3, [r9, #f_splito]	;  find the split offset in buffer
	CMP	r0, r3	;  are we in the bottom or top half?
	LDRCS	r3, [r9, #f_splits]
	ADDCS	r2, r0, r3
	LDR	r3, [r9, #f_ptr]
	LDRB	r2, [r3, r2]
	TEQ	r2, #'"'
	EOREQ	r5, r5, #0x100
	TEQ	r2, #'%'
	TEQEQ	r4, #0
	EOREQ	r5, r5, #0x200
	TEQ	r2, #10
	LDMEQFD	sp!, {r2-r6, pc}
	LDR	r3, [r8, #w_format]	;  REM w_format
	TST	r3, #(3 << 12)
	BEQ	nospecialtabs1
	TEQ	r2, #9
	TEQNE	r2, r5
		; BEQ     addinatabhere
	BNE	nospecialtabs1
	MOV	r2, #0
loop2
	ADD	r2, r2, r6
	CMP	r2, r4
	BLE	loop2
	SUB	r4, r2, #1
		; OrrEQ   4,4,#7
nospecialtabs1
	ADD	r4, r4, #1
	CMP	r4, r1
	ADDLE	r0, r0, #1
	BLE	_altered_2
	LDMFD	sp!, {r2-r6, pc}
		; .addinatabhere
		;     SUBS    3,1,4
		;     CMP     3,#7
		;     OrrCS   4,4,#7
		;
		;     BCS     nospecialtabs1
		;  \E R0=physical line number R8/R9
		;  \X R0=file offset of line start
		;     R1=logical line number
		;  Ie, use the variables w_cline, w_coff, w_clogl as your start

OneA
	LDRB	r0, [r1], #1
	STRB	r0, [r2], #1
	CMP	r0, #0x20
	BCS	OneA
	MOV	r0, #0
	STRB	r0, [r2, #-1]
	MOVS	pc, lr
callmiscentrypt
	STMFD	sp!, {r0-r12, lr}
	ADRL	lr, w_formmb
	LDR	lr, [lr, #8]
	ANDS	lr, lr, #1 << 20
	LDMEQFD	sp!, {r0-r12, pc}
	ADRL	r0, buttonsamed2
	FNcall	Zap_TestModeName
	CMP	r0, #1
	LDMMIFD	sp!, {r0-r12, pc}
	MOV	r0, #18
	ADR	r1, buttonsamed
	SWI	XOS_Module
	LDMMIFD	sp!, {r0-r12, pc}
	ADD	r3, r3, #0x2C
	STR	r3, alocaljumper
	LDMFD	sp, {r0-r12, lr}
	MOV	lr, pc
	LDR	pc, alocaljumper
	MOV	r0, r0
	LDMFD	sp!, {r0-r12, pc}
gotoopenwindow
	STMFD	sp!, {lr}
	BL	openwindowroutine
	CMP	r0, #0	;  REM If there was a pane then no problem
	LDMNEFD	sp!, {pc}	;  REM just return...
	BL	gomakepanehappen	;  REM ...otherwise try to make one...
	BL	openwindowroutine	;  REM ...and redraw it...
	LDMFD	sp!, {pc}
openwindowroutine
	STMFD	sp!, {r0-r12, lr}
	ADRL	lr, w_formmb
	LDR	lr, [lr, #8]
	TST	lr, #(1 << 20)
	TSTEQ	lr, #(1 << 31)
	LDMEQFD	sp!, {r0-r12, pc}
	BL	trytoloadmode
	ADRL	r0, buttonsamed2
	FNcall	Zap_TestModeName
	CMP	r0, #1
	BMI	_altered_3
	MOV	r0, #18
	ADR	r1, buttonsamed
	SWI	XOS_Module
	BVS	_altered_3
	ADD	r3, r3, #0x28
	STR	r3, alocaljumper
	LDMFD	sp!, {r0-r12, lr}
	ADRL	r2, w_formmb
	LDR	r2, [r2, #8]
	ANDS	r2, r2, #1 << 31
	MOVNE	r2, #0xFF
	LDR	pc, alocaljumper
nojuice2
	LDMFD	sp, {r0-r12, lr}
	ADRALL	r9, modenumberlocal
	LDR	r9, [r9]
	MOV	r11, #e_openwindow
	FNcall	Zap_BaseMode
	LDMFD	sp!, {r0-r12, pc}
gomakepanehappen
	STMFD	sp!, {r0-r12, lr}
	STMFD	sp!, {r1-r11}
	ADRL	r1, modenumberlocal
	LDRB	r1, [r1]
	FNcall	Zap_GetModeWord
	LDMFD	sp!, {r1-r11}
	LDR	r0, [r0, #0x0C]
	STR	r0, alocaljumper
	ANDS	r0, r0, #1 << 20
	LDMEQFD	sp!, {r0-r12, pc}
	ADR	r0, buttonsamed2
	FNcall	Zap_TestModeName
	CMP	r0, #0
	BMI	nojuice1
backinthethickofit
	MOV	r0, #18
	ADR	r1, buttonsamed
	SWI	XOS_Module
	LDMVSFD	sp!, {r0-r12, pc}
	ADD	r10, r3, #0x24
	LDR	r0, alocaljumper
	MOV	r4, #0
	ANDS	r1, r0, #1 << 28
	ORRNE	r4, r4, #8
	ANDS	r1, r0, #1 << 29
	ORRNE	r4, r4, #4
	ANDS	r1, r0, #1 << 30
	ORRNE	r4, r4, #2
	LDR	r0, adrofscri
	CMP	r0, #0
	BLEQ	getthethreeelements
	MOV	r7, #0
	MOV	r6, #0
	LDR	r5, adrofmenu
	LDR	r3, adrofscri
	LDR	r2, adroftemp
	LDR	r1, adrofspri
	MOV	r0, #0
	MOV	lr, pc
	MOV	pc, r10
	MOV	r0, r0
	LDMFD	sp!, {r0-r12, pc}
buttonsamed
	=	"Zap"
buttonsamed2
	=	"Buttons",0,0
alocaljumper
	DCD	0
nojuice1
	BL	trytoloadmode
	CMP	r0, #0
	BPL	backinthethickofit
	LDMFD	sp!, {r0-r12, pc}
trytoloadmode
	STMFD	sp!, {lr}
	ADR	r0, buttonsamed2
	FNcall	Zap_ModeNumber
	LDMFD	sp!, {pc}
destroyanypanes
	STMFD	sp!, {r0-r12, lr}
	ADR	r0, buttonsamed2
	FNcall	Zap_TestModeName
	CMP	r0, #0
	BMI	nojuice4
	MOV	r0, #18
	ADR	r1, buttonsamed
	SWI	XOS_Module
	LDMVSFD	sp!, {r0-r12, pc}
	ADR	r0, buttndelhere
	MOV	R1,#0
	FNcall	Zap_CommandString
nojuice4
	LDMFD	sp!, {r0-r12, pc}
closeanypanes
	STMFD	sp!, {r0-r12, lr}
	ADR	r0, buttonsamed2
	FNcall	Zap_TestModeName
	CMP	r0, #0
	BMI	nojuice4
	MOV	r0, #18
	ADR	r1, buttonsamed
	SWI	XOS_Module
	LDMVSFD	sp!, {r0-r12, pc}
	ADR	r0, buttnclohere
	MOV	R1,#0
	FNcall	Zap_CommandString
	LDMFD	sp!, {r0-r12, pc}
buttndelhere
	=	"BUTTONS_DELETE",0,0
buttnclohere
	=	"BUTTONS_CLOSE",0,0,0
_altered_3
	LDMFD	sp, {r0-r12, lr}
	ADRALL	r9, modenumberlocal
	LDR	r9, [r9]
	MOV	r11, #e_openwindow
	FNcall	Zap_BaseMode
	LDMFD	sp!, {r0-r12, pc}
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
getthethreeelements
	STMFD	sp!, {r0-r4, lr}
	ADR	r1, markcmdpath
	BL	loadandretptr
	STRVC	r0, adrofscri
	BLVC	changeLFto00
	ADRVC	r1, marksprpath
	BLVC	loadandretptr2
	ADRVC	r1, marktempath
	BLVC	loadandretptr
	STRVC	r0, adroftemp
	BLVC	loadmenuifrequired
	LDMFD	sp!, {r0-r4, pc}
loadmenuifrequired
	STMFD	sp!, {lr}
	LDR	r0, adrofmenu
	CMP	r0, #0
	LDMNEFD	sp!, {pc}
	ADR	r1, markmenpath
	BL	loadandretptr
	STR	r0, adrofmenu
	LDMFD	sp!, {pc}
loadandretptr
	FNJSR	"r1-r5"
	MOV	r0, #5
	SWI	OS_File
	FNRTS	VS
	STR	r4, tempS2
	ADD	r0, r4, #7
	BIC	r0, r0, #3
	FNcall	Zap_Claim
	STRVC	r0, tempS1
	MOVVC	r3, #0
	MOVVC	r2, r0
	MOVVC	r0, #255
	SWIVC	OS_File
	FNRTS	VS
	LDR	r0, tempS1
	LDR	r1, tempS2
	MOV	r2, #0
	B	zerotest_sja
zeroloop_sja
	STRB	r2, [r0, r1]
	ADD	r1, r1, #1
zerotest_sja
	TST	r1, #3
	BNE	zeroloop_sja
	STR	r2,[ r0, r1]
	FNRTS
loadandretptr2
	STMFD	sp!, {r1-r5, lr}
	MOV	r0, #5
	SWI	OS_File
	BIC	r0, r4, #3
	ADD	r0, r0, #0x10
	FNcall	Zap_Claim
	STR	r0, adrofspri
	ADD	r4, r4, #5
	STR	r4, [r0]
	MOV	r3, #0
	ADD	r2, r0, #4
	MOV	r0, #255
	SWI	OS_File
	LDMFD	sp!, {r1-r5, pc}
tempS1
	DCD	0
tempS2
	DCD	0
adrofmenu
	DCD	0
adroftemp
	DCD	0
adrofspri
	DCD	0
adrofscri
	DCD	0
markcmdpath
	=	"<ZapCSV$Scripts>",0
	ALIGN
marksprpath
	=	"<ZapCSV$Sprites>",0
	ALIGN
marktempath
	=	"<ZapCSV$Templates>",0
	ALIGN
markmenpath
	=	"<ZapCSV$Menus>",0
	ALIGN

changeLFto00
	LDR	r1, [r0]
	CMP	r1, #0
	MOVEQ	pc, lr
	AND	r2, r1, #0xFF
	CMP	r2, #0x0A
	BICEQ	r1, r1, #0xFF
	AND	r2, r1, #0xFF00
	CMP	r2, #0x0A00
	BICEQ	r1, r1, #0xFF00
	AND	r2, r1, #0xFF0000
	CMP	r2, #0x0A0000
	BICEQ	r1, r1, #0xFF0000
	AND	r2, r1, #0xFF000000
	CMP	r2, #0x0A000000
	BICEQ	r1, r1, #0xFF000000
	STR	r1, [r0], #4
	B	changeLFto00


; FLAGSTOGGLE command
	DCD	0x8017
Cmdhtmlflagstoggle
	STMFD	sp!, {lr}
	LDR	r10, [r0]
	ADRL	r1, modenumberlocal
	LDR	r1, [r1]
		; CMP     8,#0
		; LDRNEB  0,[8,#w_format]
		; CMPNE   0,1
		; LDMNEFD D !,{PC}
	STMFD	sp!, {r1-r11}
	FNcall	Zap_GetModeWord
	LDMFD	sp!, {r1-r11}
	MOV	r6, r0
	LDR	r7, [r6, #0xC]
	CMP	r2, #15
	BEQ	tickquery
	MOV	r5, #0
	AND	r1, r10, #0xFF
	BL	execute
	MOV	r1, r10, LSR #8
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	MOV	r1, r10, LSR #16
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	MOV	r1, r10, LSR #24
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	STR	r7, [r6, #0xC]
	ADRL	r0, w_formmb
	STR	r7, [r0, #8]
	CMP	r8, #0
	LDMEQFD	sp!, {pc}
	ANDS	r0, r5, #2
	BLNE	sortbbout
	ANDS	r0, r5, #0x10
	BLNE	sortwwout3
	ANDS	r0, r5, #8
	BLNE	sortwwout2
	ANDS	r0, r5, #4
	BLNE	sortwwout
	ANDS	r0, r5, #1
	BLNE	sortbuttonsout
	LDMFD	sp!, {pc}
execute
	AND	r2, r1, #0x1F
	CMP	r2, #20
	ORREQ	r5, r5, #1
	CMP	r2, #28
	CMPNE	r2, #29
	CMPNE	r2, #30
	ORREQ	r5, r5, #2	;  REM only 2 needed...?
	CMP	r2, #31
	ORREQ	r5, r5, #0x1C
	CMP	r2, #27
	CMPNE	r2, #24
	ORREQ	r5, r5, #0x08
	MOV	r3, #1
	MOV	r3, r3, LSL r2
	MOV	r2, #0
	MOV	r4, #0
	MOV	r1, r1, LSR #5
	AND	r1, r1, #3
	CMP	r1, #1
	MOVEQ	r2, r3
	CMP	r1, #2
	MOVEQ	r4, r3
	BIC	r7, r7, r2
	ORR	r7, r7, r4
	EOR	r7, r7, r3
	MOV	pc, lr
tickquery
	AND	r2, r10, #0x1F
	MOV	r3, #1
	MOV	r3, r3, LSL r2
	TST	r7, r3
	MOVNE	r0, #1
	MOVEQ	r0, #0
	LDMFD	sp!, {pc}
sortwwout
	STMFD	sp!, {r5, lr}
	BL	tmt_updatewindow
	LDMFD	sp!, {r5, pc}
sortwwout2
	STMFD	sp!, {r5, lr}
	FNcall	Zap_SaveWinStatus
	FNcall	Zap_NewWinStatus	;
	LDMFD	sp!, {r5, pc}
sortwwout3
	STMFD	sp!, {r5, lr}
	MOV	r0, #7
	BL	callmiscentrypt
	LDMFD	sp!, {r5, pc}
sortbbout
	STMFD	sp!, {r5, lr}
	ADR	r4, verylocalR8tmp
	STR	r7, [r4, #4]
	FNcall	Zap_GetWindOff
	STR	r0, [r4]
	MOV	r0, #2
	ADR	r1, sortwindowsplease
	BL	callmiscentrypt
	LDMFD	sp!, {r5, pc}
tmt_updatewindow
	STMFD	sp!, {lr}
	ADR	r0, tmtupdwstr
	MOV	R1,#0
	FNcall	Zap_CommandString
	LDMFD	sp!, {pc}
tmtupdwstr
	=	"UPDATEWINDOW",0
	ALIGN
sortbuttonsout
	STMFD	sp!, {r5, lr}
	ANDS	r0, r7, #(1 << 20)
	BLEQ	closeanypanes	;  REM buttons have been toggled off
	ANDS	r0, r7, #(1 << 20)
	LDMEQFD	sp!, {r5, pc}
	BL	gomakepanehappen	;  REM buttons have been toggled on
	BL	gotoopenwindow	;  REM Redraws the BBs - has to be done
	BL	gotoopenwindow	;  REM twice - due to the first such
		;  REM call after an open is ignored.
	LDMFD	sp!, {r5, pc}
verylocalR8tmp
	DCD	0
	DCD	0
sortwindowsplease
	STMFD	sp!, {r0-r12, lr}
	LDR	r0, [r11, #b_window]
	LDR	r10, verylocalR8tmp
	CMP	r10, r0
	LDMNEFD	sp!, {r0-r12, pc}
	LDR	r0, [r11, #b_flags]
	LDR	r5, verylocalR8tmp + 4
	BIC	r0, r0, #0xE
	TST	r5, #1 << 30
	ORRNE	r0, r0, #2
	TST	r5, #1 << 29
	ORRNE	r0, r0, #4
	TST	r5, #1 << 28
	ORRNE	r0, r0, #8
	STR	r0, [r11, #b_flags]
		;  REM BL      gotoopenwindow
	LDMFD	sp!, {r0-r12, pc}
mode_interrogate
	CMP	r0, #25
	MOVEQ	r0, #0
	MOVEQ	pc, lr
	STMFD	sp!, {r9, r11, lr}
	MOV	r11, #e_interrogate
	BL	basemode
	LDMFD	sp!, {r9, r11, pc}

	END
