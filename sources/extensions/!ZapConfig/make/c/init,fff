/*	init.c
	© James Aylett	*/

#include "init.h"

void init()
{
  int tempint, i;
  char *spritename, lookupstring[256];
/*  char *tempptr*/
  MyWindow *tempptr;
  char *tempptr2;
  icon_createblock ibicon;
  int wimpmessages[4];
  unsigned int temp;
  wimpmessages[0]=message_DATALOAD;
  wimpmessages[1]=message_MENUSDELETED;
  wimpmessages[2]=message_PREQUIT;
  wimpmessages[3]=message_QUIT; /* = 0 => end of list */

  pollblock = malloc(sizeof(event_pollblock));
  result = &(pollblock->data);
  spritename = malloc(12);
  indirectedspace = malloc(IndirectedLimit);
  tempptr = malloc(4600);
  MessageBlock=open_messagefile();

  lookup_message(MessageBlock,"TaskName", lookupstring, 256);
  temp=WimpVersion;
  Wimp_Initialise(&temp, lookupstring, &taskhandle, wimpmessages);
  /* tempint contains actual wimp version number */
  strcpy(spritename,"!ZapConfig");

  /* Iconbar icon	*/
  ibicon.window=-1;
  ibicon.icondata.workarearect.min.x=0;
  ibicon.icondata.workarearect.min.y=-8;
  ibicon.icondata.workarearect.max.x=64;
  ibicon.icondata.workarearect.max.y=78;
  ibicon.icondata.flags.value=0x1700310a;
  ibicon.icondata.data.indirectsprite.name=(void *)spritename;
  ibicon.icondata.data.indirectsprite.spritearea=(void *)1;
  ibicon.icondata.data.indirectsprite.nameisname=8;
  Wimp_CreateIcon(&ibicon,&ibhandle);

  /* Templates	*/
  Wimp_OpenTemplate("<ZapConfig$Dir>.Templates");
  tempptr2=indirectedspace;
  load_template(tempptr, &tempptr2, "info");
  Wimp_CreateWindow((window_block *)tempptr, &InfoWind);
  load_template(tempptr, &tempptr2, "main");
  Wimp_CreateWindow((window_block *)tempptr, &(windows[Main].openblock.window));
  load_template(tempptr, &tempptr2, "modeopts");
  Wimp_CreateWindow((window_block *)tempptr, &(windows[ModeOpts].openblock.window));
  load_template(tempptr, &tempptr2, "modeopts2");
  Wimp_CreateWindow((window_block *)tempptr, &(windows[ModeOpts2].openblock.window));
  load_template(tempptr, &tempptr2, "modepane");
  Wimp_CreateWindow((window_block *)tempptr, &(windows[ModePane].openblock.window));
  load_template(tempptr, &tempptr2, "colour");
  Wimp_CreateWindow((window_block *)tempptr, &(windows[Colours].openblock.window));
  load_template(tempptr, &tempptr2, "upgrade");
  Wimp_CreateWindow((window_block *)tempptr, &(windows[Upgrade].openblock.window));
  load_template(tempptr, &tempptr2, "quitbox");
  Wimp_CreateWindow((window_block *)tempptr, &(windows[QuitBox].openblock.window));
  /* keyboard is the RPC version; keyboard2 is the pre-RPC version */
  if(RPCKeyboard)
    load_template(tempptr, &tempptr2, "keyboard");
  else
    load_template(tempptr, &tempptr2, "keyboard2");
  for(tempint=6; tempint<112; tempint++)
  {
    i=(tempptr->icons[tempint].flags.value);
    i &= IconButtons;
    if(i==(5<<12))
      tempptr->icons[tempint].flags.value ^= (6<<12);
  }
  Wimp_CreateWindow((window_block *)tempptr, &(windows[Keyboard].openblock.window));
  load_template(tempptr, &tempptr2, "display");
  Wimp_CreateWindow((window_block *)tempptr, &(windows[Display].openblock.window));
  load_template(tempptr, &tempptr2, "keymaps");
  Wimp_CreateWindow((window_block *)tempptr, &(windows[Keymaps].openblock.window));
  load_template(tempptr, &tempptr2, "misc");
  Wimp_CreateWindow((window_block *)tempptr, &(windows[Misc].openblock.window));
  load_template(tempptr, &tempptr2, "misc2");
  Wimp_CreateWindow((window_block *)tempptr, &(windows[Misc2].openblock.window));
  load_template(tempptr, &tempptr2, "edit");
  Wimp_CreateWindow((window_block *)tempptr, &(windows[EditOpts].openblock.window));
  load_template(tempptr, &tempptr2, "display2");
  Wimp_CreateWindow((window_block *)tempptr, &(windows[DisplayOpts].openblock.window));
  load_template(tempptr, &tempptr2, "fonts");
  Wimp_CreateWindow((window_block *)tempptr, &(windows[FontOpts].openblock.window));
  load_template(tempptr, &tempptr2, "filetypes");
  if (!ConfigureFiletypes)
  {
    tempptr->icons[23].flags.data.buttontype=0;
    tempptr->icons[24].flags.data.buttontype=0;
    tempptr->icons[25].flags.data.buttontype=0;
    tempptr->icons[28].flags.data.buttontype=0;
    tempptr->icons[29].flags.data.buttontype=0;
    tempptr->icons[30].flags.data.buttontype=0;
  }
  Wimp_CreateWindow((window_block *)tempptr, &(windows[FileOpts].openblock.window));
  Icon_FileIcon(windows[FileOpts].openblock.window, 0, 0xfff);
  Wimp_CloseTemplate();
  for(tempint=0;tempint<TOTALWINDOWS;tempint++)
    Wimp_GetWindowState(windows[tempint].openblock.window,&windows[tempint]);

  lookup_message(MessageBlock,"TaskInfo",lookupstring, 256);
  set_indtext(InfoWind,1,lookupstring);
  lookup_message(MessageBlock,"TaskPurp",lookupstring, 256);
  set_indtext(InfoWind,2,lookupstring);
  lookup_message(MessageBlock,"TaskCopy",lookupstring, 256);
  set_indtext(InfoWind,3,lookupstring);
  lookup_message(MessageBlock,"TaskVers",lookupstring, 256);
  set_indtext(InfoWind,4,lookupstring);

  free(tempptr);
  get_optionset();
/*  lookup_message(MessageBlock, "OptS0", optionset, 12);
  open_optionset();*/

  for(i=0; i<0x1101; i++)
    KeysFile[i]=NULL;

  system("Set ZapConfig$Running Yes");
}

void zapconfig_closedown()
{
  MessageTrans_CloseFile(MessageBlock);
  free(MessageBlock);
  Wimp_CloseDown(taskhandle);
  system("Unset ZapConfig$Running");
  system("Unset Alias$ZapConfig");
  if (ZapChild==TRUE)
  {
    system("Filer_Run <Zap$Dir>.!Run");
  }
}

/*	Doesn't cater for fonts yet	*/
void load_template(MyWindow *loadto, char **indat, char *name)
{
  os_error *e;
  template_block tempblock;
  tempblock.buffer=(window_block *)loadto;
  tempblock.workfree=*indat;
  tempblock.workend=indirectedspace+IndirectedLimit;
  tempblock.font=((font_array *)-1);
  tempblock.name=name;
  tempblock.index=0;
  if ((e=Wimp_LoadTemplate(&tempblock))!=NULL)
  {
    makeerror(TRUE,"ENoTemplate");
//    lookup_message(MessageBlock,"ENoTemplate",output,256);
//    reporterror(0,output, 1, "ZapConfig");
//    zapconfig_closedown();
//    exit(0);
  }
  *indat=tempblock.workfree;
}

msgtrans_filedesc *open_messagefile()
{
  msgtrans_filedesc *MessageBlock;

  if(Module_Claim(16, (void **)&MessageBlock)==NULL)
  {
    if(MessageTrans_OpenFile(MessageBlock, "<ZapConfig$Dir>.Messages", NULL)==NULL)
    {
      /* okay */
      return MessageBlock;
    }
    else
      Module_Free(MessageBlock);
  }
  return NULL;
}
