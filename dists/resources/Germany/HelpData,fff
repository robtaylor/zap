| Zap 'HelpData' Datei. Diese Datei enthält:
|
| 1. Dokumentation aller Zap-Kommandos des Zap modules.
| 2. Hilfetext für die interaktive Zap Hilfe.
|
| Die Daten dieser Datei werden vom 'Help'-Kommando (^H) und der
| Hilfe-Application (!Help) benutzt.
|
| Das Dateiformat besteht aus Ansätzen in der Form:
|
| <label> [<comment>]
| <paragraph of help text>
|
| wobei label ist eines der folgenden:
|
|   <command>		Hilfetext für Kommando <command>
|   @<function>		Hilfetext für Funktion <function>
|   window.<name>	Hilfe für leaf window with template called <name>
|   mode_<name>		Hilfe für ein Fenster des Modes genannt <name>
|   zap.icon		Hilfe für Zap's Haupt-Symbolleistensymbol.
|                              
| Die Kommandos sollten soweit möglich in alphabetischer Reiehfolge
| belassen werden.
| PS Nur die ersten 4 Zeilen werden von der !Help-Anwendung angezeigt.
|    Für weitere Einzelheiten verwende ^H.

| Main icon

zap.icon
Dies ist die Anwendung –Zap”.
Zap ist ein Texteditor.
Mit SELECT klicken, um eine neue Textdatei zu öffnen.
Ein Dateisymbol hierher ziehen, um die Datei zu laden.

| Fenster im Mode 'n'

mode_text
Mode zum Editieren von Text.
Mit SELECT klicken, um die Schreibmarke zu plazieren.
Mit SELECT ziehen, um Text auszuwählen, mit ADJUST Auswahl verändern.
Mehrfach mit der SELECT-Taste klicken, um Teile des Texts auszuwählen.

mode_byte
Byte-Mode
Hex-Eingabe mit sF3 umschalten, Überschreib-Modus mit Insert.
Bei Hex-Eingabe mit den Tasten 0-9,A-F,a-f Hex-Bytes eingebbar, ansonsten werden die ASCII-Werte der eingegebenen Zeichen eingefügt.
RETURN drücken, um das aktuelle Byte zu editieren; die Anweisung wird von BASIC assembliert.
Die Anweisung wird von BASIC assembliert, so daß Sie EQUB, EQUS etc. verwenden können;
allerdings wird nur das erste Byte verwendet.

mode_word
Word (32 bit) Editiermodus.
Umschalten in den Hex-Eingabemodus via sF3 und von Einfügen/Überschreiben mit der Einfüge-Taste.
Im Hex-Eingabemodus ergeben die Tasten 0-9,A-F,a-f hexadezimale Worte (hex words).
ENTFERNEN löscht das gesamte Word.
RETURN drücken, um das aktuelle Word zu editieren.
Die Anweisung wird von BASIC assembliert, so daß Sie EQUB, EQUS etc. verwenden können; allerdings werden nur die erste vier Byte verwendet.

mode_ascii
ASCII-Mode
Eingegebene Zeichen werden direkt eingefügt.
Identisch mit Text-Mode, außer daß es keine Zeilenumbrüche gibt.

mode_code
Mode zum Untersuchen von Assemblerbefehlen
Pfeiltaste RECHTS, um einem Branch zu folgen, LINKS, um zurückzukehren.
RETURN, um den aktuellen Befehl zu editieren.
Die Anweisung wird von BASIC assembliert, so daß Sie EQUB, EQUS etc. verwenden können; allerdings werden nur die erste vier Byte verwendet.

mode_halfword
Halfword (16 bit) Editiermodus.
Umschalten in den Hex-Eingabemodus via sF3 und von Einfügen/Überschreiben mit der Einfüge-Taste.
Im Hex-Eingabemodus ergeben die Tasten 0-9,A-F,a-f hexadezimale Halbworte (hex half words).
ENTFERNEN löscht das gesamte Halfword.
RETURN drücken, um das aktuelle Halfword zu editieren.
Die Anweisung wird von BASIC assembliert, so daß Sie EQUB, EQUS etc. verwenden können; allerdings werden nur die erste zwei Byte verwendet.

mode_doubleword
Double word (64 bit) Editiermodus.
Umschalten in den Hex-Eingabemodus via sF3 und von Einfügen/Überschreiben mit der Einfüge-Taste.
Im Hex-Eingabemodus ergeben die Tasten 0-9,A-F,a-f hexadezimale Doppelworte (hex double words).
ENTFERNEN löscht das gesamte Doubleword.
RETURN hat keinen Effekt.

mode_throwback
Dies ist ein Throwback-Fenster von Zap.
Mit SELECT-Doppelklick oder RETURN an die Stelle gehen.
Dreimal SELECT, um zusätzlich das Fenster nach vorne zu holen.
Auf ADJUST klicken oder ENTFERNEN drücken, um die Zeile zu entfernen.

| Leaf windows

window.CloneBox
Dieses Fenster zeigt die aktuellen Clone-Modi an.
Auf das Menüsymbol klicken für eine Liste der Clone-Modi.
NEU bzw. LÖSCHEN erzeugen bzw. entfernen Clone-Modi.
VERSTECKT entfernt den Clone-Mode aus dem Speicher.

window.CloneCrBox
Mit diesem Fenster wird ein neuer Clone-Mode erzeugt.
Auf das Menüsymbol klicken für eine Liste möglicher Basis-Modi - Clone-Modi erscheinen darin blau, nicht geladene Modi grau.

window.ColourBox
Dies ist Zaps 24-Bit-Farbauswahl.
Klicke auf eine der 16 Wimp-Farben, um sie zu benutzen.
Ziehe die Balken und klicke auf –OK”, um andere Farben zu wählen.
Hier können auch Font-Stile gewählt werden.

window.DyingBox
SPEICHERN anklicken (oder S drücken), um zu speichern und das Fenster zu schließen.
VERWERFEN anklicken (oder D drücken), um die geänderte Datei nicht zu speichern.
ABBRUCH anklicken (oder C drücken), um das Fenster zu schließen.

window.DzapBox
Namen des Dateisystems eingeben und RETURN drücken. Dadurch wird die aktuelle Laufwerksnummer eingesetzt.
Evtl. Laufwerksnummer ändern und RETURN drücken.
–Sektor/Spur/Disk lesen” liest die Daten vom Medium.

window.GotoBox
Dieses Fenster zeigt die aktuelle Position der Schreibmarke im Text.
Gewünschte neue Zeilennummer oder Adresse eingeben.
Es können Ausdrücke wie –&100+32*78” benutzt werden.
CTRL U löscht das Eingabefeld.

window.InfoBox
Dieses Fenster zeigt Informationen über Zap.
Die Anwendung Zap ist Copyright –Zap Developers” 1992-2001.
Ein Klick auf den Knopf gibt eine Liste der Mode-Autoren aus.
Adressen siehe –Copyright”-Datei.

window.LoadBox
EDITIEREN anklicken (oder E drücken), um die Disk-Version separat zu editieren.
ÜBERSCHREIBEN anklicken (oder O drücken), um die Datei zu laden und die ungespeicherten Änderungen zu verwerfen.

window.MacroBox
In den kleinen Eingabefeldern stehen die Makros.
In den größeren Feldern steht der Text, durch den das Makro ersetzt wird.

window.MiniBuf
Dies ist der Zap-Minibuffer.
Ziehen mit SELECT verschiebt den Minibuffer.
Ziehen nahe am rechten Rand verändert die Größe.
ESCAPE drücken, um den Minibuffer zu schließen.

window.MoveBox
Auf die Pfeile klicken, um den Zylinder, Lesekopf oder Sektor zu wechseln.
Tasten: Zylinder vor (drücke C), Zylinder zurück (drücke X),
Kopf vor (drücke T), Kopf zurück (drücke R),
Sektor vor (drücke S), Sektor zurück (drücke A)

window.MzapBox
Das Symbol auf ein Fenster/Iconbar-Symbol der gewünschten Aufgabe ziehen.
RETURN drücken oder auf HOLEN klicken.
Wenn das Symbol auf ein Zap-Kommandofenster gezogen wird, wird dessen Speicher gelesen.

window.NextBox
ERSETZEN (R,M,RETURN) ersetzt eines. AUSLASSEN (S) sucht ohne zu ersetzen nach dem nächsten. LETZTES (L) ersetzt eines und schließt das Fenster. ALLES (A,T,E) ersetzt im Rest der Datei. IN SEL (I) ersetzt in der aktuellen Auswahl.

window.PrintBox
Datei mit Hilfe des Druckertreibers drucken.
Beim Drucken wird der Outline-Font aus dem Ansicht-Menü benutzt.
Auf DRUCKEN klicken, um mit dem Ausdruck zu beginnen.

window.QuickBox
DRUCKEN anklicken oder RETURN drücken, um die Datei direkt an den Drucker zu schicken.
Funktioniert das mit Ihrem Drucker nicht, dann den CR/LF DIP-Schalter ändern ODER:
Den Druckertreiber laden und die Datei in ihn speichern.

window.QuitBox
BEENDEN anklicken (oder Q drücken), um Zap zu beenden, OHNE daß Geändertes gespeichert wird.
NACH VORNE (T, F) anklicken, um die Fenster mit Geändertem nach vorne zu holen.
ABBRUCH (C) anklicken, um diesen Dialog zu schließen.

window.ReplaceBox
Suchstring eingeben und RETURN drücken. CTRL P übernimmt die aktuelle Auswahl.
Ersatzstring eingeben und RETURN drücken.
CTRL U löscht ein Eingabefeld.
CTRL-<Buchstabe> wählt die entsprechende Option.

window.SaveBox
Das Dateisymbol zum Speichern in ein Verzeichnis ziehen.
RETURN drücken oder auf SPEICHERN klicken, um die Datei zu speichern, wenn ein kompletter Pfad im Eingabefeld steht.
MENÜ anklicken für ein Menü von Dateitypen.

window.SaveOBox
ÜBERSCHREIBEN anklicken (oder O drücke), um die gespeicherte Datei mit der geladenen zu überschreiben.

window.SaveCBox
Auf IM CSD SPEICHERN klicken, um die Datei im aktuellen Verzeichnis (–currently selected directory”) abzuspeichern.

window.SaveSCBox
Auf IM CSD SPEICHERN klicken, um die Auswahl im aktuellen Verzeichnis (–currently selected directory”) abzuspeichern.

window.SaveSelBox
Das Dateisymbol zum Speichern der Auswahl in ein Verzeichnis ziehen.

window.SearchBox
Suchstring eingeben und RETURN drücken.
MAKROS EDITIEREN klicken, um die Suchmakros zu ändern.
TAB drücken, um den alten Suchstring einzutragen.
CTRL-<Buchstabe> wählt die entsprechende Option.

window.UndoBox
Zap will wissen, ob der UNDO-Puffer für eine Datei abgeschaltet werden soll.
Vorsicht: Wenn er abgeschaltet ist, arbeiten auch PASTE und YANK nicht mehr; mit CTRL X gelöschter Text ist verloren.

window.WCBox
In diesem Fenster zeigt Zap an, aus wievielen Wörtern die Datei bzw. die Auswahl besteht.


| ***************************************************************
| *                       C O M M A N D S			*
| ***************************************************************

ALLWINDOWS <String>
Führt die angegebenen, durch Doppelpunkte getrennten Zap-Kommandos einmal für
jedes Fenster von Zap aus. Zuvor wird die Schreibmarke in das Fenster
gesetzt.

ALLMODES <string>
Führt den durch Doppelpunkte separierten String von Zap-Kommandos für jeden geladenen Modus aus. Das Kommando wird normalerweise wie vom Iconbar-Symbol aus ausgeführt. Sie können das verhindern wenn der String mit einem Doppelpunkt beginnt, dh. wenn es vom Minibuffer ausgeführt wird; ALLMODES (LINENOS 1) legt die Standardzeilennummeranzeige für alle Modi auf 'logical', während ALLMODES (:LINENOS 1) das für das aktuelle Fenster tut (es sei denn bei Ausführung vom Symbolleistenmenü via COMMANDIB natürlich).

Das Kommando ist hauptsächlich dazu gedacht Optionen für alle geladenen Modi festzulegen, die normalerweise modusbasiert festgelegt werden. Leider gibt es derzeit keinen einfachen Weg das Kommando von ZAPs-Frontend aus zu benutzen.

ALTERSEL (Martin Ebourne)
Setze das nähere Ende der Auswahl auf die aktuelle Position der Schreibmarke
(wie bei SPEZIAL). Wenn keine Auswahl existiert, wähle das nächste Zeichen
aus.

ASYOUTYPE
Schaltet für den Mode –Spell as you type” ein, d.h. sofortige Überprüfung der
Rechtschreibung bei der Eingabe.

AUTOINDENT
Schaltet den Auto-Einrück-Modus ein bzw. wieder aus.
(äquivalent zu WFLAGS_TOGGLE 16)

AUTOSOFTWRAP
Ist diese Option angeschaltet, wird beim Laden einer Datei überprüft, ob sie lange Zeilen enthält. Falls ja, wird automatisch Softwrap eingeschaltet.
In der Grundeinstellung ist Auto-Softwrap angeschaltet.

BASEMAP <Zahl>
** Deprecated; use BASEMAPN instead.
Dieses Kommando schaltet die Basis-Keymap auf die angegebene Keymap um.
Alle weiteren Tastendrücke benutzen diese Keymap.
(Schreibt w_basemap, w_currentmap und w_helpmap - siehe E-Windows)

#Basemap
Definiert die Basis-Keymap (über den Namen) für den Modus.

BASEMAPLIST
Internes Kommando.
Wird benutzt, um das Menü der Keymaps für die Auswahl einer Basis-Keymap zu erzeugen.

BASEMAPN <String>
Dieses Kommando schaltet die Basis-Keymap auf die Keymap mit dem angegebenen Namen um.
Alle weiteren Tastendrücke benutzen diese Keymap.
(Übersetzt den Namen in eine Zahl und ruft BASEMAP auf.)

BEEP
Erzeugt einen Ton ("Piep").
(Ruft VDU 7 auf.)

BINDTOKEY <String>
Berechnet den Zahlenwert des Strings und bindet eine gerade gelernte
Tastenfolge an diesen Tastencode. (Beispiel: BINDTOKEY "&1B")
Wird kein String angegeben, wird man aufgefordert, eine Taste zu drücken.

BITMAPFONT <String>
Weist Zap an, im jeweiligen Fenster einen Bitmap-Font zu benutzen, der in
der Datei –ZapFont:<String>” gespeichert ist. Um sicherzustellen, daß der
Font gewechselt wird, sollte nach diesem Kommando FONTTYPE 1 ausgeführt werden.

BITMAPLIST
Internes Kommando.
Erzeugt das Menü aller verfügbaren Bitmap-Fonts.

BREAK
Springt aus einer REPEAT- oder WHILE-Schleife oder aus einem CASE-Block heraus.

BYTE_CONTROLREPLACE <String>
Setzt das Zeichen, durch das im Byte-Mode Control-Zeichen dargestellt werden,
auf das erste Zeichen des Strings.

BYTE_FLAGSTOGGLE <Zahl>
Wird intern benutzt, um die Optionen des Byte-Mode zu setzen.

BYTE_GROUPSIZE
Legt die Größe einer Gruppe im Byte-Mode fest. Erlaubt sind Werte zwischen 1 und 16.

CANCEL
Bricht Yank und Search-as-you-type ab.
Die Schreibmarke wird an ihre ursprüngliche Position zurückgesetzt.

CASE <String>
Der Anfang eines CASE-Blocks.
 
Der String ist ein Zap-Ausdruck (siehe IF). Er wird mit jedem der Ausdrücke
verglichen, die durch WHEN angegeben werden. 
 
Ein CASE-Block sieht so aus:
	CASE <Ausdruck>:
	WHEN <Liste von Ausdrücken>:<Kommando(s)>:
	WHEN <Liste von Ausdrücken>:<Kommando(s)>:
	...
	DEFAULT:<Kommando(s)>:
	ENDCASE
(Es kann auch CWHEN anstelle von WHEN benutzt werden.)
 
Siehe auch CWHEN, WHEN, DEFAULT, ENDCASE.

CDOWN
Bewegt die Schreibmarke zum Dateiende.
An der vorherigen Position wird eine Markierung erzeugt.
(Mit sF6 kann man wieder an die vorherige Position zurückkehren.)

CHAR <Byte>
Fügt den angegebenen Zeichencode in die Datei ein.
Mehrfache Aufrufe werden (wie bei allen Byte-Aufrufen) gepuffert.
(Benutzt den Mode-Aufruf e_char)

CLEARSEL
Hebt eine bestehende Auswahl auf.
(Ruft Zap_ClearSel auf)

CLEARGC
Löscht den Inhalt des globalen Clipboards, wenn dieses Zap gehört.

CLEFT
Bewegt die Schreibmarke an den Zeilenanfang.
(Benutzt den Mode-Aufruf e_cminus)

CLI <String>
Führt den angegebenen String als *Kommando aus, z.B. CLI "Set A 3".
Ausgaben des Kommandos werden nach –Null:” umgelenkt.
Siehe auch OSCLI und WIMPTASK.

CLONEBASE <String>
Nur nützlich als Kommando eines Menüeintrags. CLONEBASE deaktiviert den Menüeintrag, wenn der angegebene Mode nicht der aktuelle ist oder, falls es sich um
einen Clone-Mode handelt, das Untermenü, in dem er auftaucht, nicht zum
aktuellen Mode gehört.

CLONEBOX
Öffnet das Fenster für die Erzeugung von Clone-Modes.

CLONECREATE <String>
Erzeugt und initialisiert einen Clone-Mode mit dem angegebenen Mode als
Basis-Mode. Der Mode kann anschließend wie alle anderen benutzt werden.
 
CLONECREATE "Foo Text"
 
Erzeugt einen Mode namens –Foo”, der die gleichen Grundeinstellungen wie der
Text-Mode besitzt.

CLONEDELETE <String>
Löscht den angegebenen Mode und alle zugehörigen Einstellungen.
Die Modenummer, die der Mode belegt, wird wieder freigegeben.
 
Der Mode muß ein Clone-Mode sein, er darf weder der Default-Mode sein noch
gerade in Benutzung sein.

CLONEHIDE <String>
Löscht den angegebenen Mode, aber erhält die zugehörigen Einstellungen.
Die Modenummer, die der Mode belegt, wird wieder freigegeben.
Der Mode bleibt nutzbar.
 
Der Mode muß ein Clone-Mode sein, er darf weder der Default-Mode sein noch
gerade in Benutzung sein.

CLOSEOTHER
Schließt das nächste Fenster in der Reihe.
(Schließt das andere Fenster, wenn nur zwei geöffnet sind.)

CLOSEPRINTER
Schließt das –Printer:$”-Fenster des Filers mit *Filer_CloseDir.

CLOSEWINDOW
Schließt das aktuelle Fenster.
Die Schreibmarke wird anschließend in das nächste Fenster in der Reihe
gesetzt.

CODE_FLAGSTOGGLE <Zahl>
Wird intern zum Setzen der Optionen des Code-Mode benutzt.
Die Bedeutung der einzelnen Bits orientiert sich stark an den Optionen des
–Debugger”-Moduls.

COLONSEPARATOR
Schaltet ein bzw. aus, ob zwischen Zeilennummer und Zeile ein Doppelpunkt
angezeigt wird (gleicher Effekt wie WINFO_TOGGLE 3).

COLOURLIST
Wird intern zur Erzeugung des Farb-Menüs benutzt.

COLUMNTAB
Setzt den Tab-Modus auf –Spalten”.
(Ändert b9-10 in w_flags)

COMMAND <String>
Führt das angegebene Kommando (oder mehrere durch Doppelpunkte getrennte
Kommandos) aus.
(Benutzt Zap_CommandString)

COMPILE
Speichert im BASIC-Mode das Programm und führt es dann aus.
Compiliert im C-Mode das Programm.
If running the program and chaining it are functionally equivalent then
COMPILE should attempt to RUN the program in a task window.
(Ruft den Mode-entry-point e_compile auf)

CONFINEHORIZONTALLY
Schaltet die Schreibmarken-Option –Horizontal begrenzt” ein oder aus. Ist sie
eingeschaltet und am Zeilenende wird die rechte Pfeiltaste gedrückt, wird die
Schreibmarke auf den Anfang der nächsten Zeile gesetzt.

CONFINEVERTICALLY
Schaltet die Schreibmarken-Option –Vertikal begrenzt” ein oder aus. Ist sie
eingeschaltet, wird bei vertikalen Bewegungen der Schreibmarke auch ihre
horizontale Position so verändert, daß sie nie hinter dem Zeilenende, sondern
immer hinter einem editierbaren Zeichen steht. Bei weiteren vertikalen
Bewegungen der Schreibmarke wird, soweit möglich, wieder in die ursprüngliche
Spalte zurückgesprungen.
 
Diese Einstellung führt zu einem Verhalten wie bei Editoren, die es nicht
erlauben, daß die Schreibmarke außerhalb des Texts steht.

CONTINUE
Springt zum nächsten UNTIL, ENDWHILE oder ENDCASE.

COPY
Schaltet den Modus mit zweigeteilter Schreibmarke ein.
Jedes Drücken der Copy-Taste kopiert ein einzelnes Zeichen.
ESCAPE beendet den Modus.
(Schaltet Schreibmarke 2 ein und benutzt den Mode-Aufruf e_copy)

COPYSEL
Kopiert die Auswahl an die aktuelle Position.

COREDUMP
Speichert den von Zap belegten Speicher im Zap-Verzeichnis.
Nützlich für Bug-Reports etc.

COUNTMATCHES
Führt die letzte Sucher erneut aus mit Aufblenden einer Infobox mit
der Anzahl der Übereinstimmungen.

CREATEFILE <Zahl>
Erzeugt eine leere Datei vom angegebenen Typ.

CRIGHT
Bewegt die Schreibmarke ans Zeilenende.
(Benutzt den Mode-Aufruf e_cminus)

CUP
Bewegt die Schreibmarke an den Dateianfang, wobei an der vorherigen Position
eine Markierung erzeugt wird.

CURSORMENU
Wird intern zur Erzeugung des Menüs der Schreibmarken-Arten benutzt.

CUT
Löscht die Auswahl.
Ist der Undo-Puffer altiv, dann steuert der Parameter ob sie mit cY (Paste) wieder eingefügt werden kann; wenn er 0 ist (oder übergangen) dann ja.
Wenn Undo ausgeschaltet ist, ist das Gelöschte verloren!

CWHEN <String>
Teil eines CASE-Blocks.
 
CWHEN verhält sich wie das case-Schlüsselwort unter C; wird beim Ausführen
eines davorstehenden Blocks das CWHEN erreicht, wird die Ausführung einfach
fortgesetzt. Soll das Programm stattdessen wie unter BASIC an das ENDCASE
springen, muß WHEN benutzt werden.
 
<String> ist eine durch Kommas getrennte Liste von Zap-Ausdrücken (siehe IF).
 
Falls einer dieser Ausdrücke mit dem bei CASE angegebenen übereinstimmt,
werden die Kommandos bis zum nächsten CWHEN, WHEN, DEFAULT oder ENDCASE
ausgeführt, nicht aber die Kommandos nach DEFAULT.
 
Im Gegensatz zu BASIC kann mehr als ein WHEN- oder CWHEN-Block ausgeführt
werden, wenn die Ausdrücke übereinstimmen.

DATE <String>
Fügt Datum/Zeit in dem durch den String gegebenen Format ein.
Beispiel: "%MI", um die Minuten einzufügen.
(Benutzt OS_ConvertDateAndTime)

DEFAULT
Teil eines CASE-Blocks.
 
Die nachfolgenden Kommandos werden nur ausgeführt, wenn keiner der
WHEN-Blöcke ausgeführt wurde.

DEFAULTMAP
In einem Fenster wird die Basis-Keymap mit der Grundeinstellung für den
jeweiligen Mode initialisiert.
 
Von der Icon-Bar aus wird die Basis-Keymap des Mode auf die in der Keys-Datei
festgelegte, globale Keymap gesetzt.
 
Wenn die Keymap nicht existiert, wird als nächstes die globale Basis-Keymap
und dann Keymap 0 versucht.

DELETE <String>
Wenn das Argument fehlt, löscht das Kommando das Zeichen vor der
Schreibmarke. (benutzt den Mode-Aufruf e_delete mit R7=0)
Ansonsten gibt der String wie folgt an, was gelöscht wird:
 
String		Äquivalent  	Beschreibung
 
"PREV"		DELETE		Löscht das vorherige Zeichen
"NEXT"		DELETENEXT	Löscht das nächste Zeichen
"WORDSTART"	DELWORDSTART	Löscht das vorherige Wort
"WORDEND"	DELWORDEND	Löscht das nächste Wort
"WORD"				Löscht das Wort unter der Schreibmarke
"LINESTART"	DELTOSTART	Löscht bis zum Zeilenanfang
"LINEEND"	DELTOEND	Löscht bis zum Zeilenende
"LINE"		DELLINE		Löscht die aktuelle Zeile
"FILESTART"			Löscht bis zum Dateianfang
"FILEEND"			Löscht bis zum Dateiende
"FILE"				Löscht den gesamten Text in der Datei
"SEL"		CUT		Löscht die Auswahl
"NONSEL"			Löscht alles bis auf die Auswahl
 
Soweit möglich wird eine evtl. bestehende Auswahl erhalten.

DELETENEXT
Löscht das Zeichen unter der Schreibmarke. Kopiert im –Copy”-Modus ein
einzelnes Zeichen.
(benutzt den Mode-Aufruf e_delete mit R7=1)

DELETENEXTNOCOPY
Löscht ähnlich wie DELETENEXT das Zeichen unter der Schreibmarke.

DELLINE
Löscht die Zeile, auf der die Schreibmarke steht.
Mehrere gelöschte Zeilen können mit einem Paste (cY) wieder eingefügt werden.
(benutzt e_lineprev und e_linenext, um die Zeilenenden zu finden)

DELTOEND
Löscht von der Schreibmarke bis zum Zeilenende.
Zieht zwei Zeilen zusammen, falls die Schreibmarke am Zeilenende steht.
(benutzt e_lineend, um das Zeilenende zu finden)

DELTOSTART
Löscht von der Schreibmarke bis zum Zeilenanfang.
(benutzt e_linestart, um den Zeilenanfang zu finden)

DELWORDEND
Löscht von der Schreibmarke bis zum Wortende.

DELWORDSTART
Löscht von der Schreibmarke bis zum Wortanfang.

DISCARDFILE
Gibt den von einer Datei belegten Speicher frei und schließt alle Ansichten,
ohne den Benutzer zu fragen.

DISCARDWINDOW
Schließt ein Fenster und, wenn es die letzte Ansicht einer Datei war (und
–Auto-Löschen von Dateien” an ist), auch den von der Datei belegten Speicher,
ohne den Benutzer zu fragen.

DOUBLEWORD_CONTROLREPLACE <string>
Legt die DoubleWord-Mode Steuerzeichenersetzung auf das erste Zeichen von <string> fest.

DOUBLEWORD_FLAGSTOGGLE <word>
Für intere DoubleWord-Mode-Optionen benutzt.

DOUBLEWORD_GROUPSIZE
Legt die DoubleWord-Mode-Gruppengröße fest. Werte im Bereich 1-16 sind erlaubt.

DOWN
Bewegt die Schreibmarke um eine Zeile nach unten.

DROPMARK
Erzeugt an der aktuellen Position im Text eine Markierung, außer es befindet
sich dort bereits eine.
Siehe auch TOGGLEMARK.

DUMPFILE
Erzeugt eine Textdatei mit der aktuellen Bildschirmdarstellung der Datei.

DZAPBOX
Öffnet das Fenster –Disk lesen”.

EDITBYTE <String>
Assembliert die angegebene Anweisung.
Das niederwertige Byte des Resultats wird an der aktuellen Position in der
Datei eingefügt. Dieses Kommando arbeitet ähnlich wie EDITWORD und benutzt
genau wie dieses intern das ASSEMBLE-Kommando.

EDITWORD <String>
Assembliert die angegebene Anweisung.
Sie wird an der aktuellen Position in der Datei (und unter Berücksichtigung
der Datei-Adresse) eingefügt.
Das Kommando ruft ASSEMBLE auf, der einzige Unterschied ist, daß beim Öffnen
des Minibuffers immer ein DCD zum Editieren vorgegeben wird.

ELSE
Optionaler Teil eines IF-Blocks.
Weil ELSE nur das Ergebnis der IF-Bedingung umkehrt, kann es mehrmals in
einem IF-Block auftreten, allerdings ist das nicht zu empfehlen.

EMACS
Schaltet auf die Emacs-kompatible Keymap um.
(Benutzt BASEMAPN "Emacs")

ENDCASE
Beendet einen CASE-Block. Sollte für jedes CASE auftreten, auch wenn am Ende
eines zusammengesetzten Kommandos für jedes noch nicht beendete CASE ein
ENDCASE implizit ausgeführt wird.

ENDIF
Das Ende eines IF...ELSE...ENDIF-Blocks. Sollte für jedes IF auftreten,
auch wenn am Ende eines zusammengesetzten Kommandos für jedes noch nicht
beendete IF ein ENDIF implizit ausgeführt wird.

ENDWHILE <String>
Das Ende einer WHILE...ENDWHILE-Schleife. Sollte für jedes WHILE auftreten,
auch wenn am Ende eines zusammengesetzten Kommandos für jedes noch nicht
beendete WHILE ein ENDWHILE mit nicht erfüllter Bedingung implizit ausgeführt
wird.

ESCAPE
Beendet folgende Modi, wobei die Position der Schreibmarke sich nicht ändert:
Copy-Modus, Yank-Modus, Auswahl mittels Schreibmarke, Suchen beim Eintippen
(–Search-as-you-type”).
Siehe auch CANCEL (cG).

EXECUTE
Führt die zuletzt gelernte Tastenfolge aus.
(siehe cL)

FASTUNDO
Undo für die letzte Operation durchführen, wobei der schnellste Weg im
Undo-Baum genommen wird. Beispiel: Nach A,B,UNDO,C,FASTUNDO,FASTUNDO wird das
A gelöscht und nicht etwa das B eingefügt.

FFLAGS_TOGGLE <Word>
Allzweck-Kommando für das Invertieren eines Bits im Flag-Word.
Nach der Veränderung wird die Titelleiste aktualisiert.
Siehe WFLAGS_TOGGLE für Einzelheiten über das Argument.

FINDFILE <String>
Öffnet ein Fenster für die angegebene Datei. Als Argument sollte ein
vollständiger Pfad angegeben werden.

FINDFILEREADONLY <String>
Wie FINDFILE, jedoch kann die geladene Datei nicht verändert werden.

FINDFUNCTION
Untersucht den Text unter der Schreibmarke und sucht nach der Definition der
gleichnamigen Funktion, falls diese existiert.
Sucht im BASIC-Mode nach einem FN oder PROC mit dem Namen oder für ein
Assembler-Label, je nachdem, was angebracht ist.

FONTLIST
Wird intern benutzt, um das Menü für die Outline-Fonts zu generieren.

FONTSIZE <Zahl>
Setzt die Fontgröße auf dem angegebenen Wert.

FONTTYPE <Zahl>
Legt die Art des benutzten Font durch einen der folgenden Werte fest:
0=Bitmap-Font bei 1 dpp, 1=skalierter Bitmap-Font, 2=System-Font (ausgegeben
über VDU), 3=Anti-aliased Font (schnell), 4=Anti-aliased Font (ausgegeben
über VDU), 5=Bitmap-Font (doppelte Höhe)

FORMATTEXT
Formatiert den aktuellen Absatz von der Position der Schreibmarke aus. Als
Zeilenbreite für das Formatieren wird der Wert von Wort-Wrap benutzt.

FREECLICK
Schaltet –Positionsklick” für die Schreibmarke ein bzw. aus. Ist die Option
eingeschaltet, kann die Schreibmarke durch einen Mausklick auch hinter das
letzte Zeichen einer Zeile gesetzt werden und bleibt dort, anstelle an das
letzte Zeichen gesetzt zu werden.

FULLUNDO
Undo für die letzte Operation durchführen, wobei der langsamste Weg im
Undo-Baum genommen wird. Beispiel: Nach A,B,UNDO,C,FULLUNDO,FULLUNDO wird das
B eingefügt und nicht das A gelöscht. Siehe auch FASTUNDO.

GETMODULE
Wird intern benutzt, um das Menü aller Module zu öffnen.

GETWORKSPACE
Wird intern benutzt, um das Menü aller Modul-Speicherbereiche zu öffnen.

GETDYNAMICAREA
Wird intern benutzt, um das Menü aller dynamischen Bereiche zu öffnen.

GOTO
Öffnet das Fenster –Gehe nach”.

HALFWORD_CONTROLREPLACE <string>
Legt die HalfWord-Mode Steuerzeichenersetzung auf das erste Zeichen von <string> fest.

HALFWORD_FLAGSTOGGLE <word>
Für intere DoubleWord-Mode-Optionen benutzt.

HALFWORD_GROUPSIZE
Legt die HalfWord-Mode-Gruppengröße fest. Werte im Bereich 1-16 sind erlaubt.

HELP <String>
Liefert Online Hilfe für einen Betreff abhängig vom ersten Zeichen von <string>.
'c'=Hilfe für ein Kommand (HELPCOM), 'f'=Hilfe für eine Funktion (HELPFN),
'k'=Hilfe für ein Taste (HELPKEY),   'v'=Hilfe für ein c-var (HELPVAR),
'm'=Hilfe für den aktuellen Mode,    'd'=Öffnet das Zap's docs verzeichnis,
'z'=Lädt ZAPs-Haupthilfedatei.

HELPFN <String>
Hilfe zu der angegebenen Funktion.

HELPKEY <String>
Das Argument wird als Zahl ausgewertet, dann wird Hilfe zu diesem Tasten-Code
gegeben.

HELPCOM <String>
Hilfe zum angegebenen Kommando.

HELPVAR <string>
Hilfe für c-var <string> wird gegeben.

HEXASCII
Schaltet zwischen der Eingabe als Hex-Code und als ASCII-Zeichen hin und her.
Wird im Byte-Mode für die verschiedenen Eingabe-Modi benutzt.
(Äquivalent zu WFLAGS_TOGGLE 5)

ICONISE
Führt ein Iconise für das Fenster durch, d.h. es wird durch ein Symbol auf
der Pinwand ersetzt.

IF <String>
Anfang eines IF...ELSE...ENDIF-Blocks. (ELSE ist optional.)
 
Der String ist ein Zap-Ausdruck, der mit Hilfe der Routinen des
Betriebssystems ausgewertet wird, nachdem Zap-Funktionen ersetzt wurden.
Den Funktionsnamen muß ein –@” vorangestellt werden.
 
Der Block hat folgendes Aussehen:
	IF <Bedingung>:<Kommando(s)>:ENDIF
oder	IF <Bedingung>:<Kommando(s)>:ELSE:<Kommando(s)>:ENDIF
Die Bedingung kann beispielsweise sein:
	(@MODEN="text" OR @MODEN="email")
 
IFs können verschachtelt werden.

INDENT <String>
Rückt die aktuelle Auswahl um den angegebenen String ein.
Läßt sich der String als Zahl auswerten, wird um die angegebene Anzahl an
Leerzeichen eingerückt bzw. es werden (bei negativem Wert) Zeichen vom
Zeilenanfang entfernt. Ohne Argument wird der Wert im Menü
–Auswahl.Bearbeiten.Einrücken” benutzt, der mithilfe von INDENTBY gesetzt
werden kann.

INDENTBY <String>
Rückt die aktuelle Auswahl um den angegebenen String ein.
Läßt sich der String als Zahl auswerten, wird um die angegebene Anzahl an
Leerzeichen eingerückt bzw. es werden (bei negativem Wert) Zeichen vom
Zeilenanfang entfernt. Ohne Argument wird der Minibuffer geöffnet, in dem
ein Druck auf die TAB-Taste den alten Wert einfüllt.

INDIRECT
Springt an die Adresse, die das Word unter der Schreibmarke enthält.
(An der vorherigen Position wird eine Markierung erzeugt.)

INFINITEWRAP
Schaltet in Fenstern mit Window-Wrap die Option –Unendliches Wrap” ein bzw.
aus.

INFOBOX
Öffnet das Info-Fenster.

INSERT <String>
Fügt den angegebenen String im Text ein.
(Benutzt den Mode-Aufruf e_char)

INSERTBLOCK <String>
Wie INSERT, aber die Änderung kann mit nur einer Undo-Operation rückgängig
gemacht werden.
Äquivalent zu STARTOP:INSERT <String>:STOPOP

INSERTBLOCKGS <String>
Wie INSERTGS, aber die Änderung kann mit nur einer Undo-Operation rückgängig
gemacht werden.
Äquivalent zu STARTOP:INSERTGS <String>:STOPOP

INSERTDATE
Fügt das aktuelle Datum in dem Format ein, das in der –Settings”-Datei
festgelegt wurde. (Variable &300)

INSERTGS <String>
Fügt den angegebenen String in die Datei ein, nachdem sie durch OS_GSTrans
geschickt wurde. Dadurch können Ctrl-Zeichen (z.B. |M) eingegeben werden.
(Benutzt den Mode-Aufruf e_char)

INSERTTIME <String>
Fügt die aktuelle Uhrzeit in dem angegebenen Format ein. Ist kein Argument
angegeben, wird das in der –Settings”-Datei festgelegte Format benutzt
(Variable &301).

INSTALLICON
Erzeugt ein Icon auf der Icon-Bar, außer dies ist schon geschehen.

JOINLINE
Zieht die aktuelle Zeile und die nächste zu einer Zeile zusammen.
(Benutzt den Mode-Aufruf e_joinline)

KEEPREGION
Kopiert die aktuelle Auswahl in den Yank-Puffer (Emacs kill ring).
Mit cY kann ein Paste durchgeführt, d.h. der Text wieder eingefügt werden.
Äquivalent zu Meta-W unter Emacs.

KEYMAP <Zahl>
** Deprecated; use KEYMAPN instead.
Wählt nur für den nächsten Tastendruck die angegebene Keymap aus.
Nachdem dieser Tastendruck stattgefunden hat, wird wieder auf den
BASEMAP-Wert zurückgeschaltet.
(Wird z.B. von den Ctrl-X-Tastendrücken der Emacs-Keymap genutzt.)

KEYMAPN <String>
Wählt nur für den nächsten Tastendruck die angegebene Keymap aus.
Nachdem dieser Tastendruck stattgefunden hat, wird wieder auf den
BASEMAP-Wert zurückgeschaltet.
(Übersetzt den Namen in eine Zahl und ruft dann KEYMAP auf.)

LASTCYLINDER (Darren Salt)
Geht beim direkten Lesen von Platte zum letzten Zylinder.

LASTMARK
Setzt die Schreibmarke auf die letzte Markierung im Markierungs-Puffer.

LASTMATCH
Bewegt die Schreibmarke aufwärts bis zum letzten Auftreten des aktuellen
Suchstrings. Springt dabei von einer Datei in die nächste, wenn –Alle
Dateien” aktiviert ist.

LASTSECTOR
Geht beim direkten Lesen von Platte zum vorherigen Sektor.

LASTTRACK
Geht beim direkten Lesen von Platte zur vorherigen Spur.

LEARN
Beginnt mit der Aufnahme einer Folge von Tastendrücken bzw. beendet sie.
Mittels EXECUTE (F1) kann die Tastenfolge erneut ausgeführt werden.
Auch ein Druck auf ESC wird mitaufgenommen, er bricht die Operation nicht ab.

LEFT
Bewegt die Schreibmarke nach links.
(Benutzt den Mode-Aufruf e_minus)

LINEEDIT
Schaltet den Zeileneditier-Modus ein bzw. aus.
(Äquivalent zu WFLAGS_TOGGLE 14)

LINENOS <Zahl>
Beeinflußt die Anzeige von Zeilennummern im Fenster:
0=keine Zeilennummern, 1=Logische Zeilennummern, 2=Physische
Zeilennummern, 3=Adressen

LINESELECT
Schaltet die Option –Zeilen-Auswahl” ein bzw. aus. Sie beeinflußt, ob Zap bei
einer Auswahl, die sich über mehrere Zeilen erstreckt, immer ganze Zeilen
auswählt bzw. bei einem Paste am Zeilenanfang einfügt.

LINESPACING <Zahl>
Setzt den Zeilenabstand auf den angegebenen Wert.

LINEWRAP
Schaltet Zeilen-Wrap ein bzw. aus.
(Äquivalent zu WFLAGS_TOGGLE 26)

LISTFNS
Erzeugt eine Liste aller Funktionsdefinitionen für den aktuellen Mode.
(Benutzt e_listfns)

LOADLIST
Wird intern für die Erzeugung eines Menüs aller ladbaren Modes benutzt.

LOADMODULE <String>
Lädt das Modul mit dem angegebenen Dateinamen als Zap-Modul.
Achtung: Sehr low-level - der Versuch, ein bereits geladenes Modul nochmals
zu laden, führt zu einem Absturz.

LOCALPASTE
Führt Paste durch, wobei immer die zuletzt ausgeschnittene Auswahl eingefügt
wird. Der Inhalt des globalen Clipboard, u.U. Daten einer anderen
Anwendung, wird ignoriert.

LOCAL <String>
Deklariert Variablen für den aktuellen Kommando-String als lokal. Das
Argument ist eine durch Kommas getrennte Folge von Variablennamen, z.B.
	LOCAL (foo,bar)
Die Benutzung von Wildcards ist nicht möglich.
 
Die Variablen werden NICHT initialisiert; es werden nur ihre alten Werte
gespeichert und am Ende des Kommando-Strings wiederhergestellt.

MAKEDEFAULT <word>
Speichert die Einstellungen des Fensters als Grundeinstellungen.
Ist word = 0, dann nur für den aktuellen Modus.
Ist word <> 0, dann für alle geladenen Modi.
 
Wenn anschließend –Werte abspeichern” folgt, werden die Einstellungen
dauerhaft aktiv. Nützlich zum Einstellen der Farben.

MARGIN <Zahl>
Setzt den Rand auf den angegebenen Wert.

MENUOPEN <Zahl> (Chris Rutter)
Öffnet eines von Zaps internen Menüs, identifiziert durch seine Nummer.
Vertrauen Sie nicht auf Nummern >=20, da diese zwischen Versionen von Zap oder Ausführungen der Menüdateien wechseln können.

Ein Beispiel für eine Anwendung wäre folgender Eintrag in der
–Settings”-Datei:
Command executed on IB ADJUST   &30F    MENUOPEN 2

MINIMENU
Wird intern zur Erzeugung des Menüs von Minibuffer-Einstellungen benutzt.

MINIMISEMEMORY
Räumt im Heap auf.
Das Kommando kann leider normalerweise nicht viel Speicher freimachen, weil
es sich bei dem Heap um ein Acorn OS_Heap handelt.
Wird automatisch immer dann ausgeführt, wenn eine Datei von Zap aus dem
Speicher entfernt wird.

MISCOPS <Zahl>
Schaltet eine Option an oder aus, die durch eine Zahl identifiziert wird:
 0=Automatisches Löschen von Dateien, wenn ihr Fenster geschlossen wird
 1=Automatisches Aufheben einer Auswahl, wenn etwas getippt wird
 2=(Reserviert)
 3=Blinkende Schreibmarke
 4=Dateistempel vor dem Speichern überprüfen
 5=Löschen des alten Suchstrings bei Öffnen des –Suchen”-Fensters
 6=Schreibmarke bleibt beim Scrollen des Fensters stets sichtbar
 7=Erkennen der CRLF-Zeilenenden von MS-DOS-Dateien
 8=Automatisches Laden von FlashCar
 9=Automatisches Laden von LineEditor
10=Automatisches Laden des Disassemblers
11=Automatisches Laden des Assemblers
12=Automatisches Laden von HidePtr
13=Ungültige Wimp-Messages erlauben
14=Keine Warntöne
15=Kein Anti-aliasing
16=Automatisches Laden von IClear
17=Automatisches Laden von KeyExtend
18=Keine horizontale Scroll-Leiste
19=Startup-Kommando auch ausführen, wenn beim Init Dateien geladen werden
20=Minibuffer öffnet sich immer in der vollen Fensterbreite
21=Dialoge benutzen Anwendersprites


MODE <Zahl>
** Deprecated. Use MODEN instead.
Wechelt in den angegebenen Mode.

MODEN <String>
Wechselt in den Mode, der durch den angegebenen String bezeichnet wird.

MODENMENU <string>
Generiert das Modusmenü des angegebenen Modes. Wir keiner angegeben, wird der aktuelle benutzt.

MOVEBOX
Öffnet das Fenster zur Disk-Navigation, vorausgesetzt, es handelt sich um
eine entsprechende Datei.

MOVESEL
Verschiebt die Auswahl an die aktuelle Position der Schreibmarke.

MULTICOMMAND <Daten>
Führt eine Reihe anderer Befehle aus, z.B. mit LEARN aufgenommene oder durch
–:” voneinander getrennte. Die Befehle sind im Datenblock gespeichert.
Der Datenblock ist eine mit -1 beendete Liste von Einträgen im unten
beschriebenen Format. Die Daten für die auszuführenden Kommandos stehen mit
Ausnahme von Typ 4 (andere Kommandostrings) immer im Datenblock.
	#0 Adresse des Kommandos
	#4 Länge der Daten/Anzahl (R1 beim Kommandoaufruf)
	#8 Daten für das Kommando, abhängig vom Typ (siehe E-command):
		0 Keine Daten
		1 Folge von #4 Bytes, danach Align
		2 Folge von #4 Words
		3 Mit Nullbyte beendeter String, danach Align
		4 Pointer zum Datenblock

MZAPBOX
Öffnet das Fenster –Taskspeicher lesen”

NEWFILE <String>
Erzeugt eine neue Datei im Speicher. Der Mode und Dateityp sind vom Parameter
und der Situation abhängig; sie können durch –<Modename> <Dateityp>”
vorgegeben werden, z.B. NEWFILE "Byte &FFD". Sind sie nicht angegeben, werden
sie vom aktuellen Mode übernommen bzw. auf der Iconbar auf "Text &FFF"
gesetzt.

NEWTYPE <Zahl>
Ändert den Dateityp der Datei auf den angegeben Wert.
Erzeugt im Haupt-Optionsmenü eine Datei <Zahl>.

NEWVIEW
Öffnet eine neue Ansicht dieser Datei.
(Mode und Fenstereigenschaften werden vom alten Fenster übernommen.)

NEWVIEWLIST
Wird intern benutzt, um ein Menü mit Dateien zu erzeugen, für die eine neue
Ansicht geöffnet werden soll.

NEXTCYLINDER (Darren Salt)
Geht beim direkten Lesen von Platte zum nächsten Zylinder.

NEXTMARK
Springt zur nächsten Markierung im Markierungs-Puffer.

NEXTMATCH
Springt zum nächsten Auftreten des aktuellen Suchstrings.

NEXTSECTOR
Geht beim direkten Lesen von Platte zum nächsten Sektor.

NEXTTRACK
Geht beim direkten Lesen von Platte zur nächsten Spur.

NONSTANDARD
Schaltet den –Non-standard”-Editiermodus ein bzw. aus.
(Äquivalent zu WFORMAT_TOGGLE 15).

NULL
Hat keine Wirkung.
(Verhindert aber, daß der Tastendruck von Zap mit Wimp_ProcessKey
weitergeleitet wird)

OPENPARENT
Öffnet das Verzeichnis, in dem die aktuelle Datei gespeichert ist.

OPENPRINTER
Öffnet mittels *Filer_OpenDir das Filer-Verzeichnis –printer:$”.

OSCLI <String>
Führt den angegebenen String als *Kommando aus, z.B. OSCLI "Help".
Ausgaben des Kommandos werden nach <Wimp$Scrap> umgelenkt.
Diese Datei wird angezeigt, wenn sie nicht leer ist. Siehe auch CLI und
WIMPTASK.

OUTDENT
Rückt die Auswahl aus, d.h. entfernt Zeichen vom Zeilenanfang.
(Rückt aus um die durch den Einrück-String gegebene Anzahl von Zeichen)

OUTLINEFONT <String>
Das Argument ist ein Font-Name, vor dem ein –#” stehen kann. Wenn das –#”
vorhanden ist, wird der Font nicht installiert und gecachet - nützlich, um
bei Verwendung zusammen mit dem FONTSIZE-Kommando einen zweiten Versuch zu
verhindern, den Font zu cachen.

OWNEDBY <string>
Nur als Kommando für Menüeinträge; OWNEDBY deaktiviert (schattiert) den Menüeintrag wenn der angegebene Modus nicht der ist der den Puffer besitzt,
d.h. Bytemode für die über 'read disc'-Box erzeugten.

PASTE
Führt einen Paste durch, d.h. die zuletzt gelöschte Auswahl wird eingefügt.
(Mit YANK kann man alle vorher gelöschten Textteile erhalten.)

PASSTHROUGH <Wimp-Tastencode>
Übergibt im TaskWindow-Mode den Wimp-Keycode an den laufenden Task, wobei der
Code in einen normalen Tastencode übersetzt wird. Bespiel: PASSTHROUGH &19B
für sCopy.

PRINTFILE
Öffnet das Fenster –Datei drucken”.

QUICKPRINT
Öffnet das Fenster –Schnell-Ausdruck”.

QUICKSAVE
Speichert die Datei ohne weitere Abfragen ab.

QUIT
Meuchelt Zap - tot!
(Fragt zuerst nach, ob geänderte Dateien gespeichert werden sollen.)

QUOTE
Fügt den Tastencode des anschließend getippten Zeichens in den Text ein.
Der eingefügte Code ist der Zap-Keycode.
Um ein Nullbyte einzufügen, muß z.B. cQ cSpace gedrückt werden.

READONLY
Schaltet Read-only für die Datei ein oder aus.
(Bit 8 von f_flags)

REDO
Macht die letzte Undo-Operation rückgängig, egal, ob es sich dabei um
FULLUNDO oder FASTUNDO handelte.

RELOADKEYS
Lädt die –Keys”-Datei neu, die geänderte Tastendefinitionen enthalten kann.

REMOVELIST
Wird intern benutzt, um ein Menü von Dateien zu erzeugen, die aus dem
Speicher entfernt werden können.

RENUMBER
Numeriert im BASIC-Mode das Programm neu.
(benutzt allgemein den Mode-Aufruf e_renumber)

REPEAT
Anfang einer REPEAT...UNTIL-Schleife; die Schleife wird mindestens einmal
ausgeführt. Wenn gerade LEARN aktiv ist, wird die Schleife nur
einmal aufgenommen.
 
Eine Schleife sieht so aus:
	REPEAT:<Kommando(s)>:UNTIL <Bedingung>
 
REPEATs können verschachtelt werden.
 
Achtung: Es können leicht unendliche Schleifen auftreten. Deswegen kann die
Schleife mit Alt-Escape abgebrochen werden.

REPLACE
Öffnet das Fenster –Suchen und ersetzen”.

RETURN
Erzeugt einen Zeilenumbruch (außer bei Zeilen-Edit) und rückt ein, wenn
Auto-Einrücken angeschaltet ist. Beendet auch den Copy-Modus mit
zweigeteilter Schreibmarke.
(benutzt den Mode-Aufruf e_return)

RETURNCHAR <ASCII-Code>
Setzt den Code des Zeichens, das als Zeilenumbruch interpretiert wird.

RETURNNOINDENT
Erzeugt einen Zeilenumbruch wie RETURN, rückt aber auch dann nicht ein, wenn
Auto-Einrücken angeschaltet ist.

RIGHT
Bewegt die Schreibmarke nach rechts.
(benutzt den Mode-Aufruf e_plus)

RUN
Führt im BASIC-Mode das BASIC-Programm bei PAGE aus.
(benutzt allgemein den Mode-Aufruf e_run)

RUNANDQUIT
Führt im BASIC-Mode das BASIC-Programm bei PAGE aus und beendet dann BASIC.
(benutzt allgemein den Mode-Aufruf e_runandquit)

SAVE
Öffnet das Fenster –Speichern”.

SAVEANDRUN
Speichert im BASIC-Modus das Programm und führt es dann (mit -chain) aus.
(benutzt allgemein den Mode-Aufruf e_saveandrun)

SAVEFILE <String>
Speichert die aktuelle Datei unter dem angegebenen Dateinamen.
Ist kein Argument angegeben, wird die Datei unter ihrem bisherigen Namen
gespeichert. (Hat sie keinen, öffnet Zap zur Eingabe eines Namens den
Minibuffer.)

SAVEOPTIONS
Speichert die aktuellen Grundeinstellungen in der –!Config”-Datei
(<Zap$Options>).

SAVESEL
Öffnet das Fenster –Auswahl speichern”.

SCDOWN
Bewegt den Fensterinhalt um eine Zeile nach unten, ohne die Position der
Schreibmarke zu verändern.

SCLEFT
Bewegt den Fensterinhalt um ein Zeichen nach links, ohne die Position der
Schreibmarke zu verändern.

SCRIGHT
Bewegt den Fensterinhalt um ein Zeichen nach rechts, ohne die Position der
Schreibmarke zu verändern.

SCUP
Bewegt den Fensterinhalt um eine Zeile nach oben, ohne die Position der
Schreibmarke zu verändern.

SDOWN
Springt um eine Seite nach unten.

SEARCHBACK <String>
Sucht beim Eintippen (–Search as you type”) rückwärts, wenn kein Argument
angegeben ist, ansonsten wird nach dem angegebenen String gesucht. Die
Schreibmarke wird ans Ende des Gefundenen gesetzt.

SEARCHBUF <String>
Öffnet ohne Argument das Fenster –Suchen”, wobei die Option –Liste”
eingeschaltet ist. Erzeugt andernfalls ein Fenster mit einer Liste aller
Vorkommen des angegebenen Strings.

SEARCHCUR <String>
Öffnet ohne Argument das Fenster –Suchen”, wobei die Option –Liste”
ausgeschaltet ist. Springt mit Argument an das erste Vorkommen des
Suchstrings im Text.

SEARCHFORWARD <String>
Suchen beim Eintippen (Search as you type) vorwärts. Sucht entweder nach dem
angegebenen String oder öffnet, wenn kein Argument angegeben ist, den
Minibuffer zur Eingabe eines Suchstrings.
Die Schreibmarke wird ans Ende des gefundenen Texts gesetzt.

SELECTBUFFER
Wählt die ganze Datei aus.

SELECTLINE
Wählt die Zeile aus, auf der sich die Schreibmarke befindet.

SELREGION
Startet die Textauswahl durch Bewegung der Schreibmarke.
Mit ESCAPE wird die Textauswahl beendet.
(benutzt Schreibmarke Nr. 4)

SENDSEL <String>
Schickt die Auswahl Zeichen für Zeichen in den Tastaturpuffer. Die Operation
kann durch ESCAPE abgebrochen werden.
Wenn als Argument –X” angegeben ist, werden keine Ctrl-Zeichen geschickt.
Es können nicht zwei SENDSEL-Operationen gleichzeitig ausgeführt werden.

SET <String>
Setzt eine Zap-Variable auf das Ergebnis eines Zap-Ausdrucks.
Benutzung: SET (Variable=Ausdruck)
Beispiel:  SET (foo="String")
	   SET (foo=12)
	   SET (bar=@CHAR)
 
Innerhalb eines Ausdrucks:
 
Um den Wert einer Variablen zu benutzen, muß ihrem Namen –@$” (String) oder
–@#” (Zahl) vorangestellt werden.
Beispiel: INSERT $(@$foo)
 
Um den Wert einer Variablen als Ausdruck auswählen, –@=” voranstellen.
Beispiel: CHAR #(@=bar)

SETMARGINWIDTH <String>
Legt fest, wieviele Spalten für Zeilennummern verwendet werden. Erlaubt sind
Werte zwischen "1" und "8". Ist kein Argument angegeben, wird der Minibuffer
zur Eingabe geöffnet.

SETWIDTH <String>
Legt fest, wieviele Zeichen in einer Zeile des Fensters angezeigt werden.
(benutzt den Mode-Aufruf e_setwidth)

SLEFT
Bewegt die Schreibmarke um ein Wort nach links.
(ruft e_sminus auf)

SOFTWRAP
Schaltet durch Setzen der verschiedenen internen Flags den Softwrap-Modus ein
bzw. aus und veranlaßt, daß die Darstellung im Fenster aktualisiert wird.

SPLITLINE
Fügt an der aktuellen Position der Schreibmarke einen Zeilenumbruch ein.
(benutzt den Mode-Aufruf e_splitline)

SRIGHT
Bewegt die Schreibmarke um ein Wort nach rechts.
(ruft e_splus auf)

STARTOP
Zeigt den Beginn einer zeitintensiven Zap-Operation an. Verwandelt den
Mauszeiger in eine Sanduhr und sorgt dafür, daß die nachfolgenden Kommandos
mit nur einer Undo-Operation rückgängig gemacht werden können.

STARTADDR <Adresse>
Setzt die Startadresse des Dateianfangs auf den angegebenen Wert.
(Die Adresse wird im Byte-/Code-Mode angezeigt.)

STARTLINE <Zahl>
Setzt die Nummer der ersten Zeile der Datei auf den angegebenen Wert.

STILLDOWN
Kombiniert die Wirkung von DOWN und SCDOWN, d.h. bewegt die Schreibmarke um
eine Zeile nach unten und gleichzeitig den Fensterinhalt um eine Zeile nach
oben.

STILLUP
Kombiniert die Wirkung von UP und SCUP, d.h. bewegt die Schreibmarke um eine
Zeile nach oben und gleichzeitig den Fensterinhalt um eine Zeile nach unten.

STOPOP
Zeigt das Ende einer zeitintensiven Zap-Operation an. Das Kommando sollte
nach jedem STARTOP-Kommando ausgeführt werden.

STRIPSPACES <Zahl>
Bearbeitet die Leerzeichen in einer Datei anhand der Bits, die im Argument
gesetzt sind.
b0=Leerzeichen am Zeilenende löschen, b1=Tabs am Zeilenende löschen,
b2=Tabify (Leerzeichen in Tabs umwandeln), b3 und höher reserviert

SUP
Springt um eine Seite nach oben.

SUSPEND
Startet die System-Kommandozeile (äquivalent zu F12).

SWAPCHARS
Vertauscht die Zeichen links und rechts von der Schreibmarke.

SWAPWINDOW
Setzt die Schreibmarke in das nächste geöffnete Fenster.
Springt ggf. auch zwischen mehreren Ansichten derselben Datei hin und her.

SWITCHTAB
Schaltet den Tab-Modus zwischen Unix-Tabs und echten Tabs um.
(b9-b10 von w_flags)

TAB
Führt abhängig vom Mode die Operation für TAB aus.
(ruft e_tab auf)

TABCHAR <Zahl>
Setzt den Zeichencode, der als Tab-Zeichen interpretiert werden soll;
normalerweise ist das 9.

TABDISPLAY <Zahl>
Legt mittels des Arguments fest, wie Tabs angezeigt werden:
0=keine gesonderte Behandlung, 1=Leerzeichen, 2=Pfeile, 3=Striche mit Pfeil.

TABMODE <Zahl>
Legt mittels des Arguments fest, wie Tabs eingefügt werden:
0=Unix-Tab, 1=wie bei Edit, 2=Spalten-Tab

TABSASSPACES
Schaltet ein bzw. aus, ob Tabs als Leerzeichen oder Tab-Zeichen (Code 9)
eingefügt werden.
(äquivalent zu WFLAGS_TOGGLE 11)

THROWBACK_FLAGSTOGGLE <word>
Intern für die Festlegung der Throwback-Mode-Optionen verwendet.

TOBACK
Schickt das Fenster nach hinten.
(mit Zap_OpenWindow 4)

TOFRONT
Holt das Fenster nach vorne.
(mit Zap_OpenWindow 3)

TOGGLEHEX
Schaltet zwischen dezimaler und hexadezimaler Darstellung von Zeilennummern
hin und her. (b10 von w_format)

TOGGLEINSERT
Schaltet Überschreiben ein bzw. aus.
(äquivalent zu WFLAGS_TOGGLE 1).

TOGGLEMARK
Erzeugt eine Markierung bzw. löscht eine bereits bestehende Markierung an der
aktuellen Position der Schreibmarke.

TOGGLEUNDO
Schaltet den Undo-Puffer ein und aus.

TOGGLEWIND
Schaltet zwischen voller und zuletzt eingestellter Fenstergröße um.
(Beim Umschalten auf volle Größe werden die bisherigen Werte in w_togminx bis
w_togmaxy gespeichert.)

TOTALSEL (Elliott Hughes)
Summiert die Zahlen der aktuellen Selektion.
Arbeitet ganz wie das WC-Kommando.

UNIVERSALARG <String>
Wertet das Argument als Zahl-Ausdruck aus und übergibt es dann an das nächste
Kommando. Normalerweise wird das nächste Kommando dadurch so oft
ausgeführt, wie das Argument von UNIVERSALARG angibt.

UNSET <String>
Löscht eine oder mehrere Zap-Variablen
Benutzung: UNSET (<Variablen-Name>)
Beispiel:  UNSET (foo)
	   UNSET (b#r)
	   UNSET (q*x)
	   UNSET (*)

UNTIL <String>
Ende einer REPEAT...UNTIL-Schleife. Nach jedem REPEAT vorgeschrieben, obwohl
am Ende eines Kommandostrings implizit ein UNTIL (1) für jede noch nicht
beendete REPEAT-Schleife ausgeführt wird.
 
Das Argument ist ein Zap-Ausdruck (siehe IF).
 
Eine Bedingung kann z.B. so aussehen:
	(@CHARSTR="\n")

UP
Bewegt die Schreibmarke eine Zeile nach oben.

UPDATEWINDOW
Veranlaßt, daß die Darstellung des Fensters aktualisiert wird, von dem aus es
aufgerufen wird. Die Position der Schreibmarke und einer Auswahl wird
beibehalten.

WFLAGS_ALTER <Zahl>
Ändert Bits in w_flags oder opt_flags.
Die Darstellung des Fensters wird anschließend anhand der geänderten Bits
aktualisiert.
Das Argument hat dasselbe Format wie bei WFLAGS_TOGGLE.

WC (Elliott Hughes)
Zählt die Wörter in einer Datei. Als Kommando aufgerufen öffnet es ein
Fenster mit dem Ergebnis dort, wo der Mauszeiger ist. Von einem Menü aus
aufgerufen, erzeugt es dasselbe Fenster als Untermenü. Die Vorgehensweise
beim Zählen ist (meines Wissens) dieselbe wie bei Impression Publisher: Nicht
sehr genau, aber recht schnell. (Der Name hat nichts mit Toiletten zu tun,
sondern wurde nur so gewählt, weil das entsprechende Unix-Utility den
gleichen Namen hat.)

WCSEL (Elliott Hughes)
Zählt die Wörter in der aktuellen Auswahl. Verhält sich ansonsten so wie WC.

WFLAGS_TOGGLE <Zahl>
Ändert Bits in w_flags oder opt_flags.
Die Titelleiste des Fensters wird anschließend aktualisiert.
Das Argument ist ein kurzes –Programm” mit bis zu 4 Anweisungen in den 4
Bytes der Zahl. Jedes Byte sieht so aus:
 b0-b4 = Bit, das verändert wird
 b5-b6 = 0=> invertieren, 1=> setzen, 2=> löschen
 b7    = (nur in den 3 oberen Bytes) 1, um anzuzeigen, daß dieses Byte
	 benutzt werden soll.
Beispiele: &5 steht für –invertiere Bit 5”
	   &8609 steht für –invertiere Bit 9, invertiere Bit 6”

WFORMAT_ALTER <Zahl>
Ändert Bits in w_format oder opt_format.
Die Titelleiste des Fensters wird anschließend aktualisiert.
Das Argument hat dasselbe Format wie bei WFLAGS_TOGGLE.

WFORMAT_TOGGLE <word>
Kommando, um Bits der w_format oder opt_format words zu ändern. Das Fenster wird anschließend neu dargestellt, um den neuen Status anzuzeigen.
Das <word> ist wie für WFLAGS_TOGGLE.

WHEN <String>
Teil eines CASE-Blocks.
 
WHEN unterbricht wie unter BASIC die Ausführung, sobald es auf das nächste
WHEN/DEFAULT stößt. Soll das wie unter C nicht der Fall sein, sollte CWHEN
benutzt werden.
 
Das Argument ist eine durch Kommas getrennte Liste von Zap-Ausdrücken (siehe
IF).
 
Wenn der CASE-Ausdruck mit einem dieser Ausdrücke übereinstimmt, werden die
Kommandos bis zum nächsten CWHEN, WHEN, DEFAULT oder ENDCASE ausgeführt,
nicht aber nicht die Kommandos nach DEFAULT.
 
Es können bei Übereinstimmung mit dem CASE-Ausdruck auch die Kommandos nach
mehreren CWHEN- oder WHEN-Kommandos ausgeführt werden, nicht nur die nach dem
ersten wie unter BASIC.

WHILE <String>
Anfang einer WHILE...ENDWHILE-Schleife. Wenn gerade LEARN aktiv ist, wird die
Schleife nur einmal aufgenommen.
 
Das Argument ist ein Zap-Ausdruck (siehe IF).
 
Eine Schleife kann so aussehen:
	WHILE <Bedingung>:<Kommando(s)>:ENDWHILE
und eine Bedingung so:
	(@MODEN="text" OR @MODEN="email")
 
WHILEs können verschachtelt werden.
 
Achtung: Es können leicht unendliche Schleifen auftreten. Deswegen kann die
Schleife mit Alt-Escape abgebrochen werden.

WIMPTASK <String>
Führt den String mit Wimp_StartTask als *Kommando aus.
Unterscheidet sich von OSCLI und CLI darin, daß VDU-Ausgaben nicht umgelenkt
werden.
Sollte benutzt werden, um andere Anwendungen zu starten.

WINDOWWRAP
Schaltet durch Setzen der verschiedenen internen Flags den Window-Wrap-Modus
ein bzw. aus und veranlaßt, daß die Darstellung im Fenster aktualisiert wird.

WINFO_ALTER <Zahl>
Ändert Bits in w_info oder opt_info.
Die Titelleiste des Fensters wird anschließend aktualisiert, nicht aber das
Fenster selbst.
Das Argument hat dasselbe Format wie bei WFLAGS_TOGGLE.

WINFO_TOGGLE <Zahl>
Ändert Bits in w_info oder opt_info.
Das Argument hat dasselbe Format wie bei WFLAGS_TOGGLE.

WORDWRAP
Schaltet Wort-Wrap ein bzw. aus.
(äquivalent zu WFLAGS_TOGGLE 13).

WORD_CONTROLREPLACE <String>
Setzt das Zeichen, durch das im Word-Mode Control-Zeichen dargestellt werden,
auf das erste Zeichen des Strings.

WORD_FLAGSTOGGLE <Zahl>
Wird intern zum Setzen der Einstellungen von Word-Mode benutzt.

WORD_GROUPSIZE
Legt die Größe einer Gruppe im Word-Mode fest. Erlaubt sind Werte zwischen 1 und 16.

WRAPWIDTH <Zahl>
Setzt die Zeilenlänge bei eingeschaltetem Wort-Wrap auf den angegebenen Wert.

WRITEBUFFER <string>
Sichert den Puffer mit dem Dateinamen <string>.
Wird <string> nicht angegeben, wird nach einem Dateinamen gefragt.
Im Gegensatz zu WRITEFILE ändert dies nicht den Dateinamen der noch geöffneten Datei.

WRITEFILE <String>
Speichert die aktuelle Datei unter dem angegebenen Dateinamen.
Ist kein Argument angegeben, öffnet Zap zur Eingabe eines Namens den
Minibuffer (im Unterschied zu SAVEFILE, das normalerweise nicht nach einem
Namen fragt).

YANK
Führt eine Paste-Operation mit dem zuletzt gelöschten Text an der aktuellen
Position der Schreibmarke aus. Bei mehrmaliger Ausführung fügt es der Reihe
nach allen vorher gelöschten Text ein.

| Zap builtin functions

@ADJUST
Gibt TRUE zurück, wenn die rechte Maustaste (Adjust bzw. Spezial) gedrückt
ist.

@ALT
Gibt TRUE zurück, wenn eine der Alt-Tasten gedrückt ist, sonst FALSE.

@BASEMAP
Gibt die Nummer der aktuellen Basis-Keymap zurück.

@BASEMAPN
Gibt den Namen der aktuellen Basis-Keymap zurück, oder den leeren String,
wenn sie keinen Namen hat.

@BUTTONS
Gibt den Zustand der Mausknöpfe zurück, wie er zuletzt von
Wimp_GetPointerState angegeben wurde.

@CHAR
Gibt den Code des Zeichens unter der Schreibmarke zurück.
Ist die Schreibmarke am Dateiende, wird 255 zurückgegeben.

@CHAROFF <Offset>
Gibt den Code des Zeichens bei (Schreibmarkenposition+Offset) zurück.
Liegt das Zeichen außerhalb der Datei, wird 255 zurückgegeben.

@CHARSTR
Gibt das Zeichen unter der Schreibmarke als String zurück.
Ist die Schreibmarke am Dateiende, wird der leere String zurückgegeben.

@CHAROFFSTR <Offset>
Gibt das Zeichen bei (Schreibmarkenposition+Offset) als String zurück.
Liegt das Zeichen außerhalb der Datei, wird der leere String zurückgegeben.

@COPY
Gibt TRUE zurück, wenn gerade mit zweigeteilter Schreibmarke im Copy-Modus
gearbeitet wird.

@CTRL
Gibt TRUE zurück, wenn eine der Ctrl-Tasten gedrückt ist, sonst FALSE.

@EOF
Gibt TRUE zurück, wenn die Schreibmarke am Dateiende ist.

@FALSE
Gibt 0 zurück.

@FILENAME
Gibt den Dateinamen zurück.

@GETVAR
Gibt den Wert einer vom Mode oder in der Konfigurationsdatei erzeugten
Variable zurück.

@GREYED <Kommando>
Gibt TRUE zurück, wenn das angegebene Zap-Kommando in einem Menü ausgegraut
wäre.

@IF <String>
Gibt einen von zwei Ausdrücken zurück (als String oder als Integer), je
nachdem, ob ein weiterer Ausdruck TRUE (bzw. ungleich Null) ist. Jeder der
Ausdrücke kann weggelassen werden; ist das der Fall, wird u.U. der Minibuffer
geöffnet.
 
Syntax:
  @IF (<Bedingung>,<Ausdruck_wenn_TRUE>)		; NULL wenn FALSE
  @IF (<Bedingung>,<Ausdruck_wenn_TRUE>,<Ausdruck_wenn_FALSE>)
  @IF (<Bedingung>,,<Ausdruck_wenn_FALSE>)		; NULL wenn TRUE
 
Beispiele:
  INSERT $IF (@MODET>4, "Text", "")
				; "Text" wenn in Text-Mode, sonst ""
  EMAIL_STRIPSPCS #IF (@SELECT, &0B, &1B)
				; &B wenn AUSWAHL gedrückt, sonst &1B

@IN <String>
Array-Lookup: Gibt TRUE zurück, wenn das erste Element mit einem der
nachfolgenden übereinstimmt. Die Elemente im Argument sind durch Kommas
getrennt, jedes wird als Zap-Ausdruck ausgewertet (siehe IF). Alle Elemente
müssen denselben Typ haben.
 
Beispiele:
 
Kommando:	IF (@IN(@MODEN,"basic","code")=@TRUE):UPDATEWINDOW:ENDIF
Äquivalent zu:	IF (@MODEN="basic" OR @MODEN="code"):UPDATEWINDOW:ENDIF
Wirkung:	Fenster neu zeichnen, wenn in BASIC- oder Code-Mode
 
Kommando:	IF (@IN(@CHAR,@TABCHAR,32)):RIGHT:ENDIF
Äquivalent zu:	IF (@CHAR=@TABCHAR OR @CHAR=32):RIGHT:ENDIF
Wirkung:	Schreibmarke nach rechts, wenn sie auf Space oder Tab steht.

@KEYMAP
Gibt die Nummer der aktuellen Keymap zurück.

@KEYMAPN
Gibt den Namen der aktuellen Keymap zurück, oder den leeren String, falls sie
keinen Namen hat.

@MATCH <string>
Liefert TRUE wenn der String am Cursor mit dem angegebenen übereinstimmt.
Search-Flags können wie folgt spezifiziert werden:
  ¤  am String-Anfang und am Ende der Flags
  +  schaltet die nachfolgenden Flags an
  -  schaltet die nachfolgenden Flags aus
  ~  schaltet die nachfolgenden Flags um (das ist die Anfangseinstellung)
  C  Beachtung von Groß-/Kleinschreibung
  M  Macro-Expansion
  R  Grobe Suche
  \  '\' Kommandos
Der Standard ist Groß-/Klein indifferent, '\' Kommandos aktiv, Makros inaktiv.Beispiel: "¤C\¤Foo\n" findet exakt die Zeichen "Foo\n"
beispiel: "¤C¤Foo\n" findet exakt die Zeichen "Foo" gefolgt von einem LF.
Benötigen sie die Übereinstimmung mit '¤' am Beginn des Ssuchstrings verwenden Sie "¤<flags>¤¤"
(<flags> wie benötigt ersetzen).

@MENU
Gibt TRUE zurück, wenn die mittlere Maustaste (Menü) gedrückt ist.

@MODE
Gibt die Nummer des aktuellen Mode zurück.

@MODEN
Gibt den Namen des aktuellen Mode zurück. Alle Buchstaben werden in
Kleinbuchstaben umgewandelt.

@MODET
Gibt den Mode-Typ zurück.
        0 binär (Byte, Word, ASCII)
        1 Code
        2 BASIC
        3 TaskWindow
        4 Throwback
    sonst Text-artig

@MODIFIED
Gibt TRUE zurück, wenn die Datei verändert wurde.

@MODIFIERS
Gibt einen Wert zurück, der angibt, ob Tasten gedrückt sind.
Bit 0 ist gesetzt, wenn eine der Shift-Tasten gedrückt ist
Bit 1 ist gesetzt, wenn eine der Ctrl-Tasten gedrückt ist
Bit 2 ist gesetzt, wenn eine der Alt-Tasten gedrückt ist

@SELANYWHERE
Gibt TRUE zurück, wenn eine Auswahl existiert.

@RETURNCHAR
Gibt den Code des Zeichens zurück, das für den Mode einen Zeilenumbruch
bedeutet.

@SELECT
Gibt TRUE zurück, wenn die linke Maustaste (Select bzw. Auswahl) gedrückt
ist.

@SELHERE
Gibt TRUE zurück, wenn eine Auswahl in diesem Fenster existiert.

@SELSIZE
Gibt die Größe der Auswahl zurück, oder TRUE, wenn keine Auswahl existiert.

@SHIFT
Gibt TRUE zurück, wenn eine der Shift-Tasten gedrückt ist, sonst FALSE.

@SOF
Gibt TRUE zurück, wenn die Schreibmarke am Dateianfang ist.

@STARTADDR
Gibt die scheinbare Startadresse der Datei zurück.

@STARTLINE
Gibt die scheinbare Zeilennummer der ersten Zeile in der Datei zurück.

@TABCHAR
Gibt den Code des Zeichens zurück, das der Mode als Tab interpretiert.

@TICKED <Kommando>
Gibt TRUE zurück, wenn das angegebene Zap-Kommando in einem Menü angewählt
wäre.

@TRUE
Gibt -1 zurück.
