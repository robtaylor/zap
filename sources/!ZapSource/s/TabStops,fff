; TabStops		<nemo@20000.org>
; $Id: TabStops,fff,v 2.1 2003-04-20 14:55:55 christian Exp $
;
; 0.01	27 Oct 2001	Initial version
; 0.02	9 Apr 2003	commented, coz I forgot how it worked
;
; Note: Automatic tabstops would be useful, where the file is scanned and
; column widths automatically calculated. This would work best if always rounded
; up or given a margin to avoid thrashing.

 GET	h.ZapHeader

 GET	h.Heap
 GET	h.ModeBits
 GET	h.Strings
 GET	h.Messages
 GET	h.CreateWind
 GET	h.MiniBuff

 EXPORT get_tab_stops
 EXPORT TabStops

; Definition strings:
;
; 8*		"Default" tabs - every 8 chrs
; 8,8,8,16,8,4	Three 8 chr columns, then a 16, 8, and 4 then no more
; 8*5,16*	Five 8 chr columns, then every 16 thereafter
; [3,5]*	Alternating 3 and 5 chr columns
; [3*3,7]*4,8*	Four sets of three 3s and a 7, followed by 8s thereafter

; Buffer:
;
; If R0 is the tabstop buffer, and R1 is the current column index, then a
; tab can be performed via:
;
;		LDR	R14, [R0,R1,LSL#1]	; get offset to next tab
;		ADD	R1, R1, R14, LSR#16	; offset
;
; Or, if R8 is the info for this file, then
;
;		LDR	R14, [R8,#w_tabstops]
;		LDR	R14, [R14,R1,LSL#1]
;		ADD	R1, R1, R14, LSR#16

;-------------------------------------------------------------------------------
; MakeTabStops		Process the definition string on a width or tab change
;
; > R0	tabstop definition string
;   R1	buffer to fill (aligned)
;   R2	width of a line (ie buffer length is R2*2)
		FNAME	"make_tab_stops"
make_tab_stops	FNJSR	"R0-R8"
		BIC	R3, R1, #3		; MUST be aligned
		MOV	R4, R2			; R3=buffer, R4=columns
		ADR	R5, MTS_default		; R5=default tabs
		LDMIA	R5, {R5-R6}		; start, decrement

MTS_init	STR	R5, [R3],#4
		SUBS	R5, R5, R6
		ADDMI	R5, R5, R6, LSL#2
		SUBS	R4, R4, #2
		BGT	MTS_init		; buffer now initialised to 8s

		BIC	R1, R1, #3
		MOV	R8, #1			; word cache empty
		BL	MTS_recurse		; process string

		TEQ	R8, #1			; word cache empty?
		LDRNE	R14, [R1]
		MOVNE	R14, R14, LSL#16
		ORRNE	R8, R8, R14, LSR#16
		STRNE	R8, [R1],#2		; NOTE!

		FNRTS

; The following data produces automatic stops every 8 chrs, filling the rest
; of the buffer AFTER the definition string. For "no more" tabs, where tab
; only steps one character forward, replace these two with &00010001 and 0.

MTS_default	&	&00080007
		&	&00020002

;-------------------------------------------------------------------------------
; MTS_recurse		Process a run of tab stops, with the word cache
;
; > R0	tabstop definition string
;   R1	buffer to fill (can be on a half-word boundary)
;   R2	chrs to do (ie buffer length is R2*2)
;   R8	word cache (1=empty, otherwise top half is previous tabstop)
;
; < R0	ptr to terminator of string (which could be a "]" for recursion)
;   R1	next buffer entry to fill
;   R2	updated
;   R8	updated

MTS_recurse	FNJSR	"R3-R7"

MTS_loop	BL	MTS_decimal			; R3 is value, R4 terminator
		BMI	MTS_cripes			; must be the end or [..]

		CMP	R3, #1<<15			; silly tabstop?
		MOVCS	R3, #1<<15

		MOV	R7, R3				; R7=tab width
		TEQ	R4, #'*'			; a repeating tab?
		MOVNE	R6, #1				; R6=number of repeats
		BNE	MTS_tab

		BL	MTS_decimal			; how many repeats?
		MOVPL	R6, R3				; the number
		MOVMI	R6, #1<<30			; or repeat forever

MTS_tabs	MOV	R3, R7

MTS_tab		TEQ	R8, #1				; add tabstop into buffer
		MOVEQ	R8, R3, LSL#16
		ORRNE	R8, R8, R3
		STRNE	R8, [R1],#4
		MOVNE	R8, #1

		SUBS	R2, R2, #1			; done another column
		BLE	MTS_exit

		SUBS	R3, R3, #1			; count down to the tab
		BGT	MTS_tab

		SUBS	R6, R6, #1			; tab done, repeat?
		BGT	MTS_tabs			; then go again

		TEQ	R4, #','			; more tabs?
		BEQ	MTS_loop			; round again

MTS_exit	SUB	R0, R0, #1			; strange character
		CMP	R2, #0				; LE=buffer now full
		FNRTS					; exit



MTS_cripes	CMP	R4, #'['			; a repeating section?
		BNE	MTS_exit

		MOV	R7, R0				; R7=start of repeating section
		BL	MTS_recurse			; recurse
		BLE	MTS_exit			; stop now if buffer full

		LDRB	R4, [R0],#1			; discard end of repeating section
		TEQ	R4, #']'			; for that is what it should have been
		BNE	MTS_exit			; bail out if badly formed

		LDRB	R4, [R0],#1			; [..] is followed by what?
		TEQ	R4, #','
		BEQ	MTS_loop			; that was badly formed, but continue
		TEQ	R4, #'*'
		BNE	MTS_exit			; if no asterix then give up in disgust

		BL	MTS_decimal			; how many repats?
		MOVMI	R3, #1<<30			; [..]* means repeat forever
		MOV	R5, R0				; keep the end of the section

MTS_repeats	SUBS	R3, R3, #1
		BLE	MTS_repeated
		MOV	R0, R7				; the start of the section
		BL	MTS_recurse
		BGT	MTS_repeats			; repeat if buffer not full
		B	MTS_exit

MTS_repeated	MOV	R0, R5				; the end of this section
		TEQ	R4, #','			; another tab?
		BEQ	MTS_loop
		B	MTS_exit

;-------------------------------------------------------------------------------
; MTS_decimal		Read a decimal value and return value and terminator
;
; > R0	string containing a decimal
; < R0	ptr PAST terminator of decimal
;   R3	decimal value or -1
;   R4	terminator chr

MTS_decimal	MOV	R3, #-1				; illegal value
MTSD_space	LDRB	R4, [R0],#1

		TEQ	R4, #32
		TEQNE	R4, #9				; tabs in a tab definition string, hah!
		BEQ	MTSD_space

MTSD_loop	SUBS	R4, R4, #48
		BMI	MTSD_exit
		CMP	R4, #9
		BGT	MTSD_exit
		ADDS	R3, R3, R3, LSL#2
		ADDPL	R3, R4, R3, LSL#1
		MOVMI	R3, R4
		LDRB	R4, [R0],#1
		B	MTSD_loop

MTSD_exit	ADD	R4, R4, #48
		CMP	R3, #0				; did we get a sensible value?
		MOV	PC, R14

;-------------------------------------------------------------------------------


; get the tabstop list for a given R8
; E r0 = width  r8 (with mode number)
; X w_tabstops filled in
		FNAME	get_tab_stops
get_tab_stops	FNJSR	"R7"
		MOV	R7,R0

		LDR	R0,[R8,#w_tabstops]		; free the existing tabstop list
		BL	heap_free
		MOVVC	R0,R7,LSL #1
		BLVC	heap_claim
		STRVC	R0,[R8,#w_tabstops]

		MOVVC	R11,#e_interrogate
		MOVVC	R0,#einterrogate_TabStops
		BLVC	call_mode
		FNRTS	VS

		TEQ	R0,#einterrogate_NoTabs		; doesn't need w_tabstops at all
		MOVEQ	R0,#0
		STREQ	R0,[R8,#w_tabstops]
		FNRTS	EQ

		TEQ	R0,#einterrogate_FixedTabs
		ADREQ	R0,default$l
		BLNE	get_tab_string
		LDR	R1,[R8,#w_tabstops]
		MOV	R2,R7
		BL	make_tab_stops
		FNRTS

default$l	=	"8*",0
		ALIGN


; get w_tabstring, defaulting appropriately
get_tab_string	LDR	R0,[R8,#w_tabstring]		; use window's tab string
		CMP	R0,#0
		CMPNE	R0,#-1
		FNLDR	R0,default_tab_string,EQ	; if not defined, use Settings' default
		TEQEQ	R0,#0
		ADREQ	R0,default$l			; if /that's/ not defined, default to 8
		MOV	PC,R14


		LOCAL

; command TABSTOPS
		DCD	7+c_Param_String+c_ProvidesDefaultMenuString+c_TickableMenuEntry+c_PreMinibuffer
TabStops	FNJSR
		TEQ	R2,#6
		BEQ	mini$l
		TEQ	R2,#15
		BEQ	tick$l
		TEQ	R2,#17
		BEQ	submenu$l

		TEQ	R8,#0				; ignore iconbar calls
		FNRTS	EQ

		MOV	R1,R0				; copy the new string
		LDR	R0,[R8,#w_tabstring]
		BL	heap_free
		BLVC	strdup
		STRVC	R0,[R8,#w_tabstring]

		BLVC	save_window_status		; recreate the window
		BLVC	new_window_status		;
		FNRTS

; open minibuffer
mini$l		TEQ	R8,#0                           ; ignore iconbar calls
		FNRTS	EQ
		ADR	R0,titlestring$l
		BL	minibuffer_prompt_token
		BLVC	get_tab_string
		BLVC	minibuffer_write
		FNRTS

; tick / shade
tick$l		TEQ	R8,#0				; always grey on iconbar
		MOVEQ	R0,#2
		FNRTS	EQ

		MOV	R0,#einterrogate_TabStops	; determine if tabstops supported
		MOV	R11,#e_interrogate
		BL	call_mode
		TEQ	R0,#einterrogate_VariableTabs
		MOVNE	R0,#2				; shade if not
		FNRTS

; creating the submenu
submenu$l	TEQ	R0,#0
		BEQ	title$l
		TEQ	R0,#1
		BEQ	current$l
		TEQ	R0,#2				; submenu buffer length
		MOVEQ	R0,#32
		FNRTS

title$l		ADR	R0,titlestring$l		; submenu title
		BL	lookup_token_R0
		FNRTS

current$l	BL	get_tab_string			; return current tabstop string
		FNRTS

titlestring$l	=	"TabStops",0
		ALIGN



 END
