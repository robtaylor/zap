/* asmtobasic - convert offset assembler header to a tokenised BASIC equivalent
// (c) 2002 Zap Developers
// $Id: asmtobasic,fff,v 1.3 2002-02-07 21:51:58 christian Exp $

// syntax:
//
// lines enclosed in
//
//  ; DEFPROC <name>
//  ; ENDPROC
//
// are treated as assembler and a procedure is created to define the variables.
//
// files should end with END (as required by ObjAsm)
//
// any lines not containing DEFPROC, ENDPROC, END, # or ^ are simply copied accress.
// if outside a DEFPROC...ENDPROC block, REM is prepended.
//
*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#define MESSAGE "Created by asmtobasic (c) 2002 Zap Developers"

#define LINC    10         // line number increment
#define REM     0xf4
#define CREM    ":\xf4"
#define DEF     "\xdd "
#define PROC    "\xf2"
#define ENDPROC "\xe1"

// column numbers
#define COLUMN1 26
#define COLUMN2 36

#define myfputc(a,b)         \
 if (fputc((a), (b)) == EOF) \
     finish("write error\n");

#define myfputs(a,b)         \
 if (fputs((a), (b)) == EOF) \
     finish("write error\n");

// globals
int storage_counter;
int line_number = 10;
char line[256];
char *outfile;
FILE *in;
FILE *out;


char *skipspaces(char *s)
{
    while (isspace(*s))
        s++;

    return s;
}


char *skipword(char *s)
{
    while (!isspace(*s))
        s++;

    return s;
}


void finish(char *error)
{
    if (in != NULL)
        fclose(in);

    if (out != NULL)
        fclose(out);

#ifdef RISCOS
    {
        char buf[256];
        strcpy(buf, "SetType ");
        strcat(buf, outfile);
        strcat(buf, " ffb");
        system(buf);
    }
#endif

    if (error != NULL)
    {
        fputs(error, stderr);
        remove(outfile);          // delete the output file on error
        exit(1);
    }
    else
        exit(0);
}


char *get_line(char *line, int n)
{
    if (fgets(line, n, in) == NULL)
        finish("read error\n");

    return line;
}

void write_line(char *line)
{
    char *i;

    i = strchr(line, '\n');
    if (i != NULL)
        *i = '\0';

    myfputc('\r', out);
    myfputc(line_number >> 8, out);
    myfputc(line_number & 0xff, out);
    myfputc(strlen(line) + 4, out);
    myfputs(line, out);

    line_number += LINC;
}


void write_rem(char *line)
{
    char buf[256];
    char *s;

    s = strchr(line, '\n');
    if (s != NULL)
        *s = '\0';

    // don't write "REM" for empty lines
    if (strlen(line) == 0)
    {
        write_line("");
        return;
    }

    s = skipspaces(line);

    *buf       = REM;
    *(buf + 1) = ' ';
    strcpy(buf + 2, s);

    write_line(buf);
}


void process_defproc(char *s)
{
    char buf[256];

    s = skipword(s);
    s = skipspaces(s);

    strcpy(buf, DEF PROC);
    strcat(buf, s);

    write_line("");
    write_line(buf);
}


void process_endproc(void)
{
    write_line(ENDPROC);
}


void process_hat(char *s)
{
    s = skipword(s);
    s = skipspaces(s);

    storage_counter = atoi(s);

    //printf("new storage counter: %d\n", storage_counter);
}


void process_hash(char *s)
{
    char buf[256];
    int i, inc;
    char *t;

    // copy all up to end of var name
    t = skipword(line);
    i = (int)(t - line);
    strncpy(buf, line, i);

    // align to column 1
    while (i < COLUMN1)
        *(buf + i++) = ' ';

    // add =
    strcpy(buf + i, "= ");
    i += 2;

    // skip the #
    s = skipword(s);
    s = skipspaces(s);

    // find the increment
    inc = atoi(s);

    // write it out
    i += sprintf(buf + i, "%d", storage_counter);
    storage_counter += inc;

    // printf("new storage counter: %d\n", storage_counter);

    // align to column 2
    while (i < COLUMN2)
        *(buf + i++) = ' ';

    strcpy(buf + i, CREM);

    // skip the number and copy the comment
    s = skipword(s);
    s = skipspaces(s);

    if (*s == ';')
        s++;

    strcat(buf + i, s);

    write_line(buf);
}


void write_end(void)
{
    myfputc('\r', out);
    myfputc(0xff, out);
}


void process_asm(void)
{
    char *s;

    while ((1))
    {
        get_line(line, sizeof(line));

        if ((s = strchr(line, '^')) != NULL)
            process_hat(s);
        else if ((s = strchr(line, '#')) != NULL)
            process_hash(s);
        else if ((s = strstr(line, "DEFPROC")) != NULL)
            process_defproc(s);
        else if (strstr(line, "$Id:"))
            write_rem(MESSAGE); // filter out RCS Ids since they'll be wrong for the generated file
        else if (strstr(line, "ENDPROC"))
            process_endproc();
        else if (strstr(line, "END"))
            break;
        else
        {
            if (*line == ';')
                write_rem(line + 1);
            else
                write_rem(line);
        }
    }
}


int main(int argc, char *argv[])
{
    if (argc != 3)
    {
        fprintf(stderr, "Syntax: %s <infile> <outfile>\n", argv[0]);
        return 1;
    }

    outfile = argv[2]; // keep this for use in finish()

    in  = fopen(argv[1], "r");
    out = fopen(argv[2], "wb");

    if (in != NULL && out != NULL)
    {
        // process the file
        process_asm();

        // finish
        write_end();

        finish(NULL);
    }
    else
    {
        sprintf(line, "Couldn't open %sput file", (in == NULL) ? "in" : "out");
        finish(line);
    }

    return 0;
}



