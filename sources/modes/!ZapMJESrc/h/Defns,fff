/***************************************************************************
 *                                                                         *
 *  Project: ZapMJE                Purpose: Extensions to Zap              *
 *  Module: Defns.h                Purpose: Definitions header for C code  *
 *  © 1997 Martin Ebourne          Last update: 02-02-97                   *
 *                                                                         *
 ***************************************************************************/

#include "CSWIs.h"


/* Internal mode numbers - Don't change these unless you are looking for trouble */

#define int_c       0
#define int_cpp     1
#define int_java    2
#define int_asm     3
#define int_pascal  4


typedef const struct _i_block i_block;


/* Constant mode block variables (ie. for all modes) */

typedef struct {
  int                length;        /* Size of block (must be first for Zap) */
  const int          version;       /* Version of mode block layout */
  const int          sharedlength;  /* Size of shared section of block */
  i_block * const    info;          /* Pointer to mode information block */
  int                matchdelay;    /* Delay in cs for bouncing to other bracket, 0 disables */
  unsigned int       sharedflags1;  /* Shared flags word 1 */
} m_shared;

typedef struct {
  int                nooftabs;
  int		     noofspaces;
  int		     totalno;
} indentsize;


/* Format of shared flags word 1 is:
 *   Bits   Modes        Purpose
 *   0      C,C++,J,P    Set for alternative comment set
 *   1-31                Reserved
 */

/* C/C++/Java mode block extras */

typedef struct {
  m_shared           shared;
  unsigned int       flags1;        /* Flags word 1 */
  int                indent;        /* Indent; 0 to disable, -ve for by tabs */
  int                invend;        /* End of invalidated region for redraw */
  int                caddr;         /* Address of extra cached point */
  int                cstate;        /* Extra cache to speed up redraws */
  int                cacheaddr;     /* Address of cached state */
  int                cachestate;    /* Cached state */
} m_c;

/* Format of C/C++/Java/Pascal flags word 1 is:
 *   Bits   Purpose
 *   0      Set to indent comments
 *   1      Set to highlight preprocessor comments
 *   2      Set to use sophisticated indenting
 *   2-31   Reserved
 */

#define M_FLAGS1_INDENTCOMMENTS (1<<0)
#define M_FLAGS1_HIGHLIGHTPREPRO (1<<1)
#define M_FLAGS1_SMARTINDENTING (1<<2) /* "smart" ... */

/* Assembler mode block */

typedef struct {
  m_shared           shared;
  unsigned int       flags1;        /* Flags word 1 */
  int                cstate;        /* Cached state for assembler update */
} m_asm;

/* Format of assembler flags word 1 is:
 *   Bits   Purpose
 *   0-31   Reserved
 */

/* Mode block */

typedef union {
  m_shared           shared;
  m_c                c,cpp,j,p;
  m_asm              asm;
} m_block;


/* Mode info block. Keep in step with mode info blocks */

struct _i_block {
  int                intmode;       /* Internal mode number */
  int                mode;          /* Zap mode number */
  const char        *modetitle;     /* Ptr: Mode name */
  int                modeblkdefl;   /* Length of default mode block */
  int                modeblktotl;   /* Length of full mode block */
  const m_block     *modeblk;       /* Ptr: Default mode block */
  const void        *modedata;      /* Ptr: Default Zap mode block */
  const char        *colournames;   /* Ptr: Extra colour names */
  int                numcolours;    /* Number of extra colours */
  const unsigned int
                    *colours;       /* Ptr: Defaults for extra colours */
  const char        *compilecmd;    /* Ptr: Command to compile with */
  const char        *compileparams; /* Ptr: Parameters to compile with */
  const char        *funcstring;    /* Ptr: Search text for function finding */
  const void /**/   *nextfunc;      /* Fn: Jump to next function */
  const void /**/   *lastfunc;      /* Fn: Jump to last function */
  const char        *opencom;       /* Ptr: Open comment string */
  int                opencoml;      /* Length of open comment string */
  const char        *opencom2;      /* Ptr: Alternative open comment string */
  int                opencoml2;     /* Length of alternative open comment string */
  const char        *closecom;      /* Ptr: Close comment string */
  int                closecoml;     /* Length of close comment string */
  const char        *closecom2;     /* Ptr: Alternative close comment string */
  int                closecoml2;    /* Length of alternative close comment string */
  const char        *iftext;        /* Ptr: If text */
  int                iftextl;       /* Length of if text */
  const char        *endiftext;     /* Ptr: Endif text */
  int                endiftextl;    /* Length of endif text */
  const char        *directory;     /* Ptr: List of dirs files of this type are usually in */
  const char        *extension;     /* Ptr: List of extensions files of this type can have */
  const void /**/   *redrawline;    /* Fn: Mode's e_redrawline */
  int                bracketclr;    /* Zap colour number for bracket highlights */
};


/* Window block variables */

typedef struct {
  int                handle;        /* Window handle / -1 if deleted */
  int                minx;          /* Min scn x */
  int                miny;          /* Min scn y */
  int                maxx;          /* Max scn x */
  int                maxy;          /* Max scn y */
  int                scrollx;       /* X scroll */
  int                scrolly;       /* Y scroll */
  int                infront;       /* Window handle of window in front */
  unsigned int       windowflags;   /* Wimp window flags */
  const int          file;          /* Offset in file_list of file showing */
  unsigned int       format;        /* Display format */
  int                width;         /* Width of work area in chars */
  int                height;        /* Height of work area in chars */
  const void        *txt;           /* Pointer to cached text buffer */
  int                txth;          /* Height of cached txt buf in lines */
  int                txtw;          /* Width of cached txt buf in chars (mult 8) */
  int                txtn;          /* Number of lines cached */
  int                coff;          /* Offset in text of first cached line */
  int                cline;         /* Line number in text of first cached line */
  int                clogl;         /* Logical line number of first cached line */
  int                tab;           /* Coltab width */
  union {
    char             byte;
    unsigned int     word;
  }                  tabc;          /* Actual tab character code (x4) */
  union {
    char             byte;
    unsigned int     word;
  }                  cr;            /* Code of return/line feed (x4) */
  unsigned int       flags;         /* (My) window flags */
  char              *title;         /* Pointer to window title buffer */
  int                bpl;           /* Bytes per line (for mzap) / width of text */
  int                margin;        /* Actual width of margin (inc line nos) */
  int                rl;            /* Height in raster lines of each character */
  int                rw;            /* Width in pixels of each character */
  int                rh;            /* Text height in pixels (not inc spacing) */
  int                addr;          /* Address of first byte in display */
  int                stline;        /* Line number of first line in display */
  int                titlelen;      /* Title length (excluding 0) */
  char              *titbuf;        /* Address of title showing buffer */
  int                titlen;        /* Length of title showing string */
  int                mwidth;        /* User required margin width (no line nos) */
  union {
    char             byte;
    unsigned int     word;
  }                  tabchar;       /* User required tab char code (x4) */
  int                linesp;        /* User required line spacing */
  int                savedo;        /* Fixed off / fixed line off before */
  int                savedl;        /* Pixs from top / phy line of off */
  int                savedc;        /* Change in phy line for shiftable */
  int                savedh;        /* W_height at multiop start */
  int                savedlc;       /* Phy line of fixed for one op */
  int                wrapwidth;     /* Wordwrap width */
  int                togminx;       /* Toggle size min x */
  int                togminy;       /* Toggle size min y */
  int                togmaxx;       /* Toggle size max x */
  int                togmaxy;       /* Toggle size max y */
  int                txtlen;        /* Size of cache line inc col masks */
  int                palette;       /* Current palette data */
  int                pwind;         /* Point (=this!) window offset */
  int                pline;         /* Point row (y coord) */
  int                pcol;          /* Point column (x coord) */
  int                poff;          /* Point offset */
  int                ploff;         /* Point line offset */
  int                pwidth;        /* Point width */
  int                saveds;        /* Start of area to redraw offset */
  const void        *modedata;      /* Zap handled mode data block */
  int                fontc;         /* Font cache offset / -1 if none */
  int                font;          /* Font offset (of 1bpp form) */
  const int          res12;         /* Reserved word 12 */
  const int          res13;         /* Reserved word 13 */
  const int          res14;         /* Reserved word 14 */
  const int          res15;         /* Reserved word 15 */
  const int          res16;         /* Reserved word 16 */
  const int          mode0;         /* Mode 0 word */
  const int          mode1;         /* Mode 1 word */
  const int          mode2;         /* Mode 2 word */
  const int          mode3;         /* Mode 3 word */
  const int          mode4;         /* Mode 4 word */
  const int          mode5;         /* Mode 5 word */
  const int          mode6;         /* Mode 6 word */
  const int          mode7;         /* Mode 7 word */
  const int          mode8;         /* Mode 8 word */
  const int          mode9;         /* Mode 9 word */
  const int          mode10;        /* Mode 10 word */
  const int          mode11;        /* Mode 11 word */
  const int          mode12;        /* Mode 12 word */
  const int          mode13;        /* Mode 13 word */
  const int          mode14;        /* Mode 14 word */
  const int          mode15;        /* Mode 15 word */
  const int          mode16;        /* Mode 16 word */
  const int          mode17;        /* Mode 17 word */
  const int          mode18;        /* Mode 18 word */
  const int          mode19;        /* Mode 19 word */
  const int          mode20;        /* Mode 20 word */
  const int          mode21;        /* Mode 21 word */
  const int          mode22;        /* Mode 22 word */
  const int          mode23;        /* Mode 23 word */
  const int          mode24;        /* Mode 24 word */
  const int          mode25;        /* Mode 25 word */
  const int          mode26;        /* Mode 26 word */
  const int          mode27;        /* Mode 27 word */
  const int          mode28;        /* Mode 28 word */
  const int          mode29;        /* Mode 29 word */
  const int          mode30;        /* Mode 30 word */
  const int          mode31;        /* Mode 31 word */
  const int          endmark;       /* End of list marker */
} w_block;


/* File block variables */

typedef struct {
  char              *ptr;           /* Pointer to file buffer / -1 if deleted */
  int                bufl;          /* Length of file buffer */
  int                len;           /* Length of file */
  char              *name;          /* Pointer to filename */
  unsigned int       load;          /* Load address of file */
  unsigned int       exec;          /* Exec address of file */
  unsigned int       flags;         /* File flags */
  const void        *uptr;          /* Pointer to undo buffer */
  int                ubufl;         /* Length of undo buffer */
  int                ulen;          /* Length of valid data in undo buffer (l) */
  int                undo;          /* Offset of main undo pointer (u) */
  int                undop;         /* Offset of undo block sub-pointer (p) */
  int                yank;          /* -1 if not in yank / off of yank pointer */
  int                splito;        /* Offset in file (&buf) of start of split */
  int                splite;        /* Offset in buf of end of split */
  int                splits;        /* Size  of split=splite-splito */
  const void        *mptr;          /* Pointer to marker buffer */
  int                mbufl;         /* Length of marker buffer */
  int                mlen;          /* Length of valid data in marker buffer */
  int                mark;          /* Current offset in marker buffer (EA) */
  int                docom;         /* Current command being 'done' */
  int                source;        /* Source word corresponding to create type */
  int                dolen;         /* Length of insertion/deletion */
  int                dodata;        /* Data to be inserted/replace with */
  int                altered;       /* First altered offset in file /-1 */
  int                shiftable;     /* First shiftable offset in file /-1 */
  int                change;        /* Signed change of shiftable offset */
  int                depth;         /* Multiple operation depth / 0 */
  int                links;         /* V links to other files */
  int                cmode;         /* Mode which 'owns' file / -1 */
  int                endmark;       /* End of list marker */
} f_block;


/* Cursor block variables */

typedef struct {
  int                wind;          /* Offset of window with this caret */
  int                line;          /* Line of caret in work area */
  int                col;           /* Column of caret in work area */
  int                off;           /* Offset of caret in text */
  int                loff;          /* Start of line offset */
  int                width;         /* Width of cursor in chars */
  int                owind;         /* Old window / -1 if none */
  int                oline;         /* Old plotted line */
  int                ocol;          /* Old plotted col */
  int                owidth;        /* Old width / offset for selected regions */
  int                blklen;        /* Length of a cursor block */
} c_block;


/* Workspace */

typedef struct {
  const int          mode_c;       /* Mode actually assigned for C */
  const int          mode_cpp;     /* Mode actually assigned for C++ */
  const int          mode_java;    /* Mode actually assigned for Java */
  const int          mode_asm;     /* Mode actually assigned for Assembler */
  const int          mode_pascal;  /* Mode actually assigned for Pascal */
  int                numinit;      /* Number of modes/cmnd tables registered for quitting */
  int                compiling;    /* Window offset from which compile was last issued */
  char              *selblock;     /* Points to selection block for MJE_HELPTOPIC */
  int                percount;     /* Value used to reset decrement counter for hourglass % */
  int                percent;      /* Current hourglass percentage */
  int                oldcwind;     /* Previous value of c_wind, or -1 if cursor mode was != 1 */
  int                oldcoff;      /* Previous value of c_off */
  unsigned int       oldwformat;   /* Previous value of w_format */
  int                bracketclr;   /* Zap colour to use for bracket highlight background */
  int                bracketoff1;  /* Offset for first bracket to highlight, -1 for none */
  int                bracketoff2;  /* Offset for second bracket to highlight, -1 for none */
} ws_block;


/* Pointers to blocks for access from C */

extern m_block      *mode;
extern w_block      *window;
extern f_block      *file;
extern c_block      *cursor;
extern ws_block     *ws;
extern const void   *zapws;


/* Language defines */

#define NULL  (0)
#define bool  int
#define false (0)
#define true  (1)


/* Zap variable numbers */

#define v_scnxos            0         /* Screen horizontal size (in os coords) */
#define v_scnyos            1         /* Screen vertical size (in os coords) */
#define v_optflags          2         /* Config file flags word  (see E-Flags) */
#define v_optformat         3         /* Config file format word (see E-Format) */
#define v_wimptask          4         /* Zaps task handle */
#define v_carcursor         5         /* Cursor caret block pointer (see E-Cursors) */
#define v_carinput          6         /* Input caret block pointer (see E-Cursors) */
#define v_carselection      7         /* Selection caret block pointer (see E-Cursors) */
#define v_windnum           8         /* Number of window blocks (see E-Windows) */
#define v_filenum           9         /* Number of file blocks (see E-File) */
#define v_carmode           10        /* Current cursor editing mode (see E-Cursors) */
#define v_wimpversion       11        /* Version number Zaps logged on as (200/300) */
#define v_keydefault        12        /* Default key map number */
#define v_keybasemap        13        /* Basemap number */
#define v_keylast           14        /* Zap key code of last key processed */
#define v_keylastcom        15        /* Address of last key command executed */
#define v_miniptr           16        /* Address of minibuffer */
#define v_minibufl          17        /* Size of minibuffer */
#define v_minilen           18        /* Size of data in minibuffer */
#define v_minioff           19        /* Offset of cursor in minibuffer */
#define v_minimark          20        /* Offset of mark in minibuffer (see Zap_MiniWrite) */
#define v_yankptr           21        /* Address of kill ring buffer */
#define v_yanklen           22        /* Size of data in kill ring buffer */
#define v_keycurrent        23        /* Current keymap number */
#define v_reserved          24        /* (was control character set number) */
#define v_opttab            25        /* Default column tab for windows */
#define v_optaddr           26        /* Default address of first byte of file */
#define v_optstline         27        /* Default number of first line of file */
#define v_optlinesp         28        /* Default line spacing in 1/8ths char */
#define v_envstart          29        /* Bottom of Zaps stack (&8000 except in test modes) */
#define v_envtop            30        /* Start of free memory */
#define v_wimpiconbar       31        /* Handle of iconbar icon */
#define v_wimptimefmt       32        /* Standard time format string */
#define v_wimpdatefmt       33        /* Standard date format string */
#define v_optmode0          0x100     /* Text mode word (see E-Flags for format) */
#define v_optmode1          0x101     /* Byte mode word */
#define v_optmode2          0x102     /* Word mode word */
#define v_optmode3          0x103     /* Ascii mode word */
#define v_optmode4          0x104     /* Code mode word */
#define v_optmode5          0x105     /* Basic mode word */
#define v_optmode6          0x106     /* Mode 6 word */
#define v_optmode7          0x107     /* Mode 7 word */
#define v_optmode8          0x108     /* Mode 8 word */
#define v_optmode9          0x109     /* Mode 9 word */
#define v_optmode10         0x10A     /* Mode 10 word */
#define v_optmode11         0x10B     /* Throwback mode word */
#define v_optmode12         0x10C     /* Taskwindow mode word */
#define v_optmode13         0x10D     /* Mode 13 word */
#define v_optmode14         0x10E     /* Mode 14 word */
#define v_optmode15         0x10F     /* Mode 15 word */
#define v_optmode16         0x110     /* Mode 16 word */
#define v_optmode17         0x111     /* Mode 17 word */
#define v_optmode18         0x112     /* Mode 18 word */
#define v_optmode19         0x113     /* Mode 19 word */
#define v_optmode20         0x114     /* Mode 20 word */
#define v_optmode21         0x115     /* Mode 21 word */
#define v_optmode22         0x116     /* Mode 22 word */
#define v_optmode23         0x117     /* Mode 23 word */
#define v_optmode24         0x118     /* Mode 24 word */
#define v_optmode25         0x119     /* Mode 25 word */
#define v_optmode26         0x11A     /* Mode 26 word */
#define v_optmode27         0x11B     /* Mode 27 word */
#define v_optmode28         0x11C     /* Mode 28 word */
#define v_optmode29         0x11D     /* Mode 29 word */
#define v_optmode30         0x11E     /* Mode 30 word */
#define v_optmode31         0x11F     /* Mode 31 word */


/* Zap entry points */

#define Zap_AddMode         (0*4)     /* Add new mode to zap */
#define Zap_Claim           (1*4)     /* Claim heap block */
#define Zap_Ensure          (2*4)     /* Ensure heap block */
#define Zap_Free            (3*4)     /* Free heap block */
#define Zap_MoveBytes       (4*4)     /* Move data */
#define Zap_SplitBuffer     (5*4)     /* Split text buffer at given point */
#define Zap_NewTxtStatus    (6*4)     /* Refresh screen after file changed */
#define Zap_SaveTxtStatus   (7*4)     /* Save info before file changed */
#define Zap_Command         (8*4)     /* Execute insert/delete command */
#define Zap_NewWinStatus    (9*4)     /* Recreate window after change */
#define Zap_SaveWinStatus   (10*4)    /* Save window status before change */
#define Zap_ReplaceArea     (11*4)    /* Replace one string by another */
#define Zap_PlotCaret       (12*4)    /* Plot caret at given position */
#define Zap_ReflectCaret    (13*4)    /* Plot caret at posn only using c_off */
#define Zap_SetCaret        (14*4)    /* Draw caret */
#define Zap_ClearCaret      (15*4)    /* Draw old caret position (remove caret) */
#define Zap_DoCommand       (16*4)    /* Perform the command */
#define Zap_ShowCursor      (17*4)    /* Make sure given cursor is visible */
#define Zap_ReadVar         (18*4)    /* Read a zap variable */
#define Zap_WriteVar        (19*4)    /* Write a zap variable */
#define Zap_SaveFile        (20*4)    /* Save a file to disc */
#define Zap_FillWords       (21*4)    /* Fill a given area of memory */
#define Zap_UpdateLns       (22*4)    /* Update line numbers column */
#define Zap_EachWindow      (23*4)    /* Call sub for each window on file */
#define Zap_UpdateCaret     (24*4)    /* Updates caret posn from offset */
#define Zap_GetWindState    (25*4)    /* Update R8 block with wind posn */
#define Zap_StartOp         (26*4)    /* Start multiop */
#define Zap_StopOp          (27*4)    /* Stop multiop */
#define Zap_CallMode        (28*4)    /* Call a mode entry point using R8 */
#define Zap_CallGivenMode   (29*4)    /* Call mode in R10 */
#define Zap_ReadMode        (30*4)    /* Read info on a mode */
#define Zap_FindFile        (31*4)    /* Find window on a given file name */
#define Zap_FindWindow      (32*4)    /* Find window on a loaded file */
#define Zap_ConvWindOff     (33*4)    /* Convert window off to blk ptr */
#define Zap_ConvFileOff     (34*4)    /* Convert file off to blk ptr */
#define Zap_GetWindOff      (35*4)    /* Convert window blk ptr to off */
#define Zap_GetFileOff      (36*4)    /* Convert file blk ptr to off */
#define Zap_GoToOffset      (37*4)    /* Move cursor to given posn + mark */
#define Zap_JumpToOffset    (38*4)    /* Move cursor to given posn nomark */
#define Zap_FindOffset      (39*4)    /* Find file offset from x,y coord */
#define Zap_NewFileTitle    (40*4)    /* Update titlebars on a file */
#define Zap_InsertString    (41*4)    /* Insert string into file */
#define Zap_CreateFile      (42*4)    /* Create an empty file */
#define Zap_NewLinkEntry    (43*4)    /* Add an entry to the links table */
#define Zap_DefaultClick    (44*4)    /* Default mouse click handling */
#define Zap_PutCaret        (45*4)    /* Put new caret in file */
#define Zap_DiscardFile     (46*4)    /* Kill file */
#define Zap_DeleteFile      (47*4)    /* Prompt then kill */
#define Zap_DiscardWindow   (48*4)    /* Kill window */
#define Zap_DeleteWindow    (49*4)    /* Prompt then kill window */
#define Zap_BuildMenu       (50*4)    /* Create a variable length menu */
#define Zap_ClearSel        (51*4)    /* Clear selected area */
#define Zap_CreateFileBlk   (52*4)    /* Create a new file block in R9 */
#define Zap_CreateWindBlk   (53*4)    /* Create a new window block in R8 */
#define Zap_GetSel          (54*4)    /* Get info on selected region */
#define Zap_InsertMark      (55*4)    /* Insert marker at given offset */
#define Zap_InstallFile     (56*4)    /* Load a file into Zap */
#define Zap_NewMode         (57*4)    /* Change mode of a file */
#define Zap_NewTitle        (58*4)    /* Update the title of a window */
#define Zap_CallBaseMode    (59*4)    /* *** DO NOT USE - Use Zap_BaseMode instead *** */
#define Zap_NewView         (60*4)    /* Open a new window on a file */
#define Zap_ReadSel         (61*4)    /* Read the selected region */
#define Zap_Replace         (62*4)    /* Perform a search and replace */
#define Zap_Search          (63*4)    /* Perform a file search */
#define Zap_Select          (64*4)    /* Select a region */
#define Zap_AlterSel        (65*4)    /* Alter selected region */
#define Zap_OffLineCol      (66*4)    /* Convert file offset to X,Y */
#define Zap_AddCommands     (67*4)    /* Add a command table */
#define Zap_MiniWrite       (68*4)    /* Insert chars in minibuffer */
#define Zap_MiniPrompt      (69*4)    /* Set/change the minibuffer prompt */
#define Zap_MiniUpdate      (70*4)    /* Update minibuffer on screen */
#define Zap_AddYankRegion   (71*4)    /* Add a region to kill ring */
#define Zap_FindCommand     (72*4)    /* Convert command name to address */
#define Zap_ProcessCommand  (73*4)    /* Call a zap command */
#define Zap_FindKeyEntry    (74*4)    /* Read a keymap entry */
#define Zap_FindLeafName    (75*4)    /* Find leaf part of a filename */
#define Zap_NewFileName     (76*4)    /* Change the name of a file */
#define Zap_CheckFileName   (77*4)    /* See if file contains a path */
#define Zap_GetCurrDir      (78*4)    /* Find the current directory name */
#define Zap_MiniWriteC      (79*4)    /* Write a character to minibuffer */
#define Zap_MiniClear       (80*4)    /* Clear minibuffer */
#define Zap_MiniStart       (81*4)    /* Start up a new minibuffer */
#define Zap_MiniEval        (82*4)    /* Turn string into number */
#define Zap_CommandString   (83*4)    /* Execute a string command */
#define Zap_ProcessKeys     (84*4)    /* Process a list of keys */
#define Zap_ProcessAKey     (85*4)    /* Process a single key as if typed */
#define Zap_OpenWindow      (86*4)    /* Open a zap window */
#define Zap_RestoreModeWord (87*4)    /* Restore mode options on e_start */
#define Zap_SaveModeWord    (88*4)    /* Save mode options on e_end */
#define Zap_GetModeWord     (89*4)    /* Read the mode word */
#define Zap_PutModeWord     (90*4)    /* Write the mode word */
#define Zap_BaseMode        (91*4)    /* Call the base mode */
#define Zap_ReadWord        (92*4)    /* Read a word from the file buffer */
#define Zap_ReplaceWord     (93*4)    /* Replace a word in the file buffer */
#define Zap_ModeColour      (94*4)    /* Read colour definitions */
#define Zap_FindInput       (95*4)    /* Find input position */
#define Zap_ClipCache       (96*4)    /* Move the cache reference point */
#define Zap_ModeData        (97*4)    /* Read/write Zap data mode words */
#define Zap_WhichMode       (98*4)    /* Which mode to load a file into */
#define Zap_ModeNumber      (99*4)    /* Convert mode name to number */
#define Zap_SendDataSave    (100*4)   /* Initiate data transfer protocol */
#define Zap_Warning         (101*4)   /* Show warning message */
#define Zap_AllWindow       (102*4)   /* Call sub for all windows */
#define Zap_ReadMenu        (103*4)   /* Create text menu to data */
#define Zap_LoadMenu        (104*4)   /* Load a text menu file */
#define Zap_OpenMenu        (105*4)   /* Open a menu on the screen */
#define Zap_CallBack        (106*4)   /* Call back at given time */
#define Zap_DragBox         (107*4)   /* Perform your own drag box */
#define Zap_SendMessage     (108*4)   /* Send a message via Zap */
#define Zap_Reply           (109*4)   /* Reply to a message via Zap */
#define Zap_Extend          (110*4)   /* Extend a heap block */
#define Zap_ModeColourNum   (111*4)   /* Change size of palette */
#define Zap_CreateThrowback (112*4)   /* Create a throwback file */
#define Zap_Throwback       (113*4)   /* Insert a throwback line */
#define Zap_TestModeName    (114*4)   /* Find if a mode is loaded */
#define Zap_UpdateArea      (115*4)   /* Force window redraw */
#define Zap_UpdateWindow    (116*4)   /* Force window redraw */
#define Zap_UpdateWholeWindow (117*4) /* Force window redraw */

/* Module entry points for Zap */

#define e_module            (0*4)     /* Table offset from start of module */
#define e_title             (1*4)     /* Title of mode */
#define e_author            (2*4)     /* Author's name */
#define e_basemode          (3*4)     /* Base mode number (text) */
#define e_mode              (4*4)     /* This mode number */
#define e_init              (5*4)     /* Initialisation code */
#define e_menu              (6*4)     /* Menu to be attached to 'Mode' menu */
#define e_len               (7*4)     /* Total length of entry table */
#define e_postload          (8*4)     /* Called after file is loaded */
#define e_presave           (9*4)     /* Called before file is saved */
#define e_loading           (10*4)    /* Called when file loaded into window */
#define e_start             (11*4)    /* Called when window enters this mode */
#define e_end               (12*4)    /* Called when window leaves this mode */
#define e_width             (13*4)    /* Called when window (re)created to find width */
#define e_linecol           (14*4)    /* Column offset to file offset */
#define e_lineoff           (15*4)    /* File offset to column offset */
#define e_clnlog            (16*4)    /* Logical line to file offset/physical line */
#define e_clnphy            (17*4)    /* Physical line to file offset */
#define e_clnoff            (18*4)    /* File offset to physical/logical line & offset */
#define e_nextline          (19*4)    /* Return first line shiftable with no redraw */
#define e_minus             (20*4)    /* Move left one char */
#define e_plus              (21*4)    /* Move right one char */
#define e_splus             (22*4)    /* Move left one word */
#define e_sminus            (23*4)    /* Move right one word */
#define e_cminus            (24*4)    /* Move to start of line */
#define e_cplus             (25*4)    /* Move to end of line */
#define e_redrawline        (26*4)    /* Redraw single line of display */
#define e_redrawlnum        (27*4)    /* Check if physical line is start of logical */
#define e_char              (28*4)    /* Insert character(s) */
#define e_delete            (29*4)    /* Delete character(s) */
#define e_tab               (30*4)    /* Perform tab(s) */
#define e_return            (31*4)    /* Insert return(s) */
#define e_renumber          (32*4)    /* Perform renumber */
#define e_saveandrun        (33*4)    /* Perform save and run */
#define e_linestart         (34*4)    /* Returns pos of first character of line */
#define e_lineend           (35*4)    /* Returns pos of last character of line */
#define e_linenext          (36*4)    /* Returns pos of actual line end (eg. at &0A) */
#define e_lineprev          (37*4)    /* Returns pos of actual line start (for BASIC) */
#define e_copy              (38*4)    /* Called when copying with copy key */
#define e_joinline          (39*4)    /* Called when joinline pressed */
#define e_splitline         (40*4)    /* Called when splitline pressed */
#define e_aligncaret        (41*4)    /* Align caret (& reset counters) */
#define e_command           (42*4)    /* Called when Zap_Command issued */
#define e_compile           (43*4)    /* Called when compile pressed */
#define e_formattext        (44*4)    /* Called when formattext pressed */
#define e_run               (45*4)    /* Called when run pressed */
#define e_runandquit        (46*4)    /* Called when run and quit pressed */
#define e_basic             (47*4)    /* Called when enter BASIC pressed */
#define e_search            (48*4)    /* Called to validate search */
#define e_replace           (49*4)    /* Called to replace area */
#define e_selection         (50*4)    /* Check selection */
#define e_click             (51*4)    /* Called when user clicks on window */
#define e_message           (52*4)    /* Called when unrecognised messages received */
#define e_setwidth          (53*4)    /* Called when user changes width of window */
#define e_listfns           (54*4)    /* Create function browser */
#define e_prevline          (55*4)    /* Find start of update region */
#define e_openwindow        (56*4)    /* Window changing size or moving */
#define e_interrogate       (57*4)    /* Zap's questions */

/* Register structs for multiple value return */

typedef struct {
  int r0,r1,r2,r3;
} lowregs;

typedef struct {
  int r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
} fullregs;


/* Standard C functions - note that the behaviour is not standard though! */

/* Counts length of string, termination <32. Returns length (including termination) */
extern __pure unsigned int strlen(const char *string);

/* Copies string, termination <32. Returns pointer to copied termination which is a 0 */
extern char *strcpy(char       *to,
                    const char *from);

/* Copies string up to maximum of count bytes (including termination, <32). Returns pointer
   to copied termination which is a 0 if there was room for it, else the first byte not written
   to */
extern char *strncpy(char        *to,
                     const char  *from,
                     unsigned int count);


/* Miscellaneous support functions */

/* Check we are in one of our modes. Returns true if we are. Also ws and mode loaded */
extern bool C_checkmode(void);

/* Returns character at offset. Result undefined if off file */
extern __pure char getc(unsigned int offset);

/* Returns 1 if character at offset is in a comment */
extern __pure int in_comment(unsigned int offset);

/* Returns 1 if character at offset is in a string */
extern __pure int in_string(unsigned int offset);

/* Returns 1 if character at offset is in a comment, string or chr lit */
extern __pure int in_quoted(unsigned int offset);

/* Returns true iff a key has been pressed */
extern bool kbhit(void);

/* Wait for both shift and ctrl to be released */
extern void releasekeys(void);

/* Debugging code... */
 extern void debug_word(unsigned int w);
 extern void debug_dump(const void  *data,
                       unsigned int length);


/* SWIs */

unsigned int __swi(XOS_ReadMonotonicTime) os_readmonotonictime(void);


/* Zap functions */

typedef struct zap_update_coords_struct zap_update_coords;
typedef struct zap_offlinecol_ret_struct zap_offlinecol_ret;

extern __value_in_regs lowregs callzap3n(int r0,int r1,int r2,int off);

extern __value_in_regs lowregs callzap3c(int r0,int r1,int r2,int off);

extern __value_in_regs lowregs callzapvc(int r0,int r1,int r2,int r3,int off,...);

extern __value_in_regs lowregs callzapa(int r0,int r1,int r2,int r3,int off,fullregs *regs,...);

extern __value_in_regs lowregs callzapbm(int r0,int r1,int r2,int r3,int r4,int r5,int r6,int r7,
                                         int entry);

extern int callzap3n_I_I_I_I_I(int,int,int,int);
extern int callzap3n_I_VP_I_I_I(void *,int,int,int);
extern int callzap3n_I_CCP_I_I_I(const char *,int,int,int);

extern int callzap3c_I_I_I_I_I(int,int,int,int);
extern int callzap3c_I_CCP_I_I_I(const char *,int,int,int);
extern int callzap3c_I_I_zapupdatecoordsP_I_I(int,zap_update_coords *,int,int);
extern __value_in_regs zap_offlinecol_ret callzap3c_zapofflinecolret_I_I_I_I(int,int,int,int);

extern int callzapvc_I_I_I_I_I_I_I_I_I(int,void *,const void *,int,int);
extern int callzapvc_I_I_VP_CVP_I_I(int,void *,const void *,int,int);
extern int callzapvc_I_I_I_I_CCP_I(int,int,int,const char *,int);
extern int callzapvc_I_I_I_CCP_I_I(int,int,const char *,int,int);
extern int callzapvc_I_I_I_VP_I_I(int,int,void *,int,int);

extern int callzapbm_I_I_I_I_I_I_I_I_I(int,int,int,int,int,int,int,int,int);
extern int callzapbm_I_I_I_I_I_I_I_I_CCP(int,int,int,int,int,int,int,const char *,int);


/*** Zap calls not involving r8-r10 ***/

#define /*void * */ zap_claim(/*unsigned int*/ size) \
                       ((void *)callzap3n_I_I_I_I_I(size,0,0,Zap_Claim))

#define /*void * */ zap_ensure(/*void * */      block, \
                               /*unsigned int*/ size) \
                       ((void *)callzap3n_I_VP_I_I_I(block,size,0,Zap_Ensure))

#define /*void*/ zap_free(/*void * */ block) \
                   ((void)callzap3n_I_VP_I_I_I(block,0,0,Zap_Free))

#define /*void*/ zap_movebytes(/*void * */       to, \
                               /*const void * */ from, \
                               /*unsigned int*/  size) \
                   ((void)callzapvc_I_I_VP_CVP_I_I(0,to,from,size,Zap_MoveBytes))

#define /*void*/ zap_fillwords(/*unsigned int*/ word, \
                               /*void * */      address, \
                               /*unsigned int*/ size) \
                   ((void)callzapvc_I_I_I_VP_I_I(0,word,address,size,Zap_FillWords))

#define /*int*/ zap_readvar(/*int*/ variable) \
                  ((int)callzap3n_I_I_I_I_I(0,variable,0,Zap_ReadVar))

#define /*void*/ zap_writevar(/*int*/ value, \
                              /*int*/ variable) \
                   ((void)callzap3n_I_I_I_I_I(value,variable,0,Zap_WriteVar))

#define /*int * */ zap_readmode(/*int*/ mode) \
                   ((int *)callzap3n_I_I_I_I_I(mode,0,0,Zap_ReadMode))
/* missed r1!! */

#define /*void*/ zap_clearsel(/*void*/) \
                   ((void)callzap3n_I_I_I_I_I(0,0,0,Zap_ClearSel))

#define /*int*/ zap_modenumber(/*const char * */ modename) \
                  ((int)callzap3n_I_CCP_I_I_I(modename,0,0,Zap_ModeNumber))


/*** Zap calls using no more than r0-r2 and current r8-r10 ***/

#define /*void*/ zap_splitbuffer(/*unsigned int*/ offset, \
                                 /*unsigned int*/ size) \
                   ((void)callzap3c_I_I_I_I_I(offset,size,0,Zap_SplitBuffer))

#define /*void*/ zap_newwinstatus(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_NewWinStatus))

#define /*void*/ zap_savewinstatus(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_SaveWinStatus))

#define /*void*/ zap_plotcaret(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_PlotCaret))

#define /*void*/ zap_reflectcaret(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_ReflectCaret))

#define /*void*/ zap_setcaret(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_SetCaret))

#define /*void*/ zap_clearcaret(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_ClearCaret))

#define /*void*/ zap_showcursor(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_ShowCursor))

#define /*int*/ zap_savefile(/*void*/) \
                  ((int)callzap3c_I_I_I_I_I(0,0,0,Zap_SaveFile))

#define /*void*/ zap_updatelns(/*unsigned int*/ startline) \
                   ((void)callzap3c_I_I_I_I_I(startline,0,0,Zap_UpdateLns))

#define /*void*/ zap_updatecaret(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_UpdateCaret))

#define /*void*/ zap_getwindstate(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_GetWindState))

#define /*void*/ zap_startop(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_StartOp))

#define /*void*/ zap_stopop(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_StopOp))

#define /*void*/ zap_findfile(/*const char * */ file) \
                   ((void)callzap3c_I_CCP_I_I_I(file,0,0,Zap_FindFile))

#define /*void*/ zap_findwindow(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_FindWindow))

#define /*void*/ zap_convwindoff(/*int*/ windoff) \
                   ((void)callzap3c_I_I_I_I_I(windoff,0,0,Zap_ConvWindOff))

#define /*void*/ zap_convfileoff(/*int*/ fileoff) \
                   ((void)callzap3c_I_I_I_I_I(fileoff,0,0,Zap_ConvFileOff))

#define /*int*/ zap_getwindoff(/*void*/) \
                   ((int)callzap3c_I_I_I_I_I(0,0,0,Zap_GetWindOff))

#define /*int*/ zap_getfileoff(/*void*/) \
                   ((int)callzap3c_I_I_I_I_I(0,0,0,Zap_GetFileOff))

#define /*void*/ zap_gotooffset(/*int*/ offset) \
                   ((void)callzap3c_I_I_I_I_I(offset,0,0,Zap_GoToOffset))

#define /*void*/ zap_jumptooffset(/*int*/ offset) \
                   ((void)callzap3c_I_I_I_I_I(offset,0,0,Zap_JumpToOffset))

#define /*void*/ zap_newfiletitle(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_NewFileTitle))

#define /*void*/ zap_insertstring(/*const char * */ string) \
                   ((void)callzap3c_I_CCP_I_I_I(string,0,0,Zap_InsertString))

#define /*void*/ zap_putcaret(/*unsigned int*/ offset) \
                   ((void)callzap3c_I_I_I_I_I(offset,0,0,Zap_PutCaret))

#define /*void*/ zap_discardfile(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_DiscardFile))

#define /*void*/ zap_deletefile(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_DeleteFile))

#define /*void*/ zap_discardwindow(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_DiscardWindow))

#define /*void*/ zap_deletewindow(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_DeleteWindow))

#define /*int*/ zap_commandstring(/*const char * */ cmdstring) \
                  ((int)callzap3c_I_CCP_I_I_I(cmdstring,0,0,Zap_CommandString))
#define /*int*/ unlearntzap_commandstring(/*const char * */ cmdstring) \
                  ((int)callzap3c_I_CCP_I_I_I(cmdstring,((int)(0x80000000)),0,Zap_CommandString))

/* Parameter block for zap_updatearea and zap_updatewindow */
struct zap_update_coords_struct {
  unsigned int windowhandle;
  unsigned int minx;
  unsigned int miny;
  unsigned int maxx;
  unsigned int maxy;

  /* These used internally by Zap & the Wimp */
  unsigned int scrollx;
  unsigned int scrolly;
  unsigned int winminx;
  unsigned int winminy;
  unsigned int winmaxx;
  unsigned int winmaxy;
};

#define /*void*/ zap_updatearea(/*zap_update_coords * */ block) \
                   ((void)callzap3c_I_I_zapupdatecoordsP_I_I(0,block,0,Zap_UpdateArea))

#define /*void*/ zap_updatewindow(/*zap_update_coords * */ block) \
                   ((void)callzap3c_I_I_zapupdatecoordsP_I_I(0,block,0,Zap_UpdateWindow))

#define /*void*/ zap_updatewholewindow(/*void*/) \
                   ((void)callzap3c_I_I_I_I_I(0,0,0,Zap_UpdateWholeWindow))

/* Return type for zap_offlinecol */
struct zap_offlinecol_ret_struct {
  unsigned int startlineoff;
  unsigned int _reserved;
  unsigned int column;
  unsigned int row;
};

#define /*zap_offlinecol_ret*/ zap_offlinecol(/*unsigned int*/ offset) \
                                 (callzap3c_zapofflinecolret_I_I_I_I(offset,0,0,Zap_OffLineCol))


/*** Zap calls using no more than r0-r7 and current r8-r10 ***/

typedef enum {

/* One of these */

  zap_Insert     = 1,
  zap_Delete     = 2,
  zap_ReplaceFwd = 3,
  zap_ReplaceBck = 4,

/* OR with this   */

  zap_Buffer     = 0x10
} zap_Commands;

#define /*void*/ zap_command(/*zap_Commands*/  command, \
                             /*unsigned int*/  offset, \
                             /*unsigned int*/  size, \
                             /*const char * */ data) \
                   ((void)callzapvc_I_I_I_I_CCP_I(command,offset,size,data,Zap_Command))

#define /*void*/ zap_docommand(/*zap_Commands*/  command, \
                               /*unsigned int*/  offset, \
                               /*unsigned int*/  size, \
                               /*const char * */ data) \
                   ((void)callzapvc_I_I_I_I_CCP_I(command,offset,size,data,Zap_DoCommand))

#define /*void*/ zap_replacearea(/*unsigned int*/  origoffset, \
                                 /*unsigned int*/  origsize, \
                                 /*const char * */ newstring, \
                                 /*unsigned int*/  newsize) \
                   ((void)callzapvc_I_I_I_CCP_I_I(origoffset,origsize,newstring,newsize,Zap_ReplaceArea))

/*** Calls to entry points with Zap_BaseMode */

#define /*void*/ zap_basemode_e_char(/*unsigned int*/  wflags, \
                                     /*unsigned int*/  count, \
                                     /*unsigned int*/  wformat, \
                                     /*const char * */ data) \
                   ((void)callzapbm_I_I_I_I_I_I_I_I_CCP(0,0,0,0,wflags,count,wformat,data,e_char))

#define /*void*/ zap_basemode_e_return(/*unsigned int*/  type, \
                                     /*unsigned int*/  wformat, \
                                     /*unsigned int*/  wflags) \
                     ((void)callzapbm_I_I_I_I_I_I_I_I_CCP(type,0,0,0,wflags,0,wformat,0,e_return))
/*                   ((void)callzapbm_I_I_I_I_I_I_I_I_I(0,0,0,0,0,0,0,0,e_return)) */

#define /*void*/ zap_basemode_e_linestart(/*unsigned int*/ offset) \
                   ((unsigned int)callzapbm_I_I_I_I_I_I_I_I_I(offset,0,0,0,0,0,0,0,e_linestart))

#define /*void*/ zap_basemode_e_lineend(/*unsigned int*/ offset) \
                   ((unsigned int)callzapbm_I_I_I_I_I_I_I_I_I(offset,0,0,0,0,0,0,0,e_lineend))

#define /*void*/ zap_basemode_e_linenext(/*unsigned int*/ offset) \
                   ((unsigned int)callzapbm_I_I_I_I_I_I_I_I_I(offset,0,0,0,0,0,0,0,e_linenext))

#define /*void*/ zap_basemode_e_lineprev(/*unsigned int*/ offset) \
                   ((unsigned int)callzapbm_I_I_I_I_I_I_I_I_I(offset,0,0,0,0,0,0,0,e_lineprev))

#define /*void*/ zap_basemode_e_lineoff(/*unsigned int*/ startoffset,offset) \
                   ((unsigned int)callzapbm_I_I_I_I_I_I_I_I_I(startoffset,offset,0,0,0,0,0,0,e_lineoff))


/* Zap_CreateFileBlk */
/* Zap_CreateWindBlk */
/* Zap_GetSel */
/* Zap_InsertMark */
/* Zap_InstallFile */
/* Zap_NewMode */
/* Zap_NewTitle */
/* Zap_NewView */
/* Zap_ReadSel */
/* Zap_Replace */
/* Zap_Search */
/* Zap_Select */
/* Zap_AlterSel */
/* Zap_AddCommands */
/* Zap_MiniWrite */
/* Zap_MiniPrompt */
/* Zap_MiniUpdate */
/* Zap_AddYankRegion */
/* Zap_FindCommand */
/* Zap_ProcessCommand */
/* Zap_FindKeyEntry */
/* Zap_FindLeafName */
/* Zap_NewFileName */
/* Zap_CheckFileName */
/* Zap_GetCurrDir */
/* Zap_MiniWriteC */
/* Zap_MiniClear */
/* Zap_MiniStart */
/* Zap_MiniEval */
/* Zap_ProcessKeys */
/* Zap_ProcessAKey */
/* Zap_OpenWindow */
/* Zap_RestoreModeWord */
/* Zap_SaveModeWord */
/* Zap_GetModeWord */
/* Zap_PutModeWord */
/* Zap_ReadWord */
/* Zap_ReplaceWord */
/* Zap_ModeColour */
/* Zap_FindInput */
/* Zap_ClipCache */
/* Zap_ModeData */
/* Zap_WhichMode */
/* Zap_SendDataSave */
/* Zap_Warning */
/* Zap_AllWindow */
/* Zap_ReadMenu */
/* Zap_LoadMenu */
/* Zap_OpenMenu */
/* Zap_CallBack */
/* Zap_DragBox */
/* Zap_SendMessage */
/* Zap_Reply */
/* Zap_Extend */
/* Zap_ModeColourNum */
/* Zap_CreateThrowback */
/* Zap_Throwback */
/* Zap_TestModeName */

/* Calls not implemented: */
/* Zap_AddMode, Zap_NewTxtStatus, Zap_SaveTxtStatus, Zap_EachWindow, Zap_CallMode, */
/* Zap_CallGivenMode, Zap_FindOffset, Zap_CreateFile */
/* Zap_NewLinkEntry */
/* Zap_DefaultClick */
/* Zap_BuildMenu */
