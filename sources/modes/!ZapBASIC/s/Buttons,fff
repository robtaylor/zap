; Contains Buttons stuff...
; $Id: Buttons,fff,v 1.2 1999-08-27 11:09:48 james Exp $
; -*- armasm -*-

 GET h.ZapBasHdr
 GET h.ButtonsHdr

 EXPORT but_trytoloadmode
 EXPORT but_callmiscentrypt
 EXPORT but_destroyanypanes
 EXPORT but_closeanypanes
 EXPORT but_changeLFto00
 EXPORT but_sortwwout
 EXPORT but_sortwwout2
 EXPORT but_sortwwout3
 EXPORT but_tickquery

; REM *****************************************************
; REM *                                                   *
; REM *      Tim Tyler's main additions begin here        *
; REM *                                                   *
; REM *****************************************************

but_trytoloadmode
 STMFD   R13 !,{R14}
 ADR     R0,but_buttonsamed2
 FNcall  Zap_ModeNumber
 LDMFD   R13 !,{PC}

but_buttonsamed
 =    "Zap"

but_buttonsamed2
 =    "Buttons",0,0

but_LocalJump
 DCD    0

but_callmiscentrypt
 STMFD   R13 !,{R0-R12,R14}

 ADR     R0,but_buttonsamed2
 FNcall  Zap_TestModeName
 CMP     R0,#1
 LDMMIFD R13 !,{R0-R12,PC}

 MOV     R0,#18
 ADR     R1,but_buttonsamed
 SWI     XOS_Module
 LDMMIFD R13 !,{R0-R12,PC}

 ADD     R3,R3,#&2C
 STR     R3,but_LocalJump

 LDMFD   R13,{R0-R12,R14}
 MOV     R14,PC
 LDR     PC,but_LocalJump

 MOV     R0,R0

 LDMFD   R13 !,{R0-R12,PC}

; REM Deletes a button bar (and its WIMP window).
; REM To be called by a mode's e_end entry point.
; REM Deletes all button bars associated with the window.
; REM It is possible to close them rather than delete them if you
; REM like, but I don't recommend doing this.

but_destroyanypanes
 STMFD   R13 !,{R0-R12,R14}
 ADRL    R0,but_buttonsamed2
 FNcall  Zap_TestModeName
 CMP     R0,#0
 BMI     but_rapidfinishdestruction

 MOV     R0,#18
 ADR     R1,but_buttonsamed
 SWI     XOS_Module
 LDMVSFD R13 !,{R0-R12,PC}

 ADR     R0,but_buttndelhere
 FNcall  Zap_CommandString

but_rapidfinishdestruction
 LDMFD   R13 !,{R0-R12,PC}

but_closeanypanes
 STMFD   R13 !,{R0-R12,R14}
 ADRL    R0,but_buttonsamed2
 FNcall  Zap_TestModeName
 CMP     R0,#0
 BMI     but_rapidfinishdestruction

 MOV     R0,#18
 ADR     R1,but_buttonsamed
 SWI     XOS_Module
 LDMVSFD R13 !,{R0-R12,PC}

 ADR     R0,but_buttnclohere
 FNcall  Zap_CommandString

 LDMFD   R13 !,{R0-R12,PC}

; REM Make sure the zeros pad to word alignment...

but_buttndelhere
 =    "BUTTONS_DELETE",0,0

but_buttnclohere
 =    "BUTTONS_CLOSE",0,0,0

; REM put 0s instead of CRs...

but_changeLFto00
 LDR     R1,[R0]
 CMP     R1,#0
 MOVEQ   PC,R14
 AND     R2,R1,#&FF
 CMP     R2,#&0A
 BICEQ   R1,R1,#&FF
 AND     R2,R1,#&FF00
 CMP     R2,#&0A00
 BICEQ   R1,R1,#&FF00
 AND     R2,R1,#&FF0000
 CMP     R2,#&0A0000
 BICEQ   R1,R1,#&FF0000
 AND     R2,R1,#&FF000000
 CMP     R2,#&0A000000
 BICEQ   R1,R1,#&FF000000
 STR     R1,[R0],#4
 B       but_changeLFto00

; REM COMMAND to toggle various flags - much of this code
; REM can be copied if you are providing a similar command
; REM and haven't written one before...

; REM returns 1 or 0 depending on the relevant bit being set

but_tickquery
 AND     R2,R10,#&1F
 MOV     R3,#1
 MOV     R3,R3,LSL R2
 TST     R7,R3
 MOVNE   R0,#1
 MOVEQ   R0,#0
 LDMFD   R13 !,{PC}

but_sortwwout
 STMFD   R13 !,{R5,R14}

 MOV     R0,#4
 BL      but_callmiscentrypt

 LDMFD   R13 !,{R5,PC}

but_sortwwout2
 STMFD   R13 !,{R5,R14}

 MOV     R0,#5
 BL      but_callmiscentrypt

 LDMFD   R13 !,{R5,PC}

but_sortwwout3
 STMFD   R13 !,{R5,R14}

 MOV     R0,#7
 BL      but_callmiscentrypt

 LDMFD   R13 !,{R5,PC}

;sortbbout
; STMFD   R13 !,{R5,R14}
;
; MOV     R0,#3
;
; BL      but_callmiscentrypt        ; REM sets/clears any bits (from R7)

;but_amenucreation
; STMFD   R13 !,{R0,R14}
; BL      loadmenuifrequired
;
; FNcall Zap_ReadMenu
;
; LDR     R1,[R0,#4]
;
; LDMFD   R13 !,{R0,PC}^


; REM *****************************************************
; REM *                                                   *
; REM *       Tim Tyler's main additions end here         *
; REM *                                                   *
; REM *****************************************************

 END
