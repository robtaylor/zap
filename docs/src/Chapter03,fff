\#
\# $Id: Chapter03,fff,v 1.1.1.1 1998-12-03 15:49:04 dj Exp $
\#
\# Manual.Section03/src
\# Basic operation (creating/loading files, editing, saving)
\# Original author: James Aylett
\#
\# This contains bits taken from Section B (Loading, saving, printing and
\# editing) and Section A (Keys and options) from the original manual.
\#

\C{Basic operation} Simple operation

\H{newfile} Loading and creating files

Once Zap has loaded onto the iconbar, you can create a new file by:

\b clicking \c{Select}, which will create a new text file.

\b clicking \c{Adjust}, which will create a new BASIC file.

\b clicking \c{Menu}, opening the \c{New file} submenu, and selecting the
type of file you want.

Alternatively, you can load an existing file into Zap.

\b if it is a text file, double click on it (you will find that some other
files will load straight into Zap in this way - see \k{filetypes} for more
details.

\b if the file is typed, hold down the left \c{Shift} key and double click
on it.

\b (for all files) drag it to Zap's icon on the iconbar.

If you load a file into Zap, it will check to see if it is a \I{DOS file}DOS
(line ends are \c{CRLF}) or \I{Spool file}Spool (line ends are \c{LFCR})
file as it does. If it is in either format, it doesn't just load the file,
but converts it first to make editing easier. It will then automatically
convert back when you save - see \k{save options} for more details.

When you load a file into Zap, or create a new one, it works out the best
\e{mode} to put it in. For the moment, don't worry about this - if you're
new to Zap, just create a text file by clicking Select on Zap's icon, and
we'll cover modes later, in \k{Modes}. However it is worth noting that you
can override what Zap thinks is the best mode by holding down \c{Control} -
this will drop the file into whatever's set as the '\i{default mode}' -
typically either Text or Byte. See the note at the end of \k{per mode
config} for how to configure this.

If the file is already loaded into Zap and you have altered it, Zap will ask
you whether you want to \c{Cancel} (don't load the file), \c{Edit} (load the
file, but keep the altered file loaded as well), or \c{Overwrite} (close the
altered file without giving you a chance to save it, and then opening the
one on disc). The dialogue box Zap uses to ask you this also has a \c{To
Front} button, which will bring all the windows on the altered file to the
front of the window stack, so you can decide what you want to do. Several of
Zap's dialogue boxes in similar situations have this button.

Zap can also grab the memory of running applications, the contents of
dynamic areas, sectors from discs, and the code or workspace of a module;
see \k{grab memory} for more information.

\H{basic window} A Zap editing window

A Zap editing window is just a normal \i{RISC OS} window, with one slight
exception (see \k{minibuffer}). As you'd expect, clicking \c{Menu} on a Zap
editing window will bring up a menu which has options to let you save the
file you are working on, and a range of other useful operations.

In common with many applications, Zap puts the filename in the window's
title bar, but it also puts some other information there too. In any mode,
the window title is of the form \c{<filename> [*] ([mode name] [options])
[view number/number of views]}

The title is centered unless the window is small, when it is right aligned
so that you can see the leaf name and options of the file. A '*' indicates
that the file has been altered since last saved (sometimes you will get a
'?' instead, which means that Zap isn't sure, but the file \e{may} have been
changed). The view number is only shown if you have more than one view on a
file.

\S{titlebar options} Titlebar options characters

The options characters are one or more of:

\b \c{R} - permanent \i{read only} (ie you can't make it non\-read only).

\b \c{r} - \i{read only}, but can be made read/write (see \k{readonly}).

\b \c{D} - this is a \I{DOS file}DOS text file: line feeds will be converted
to [CR][LF] on saving (see \k{save options}).

\b \c{S} - this is a \I{Spool file}Spool text file: line feeds will be
converted to [LF][CR] on saving (see \k{save options}).

\b \c{p} - strip spaces on saving (see \k{save options}).

\b \c{B} - \i{Block edit} mode is on (see \k{block edit}).

\b \c{A} - File has non\-standard attributes (update using OS_GBPB).

\b \c{u} - \i{Undo} is enabled for this file.

\b \c{o} - \i{Overwrite} (typing in characters overwrites whatever's at the
cursor - see \k{other options}).

\b \c{h} - \i{Hex entry} mode (used by Byte and Word modes - see \k{binary
modes}).

\b \c{w} - \i{Wordwrap} mode active (see \k{wrapping}).

\b \c{L} - \i{Line wrap} mode (see \k{wrapping}).

\b \c{l} - \i{Line edit} mode (see \k{lineedit}).

\b \c{n} - \i{Non\-standard} mode (see \k{other options}).

\b \c{a} - \i{Auto indent} mode (see \k{autoindent}).

\b \c{W} - \i{Window wrap} mode (see \k{wrapping}).

\b \c{s} - \i{Soft wrap} mode (see \k{wrapping}).

\H{basic editing} Basic editing

Now we've got a new file, we probably ought to alter it in some way. First
we need to briefly talk about Zap's cursor.

\S{cursors} Zap's cursors

Unlike \i\e{Edit}, which has a \e{point cursor} - a single line which
indicates where text that you type will be entered, Zap has a \e{block
cursor}. When you open a new file, you will see it sitting at the top left
of the window. Text you type will get inserted immediately to the left of
the block cursor (unless you have \i{overwrite} turned on, in which case
typing a character will overwrite the character displayed in the block
cursor with the new character that you typed). You can position the cursor
by clicking \c{Select} with the mouse (the mouse can also be used for other
things - see \k{Mouse control} for more information).

That said, you can now happily type some text in; the cursor keys work in
the way you would expect.

Zap also has another three cursors. Firstly, it has a \e{mark cursor}. This
shows where the cursor \e{would} be in a window that doesn't have the focus.
To see this, open two new text files, and type some text into each. Resize
them so you can see both - and you will see that the window with the focus
has a block cursor, while the window without the focus has an empty square
mark cursor to indicate where the cursor was when you last used that window.
Clicking \c{Select} both sets the focus to the window you clicked on and
moves the cursor; if you want to set the focus to a window, but not set the
cursor, click \c{Adjust} - this will position the cursor where the mark
cursor was. This way you can quickly move between windows with the mouse
without having to click accurately to keep the cursor where you want it.

Secondly, Zap has a pair of \i\e{copy cursors}. If you turn copy mode on by
pressing \c{sCopy} (hold down \c{Shift} and press the \c{Copy} key), you
will have two separate cursors (although they will initially be at the same
position, so you won't be able to see this). One, a block cursor will remain
in place, while the other, a thin line drawn under the character it's at,
can be moved around the file. In copy mode, pressing \c{Copy} will copy the
character under the line cursor to the position of the block cursor.
Pressing \c{Escape} or \c{Return} will cancel copy mode. (This works in the
way you'd expect from using the \c{Copy} key in BASIC or from the command
line.)

You can configure how Zap draws its different cursors - see \k{cursor
config}.

\H{keyboard} Keyboard shortcuts

Many applications have some keyboard shortcuts to help you perform common
operations quickly. Zap has lots of keyboard shortcuts, so that not only
common operations but also less common ones can all be performed without
having to move your hands from the keyboard. As with everything else, what
each keypress does can be configured - see \k{keyboard config} for more
information; you might also like to look at \k{keymaps}, which allows both
for a series of keypresses to perform an action (eg: \c{scF11 cX cS} saves
the file), and for different modes to have the same keypresses doing
different things.

Keystrokes are shown on Zap's menus, where they are displayed using \c{^} to
stand for \c{Control}, and an up arrow to stand for \c{Shift} (eg: \c{^F3}).
In this manual we will use \c{s} for \c{Shift} and \c{c} for \c{Control}
(eg: \c{cF3}, \c{scW}). \c{Control} and \c{Shift} are \e{modifiers} - you
hold them down while you press the key named afterwards. The keynames should
all be fairly obvious; if it starts with \c{k} it means the named key on the
keypad at the right of the keyboard (eg: \c{k0}, \c{kEnter}, \c{sk1} and so
on).

For a complete list of Zap's default keystrokes, see \k{Keystrokes}.

\S{moving around} Moving around your file

You will probably already be familiar with the way cursor keys work. Not
only can you use them to move around, one character or one line at a time,
but you can use them to move quickly around your file. Their complete
operation is as follows:

\b \c{Left} - Moves left one character.

\b \c{Right} - Moves right one character.

\b \c{Up} - Moves up one line.

\b \c{Down} - Moves down one line.

\b \c{sLeft} - Moves left one word (see \k{cursor options}).

\b \c{sRight} - Moves right one word (see \k{cursor options}).

\b \c{sUp/PageUp} - Moves up one page.

\b \c{sDown/PageDown} - Moves down one page.

\b \c{scUp} - Scrolls the window up one line without moving the cursor.

\b \c{scDown} - Scrolls the window down one line without moving the cursor.

\b \c{scLeft} - Scrolls the window left one character without moving the
cursor.

\b \c{scRight} - Scrolls the window right one character without moving the
cursor.

\S{other keystrokes} Other useful keystrokes

Zap's default configuration also contains many of the standard \i{RISC OS}
shortcuts. For instance, the \i{save} box is opened by pressing \c{F3}, and
the selection keys (\c{cZ}, \c{cX}, \c{cC} and \c{cV}) work as expected.

Some other useful keys are (these are clearly our idea of what is useful!):

\b \c{F2} - Load the named file.

\b \c{cF2} - Close current window.

\b \c{sF3} - Open the \i{save selection} box.

\b \c{cF3} - \i{Save} the file without opening the save box.

\b \c{F4} - Bring up the \i{search} box (see \k{Searching}).

\b \c{sF4} - Bring up the \i{replace} box (see \k{Searching}).

\b \c{cF4} - Open a new window on this file.

\b \c{F5} - Bring up the \i{goto line/address} box.

\b \c{F6} - Drop a \i{mark} (see \k{marking}).

\b \c{sF6} - Jump to last \i{mark} (see \k{marking}).

\b \c{F7} - Bring up the \i{search to buffer} box (see \k{Searching}).

\b \c{sF7} - Next match in \i{search} (see \k{Searching}).

\b \c{cF7} - Previous match in \i{search} (see \k{Searching}).

\b \c{F8} - \i{Undo} last operation (see \k{undo}).

\b \c{F9} - \i{Redo} last operation (see \k{undo}).

\b \c{sF9} - Jump to next \i{mark} (see \k{marking}).

\b \c{scF1-scF10} - Switch mode (see \k{Modes}).

\b \c{Insert} - Toggle insert/\i{overwrite} mode.

\b \c{Print} - Send file direct to printer ('\i{quick print}') - see
\k{printing}.

\b \c{sPrint} - Print file through printer driver ('\i{fancy print}') - see
\k{printing}.

\b \c{scSpace} - Remove excess spacing around the cursor.

\b \c{sDelete} - Delete next character.

\b \c{cDelete} - Delete current line.

\b \c{scDelete} - Delete to end of line.

\b \c{cCopy} - Start/end \i{selection} (see \k{Selections}).

\b \c{cEscape} - Enter command into \i{minibuffer} (see \k{minibuffer} and
\k{commands}).

\b \c{cQ} - Quote following character (see \k{quoting}).

\b \c{cR} - Reverse search 'as you type' (or \i{i\-search}) - see
\k{Searching}.

\b \c{cS} - Search 'as you type' (or \i{i\-search}) - see \k{Searching}.

\b \c{cH} - Get content sensitive help using \i\e{StrongHelp}.

\S{dialogue keystrokes} Keystrokes in dialogue boxes

Zap's dialogue boxes all work in a consistent manner. Firstly, \c{Return}
always closes the dialogue and performs the action for that dialogue box.
Secondly, the \c{Up} and \c{Down} keys always move between writeable fields,
and the \c{Tab} key always moves onto the next field. These features are
common with all normal \i{RISC OS} applications.

An additional feature with Zap dialogue boxes is that all options in the
dialogue box can be altered by holding down \c{Control} and pressing the
first capitalised letter in the option's descriptive text. For instance, in
the \i{goto line/address} dialogue box (\c{F5}) the number you input in the
writeable field can be interpreted in three ways: as a logical line, as
(\c{x,y}) coordinates, or as an address. Each option (Logical line,
Coordinates, Address) has its first letter capitalised (in some dialogues,
the first letters clash and some options will have later letters
capitalised) - so \c{cL} selects logical line, \c{cC} coordinates and \c{cA}
address. In dialogue boxes without writable icons, you can simply press the
first capitalised letter (ie: you don't have to hold down \c{Control}
first).

Some dialogue boxes will have specific other keystrokes - for instance the
search dialogues have commands to access the search history. Where it makes
sense, some dialogues will use ^P to insert Zap's current selection into the
writable icon at the caret.

\S{minibuffer} Zap's minibuffer

Sometimes you will run a command in Zap which needs more information - for
instance cW sets the width for the window you're working on, but you need to
tell it \e{what} width to use. In cases such as this, Zap will open a
'\i{minibuffer}' for you to type information into; this temporarily replaces
the horizontal scrollbar.

(You can actually configure the minibuffer to be present constantly; see
\k{minibuffer config}.)

If you drag a file or directory into the minibuffer, its full pathname is
inserted.

Several control keys have default meanings in the minibuffer. These cannot
be reconfigured, but are compatible with the \i\e{Emacs} minibuffer keys:

\b \c{cA} / \c{cLeft} - Move to start of line.

\b \c{cB} / \c{Left} - Move back a character.

\b \c{cD} / \c{sDelete} - Delete the next character.

\b \c{cE} / \c{cRight} - Move to end of line.

\b \c{cF} / \c{Right} - Move forward a character.

\b \c{cG} / \c{Escape} - Quit the minibuffer.

\b \c{cK} - Clear minibuffer's history buffer.

\b \c{cP} - Paste the current selection (in Zap) into the buffer.

\b \c{cCopy} - Delete to end of line.

\b \c{sCopy} - Delete word to right.

\b \c{cU} - Clear minibuffer.

\b \c{cW} - Paste the contents to the cursor position.

\b \c{Tab} - Complete key (eg after \c{F2}, \c{Tab} will complete filenames).

\b \c{Return} - Execute the command.

\b \c{sLeft} / \c{sRight} - Move the cursor a word at a time.

\b \c{cLeft} / \c{cRight} - Move the cursor to the start / end of the line.

If you have the \i{Line editor} module loaded (see \k{lineeditor}):.

\b \c{Up} / \c{sUp} - Recall line.

\b \c{Down} / \c{sDown} - Next line.

\b \c{cUp} - First line in recall buffer.

\b \c{cDown} - Last line in recall buffer.

The last four can be redefined by commands to the Line editor module, but
you will probably want to keep them consistent with the rest of the commands
for the minibuffer. For information on configuring the Line editor, see the
files in \c{!Zap.Code.Extensions.LineEditor}.

In addition, you can access the recall buffer by clicking \c{Menu} over the
minibuffer. You can also drag the minibuffer around with \c{Select}, and
resize it with \c{Adjust}, although this gets reset next time the minibuffer
is opened - it is of use primarily if you configure the minibuffer to be
open all the time (see \k{minibuffer config}).

One particular use of the minibuffer is to give commands directly to Zap.
All Zap's menus and keystrokes are defined in terms of the commands, which
are explored further in \k{commands}. All you need to know for the moment is
that \c{cEscape} opens the minibuffer and allows you to type a command
directly. For instance, if you want to open the save box, type \c{cEscape},
enter \c{SAVE} into the minibuffer, and press \c{Return}. The minibuffer
will close automatically, and the save box will open - just as if you'd
pressed \c{F3}.

\H{further editing} Further editing

Now we introduce undo and redo (enabling you to recover from mistakes),
quoting (which allows you to insert any character into your file), and
inserting files.

\S{undo} Undo and redo: recovering from mistakes

Often you will make a mistake and need to recover from it; you may have
deleted a section, or formatted a paragraph you didn't mean to. Pressing
\c{F8} will \i{undo} your last action. Zap stores undo information right
back until when you loaded or created the file, so you can undo several
actions in a row. Of course, this can take a lot of memory - if you find
that you are running short on memory you can turn undo off: it's in the File
submenu.

Of course, just having undo would be a bit limiting - so pressing \c{F9}
\I{redo}redoes your last undo step. For instance, if you insert the letter
\c{a}, then press \c{F8} the \c{a} will disappear - pressing \c{F9} will
bring it back again.

Zap actually has two different forms of undo, fast and full. Fast takes the
fastest route through the undo tree, and full follows it step by step - an
example should make this clearer.

Suppose you insert the letters \c{a} then \c{b}, and then undo the last
step. Now insert the letter \c{c} - so you have \c{ac}. If you undo the last
step, you are left with just \c{a} again, and up to this point fast and full
undo will behave in the same way. However if you undo \e{another} step,
there are two choices: fast undo will remove the \c{a}, while full undo will
insert the \c{b}.

\c{F8} is fast undo; \c{scBackspace} is full undo.

\S{quoting} Quoting characters

As we've already seen, Zap uses most \c{Control + key} combinations to
perform useful actions; therefore you can't use them to enter 'control
characters' - characters which you can't type on the keyboard. Instead, you
can 'quote' the character you want, by pressing \c{cQ} (hold down control
and press \c{Q}) and then typing the control character you want. For
instance, \c{cQ cA} will insert the byte 1 (which is \c{cA}). Use \c{cQ
cSpace} for the byte 0.

An alternative is to change into Byte mode, type the digits in hexadecimal,
and then switch back to whatever mode you were working in - see \k{Modes}
for more information about modes in general, and \k{binary modes} for
details on Byte mode.

Control characters are displayed by Zap in blue, as opposed to white - see
\k{colours} for more information.

\S{inserting files} Inserting files

You can drag a file directly into a Zap window to insert its contents at the
cursor. If you hold down \c{Shift}, then the filename of the file will be
inserted instead.

You can also save from another application into Zap; this will always insert
the file's contents.

Another way of inserting a file is to use the \c{INSERTFILE} command, which
is available from the \c{Misc->Insert} menu. This will open the minibuffer
to let you type in the filename. You can also prefix the filename with one
or more of \c{|} and \c{*} - the first will indent the text as if you'd
typed it in, and the second will run the file through GSTrans first, to
allow you to use system variables.

\H{saving and closing} Saving and closing files

In order to save your changes, bring up the \i{save} box by pressing \c{F3},
clicking on the \c{File} menu, or opening it from the menu tree as
\c{File->Save->(Save box)}. While this doesn't look like a normal \i{RISC
OS} save box, it essentially is - just with more information available to
you. The icon at the top left is draggable as you'd expect, and the filename
is near the bottom. In addition, the middle section gives you some
information about the file - its current size, and the date and time it was
last altered - and the top right allows you to change the filetype. You can
either type in a new filetype (the upper icon allows you to type it in as
text, while the lower one is numeric), or you can use the menu to get a list
of filetypes.

Zap will warn you if you are about to overwrite a more recent file (the
warning can be turned off - see \k{settings}).

If you want to save the file quickly, without having to confirm the
filename, you can press \c{cF3}, or click on \c{File->Save} in the menu.
This is known as a '\i{quick save}'.

\c{cF2} closes the current window; when there are no more windows open on a
particular file that file will be removed from Zap's memory. At this point,
if you have made any changes, Zap will ask you wheter you want to save the
file to preserve your changes, discard it, or cancel (therefore not closing
the last window). Similarly if you try to quit Zap with some modified files
still hanging around, it will ask whether you want to lose your changes.

(Zap has an option to allow files to stay in memory even when you've closed
all windows. This is similar to the way \i\e{Impression}, and some other
applications, handle things - for more information, see \k{settings}.)

\S{backups} Automatic \i{backups}

When you save a file, Zap will usually overwrite whatever was saved on disc
under that filename. However, in many cases - particularly when you're
programming - you might want to keep old versions of the files. While you
could make sure you always move the old version before saving, it would be
easy to forget - so Zap has a method for doing this for you.

When you save a file, Zap looks for a directory called \c{~} (just the tilde
sign). If it exists, Zap will first move the old copy of the file into that
directory (overwriting anything with the same name already there). If you
want more than one old version, you can do that by having a number of
directories called \c{~<number>} - eg: \c{~1}, \c{~2}, \c{~3} ... \c{~n},
and Zap will then keep the last n versions of the file. Zap won't bother
backing up a file if you've saved to it in the last two minutes - so if you
save every time you type a character you won't get a series of backup files
with very little difference between them. (The length of time Zap will wait
between backups can be configured - see \k{settings}.)

RULEHERE

The next section in the manual is \k{Selections}, which also covers moving
blocks of text around the file, to other files, or even to other
applications. It also covers various operations you can perform on blocks of
text, such as sorting.

Alternatively, you might like to move on to \k{Advanced editing}, which
tabbing, wrapping and formatting, and other advanced editing issues.
