\#
\# $Id: Chapter09,fff,v 1.3 1999-03-26 15:13:47 james Exp $
\#
\# Manual.Section09/src
\# Advanced use (marking, help, commands, learned sequences, universal argument)
\# Original author: James Aylett
\#
\# This section contains bits taken from Section E (Other features) of the
\# original manual, and from Docs.Commands.
\#

\C{Advanced use} Advanced use

Here we look at a final set of advanced functions, before moving on to modes. These features are all 'convenience' features, rather than being important things that you can't do without.

\H{marking} Setting and using \i{marks}

Often it is useful to be able to remember where you are in a file at a specific time, so that you can return to it later. Zap allows you to do this by using \e{marks}, which are controlled from the \c{Misc->Marking} menu or from keystrokes.

To toggle a mark - set if there isn't one there, clear if there is - use \c{TOGGLEMARK}, on \c{sF11}. To set a mark using \c{DROPMARK} on \c{F6}. To move to the next mark, use \c{NEXTMARK} on \c{sF9}, and to move to the previous mark, use \c{LASTMARK} on \c{sF6}. For instance, if you set a mark, then move and set another one, \c{sF6} will move you back to the second mark, \c{sF6} again to the first, and then \c{sF9} back to the second mark again.

Marks can't be seen when they are set; they can be set to any depth.

\H{readonly} Working with \i{read only files}

Zap has two types of read only files: firstly there are permanent read only files. These tend to be internal documentation files. You can't set these to be writable.

Secondly, there are temporary read only files; you can set these up yourself by the \c{File->Read only} menu option - the same option turns off the read only aspect again. This means that you can temporarily write\-protect a file to stop yourself from doing anything stupid to it. Zap also loads any file that it won't be able to save changes to as temporary read only.

If you try to edit a read only file, Zap beeps at you and prints a warning in the minibuffer.

\H{help} Zap's \i{help} system

Zap can provide help on the current mode you are using, as well as any keystroke, command or function. Pressing c\\ brings up a small menu in the \i{minibuffer}. You can press:

\b \c{K} - Keystroke help - press the keystroke you want help on.

\b \c{M} - Help on the current mode (see \k{Modes}).

\b \c{F} - Function help - type the function name (see \k{functions}).

\b \c{C} - Command help - type the command name (see \k{commands}).

\b \c{V} - Variable help - type the variable name (see \k{c-vars}).

\b \c{D} - Documentation (opens the documentation directory for the current country).

\b \c{Z} - Help on Zap (opens the manual for the current country).

To get help on a keystroke in anything other than the base keymap, first change into that keymap, and then run the \c{HELP} command (either through the minibuffer, or through whatever it's bound to in that keymap).

Zap can also display help on its menus and dialogues in Acorn's \i\e{Help}; it also displays help for the relevant mode if the cursor is over an editing window.

Note that the \i\e{ZapText} extension also gives Zap the ability to look up help on whatever is at the cursor using \i\e{StrongHelp}. To do this, press \c{cH} (you'll need both ZapText and StrongHelp installed to do this - \i\e{StrongHelp} is available from \W{http://login.eunet.no/~guttorvi/strong.html}{http://login.eunet.no/~guttorvi/strong.html}).

\H{commands} Zap's command language

Pressing \c{cEscape} brings up the \i{minibuffer} and allows you to enter commands directly into Zap. This is very useful, because Zap has lots of commands (and you can get extensions to provide additional ones), and there simply aren't enough keystrokes or menu items to go round.

If you don't know how to use a command, you can type \c{c\\ c} (help on commands) and then type in the command name for a brief description.

\S{command syntax} Command syntax

Commands can take a parameter; there are four different types. If you request help on a command, the parameter type will be shown as:

\b \c{WIBBLE} - Command Wibble takes no parameter.

\b \c{WIBBLE <byte>} - Command Wibble takes a single byte.

\b \c{WIBBLE <word>} - Command Wibble takes a word (4 bytes).

\b \c{WIBBLE <string>} - Command Wibble takes a string argument.

Byte and word parameters must be preceded by an \c{&} if in hex, and may be surrounded by brackets or quotes; string parameters must be either in double quotes \c{"} or in brackets \c{(} and \c{)}. Within a double\-quoted string, double quotes themselves can be included by doubling them up (eg: \c{INSERT "Suddenly, Jonathon said ""Hey""."}). For byte and word parameters, \c{x} is evaluated to the ASCII value of the character x (eg: \c{CHAR 'n'} inserts the letter \c{n}).

An error is given if the parameter you place after the command does not match the type of the command, except that if you omit a string parameter, the minibuffer will be opened for you to type the string into. (This is exactly what happens when you press \c{cEscape}, in fact - \c{cEscape} executes the command \c{COMMAND} without any parameters, allowing you to specify your own command.)

Commands can be chained together by using colon as a separator \c{:} as in BASIC. You \e{cannot} chain together commands which use the minibuffer (ie: commands which take a string as a parameter but with the string unspecified).

You can put a comment after a command by using \c{;} (eg: \c{COMMAND ; comment}). The comment terminates at the first \c{:} (so you can put comments between commands when you chain multiple commands together).

This section has provided only a basic introduction to using simple commands. See \k{Commands} for a complete description of Zap's command language, including functions, variables, and conditional and looping constructs.

\H{learn} \i{Learning} and playing back actions

This feature of Zap is very simple to use, and very useful. To start 'learning' a key sequence, simply press \c{cL}. Type the sequence you wish to learn and then press \c{cL} again. (\c{EXECUTE} also stops the learning process.) Press \c{F1} to execute the learnt sequence.

Note firstly that Zap will beep after every keypress you make to remind you that it is being stored. Secondly note that the \c{Escape} key will \e{not} stop the learning process. Only \c{cL} will stop it. Thus you can learn sequences which use incremental search, or keyboard selection of regions; both these actions involve the \c{Escape} key.

Once you have learnt a sequence, you may 'bind' that sequence to a key so that pressing that key in future causes the same series of actions to take place. To do this press \c{cF8} and then press the key you want to bind the sequence to (or \c{Escape} if it was a mistake - \c{Escape} won't be bound).

Examples:

\b Suppose you wanted to insert a tab at the beginning of a group of lines. One way would be to use the indent option (see \k{indent}); another would be to learn the sequence \c{TAB,DOWN,CLEFT} and then to press \c{F1} a number of times. As a slightly more sophisticated example of this, it is often useful to insert an extra tab before the last word on the line. You can do this by binding \c{TAB,UP,CRIGHT,SLEFT} and pressing \c{F1} repeatedly.

\b Suppose you wanted to go to the next match of \c{cat} and switch the case of the letters. You could learn and then execute the sequence \c{cS cat Return Escape Left Left Left scS scS scS} (\c{scS} swaps the case of the character at the cursor).

\H{universal arg} The \i{universal argument}: repeating actions

The universal argument feature enables you to execute a keypress an arbitrary number of times.  Suppose for example you wanted to insert 100 spaces.  The quick way to do this is to type \c{cU 100 Space}.

In general you type \c{cU} then the number of times you want the key to be executed, then press \c{Return}, then press the key to execute.  The 'pressing \c{Return}' step can be omitted if the key you want to repeat is not delete or a digit or another valid key for editing the number you are typing (as in the example above).

Some commands (and therefore the keystrokes they are bound to) can't be sensibly executed more than once (for instance \c{OPENPARENT}, which opens the directory containing the current file); in these cases the universal argument simply won't affect the command or keystroke.

\H{OLEEE} \i{Object Linking and Embedding}, and \i{External Edit}

Zap supports both OLE and EE for editing files. These are used by a large number of other programs that wish to have data edited for them, but don't know how to do it themselves. External Edit is primarily used for editing text, and Zap will edit all Text files (&FFF) for EE. Object Linking and Embedding allows non\-textual files to be edited as well; Zap will claim both BASIC (&FFB) and Text (&FFF) files for OLE.

Note that these file types, as well as those that Zap claims for running from the Filer, can be configured - you need to edit \c{!ZapUser.Config.!ZapBoot} and \c{!ZapUser.Config.!ZapRun}.

RULEHERE

The next section in the manual is \k{Modes}, which explains Zap's different editing and displaying modes, and looks at some of the most useful ones. Modes form the key to many of Zap's most useful features, and since they've been occasionally mentioned in the manual up till now you probably want to learn more about them.

Alternatively, you could move on to \k{Commands}, which explains in more detail Zap's command language, including a look a functions, variables, and conditional and looping constructs.
