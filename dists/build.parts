# build.parts file for !Zap (c) James Aylett 2001
# -*- sh -*-
# $Id: build.parts,v 1.6 2001-04-24 12:55:32 james Exp $
#
# Use build-package(1) to run this, eg:
#   build-package -f path-to-build.parts
#
# The '#' character marks a comment to EOL. Leading space on lines is ignored.
# '\' last on line except whitespace and "#comment" marks continuation onto a
# new line.
# All whitespace is equal.
#
# Each output zip is specified as a module, started with:
#   [<zipname>]
#
# This consists of four types of entries; firstly, there are straight
# copy entries, where files and directories get copied into the zipfile.
# They look like:
#
#   COPY <source> ... [AS <destination>] [FROM <source_dir>] [INTO <dest_dir>]
#
# Here (and throughout), sources are either relative to where this script is,
# or are relative to the top of the Zap build tree (zaproot, below) if they
# start '/'.
# If the AS clause isn't given, the whole of <source> is used (leading '/' is
# stripped if present).
# If the INTO clause isn't given, it's copied into the root of the archive.
# If you give an AS clause, you can only give one source (try to use FROM
# instead).
# <source> can be ":<filename>" which is relative to `pwd` or <source_dir>,
# as contains a list of filenames, one per line. Whitespace is not discarded.
#
# Second, there are build lines. These look like:
#
#   BUILD <source> ... [AS <destination>] [INTO <dest_dir>] \
#                      [USING <build_command> [IN <dir>]] \
#                      [FROM <source_dir>]
#
# Note that some build areas are in bloody weird places in the tree for
# historical reasons.
#
# Thirdly, there are module copy commands, which effectively include the
# definition of the named module into the current one (note that settings
# changed in the referenced module are only effective in that module, and
# are changed relative to the global options, not the parent module):
#
#   MODULE <section_name>
#
# Lastly, there are <token>=<value> settings lines. There's a special
# module, 'global', which contains settings lines to provide defaults.
# You can add to the default using <token>+=<value> (if you do this within the
# global module, it will add to whatever was given on the command line).
# Whitespace is discarded from the end, but kept at the beginning, of values.
# There cannot be any space between the token name and the '+' or '='.
#
# Each line is built into a temporary directory before adding to the archive,
# to allow aliasing to work. We actually use symlinking under Unix to avoid
# copying vast amounts of data all over the place.
# It is possible to screw this up by doing something like:
#
#   source:dest_top dir/ second/file:dir/alias
#
# because we would try to build the following:
#
#   $(temp)dest_top/dir/ -> dir/
#   $(temp)dest_top/dir/alias -> second/file
#
# which would actually create a symlink inside dir/. So don't do that then :-)
#
# (Actually, you can get round this by altering the copy setting to be a real
# copy command for that module only. I'd advise laying things out so you don't
# have to do this, though.)

[global]
 sourceroot=../
 archive=zip -qrN # the archiving command used
 archiveroot=/tmp/1.44/ # where to put the archives
 archiveext=.zip # what to add to the module name to make the archive leaf
 temproot=/tmp/ # a place to copy files temporarily while building the archive tree
 targets=!Zap !Boot DDEU_Patch,ffb # which objects to put into the archive, from the temp directory
 all=zap intl devel source zmods1 zmods2 zapfonts zapextsrc zapmjesrc zapbasicsrc # modules to build

# zap only includes the most basic install possible
# Note that !Help hasn't been localised yet.
#
# Note that the fonts bit used to put !ZapFonts inside !Zap. I'm not doing
# this any more because it encourages people to avoid thinking when
# installing, which can screw things up.
[zap]
 targets+= !ZapUser !ZapFonts
 COPY !Zap/ FROM core/
 BUILD /sources/!ZapSource/Zap,ffa AS !Zap/Code/Zap,ffa \
       USING "make -f data/unix/Makefile" IN /sources/!ZapSource/
 COPY UK/ FROM resources/ INTO !Zap/Resources/
 COPY :intl FROM resources/ INTO !Zap/Resources/ # files that don't need localising
 COPY Buglist,fff FROM /sja-notes/ INTO !Zap/Resources/UK/Docs/
 BUILD /docs/output.txt AS !Zap/Resources/UK/!Help,fff USING "make" IN /docs/
 COPY :minimal FROM fonts/ # fonts/minimal lists the files required
 BUILD /sources/!ZapRedraw/ZapRedraw,ffa AS !ZapFonts/ZapRedraw,ffa \
       USING "./Build.unix" IN /sources/!ZapRedraw/
 COPY default/ FROM configs/ AS !ZapUser
 COPY !Boot/ DDEU_Patch,ffb FROM utils/

# intl is the international edition
[intl]
 targets+= !ZapUser !ZapFonts
 MODULE zap
 COPY :all FROM resources/ INTO !Zap/Resources/

# devel is the developer release; contains a few admin tools.
[devel]
 targets+= !ZapUser !ZapFonts
 MODULE intl
 COPY !Zap FROM devel/

# full build release for the developer release
[build]
 targets+= !ZapSource !ZapRedraw
 archiveroot+=src/
 MODULE devel
 MODULE src

# source pseudo-module (never built directly)
[src]
 targets=
 BUILD /sources/!ZapSource/ AS /!ZapSource/ USING "make -f data/unix/Makefile clean" IN /sources/!ZapSource/
 BUILD /sources/!ZapRedraw/ AS /!ZapRedraw/ USING "./Build.unix clean" IN /sources/!ZapRedraw/
 COPY Buglist,fff FROM /sja-notes/ INTO !ZapSource/

# source only for the developer release
[source]
 targets=!ZapSource !ZapRedraw
 archiveroot+=src/
 MODULE src

# full zapfonts distribution
[zapfonts]
 targets=!ZapFonts !Install,fff
 COPY fonts/!ZapFonts AS !ZapFonts/
 COPY fonts/!Install,fff AS !Install,fff
 BUILD /sources/!ZapRedraw/ZapRedraw,ffa AS !ZapFonts/ZapRedraw,ffa USING "./Build.unix" \
       IN /sources/!ZapRedraw/

# zmods1 - the most common extension modules
[zmods1]
 targets=!Zap/Modules !Install,fff
 COPY :mods1 FROM mods/ INTO !Zap/Modules/
 COPY !Install,fff FROM mods/
 BUILD /sources/extensions/!ZapExtSrc/Bits/ZapBits,ffa AS !Zap/Modules/!ZapBits/ZapBits,ffa \
       USING "./Build.unix" IN /sources/extensions/!ZapExtSrc/
 BUILD /sources/extensions/!ZapExtSrc/Text/ZapText,ffa AS !Zap/Modules/!ZapText/ZapText,ffa
 BUILD /sources/extensions/!ZapExtSrc/Util/ZapUtil,ffa AS !Zap/Modules/!ZapUtil/ZapUtil,ffa

# zmods2 - less common extension modules
[zmods2]
 targets=!Zap/Modules !Install,fff
 COPY :mods2 FROM mods/ INTO !Zap/Modules/
 COPY !Install,fff FROM mods/
 BUILD /sources/modes/diff/ZapDiff,ffa AS !Zap/Modules/!ZapDiff/ZapDiff,ffa \
	USING "./Build.unix" IN /sources/modes/diff/

# ZapDiff
[zapdiff]
 targets=!ZapDiff
 COPY mods/!ZapDiff AS !ZapDiff/
 BUILD /sources/modes/diff/ZapDiff,ffa AS !ZapDiff/ZapDiff,ffa \
	USING "./Build.unix" IN /sources/modes/diff/

# ZapExtSrc
[zapextsrc]
 targets=!ZapExtSrc
 archiveroot+=src/
 BUILD /sources/extensions/!ZapExtSrc/ AS /!ZapExtSrc/ USING "./Build.unix clean" IN /sources/extensions/!ZapExtSrc/

# ZapMJESrc
[zapmjesrc]
 targets=!ZapMJESrc
 archiveroot+=src/
 BUILD /sources/modes/!ZapMJESrc/ AS /!ZapMJESrc/ USING "./Build.unix clean" IN /sources/modes/!ZapMJESrc/

# ZapBASIC source
[zapbasicsrc]
 targets=!ZapBASIC
 archiveroot+=src/
 BUILD /sources/modes/!ZapBASIC/ AS /!ZapBASIC/ USING "./Build.unix clean" IN /sources/modes/!ZapBASIC/

# Other mode sources
# FIXME: make clean
[modessrc]
 targets=*
 archiveroot+=src/
 COPY :modesrcs FROM /sources/modes/

# Other extension sources
# FIXME: make clean
[extsrc]
 targets=*
 archiveroot+=src/
 COPY :extsrcs FROM /sources/extensions/

# Tools?
