//////////////////////////////////////////
//
// error.c : contains error handling and messagetrans code
//
// $Id: error,fff,v 1.1 2005-04-28 19:12:31 christian Exp $
//

#include <string.h>
#include <stdlib.h>

#include "logmem.h"

#include "oslib/wimp.h"
#include "oslib/hourglass.h"
#include "oslib/messagetrans.h"

#include "oslib/toolbox.h"

#include "error.h"
#include "main.h"

// gives a standard ok/cancel error box
void error_report(const os_error *e)
{
    wimp_error_box_selection click;

    xwimp_report_error_by_category(e, wimp_ERROR_BOX_OK_ICON
                                   | wimp_ERROR_BOX_GIVEN_CATEGORY | wimp_ERROR_BOX_CATEGORY_ERROR << wimp_ERROR_BOX_CATEGORY_SHIFT,
                                   "Zed", "!zed", (osspriteop_area *) 1, "Quit", &click);

    if (click != wimp_ERROR_BOX_SELECTED_OK)
        exit(1);
}


// gives a cancel only error box
void error_report_fatal(const os_error *e)
{
    wimp_error_box_selection click;

    xwimp_report_error_by_category(e, wimp_ERROR_BOX_GIVEN_CATEGORY | wimp_ERROR_BOX_CATEGORY_ERROR << wimp_ERROR_BOX_CATEGORY_SHIFT,
                                   "Zed", "!zed", (osspriteop_area *) 1, "Quit", &click);

    exit(1);
}


void error_report_string(const char *s)
{
    os_error e;

    e.errnum = 0;
    strncpy(e.errmess, s, sizeof(e.errmess));

    error_report(&e);
}

void error_report_token_1(const char *s, const char *p1)
{
    messagetrans_control_block cb;
    os_error e;

    toolboxgetsysinfo_message_trans_control_block(&cb);

    e.errnum = 1<<30;
    messagetrans_lookup(&cb, s, e.errmess, sizeof(e.errmess), p1, NULL, NULL, NULL, NULL);

    error_report(&e);
}


char *lookup_1(const char *tok, const char *p1)
{
    static char buf[256];

    messagetrans_control_block cb;
    toolboxgetsysinfo_message_trans_control_block(&cb);

    messagetrans_lookup(&cb, tok, buf, sizeof(buf), p1, NULL, NULL, NULL, NULL);

    return buf;
}


