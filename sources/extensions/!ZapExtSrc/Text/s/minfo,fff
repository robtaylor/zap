; Zap Text Command Extension
; Copyright (C) 1998 Zap Developers
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
; MInfo stuff, based on Darren Salt's mode table idea
; Written by James Aylett, with bits taken from Darren's code and
; string compare from Zap core (by Dominic Symes).
;
; util_getmodeinfo	- returns an info word about the given mode.
;			  Use the MInfo macro to extract info.

; Includes
		GET	h.ZapText
		GET	h.module
		GET	h.coreutils

; What we give to other people
		EXPORT	util_getmodeinfo
		EXPORT	util_prefixes

; util_getmodeinfo
; \E r0 = mode number
; \X r0 = information word (use MInfo macro to extract information into r1)
;    ws = workspace (side effect)
; Error returns VS. If the mode couldn't be found, returns r0=0, default values.
;
; This is all very temporary since hopefully all this information will be available
; through a neat little e_ entry point in the future.
		LOCAL

util_getmodeinfo
		FNJSR	"r1-r7"
		BL	Get_Workspace		; get ws

		MOV	r0,r0,LSL #2		; offset

		LDR	r1,[ws,#mnlistlen]
		CMP	r1,#0
		BEQ	createmodelist$l	; grab space and work out from modelist

		CMP	r1,r0			; is the list big enough?
						; bear in mind we need +4 for offset to
						; be valid, so BLE next
		BLE	ensuremodelist$l	; ensure space and work out from modelist

		LDR	r2,[ws,#modenumlist]
		CMP	r2,#0
		BEQ	createmodelist$l	; extra check

		LDR	r1,[r2,r0]		; entry
		CMP	r1,#0
		BLT	returnpoint$l		; no current entry (0 is a valid entry)

		MOV	r0,r1			; return value
		FNRTS				; and return

; \E r0 = offset to store result at
returnpoint$l
		LDR	r4,[ws,#modenumlist]
		ADD	r4,r4,r0		; where to store
		MOV	r0,r0,LSR #2		; return to mode number - daft? :)
		ADR	r5,modelist

		; Okay, we want to get the name of the mode list, go through the
		; entries in modelist, and find (and store) a pointer to the relevant
		; data (ie the byte after the terminating NUL of the mode name string).

		FNcall	Zap_ReadMode		; r0 points into the module
		FNRTS	VS			; error
		CMP	r0,#0
		MOVLT	r0,#0
		FNRTS	LE			; didn't exist

		LDR	r6,[r0,#e_title]	; mode name
		LDR	r1,[r0,#e_module]	; offset from module base
		SUB	r1,r0,r1		; module base
		ADD	r6,r1,r6		; e_title

		; Repeatedly test names, skipping NUL, ALIGN and data word
		; Up to r2 are scratch
		; r4 = where to store result word
		; r5 = where we've got to in modelist
		; r6 = string to test
getmodenum$l	MOV	r1,r6			; first string to test
		MOV	r2,r5			; NUL terminated as expected
		BL	strcmp			; are they the same?
		BEQ	foundit$l

loop$l		LDRB	r0,[r5],#1
		CMP	r0,#0
		BNE	loop$l			; skip to past NUL

		ADD	r5,r5,#3
		BIC	r5,r5,#3		; round to next word
		ADD	r5,r5,#4		; info word

		LDR	r0,[r5]
		CMP	r0,#0
		BGE	getmodenum$l		; not -1, so try again

		MOV	r0,#0			; no entry, so default
		STR	r0,[r4]			; store for next time
		FNRTS

foundit$l	; skip string in r5, load next word, store
		; in appropriate place (r4) and return in r0
		LDRB	r0,[r5],#1
		CMP	r0,#0
		BNE	foundit$l		; not found NUL

		ADD	r5,r5,#3		; add three
		BIC	r5,r5,#3		; clear bottom three bits
						; ie round to next word
		LDR	r0,[r5]			; info word
		STR	r0,[r4]			; store for next time

		FNRTS

; \E r0 = offset
ensuremodelist$l
		LDR	r2,[ws,#modenumlist]	; get the list
		MOV	r4,r0			; save offset
		ADD	r0,r4,#4		; length required
		CMP	r2,#0
		BEQ	createmodejump$l

		MOV	r1,r0
		MOV	r0,r2
		FNcall	Zap_Ensure
		FNRTS	VS			; error

		LDR	r2,[ws,#mnlistlen]	; old length
		STR	r0,[ws,#modenumlist]
		STR	r1,[ws,#mnlistlen]

		SUB	r3,r1,r2		; length to fill
		ADD	r2,r0,r2		; place to start from
		MOV	r1,#-1			; invalid entries
		FNcall	Zap_FillWords

		MOV	r0,r4			; get the offset back
		B	returnpoint$l

createmodelist$l
		MOV	r4,r0			; save offset
		ADD	r0,r4,#4		; length rqd
createmodejump$l
		MOV	r1,r0			; save
		FNcall	Zap_Claim		; returns block in R0
		FNRTS	VS			; error

		STR	r0,[ws,#modenumlist]
		STR	r1,[ws,#mnlistlen]

		MOV	r3,r1			; length
		MOV	r2,r0			; address
		MOV	r1,#-1			; invalid entries
		FNcall	Zap_FillWords

		MOV	r0,r4			; get the offset back
		B	returnpoint$l

; Mode list information
;		AREA	|ModeList|,DATA,READONLY

; binary, octal, hex, special means prefix type; 0=normal (2_, & etc.)
; others are the entry in the prefixes table, below
;
; Packing as follows:
;	b01	(datasize-1)				(2 - datasize=3 - reserved for 'varies')
;	b234	binary
;	b567	octal
;	b89A	hex
;	bB	special					(don't convert integers to strings)
;	bC	turn off non-standard editing for INSERTBLANK (BASIC mode)
;	bD	reserved
;	bE	binmode					(e_interrogate #14 != 14)
;	bF	progsrc
;	b10	blank
;	b11-b1E	reserved
;	b1F	invalid entry (ie < 0 => invalid)
;
; Hence a zero word corresponds to a datasize of 1, default BOHS, non binary mode,
; non program source mode, blanks are spaces (as opposed to NULs).
		MACRO
$la		Mode	$name, $datasize, $binary, $octal, $hex, $special, $nonstandard, $binmode, $progsrc, $blank
$la		=	"$name", 0
		ALIGN
		&	($datasize-1)+($binary:SHL:2)+($octal:SHL:5)+($hex:SHL:8)+($special:SHL:0xb)+($nonstandard:SHL:0xc)+($binmode:SHL:0xe)+($progsrc:SHL:0xf)+($blank:SHL:0x10)
		MEND

; byte, word, code, c, cmode, pascal, basic, bastxt have entries in swimode
; - ???

;			Name		Size	B,O,H,S   N/S	BinMode,Prog src	Blank
modelist	Mode	"BASIC",	1,	4,0,0,0,  1,		1,0,		0
		Mode	"BASTXT",	1,	4,0,0,0,  0,		0,1,		0
		Mode	"C",		1,	1,2,3,0,  0,		0,1,		0
		Mode	"C++",		1,	1,2,3,0,  0,		0,1,		0
		Mode	"Java",		1,	1,2,3,0,  0,		0,1,		0
		Mode	"CMode",	1,	1,2,3,0,  0,		0,1,		0
		Mode	"Pascal",	1,	0,2,3,0,  0,		0,1,		0
		Mode	"Assembler",	1,	0,2,3,0,  0,		0,1,		0
		Mode	"Byte",		1,	0,0,0,1,  0,		1,0,		1
		Mode	"Word",		4,	0,0,0,1,  0,		1,0,		1
		Mode	"Code",		4,	0,0,0,1,  0,		1,0,		1

; add 4*(prefix number) to util_prefixes to get the appropriate prefix string
util_prefixes	&	-1

; Four bytes each, padded with nulls
		=	"0b",0,0
		=	"0",0,0,0
		=	"0x",0,0
		=	"%",0,0,0

; That's it
		END
