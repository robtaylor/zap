; $Id: module,fff,v 1.3 2003-03-13 19:31:59 christian Exp $
; converted from newmail.bas by bas2asm.pl

	GET	h.NewMail

	ENTRY

	DCD	0x00
	DCD	StartUpHere
	DCD	0x00
	DCD	0x00
	DCD	D1
	DCD	ModHelpString
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	mod_flags

D1	=	"ZapNewMail",0
ModHelpString
	=	"ZapNewMail", 0x09, "1.14 (00 Jan 0000) © "
lp1	=	"Tim Tyler", 0x00
	ALIGN

mod_flags	DCD	1				; 32 bit compatible

w_formmb
	DCD	0
	DCD	0
	DCD	0

Dater3	=	"Zap",0

StartUpHere
	STMFD	sp!, {lr}
	LDR	r2, [r12, #0]
	CMP	r2, #0
	BNE	ModuleInit
	MOV	r0, #6
	MOV	r3, #0x20
	SWI	XOS_Module
	LDMVSFD	sp!, {pc}
	STR	r2, [r12, #0]
	ADRL	r0, Dater47
	STR	r2, [r0, #0]
	MOV	r0, #0
	STR	r0, [r2, #20]
ModuleInit
	MOV	r0, #4
	STR	r0, [r2, #12]
	MOV	r0, #0x12
	ADR	r1, Dater3
	SWI	XOS_Module
	MOVVC	r0, #0x0C
	SWIVC	XOS_Module
	LDMVSFD	sp!, {pc}
	MOV	r12, r4
	LDR	r2, [r3, #20]
	ADD	r3, r3, r2
	LDRB	r0, [r3, #3]
	TEQ	r0, #'X'
	ADDEQ	r3, r3, #1
	LDRB	r0, [r3, #5]
	CMP	r0, #'9'
	RSBLSS	r0, r0, #'1'
	BHI	MakeError
	BNE	RefDaterTab
	LDRB	r0, [r3, #7]
	CMP	r0, #'9'
	RSBLSS	r0, r0, #'0'
	BHI	MakeError
	BNE	RefDaterTab
	LDRB	r0, [r3, #8]
	CMP	r0, #'9'
	RSBLSS	r0, r0, #'0'
	BHI	MakeError
RefDaterTab
	ADR	r0, DaterTable
	FNcall	0
	ADR	r0, CmdTable
	FNcall	Zap_AddCommands
	LDMFD	sp!, {pc}
MakeError
	ADR	r0, ErrorMess
	SWI	OS_GenerateError
ErrorMess
	DCD	0x00
	=	"ZapNewMail requires Zap version 1.00 or greater.", 0x0
	ALIGN
HTMLLabeled
	=	"NewMail", 0x00
		; EQUD &00
DaterTable
		;  C-B20?
	DCD	DaterTable
	DCD	HTMLLabeled
	DCD	lp1	;  C-3FF0
	DCD	0x00	;  REM = BaseMode = Text
	DCD	0x40D + 1<<14	;  REM mode = 13 ; bit 10 = workspace, please!
	DCD	Initialisation	;  REM init
	DCD	menu	;  MnuDta; REM &00 ; menu...extension menu
	DCD	TableEnd - DaterTable	;  REM size of table ; len
	DCD	0	;  postload ; REM 0; e_postload C-D44
	DCD	0	;  REM C-3590 ; e_presave  \ called before being saved
	DCD	0
	DCD	0 ;E_Start	;  REM e_start        \ window entering this mode
	DCD	0 ;E_End	;  REM e_end            \ window leaving this mode
	DCD	0x00	;  REM e-width          \ find work area width
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0	;  C-F84 lp7 ; e_clnphy \ physical to file offset
	DCD	0x00
	DCD	0	; Ne_nextline; &00 ; c-FA0 =
	DCD	0x00
	DCD	0x00
	DCD	0	; sminus ; REM lp3 ;e_sminus       \ perform shift-left
	DCD	0	; splus  ; REM lp4 ;e_splus        \ perform shift-right
	DCD	0x00
	DCD	0x00
	DCD	redrawline	;  REM c-FDC e_redrawline     \ redraw line display
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0	;  REM Tabular ; e_tab           \ tab key pressed
	DCD	0x00	;  c-?return key pressed
	DCD	0x00
	DCD	0	;  BrunchSave% ; REM &00 trytwo ; REM e_saveandrun
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0	;  BrunchSave% ; REM e_compile \ compile & run - don't exit
	DCD	0x00
	DCD	0	;  JustRun ; REM e_run     \ run the program being edited
	DCD	0	;  JustRun ; REM e_runandquit \  run
	DCD	0x00	;  REM e_basic   \ drops into language...?
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0 ; mode_click - removed because ClickSend does it more consistently
	DCD	0x00	;  C-3A24 \ unrecognised wimp messages
	DCD	0x00	;  REM e_setwidth - changing window width
	DCD	newmail_listfns	;  c-1C78 \provide list of functions
	DCD	redrawA	;  REM c-22d0 e_prevline \ find start of update reg'n; Easy!
;	DCD	gotoopenwindow
TableEnd

menu	=	"ZapNewMail:Menus",0
	ALIGN

Initialisation
	CMP	r1, #1
	MOVCC	pc, lr
	STREQ	r0, [r11, #4]
	STREQ	r0, modenumberlocal
	TEQ	r1, #6
	ADREQ	r1, MenuExtension
	MOVEQ	pc, lr
	TEQ	r1, #2
	MOVNE	pc, lr
	STMFD	sp!, {r1, r7, r8, lr}
		;  REM here? yes!
	STMFD	sp!, {r0, r1, r7}
	MOV	r8, #'A'
	ADRL	r1, TableHere
loop2
	LDRB	r0, [r1]
	CMP	r0, r8
	BGE	GtIt
loop
	LDRB	r0, [r1], #1
	CMP	r0, #'z'
	BLE	loop
	LDRB	r0, [r1]
	CMP	r0, #'*'
	BNE	loop2
backinaction
	ADD	r8, r8, #1
	CMP	r8, #'Z'
	BLE	loop2
	LDMFD	sp!, {r0, r1, r7}
	MOV	r8, #0
	BL	ZapModeWord
	TEQ	r7, #0
	BEQ	nocfginit
	LDR	r0, [r7, #0]
	CMP	r0, #zizeofcfgwksp
	LDMEQFD	sp!, {r1, r7, r8, pc}
		;  REM no !Config...
nocfginit
	MOV	r0, #0x11
	FNcall	Zap_ModeColourNum	;  REM change palette size.
	TEQ	r7, #0
	BEQ	noheapblkatall
	LDR	r1, [r7, #0]
	TEQ	r1, #zizeofcfgwksp
	BEQ	justendtheresnoneed
	MOVVC	r1, #zizeofcfgwksp
	MOVVC	r0, r7
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #8
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	MOVVC	r7, r0
	STRVC	r1, [r7, #0]
	BLVC	OnToWrtMdeWrd
noheapblkatall
	MOV	r0, #zizeofcfgwksp
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #4	;  REM zap call - start heap block
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	MOVVC	r7, r0
	BLVC	OnToWrtMdeWrd
	MOVVC	r0, #zizeofcfgwksp
	STRVC	r0, [r7, #0]
	MOVVC	r0, #0
	STRVC	r0, [r7, #4]
	LDRVC	r0, startupformatwd
	STRVC	r0, [r7, #0x0C]
	LDRVC	r0, SDsasa	;  REM Dater 5%/8% !! vc= no !config file ?
	LDRVC	r1, [r11, #4]
	MOVVC	r2, #0
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #Zap_ModeData	;  REM call - RD/WRT Zap Dater mode words.
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	BLVC	UnkPreColBit	;  REM to set up colours with zmcs
justendtheresnoneed
	LDMFD	sp!, {r1, r7, r8, pc}

CmdTable
	DCD	CmdTable
	DCD	0	;  zapservice%
	=	"NEWMAIL_FLAGSTOGGLE", 0, ""
	DCD	Cmdhtmlflagstoggle
	=	"NEWMAIL_LISTSENDERS", 0, ""
	DCD	newmail_listsenders
	DCD	0

basemode
	LDR	r9, modenumberlocal
	FNjump	Zap_BaseMode
modenumberlocal
	DCD	0
startupformatwd
	DCD	0x77900000
GtIt
	ADRL	r0, AlphaIndex
	SUB	r7, r8, #'A'
	ADD	r0, r0, r7, LSL #2
	ADRL	r7, TableHere
	SUB	r7, r1, r7
	STR	r7, [r0]
	B	backinaction
MenuExtension
	=	"Quoted >",0
	=	"Quoted >>",0
	=	"Strings",0
	=	"HeaderText",0
	=	"Category",0
	=	"From",0
	=	"Company",0
	=	"Subject",0
	=	"To",0
	=	"Addresses",0
	=	"Signature1",0
	=	"Signature2",0
	=	"Punctuation",0,0
	DCW	0x0
	ALIGN

UnkPreColBit
	STMFD	sp!, {r1-r4, lr}
	ADR	r3, DefaultColours
	LDR	r1, [r11, #4]	;  REM normally 0
PreZModColBit
	MOV	r2, #0x09	;  REM start colours
ZModColBit
	LDRB	r0, [r3], #1
	FNcall	Zap_ModeColour	;  REM Read colour definitions
	LDMVSFD	sp!, {r1-r4, pc}
	ADD	r2, r2, #1
	TEQ	r2, #0x16	;  REM max colours
	BNE	ZModColBit
	LDMFD	sp!, {r1-r4, pc}
DefaultColours
		;  REM Colour Numbers :
	=	0x0A	;  REM >              =&9
	=	0x0D	;  REM >>             =&A
	=	0x0F	;  REM Strings        =&B
	=	0x0C	;  REM Embedded {}    =&C
	=	0x09	;  REM Commands       =&D
	=	0x0A	;  REM From           =&E
	=	0x0F	;  REM Comp           =&F
	=	0x0B	;  REM Subj           =&10
	=	0x0E	;  REM To             =&11
	=	0x02	;  REM addresses      =&12
	=	0x0D	;  REM Sig1           =&13
	=	0x08	;  REM Sig2           =&14
	=	0x0B	;  REM Punct          =&15
	=	0x00, 0x00	;  REM double zero termination !
	ALIGN

Tk1frm12andret
	LDR	r0, [r11, #12]
	SUBS	r0, r0, #1
	STR	r0, [r11, #12]
	MVNNE	r0, #0
	MOV	pc, lr
ZapModeWord
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
	LDR	r2, [r12, #0]
	ADD	r2, r2, #0x0164	;  REM Zap_GetModeWord - read the mode word
	MOV	lr, pc
	MOV	pc, r2
	MOV	r7, r0
	LDMFD	sp!, {r0-r2, pc}
OnToWrtMdeWrd
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
WrtMdeWrd
	MOV	r0, r7
	LDR	r2, [r12, #0]
	ADD	r2, r2, #0x0168	;  REM zap call...write the mode word
	MOV	lr, pc
	MOV	pc, r2
	LDMFD	sp!, {r0-r2, pc}
localdefltmw
	DCD	0
initialiseheap
	STMFD	sp!, {r1-r6, r8-r12, lr}
	MOV	r0, #zizeofcfgwksp
	LDR	lr, [r12, #0]
	ADD	lr, lr, #4
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	MOV	r7, r0
	STR	r1, [r7, #0]
	LDR	r0, localdefltmw
	LDR	r0, [r0, #0xC]
	STR	r0, [r7, #0xC]
	MOV	r0, #0x0D
	STR	r0, [r7, #8]	;  REM AT THE START MAKE COLOUR OK?
	BL	OnToWrtMdeWrd
	LDMFD	sp!, {r1-r6, r8-r12, pc}

SDsasa	DCD	0x1200004D




		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
adrofrsix
	DCD	0
redrawline
	STMFD	sp!, {r6, r12, lr}
	STMFD	sp!, {r7, r11}
	STR	r6, adrofrsix
	BL	Brunch208
	BL	ZapModeWord
	LDR	r2, [r7, #8]	;  REM Preserved start colour & flags
	LDR	r3, [r7, #0x0C]
	ADRL	r12, w_formmb
	STR	r3, [r12, #8]
	LDMFD	sp!, {r7, r11}	;  REM calls...
	LDR	r3, [r8, #60]	;  REM ?
	LDRB	r12, [r8, #88]	;  REM ? At very beginning.
	BIC	r2, r2, #0x700
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0D
	ORR	r2, r2, #0xF000	;  REM ! ; fe? ; ff000
	BIC	r2, r2, #0x00E00000	;  REM HERE? &0F000000
	LDR	r5, [r9, #0]	;  REM ?
	LDR	r10, [r9, #4]	;  REM ?
	ADD	r10, r10, r5
	TEQ	r7, r10
	LDMEQFD	sp!, {r6, r12, pc}	;  REM end - return for good!
	LDR	r10, [r9, #56]	;  REM ?
	ADD	r10, r10, r5
	CMP	r7, r10
	MOVCC	r10, r5
	MOV	r6, #0
BitAftStart
	SUB	r6, r6, #1
	LDRB	r0, [r7], #-1
	TEQ	r0, r12
	BEQ	UpToStart
	CMP	r7, r10
	BCS	BitAftStart
	TEQ	r5, r10
	LDRNE	r10, [r9, #60]
	SUBNE	r7, r7, r10
	MOVNE	r10, r5
	CMP	r7, r10
	BCS	BitAftStart
UpToStart
	ADDS	r6, r6, #1	;  REM #2 USED TO MAKE THE TOP LINE GO WRONG
	ADD	r7, r7, #1	;  REM #2 SEEMS TO BE EXECUTED ONLY AT THE BOF...? nope!
	SUBPL	r7, r7, r6
	LDMPLFD	sp, {r6}
	TEQ	r5, r10
	LDREQ	r10, [r9, #52]	;  REM ?
	ADDEQ	r10, r10, r5
	LDRNE	r10, [r9, #60]	;  REM ?
	ADDNE	r5, r5, r10
	LDRNE	r10, [r9, #8]	;  REM ?
	ADDNE	r10, r10, r5
	LDRB	r0, [r8, #144]	;  REM         endchar?
	ORR	r12, r12, r0, LSL #24
	LDR	r0, [r8, #100]	;  REM         width.
	ORR	r12, r12, r0, LSL #12
RtAtStrtA
	MOV	lr, #0
RtAtStrtB
	CMP	r7, r10	;  REM EOF?
	BCC	Brunch13
	LDR	r10, [r9, #8]
	ADD	r10, r10, r5
	CMP	r7, r10
	LDMCSFD	sp!, {r6, r12, pc}
	LDR	r1, [r9, #60]	;  REM ???
	ADD	r7, r7, r1
	ADD	r5, r5, r1
	ADD	r10, r10, r1
Brunch13
	LDRB	r0, [r7], #1	;  REM get char
	AND	r1, r12, #0xFF
	EOR	r2, r2, #0x0400	;  REM newline? ; alternating colour...
	TEQ	r0, r1
	TSTEQ	r2, #0x0400
	BEQ	RtAtStrtB
	BIC	r2, r2, #0x0400
	TEQ	r0, r1
	BEQ	BrunchNL	; REM Jeez, what a mess...
	CMP	r6, #0	;  REM wed morn-reinit
	MOVGT	r1, #1	;  REM @@@@ re init this?
	STRGTB	r1, [r6, r3,LSL #1]
	AND	r1, r2, #0xFF
	CMP	r1, #0x0D
	BEQ	BNL2
Backhome
	AND	r1, r2, #0xFF	;  REM Here begins the Testing
	CMP	r1, #0x09	;  REM comment
	CMPNE	r1, #0x0A	;  REM quote
	BEQ	solchecksIIback
aftertestA
	AND	r1, r2, #0xFF
	CMP	r1, #0x0C
	CMPNE	r1, #0x0B
	TEQEQ	r0, #'"'
	BEQ	QuoteBit
		; And     1,2,#&FF;
		; CMP     1,#&09;
		; CMPNE   1,#&0A;
		; CMPNE   1,#&0B;
		; BEQ     solchecksIIback
NotatStart
	LDR	r1, Sol7
	ADD	r1, r1, #1
	CMP	r7, r1
	BEQ	solchecks
	ADD	r1, r1, #2
	CMP	r7, r1
	BEQ	solchecksII
solchecksIIback
	AND	r1, r2, #0xFF
	TEQ	r1, #0x09
	TEQNE	r1, #0x0A
	TEQNE	r1, #0x0B
	TEQNE	r1, #0x0C
	TEQNE	r1, #0x12
	BEQ	ltandgtchk
endofsolchecks
	AND	r1, r2, #0xFF
	CMP	r1, #0x02	;  REM normal
	CMPNE	r1, #0x0C	;  REM headertext
	BNE	PlainNoOSChk
	CMP	r0, #' '
	BNE	DontBother
Bother
	STMFD	sp!, {lr}
	BL	TableChk2	;  REM **************************
	LDMFD	sp!, {lr}
DontBother
AfterCmdCntChk
		; And     R1,2,#&FF
		; TEQ     R1,#&0C     ; REM COL Errors/Redirection  ...new
		; BEQ     BrunchYYY%
PlainNoOSChk
SymbolChecking
BeforeColour
		;  REM NUMBERS?
	TEQ	r0, #' '
	TEQNE	r0, #'>'
	ORRNE	r2, r2, #0x8000000
	TEQ	r0, #' '
	TEQNE	r0, r12, LSR #24	;  REM = tab?
	BEQ	TabbingSub
Brunch24
	CMP	r6, #0
	BLE	firstpass	;  REM new addition to test
	ANDGT	r1, r2, #0x1F	;  REM write colours
	STRGTB	r1, [r6, r3]
AfterColour
	CMP	r6, #0
	STRGTB	r0, [r6], #1	;  REM write text
firstpass
	ADD	lr, lr, #1
BeginOfEnd
	AND	r1, r12, #0xFF	;  REM end character... yes! At last...
	TEQ	r0, r1	;  REM end character... yes!
	BICEQ	r2, r2, #0x78000000	; REM START OF LINE FLAGS...
	CMP	r6, #0
	ADDLTS	r6, r6, #1
	BMI	RtAtStrtB	;  REM round loop...
	LDMEQFD	sp, {r6}	;  REM huh?
	BEQ	RtAtStrtA
	AND	r1, r12, #0xFF	;  REM end character... yes! At last...
	TEQ	r0, r1	;  REM end character... yes!
	BEQ	tocheckbackwardsnow
	ORRNE	r2, r2, #0x0400
backcheckbackwardsnow
	BIC	r1, r12, #0xFF000000	;  REM if not width...
	CMP	lr, r1, LSR #12
	BICLT	r2, r2, #0x0400
	BLT	RtAtStrtB	;  REM go round loop...
	BEQ	tohaveajollygoodtime
tohaveajollygoodback
	BIC	r0, r12, #0xFF000000
	CMP	lr, r0, LSR #12	;  width...?
	BICGE	r2, r2, #0x0400	;  REM NE
	AND	r0, r12, #0x0200
	ORR	r2, r2, r0
	LDMFD	sp!, {r6, r12}
	STMFD	sp!, {r7, r11}
	BL	Brunch208
	BL	ZapModeWord
	STR	r2, [r7, #8]
	LDMFD	sp!, {r7, r11, pc}	;  REM on exit set things up r7...
tohaveajollygoodtime
	STMFD	sp!, {lr}
	BL	checkbackwardsnow
	LDR	lr, [r9, #f_ptr]
	LDR	r0, [r9, #f_splito]
	ADD	r0, r0, lr
	CMP	r7, r0
	LDREQ	r0, [r9, #f_splits]
	ADDEQ	r0, r0, r7
	MOVNE	r0, r7
	LDR	r1, [r9, #f_bufl]
	ADD	r1, lr, r1
	CMP	r0, r1
	LDRCCB	r0, [r0]	;  Hmm...(Beyond end...?)
	AND	r1, r12, #0xFF	;  REM end character... yes! At last...
	TEQ	r0, r1	;  REM  ! the same length as the width
	ADDEQ	r7, r7, #1
	ADDEQ	r11, r11, #1
	LDMFD	sp!, {lr}
	B	tohaveajollygoodback
tocheckbackwardsnow
	ADD	r11, r11, #1	;  REM This code only executed if <CR>...
	BIC	r2, r2, #0xCF000000	;  REM START OF LINE FLAGS...xxx
	BIC	r2, r2, #0x00F00000
	STMFD	sp!, {lr}
	BL	checkbackwardsnow
	LDMFD	sp!, {lr}
	B	backcheckbackwardsnow
checkbackwardsnow
	STMFD	sp!, {r0, r2, r7, lr}
	CMP	r0, #' '
	CMPNE	r0, #':'
	CMPNE	r0, #'@'
	BCC	endcheckbackwardsnow
	CMP	r0, #'{'
	BCS	endcheckbackwardsnow
alltizfine
	ADD	r7, r7, #1
	BL	TableChk2
	SUB	r7, r7, #1
endcheckbackontoent
endcheckbackwardsnow
	LDMFD	sp!, {r0, r2, r7, pc}
CmdCntChk
	CMP	r0, #32
	BNE	AfterCmdCntChk
	CMP	r6, #0
	BGT	r6version
	LDR	r1, Sol7
	ADD	r1, r1, #2	;  REM ???
	CMP	r7, r1
	MOVLE	r1, #10
	LDRGTB	r1, [r7, #-2]	;  REM danger
overdangerperhaps
	CMP	r1, #32
	BEQ	AfterCmdCntChk
	MOV	r1, r2, LSR #21
	AND	r1, r1, #7
	SUBS	r1, r1, #1
		;  ;BICEQ   R2,2,#&10000000 ; REM xxx
	BIC	r2, r2, #0x00E00000
	ORR	r2, r2, r1, LSL #21
	B	AfterCmdCntChk
r6version
	LDR	r1, Sol6	;  REM 13/10
	SUB	r1, r1, #1
	CMP	r6, r1	;  REM 13/10
	LDRGTB	r1, [r6, #-1]	;  REM 13/10
	BGT	overdangerperhaps	;  REM 13/10
	MOV	r1, #' '
	B	AfterCmdCntChk	;  REM 13/10
ltandgtchk
	TEQ	r0, #'<'
	BEQ	CurlyBrackOpen
	TEQ	r0, #'>'
	BEQ	CurlyBrackClose
	B	endofsolchecks
ErrEchConf
	CMP	r6, #0
	BLE	AfterColour
	AND	r1, r2, #0xFF
	CMP	r1, #0x0F
	BEQ	BeforeColour
	CMP	r1, #0x0E
	MOVEQ	r1, #0x02
	STREQB	r1, [r6, r3]
	TEQ	r0, #' '
	TEQNE	r0, r12, LSR #24	;  REM = tab?
	BEQ	TabbingSub
	B	AfterColour
BrunchNL
		; And     1,2,#&FF
		; CMP     1,#&02     ; REM normal
		; CMPNE   1,#&0C     ; REM headertext
		; BEQ     DontBother2
	CMP	r0, #'"'
	BCS	DontBother2
Bother2
	STMFD	sp!, {lr}
	BL	TableChk2	;  REM swap with sect below?;;;
	LDMFD	sp!, {lr}
DontBother2
	MOV	lr, #0x70000000	;  REM        ;;Jeez, what a mess!;;
	B	BeginOfEnd
BNL2
	STR	r6, Sol6
	SUB	r1, r7, #1
	STR	r1, Sol7
	B	Backhome
Sol6

	DCD	0
Sol7

	DCD	0
solchecks
	CMP	r0, #'>'
	BEQ	CommentStart
endofsolchecks2
	TEQ	r0, #'#'
	BEQ	chkforqmarkhash
endofsolchecks3
	AND	r1, r2, #0xFF
		; CMP     1,#&0C
		; CMPNE   1,#&0D
		; CMPNE   1,#&12
		; CMPNE   1,#&0B
		; BICNE   2,2,#&FF
		; OrrNE   2,2,#&02
	CMP	r1, #0x0D
	BICEQ	r2, r2, #0xFF
	ORREQ	r2, r2, #0x02
	B	endofsolchecks
chkforqmarkhash
	LDRB	r1, [r7]
	CMP	r1, #'!'
	BEQ	CurlyBrackClose
	B	BeforeColour
solchecksII
	LDRB	r1, [r7, #-3]	;  REM      ! Tif's fix for lines that are
	CMP	r1, #'-'
	BNE	solchecksIIback
	LDRB	r1, [r7, #-2]	;  REM      ! Tif's fix for lines that are
	CMP	r1, #'-'
	BNE	solchecksIIback
	CMP	r0, #'-'
	BEQ	solchecksIIback
	BIC	r2, r2, #0xFF
	ADD	r6, r6, r3
	CMP	r0, #' '
	MOVNE	r1, #0x14
	MOVEQ	r1, #0x13
	ORRNE	r2, r2, #0x13
	ORREQ	r2, r2, #0x14
	STRB	r1, [r6, #-1]
	STRB	r1, [r6, #-2]
		; STRB    R1,[R6,#0]
	SUB	r6, r6, r3
	B	Brunch24
		; REMAfterColour%
BrunchYYY
	CMP	r6, #0
	BLT	BeforeColour	;  REM BLT     BeforeColour%
	CMP	r0, #'9'
	RSBLSS	r1, r0, #'0'
	MOVLS	r1, #0x0F
	STRLSB	r1, [r6, r3]
	BICLS	r2, r2, #0x20000000	;  REM ttnow
	BLS	AfterColour
	LDR	r1, Sol7
	ADD	r1, r1, #2
	CMP	r7, r1
	MOVLE	r1, #10
	LDRGTB	r1, [r7, #-2]	;  REM danger
	TEQ	r0, #'.'	;  REM if in number
	BNE	TryNextA
	CMP	r1, #'9'
	BGT	TryNextA
	CMP	r1, #'0'
	BLT	TryNextA
	MOV	r1, #0x0F
	STRB	r1, [r6, r3]
	B	AfterColour
TryNextA
	TEQ	r0, #'_'	;  REM if in number
	BNE	BeforeColour
	CMP	r1, #'9'
	BGT	BeforeColour
	CMP	r1, #'0'
	BLT	BeforeColour
	MOV	r1, #0x0F
	STRB	r1, [r6, r3]
	B	AfterColour
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CommentStart
		;  REM > comment..........
	AND	r1, r2, #0xFF
	CMP	r1, #0x0B	;  REM in quotes?
	BEQ	BeforeColour
	TST	r2, #0x8000000
	BNE	BeforeColour
	BIC	r2, r2, #0xFF
	CMP	r1, #0x09
	ORREQ	r2, r2, #0x0A
	ORRNE	r2, r2, #0x09
	B	Brunch24
QuoteBit
		;  REM "Quotes"
	AND	r1, r2, #0xFF
	CMP	r1, #0x09
	CMPNE	r1, #0x0A
	BEQ	BeforeColour
	CMP	r1, #0x0B
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #0x0B
	BNE	Brunch24	;  REM BeforeColour%
CurlyBrack
		;  REM "No {} NUFFIN"
	CMP	r6, #0
	ANDGT	r1, r2, #0x1F
	STRGTB	r1, [r6, r3]
	BIC	r2, r2, #0xFF
	MOV	r1, r2, LSR #24
	ANDS	r1, r1, #0x01	;  REM Bits for {} depth
		; CMP     R1,#&00
	ORREQ	r2, r2, #0x0C	;  REM mail header colour.
	ORRNE	r2, r2, #0x12	;  REM COL Cream/Normal<>
	B	AfterColour
CurlyBrackOpen
		;  REM originally for ' these ' ; "<"
	BIC	r2, r2, #0x30000000
	AND	r1, r2, #0xFF
	TEQ	r1, #0x09
	TEQNE	r1, #0x0A
	TEQNE	r1, #0x0B
	BEQ	BeforeColour
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x12
	ORR	r2, r2, #0x1000000
	ORR	r12, r12, #0x0200
	B	BeforeColour
CurlyBrackClose
		;  REM originally for ' these ' ; ">"
	BIC	r2, r2, #0x30000000
	AND	r1, r2, #0xFF
	TEQ	r1, #0x09
	TEQNE	r1, #0x0A
	TEQNE	r1, #0x0B
	BEQ	CommentStart
	TEQNE	r1, #0x0B
	BEQ	BeforeColour
	BIC	r2, r2, #0x1000000
	BIC	r12, r12, #0x0200
	B	CurlyBrack
TabbingSub
	AND	r1, r2, #0xF
	TEQ	r1, #0x0D
	TEQNE	r1, #0x0B
	ORREQ	r2, r2, #0x0100
	AND	r1, r4, #0x3000
	TEQ	r1, #0
	TEQEQ	r0, r12, LSR #24
	BEQ	AfterColour
	TEQ	r0, #' '
	BEQ	Brunch24
	CMP	r6, #0
	BLT	BeginOfEnd
	MOV	r0, #9	;  REM tab!
	TEQ	r1, #0x1000
	MOVEQ	r0, #0x20	;  REM " "!!!!
	TEQ	r1, #0x3000
	MOVEQ	r0, #'-'	;  REM "-"!!!!
TabLoop
	MOV	r1, #8	;  REM = COL control Character...
	STRB	r1, [r6, r3]	;
	MOV	r1, #1
	STRB	r1, [r6, r3,LSL #1]	;  REM wrong?
	STRB	r0, [r6], #1	;  REM @@@@@@
	ADD	lr, lr, #1
	AND	r1, r4, #0x3000
	TEQ	r1, #0x2000
	MOVEQ	r0, #0x20
	BIC	r1, r12, #0xFF000000
	TEQ	lr, r1, LSR #12
	TSTNE	lr, #7
	BNE	TabLoop
	AND	r0, r4, #0x3000
	TEQ	r0, #0x3000
	MOVEQ	r0, #9	;  REM  | ?
	STREQB	r0, [r6, #-1]	;  REM @@@@ ???
	MOV	r0, r12, LSR #24
	B	BeginOfEnd
redrawA
		;  REM redraw the screen and so forth
	SUBS	r0, r0, #32
	MOVMI	r0, #0
	MOV	pc, lr
		; .Ne_nextline
		;     STMFD   R13!,{R2-R4,R14}
		;     ADD     R0,R0,#32
		;     ;FNcall(Zap_ClipCache)
		;     MOV     R4,#5
		; .redrawN2
		;     MOV     R2,R0
		;     LDR     R1,[R9,#f_splito] ; \ find the split offset
		;     CMP     R2,R1 ; \ are we in the bottom or top half?
		;     LDRCS   R1,[R9,#f_splits]
		;     ADDCS   R2,2,R1; \ if in the top half, skip the split
		;     LDR     R1,[R9,#f_ptr] ; \ start address of file
		;     LDRB    R3,[R1,2] ; \ read the byte
		;     CMP     R3,#32
		;
		;     ADD     R0,R0,#1
		;     BGE     redrawN2
		;     SUBS    R4,R4,#1
		;     BPL     redrawN2
		;
		;     LDR     R1,[R9,#f_bufl] ; \ find the split offset
		;     LDR     R2,[R9,#f_ptr] ; \ find the split offset
		;     ADD     R1,R1,2
		;     CMP     R0,R1
		;     MOVGE   R0,R1
		;     MOV     R4,R0
		;     MOV     R11,#e_clnoff
		;     FNcall(Zap_CallMode)
		;     MOV     R1,R0
		;     MOV     R0,R4
		;     LDMFD   R13!,{R2-R4,PC}
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
lasttryadr
	DCD	0
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
storedr6flu
	DCD	0
cntcharback
	DCD	0
TableChk2
	STR	r6, storedr6flu
		; CMP     R6,#0
		; MOVLE   PC,14
		;  REM BLE     TableChk1
		; CMPGE   R0,#31
		; STRGEB  R0,[R6] ; REM write text - very dubious code.
	STMFD	sp!, {r4-r12, lr}
	MOV	r8, r7
	LDR	r1, [r9, #f_ptr]
	LDR	r12, [r9, #f_splito]
	ADD	r12, r1, r12
	CMP	r8, r12
	BCC	ploughonin
	LDR	r12, [r9, #f_splite]
	ADD	r12, r1, r12
	CMP	r8, r12
	LDRCC	r1, [r9, #f_splits]
	ADDCC	r8, r8, r1
ploughonin
	MVN	r11, #0
_altered_0
	SUB	r11, r11, #1
	ADD	r4, r8, r11
	LDR	r1, [r9, #f_ptr]
	CMP	r4, r1
	BCC	rightatverystart
	LDR	r12, [r9, #f_splito]
	ADD	r12, r1, r12
	CMP	r4, r12
	BCC	inbothalfTC2
	LDR	r12, [r9, #f_splite]
	ADD	r12, r1, r12
	CMP	r4, r12
	LDRCC	r1, [r9, #f_splits]
	SUBCC	r4, r4, r1
inbothalfTC2
	LDR	r1, [r9, #f_ptr]
	CMP	r4, r1
	BCC	rightatverystart
	LDRB	r1, [r4]
	CMP	r1, #'*'
	BGT	_altered_0
	CMP	r1, #32	;  at SOL?
	BCS	notANYone
		;  CMP     R1,#ASC"|"
		;  CMPNE   R1,#ASC"@"
		;  BGT     loop
rightatverystart
	ADD	r11, r11, #1
	ADD	r4, r8, r11
	ADD	r11, r11, #1
	RSB	r1, r11, #0
	STR	r1, cntcharback
	LDR	r1, [r9, #f_ptr]
	CMP	r4, r1
	BCC	notANYone
	LDR	r12, [r9, #f_splito]
	ADD	r12, r1, r12
	CMP	r4, r12
	BCC	inbothalfTC3
	LDR	r12, [r9, #f_splite]
	ADD	r12, r1, r12
	CMP	r4, r12
	LDRCC	r1, [r9, #f_splits]
	SUBCC	r4, r4, r1
inbothalfTC3
	LDRB	r1, [r4]
	FNupper	r1
	CMP	r1, #'A'
	BLT	notANYone
	CMP	r1, #'Z'
	BGT	notANYone
	SUB	r1, r1, #'A'
	ADRL	r12, AlphaIndex
	ADD	r1, r12, r1, ASL #2
	LDR	r1, [r1]
	ADRL	r12, TableHere
	ADD	r12, r12, r1
lpa2
	MOV	r8, #0	;  REM tablepointer
lpa1
	LDRB	r1, [r12, r8]
	FNupper	r1
	CMP	r1, #'z'
	MOVGT	r10, r8
	BGT	gotexactmatch
		; CMP     1,#ASC" " : ; BEQ lpa1
	MOV	r7, r1
	ADD	r5, r4, r8
	LDR	r1, [r9, #f_ptr]
		; CMP     5,1
		; BCC     notANYone
	LDR	lr, [r9, #f_splito]
	ADD	lr, r1, lr
	CMP	r5, lr
	BCC	inbothalfTC4
	LDR	lr, [r9, #f_splite]
	ADD	lr, r1, lr
	CMP	r5, lr
	LDRCC	r1, [r9, #f_splits]
	ADDCC	r5, r5, r1
inbothalfTC4
	LDRB	r1, [r5]
		; LDMFD   13 !,{5}
	FNupper	r1
	CMP	r1, #' '
	MOVLT	r1, #' '
tabovr1
	ADD	r8, r8, #1
	CMP	r7, r1
	BGT	bigger1
	BEQ	lpa1
maybenot
	ADD	r12, r12, r8
	SUB	r12, r12, #1
_altered_1
	LDRB	r1, [r12], #1
	CMP	r1, #'z'
	BLE	_altered_1
	LDRB	r1, [r12]
	CMP	r1, #'*'
	BNE	lpa2
couldnotfindit
		; RSB     R8,R11,#0
		; MOV     R1,#&10
		; B       ChooseYerColour
notANYone
	BIC	r2, r2, #0x20000000	;  REM xxx
notANYone2
	LDMFD	sp!, {r4-r12, pc}
bigger1
	CMP	r8, #1
	BEQ	couldnotfindit
	B	maybenot
ChooseYerColour
	LDR	r9, storedr6flu
	CMP	r9, #0
	BLE	notANYone
	ADD	r9, r6, r3
	LDRB	r9, [r9, r11]	;  REM QUICK FIX...
	CMP	r9, #0x0F	;  REM ""
	LDMEQFD	sp!, {r4-r12, pc}
	MOV	r9, #0
	ADD	r7, r6, r11
	ADD	r6, r7, r3
		; LDR     11,Sol6
	LDR	r11, adrofrsix
lasdwAO
	ADD	r4, r7, r9
	CMP	r4, r11
	BCC	dontputitonsc
	STRB	r1, [r6, r9]
	LDRB	r4, [r12, r9]
	CMP	r4, #'@'
	STRCSB	r1, [r6, r9]
		;  REM STRB    R1,[R6,R9]
dontputitonsc
	ADD	r9, r9, #1
	CMP	r9, r8
	BLT	lasdwAO
		;  MOV     R1,#&EA00
	LDMFD	sp!, {r4-r12, pc}
Prefixbit
	RSBEQ	r10, r11, #0
	MOV	r1, #0x0D
	B	ChooseColour2
gotexactmatch
		; ADD     1,7,#2
		; CMP     9,1     ; REM new line
		; BCS     notANYone2
	BL	CheckRoutine
	LDR	r1, storedr6flu
	CMP	r1, #0
	BLE	notANYone
	MOV	r1, #0x0D
	TEQ	r9, #'~'
	TEQNE	r9, #164
	MOVEQ	r1, #0x11
	TEQ	r9, #143
	MOVEQ	r1, #0x10
	TEQ	r9, #177
	MOVEQ	r1, #0x0E
	TEQ	r9, #141
	MOVEQ	r1, #0x0F
	TEQ	r9, #'{'
	BEQ	checkcapF
	TEQ	r9, #156
	BEQ	ChooseColour3
ChooseColour2
	CMP	r6, #0
	LDMLEFD	sp!, {r4-r12, pc}
		;  ADD     9,R6,R3
		;  LDRB    9,[9,R11]  ; REM QUICK FIX - code must go
		;  CMP     9,#&09
		;  CMPNE   9,#&0A
		;  CMPNE   9,#&0B
		;  CMPNE   9,#&0C
		;  LDMEQFD R13!,{R4-R12,PC}
	MOV	r9, #0
	ADD	r7, r6, r11
	ADD	r6, r7, r3
	LDR	r11, adrofrsix
	ADRL	r5, w_formmb
	LDR	r5, [r5, #8]
lasdwA
	ADD	r4, r7, r9
	CMP	r4, r11
	BCC	beforesolhereargh
	LDRB	r4, [r12, r9]
	TST	r5, #0x08000000
	STRNEB	r4, [r7, r9]
lasdwA1
		; CMP     4,#ASC"@"
	STRB	r1, [r6, r9]
	CMP	r4, #':'
	MOVEQ	r4, #0x15
	STREQB	r4, [r6, r9]
beforesolhereargh
	ADD	r9, r9, #1
	LDR	r4, cntcharback
	CMP	r9, r4
	BCS	colouringrapidexit
	CMP	r9, r8
	BLT	lasdwA
	CMP	r9, r10
	BLT	lasdwA1
colouringrapidexit
		; MOV     1,#&EA00
		; BIC     2,2,#&FF
		; Orr     2,2,#&02
	LDMFD	sp!, {r4-r12, pc}
ChooseColour3
	CMP	r6, #0
	LDMLEFD	sp!, {r4-r12, pc}
	RSB	r8, r11, #0
	ADD	r9, r6, r3
	LDRB	r9, [r4, r11]	;  REM QUICK FIX...
	CMP	r9, #0x09
	CMPNE	r9, #0x0A
	CMPNE	r9, #0x0B
	CMPNE	r9, #0x0C
	LDMEQFD	sp!, {r4-r12, pc}
	MOV	r9, #0
	ADD	r7, r6, r11
	ADD	r6, r7, r3
_altered_2
	LDRB	r4, [r7, r9]
	STRB	r1, [r6, r9]
	CMP	r4, #':'
	MOVEQ	r4, #0x15
	STREQB	r4, [r6, r9]	;  REM EQ?
	ADD	r9, r9, #1
	CMP	r9, r8
	BLT	_altered_2
	CMP	r4, r10
	BLT	_altered_2
	LDMFD	sp!, {r4-r12, pc}
checkcapF
	LDRB	r1, [r4]
	CMP	r1, #'F'
	BNE	notANYone
	MOV	r1, #0x0D
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #0x0C
	B	ChooseColour2

		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CheckRoutine
	ADD	r1, r12, r8
	SUB	r1, r1, #1
_altered_3
	LDRB	r9, [r1], #1
	CMP	r9, #'z'
	BLE	_altered_3
	ORR	r2, r2, #0x10000000
	TEQ	r9, #'|'
	TEQNE	r9, #164
	TEQNE	r9, #143
	TEQNE	r9, #177
	TEQNE	r9, #156
	TEQNE	r9, #141
	BICEQ	r2, r2, #0xFF
	ORREQ	r2, r2, #0x0C
	MOV	pc, lr

Dater47	DCD	0x0
Brunch208
	LDR	r11, Dater47
	MOV	pc, lr

Brunch210
	STMFD	sp!, {r0, r1, lr}
	LDR	r11, Dater47
	LDR	r0, [r8, #40]
	AND	r0, r0, #0xFF
	MVN	lr, #0
	LDR	r1, [r11, #8]
	TEQ	r0, r1
	ADDEQ	lr, lr, #1
	LDRNE	r1, [r11, #4]
	TEQNE	r0, r1
	ADDEQ	lr, lr, #1
	LDRNE	r1, [r11, #0]
	TEQNE	r0, r1
	ADDEQ	lr, lr, #1
	LDMFD	sp!, {r0, r1, pc}
	STMFD	sp!, {r11, lr}
	LDR	r11, Dater47
	TEQ	r1, #0
	BLEQ	Tk1frm12andret
	LDMFD	sp!, {r11, pc}
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



	DCD	0x8017
Cmdhtmlflagstoggle
	STMFD	sp!, {lr}
	LDR	r10, [r0]
	ADRL	r1, modenumberlocal
	LDR	r1, [r1]
		; CMP     8,#0
		; LDRNEB  0,[8,#w_format]
		; CMPNE   0,1
		; LDMNEFD D !,{PC}
	STMFD	sp!, {r1-r11}
	FNcall	Zap_GetModeWord
	LDMFD	sp!, {r1-r11}
	MOV	r6, r0
	LDR	r7, [r6, #0xC]
	CMP	r2, #15
	BEQ	tickquery
	MOV	r5, #0
	AND	r1, r10, #0xFF
	BL	execute
	MOV	r1, r10, LSR #8
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	MOV	r1, r10, LSR #16
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	MOV	r1, r10, LSR #24
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	STR	r7, [r6, #0xC]
	ADRL	r0, w_formmb
	STR	r7, [r0, #8]
	CMP	r8, #0
	LDMEQFD	sp!, {pc}
	ANDS	r0, r5, #8
	BLNE	sortwwout2
	LDMFD	sp!, {pc}
execute
	AND	r2, r1, #0x1F
	CMP	r2, #27
	ORREQ	r5, r5, #0x08
	MOV	r3, #1
	MOV	r3, r3, LSL r2
	MOV	r2, #0
	MOV	r4, #0
	MOV	r1, r1, LSR #5
	AND	r1, r1, #3
	CMP	r1, #1
	MOVEQ	r2, r3
	CMP	r1, #2
	MOVEQ	r4, r3
	BIC	r7, r7, r2
	ORR	r7, r7, r4
	EOR	r7, r7, r3
	MOV	pc, lr
tickquery
	AND	r2, r10, #0x1F
	MOV	r3, #1
	MOV	r3, r3, LSL r2
	TST	r7, r3
	MOVNE	r0, #1
	MOVEQ	r0, #0
	LDMFD	sp!, {pc}
sortwwout2
	STMFD	sp!, {r5, lr}
	FNcall	Zap_SaveWinStatus
	FNcall	Zap_NewWinStatus	;
	LDMFD	sp!, {r5, pc}


verylocalR8tmp
	DCD	0
	DCD	0
sortwindowsplease
	STMFD	sp!, {r0-r12, lr}
	LDR	r0, [r11, #b_window]
	LDR	r10, verylocalR8tmp
	CMP	r10, r0
	LDMNEFD	sp!, {r0-r12, pc}
	LDR	r0, [r11, #b_flags]
	LDR	r5, verylocalR8tmp + 4
	BIC	r0, r0, #0xE
	TST	r5, #1 << 30
	ORRNE	r0, r0, #2
	TST	r5, #1 << 29
	ORRNE	r0, r0, #4
	TST	r5, #1 << 28
	ORRNE	r0, r0, #8
	STR	r0, [r11, #b_flags]
		;  REM BL      gotoopenwindow
	LDMFD	sp!, {r0-r12, pc}
	DCD	0x1
newmail_listfns
	STMFD	sp!, {lr}
	ADR	r0, headersrchhhre
	MOV	r1, #1
	MVN	r3, #0
	MOV	r4, #1
	MOV	r5, #0x60000000
	FNcall	Zap_Search
	LDMFD	sp!, {pc}
	DCD	0x1
newmail_listsenders
	STMFD	sp!, {lr}
	ADR	r0, fromsrchhhre
	MOV	r1, #1
	MVN	r3, #0
	MOV	r4, #1
	MOV	r5, #0x60000000
	FNcall	Zap_Search
	LDMFD	sp!, {pc}
headersrchhhre
	=	"\\<Subject: ", 0, "", 0, "", 0, "", 0, "", 0, ""
	ALIGN
fromsrchhhre
	=	"\\<From: ", 0, "", 0, "", 0, "", 0, ""
	ALIGN
prestoregap
	=	"Run "
AlphaIndex
	=	10, "Greetings from The Mandala Centre."
	=	10, "Please feel free place any additional commands in the space provided"
	ALIGN
		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	DCD	0x2A2A0A2E
TableHere
	=	"A1-type: |"
	=	"Alternate-Recipient: |"
	=	"Approved: |"
	=	"BCC: |"
	=	"CC: |"
	=	"Content-Description: |"
	=	"Content-Type: |"
	=	"Content-Transfer-Encoding: |"
	=	"Content-MD5: |"
	=	"Comments: |"
	=	"Content-Length: |"
	=	"Date: |"
	=	"Distribution: |"
	=	"Encrypted: |"
	=	"Errors-To: |"
	=	"Expires: |"
	=	"Followup-To: |"
	=	"From {"
	=	"From: ±"
	=	"Full-Name: |"
	=	"Hop-Count: |"
	=	"Importance: |"
	=	"In-Reply-To: |"
	=	"Keywords: |"
	=	"Lines: |"
	=	"Message-ID: |"
	=	"MIME-Version: |"
	=	"MR-Received: |"
	=	"NNTP-Posting-Host: |"
	=	"Newsgroups: |"
	=	"Organization: "
	=	"Path: |"
	=	"Plan: |"
	=	"Posted-Date: |"
	=	"Posting-Date:  |"
	=	"Precedence: |"
	=	"Priority: |"
	=	"Received: ¦"
	=	"Registered-Mail-Reply-Requested-By: |"
	=	"Return-Receipt-To: |"
	=	"References: |"
	=	"Reply-To: |"
	=	"Resent-BCC: |"
	=	"Resent-CC: |"
	=	"Resent-Date: |"
	=	"Resent-From: |"
	=	"Resent-Message-ID: |"
	=	"Resent-Reply-To: |"
	=	"Resent-Sender: |"
	=	"Resent-To: |"
	=	"Return-Path: |"
	=	"Sender: |"
	=	"Status: |"
	=	"Subject: "
	=	"Supersedes: |"
	=	"Summary: ¦"
	=	"To: ¤"
	=	"UA-Content-ID: |"
	=	"X-"
	=	"XRef: |"
	=	"Zz: |"

	=	"**", 10

	END
