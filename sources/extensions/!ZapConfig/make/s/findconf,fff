;
;		findconf.s
;		© James Aylett
;

		GET h.RegNames
		GET h.SWIs

		AREA	|C$$code|,CODE,READONLY

;
;		unsigned findconf()
;
; Returns >0 if success (and Conf saved to <ZapConfig$Dir>.TempParsed.!Config).
;
		EXPORT	findconf

findconf	MOV	ip,sp
		STMFD	sp!,{r4,r5,fp,ip,lr,pc}
		SUB	fp,ip,#4		; build a stack frame

		MOV	r0,#18
		ADR	r1,Zap_Name
		SWI	XOS_Module		; \X r3 = address
		BVS	fail

		LDR	r2,[r3,#-4]		; length of module
		ADD	r2,r2,r3		; don't test beyond here
		SUB	r2,r2,#4		; second word guard
		LDR	r1,Conf
loop		CMP	r2,r3
		BLE	fail			; went outside module

		LDR	r0,[r3],#4
		CMP	r0,r1
		BNE	loop			; first word wrong

		LDR	r0,[r3]			; next word
		CMP	r0,#2
		BGT	loop			; second word wrong
		CMP	r0,#0
		BLT	loop			; second word wrong

		SUB	r4,r3,#4		; store the start
loop2		LDR	r0,[r3]
		CMP	r0,#0
		BEQ	done			; no more blocks

		LDR	r0,[r3,#4]
		ADD	r3,r3,r0		; skip this block

		CMP	r2,r3
		BLE	fail			; went outside module

		B	loop2

done		ADR	r1,ZC_Config
		MOV	r0,#10
		MOV	r2,#&1000
		SUB	r2,r2,#3		; &FFD
		ADD	r5,r3,#4		; end address
		SWI	XOS_File

		MOVVS	r0,#-1			; failure
		LDMEA	fp!,{r4,r5,fp,sp,pc}^

fail		MOV	r0,#0			; failure
		LDMEA	fp!,{r4,r5,fp,sp,pc}^

Conf		DCB	"Conf"
Zap_Name	DCB	"Zap", 0
ZC_Config	DCB	"<ZapConfig$Dir>.TempParsed.!Config", 0

		END
