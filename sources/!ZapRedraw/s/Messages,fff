; Contains code to call MessageTrans
; $Id: Messages,fff,v 1.3 2004-04-12 10:40:34 christian Exp $

 GET h.ZapRedHdr

 EXPORT messages_init
 EXPORT messages_kill
 EXPORT messages_lookup
 EXPORT messages_lookup_no_buffer
 EXPORT messages_error


; initialise the messages structure
; E r0 -> messages filename
; X
messages_init	FNJSR					; svc mode
		MOV	R1,R0
		ADD	R0,R12,#messages_structure
		MOV	R2,#0				; use RMA (may already be open)
		SWI	XMessageTrans_OpenFile
		FNRTS

		LOCAL


; close the messagetrans file
; E
; X
messages_kill	FNJSR					; svc mode
		ADD	R0,R12,#messages_structure
		SWI	XMessageTrans_CloseFile
		FNRTS

		LOCAL


; lookup a messagetrans token
; E r0 -> token  r4-r7 parameters
; X r0 -> translation
messages_lookup	FNJSR					; svc mode
		MOV	R1,R0
		ADD	R0,R12,#messages_structure
		ADD	R2,R12,#buffer
		MOV	R3,#256
		SWI	XMessageTrans_Lookup
		MOVVC	R0,R2
		FNRTS


; lookup a messagetrans token without using buffer (returns LF terminated)
; E r0 -> token
; X r0 -> translation
messages_lookup_no_buffer
		FNJSR					; svc mode
		MOV	R1,R0
		ADD	R0,R12,#messages_structure
		MOV	R2,#0
		MOV	R3,#0
		SWI	XMessageTrans_Lookup
		MOVVC	R0,R2
		FNRTS


		LOCAL


; lookup an error message
; E r0 -> error block  r4-r7 parameters
; X
messages_error	FNJSR	"R1-R3"				; svc mode
		ADD	R1,R12,#messages_structure
		MOV	R2,#0
		MOV	R3,#256
		SWI	XMessageTrans_ErrorLookup
		FNRTS					; ... with V set


 END
