; s/module,fff
; converted from forzap.bas by bas2asm.pl
	GET	h.ForZap

	ENTRY

	DCD	0x00			; start
	DCD	StartUpHere		; initialise
	DCD	0x00			; finalise
	DCD	0x00			; service
	DCD	ForZap			; title
	DCD	ModHelpString           ; help
	DCD	0			; commands
	DCD	0			; the four SWI ones
	DCD	0                       ;
	DCD	0                       ;
	DCD	0                       ;
	DCD	0                       ; messages filename
	DCD	module_flags            ; flags

w_formmb
	DCD	-1
	=	0x18, 0x18, 0x0, 0x0	; config options - e_char timing (cs)
	DCD	0	;   mainwkspflags


; ------------ module command table -----------

ForZap	=	"For"
Zap	=	"Zap",0
ModHelpString
	=	"ForZap",9,9,"0.27 (00 Jan 0000) © "
lp1	=	"Tim Tyler",0
	ALIGN

module_flags
	DCD	1			; 32 bit compatible


; ------- module init code ---------

StartUpHere
	STMFD	sp!, {lr}
	LDR	r2, [r12, #0]
	CMP	r2, #0
	BNE	ModuleInit
	MOV	r0, #6
	MOV	r3, #0x20
	SWI	XOS_Module
	LDMVSFD	sp!, {pc}
	STR	r2, [r12, #0]
	ADRL	r0, workspace_pointer
	STR	r2, [r0, #0]
	MOV	r0, #0
	STR	r0, [r2, #20]
ModuleInit
	MOV	r0, #4
	STR	r0, [r2, #12]
	MOV	r0, #0x12
	ADR	r1, Zap
	SWI	XOS_Module
	LDMVSFD	sp!, {pc}
	MOV	r12, r4

	ADR	r0, mode_table
	FNcall	Zap_AddMode
	ADR	r0, CmdTable
	FNcall	Zap_AddCommands
	LDMFD	sp!, {pc}

ObeyLabeled
	=	"ForZap",0
	ALIGN

mode_table
	DCD	mode_table
	DCD	ForZap
	DCD	lp1
	DCD	0x00				; e_basemode = Text
	DCD	13 + 1<<10 + 1<<14		; e_mode, bit 10 = workspace, please!
	DCD	Initialisation			; e_init
	DCD	menu_file			; e_menu
	DCD	mode_table_end - mode_table	; e_len
	DCD	0				; e_postload
	DCD	0				; e_presave
	DCD	0
	DCD	E_Start				; e_start
	DCD	E_End				; e_end
	DCD	0x00				; e_width
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00				;  e_clnphy
	DCD	0x00				;    clnlog
	DCD	0x00				;    clnphy
	DCD	0x00				;    clnoff
	DCD	0x00
	DCD	0				; e_sminus
	DCD	0				; e_splus
	DCD	0x00
	DCD	0x00
	DCD	redrawline			; e_redrawline
	DCD	0x00
	DCD	charchar
	DCD	0x00
	DCD	0x00				; e_tab
	DCD	0x00
	DCD	0x00
	DCD	BranchSave			; e_saveandrun
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	BranchSave			; e_compile
	DCD	0x00
	DCD	JustRun				; e_run
	DCD	JustRun				; e_runandquit
	DCD	0x00				; e_basic
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00				; e_setwidth
	DCD	0x00
	DCD	redrawA				; e_prevline
mode_table_end

menu_file	=	"ZapForZap:Menus",0
		ALIGN


; ---------- e_init --------------

Initialisation
	CMP	r1, #1
	MOVCC	pc, lr
	STREQ	r0, [r11, #4]
	STREQ	r0, modenumberlocal
	TEQ	r1, #6
	ADREQ	r1, MenuExtension
	MOVEQ	pc, lr
	TEQ	r1, #2
	MOVNE	pc, lr
	STMFD	sp!, {r1, r7, r8, lr}
		;   here? yes!
	STMFD	sp!, {r0, r1, r7}
	MOV	r8, #'A'
	ADRL	r1, TableHere
loop2	LDRB	r0, [r1]
	TEQ	R0,#'#'			; cl fix
	LDREQB	R0,[R1,#1]              ;
	CMP	r0, r8
	BGE	GtIt
loop	LDRB	r0, [r1], #1
	CMP	r0, #'z'
	BLE	loop
	LDRB	r0, [r1]
	CMP	r0, #'*'
	BNE	loop2
backinaction
	ADD	r8, r8, #1
	CMP	r8, #'Z'
	BLE	loop2
	LDMFD	sp!, {r0, r1, r7}
	MOV	r8, #0
	BL	ZapModeWord
	TEQ	r7, #0
	BEQ	nocfginit
	LDR	r0, [r7, #0]
	CMP	r0, #zizeofcfgwksp
	LDMEQFD	sp!, {r1, r7, r8, pc}
		;   no !Config...
nocfginit
	MOV	r0, #c_max-1
	FNcall	Zap_ModeColourNum	;   change palette size.
	TEQ	r7, #0
	BEQ	noheapblkatall
	LDR	r1, [r7, #0]
	TEQ	r1, #zizeofcfgwksp
	BEQ	justendtheresnoneed
	MOVVC	r1, #zizeofcfgwksp
	MOVVC	r0, r7
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #8
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	MOVVC	r7, r0
	STRVC	r1, [r7, #0]
	BLVC	OnToWrtMdeWrd
noheapblkatall
	MOV	r0, #zizeofcfgwksp
	LDR	lr, [r12, #0]
	ADD	lr, lr, #4		;   zap call - start heap block
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	MOV	r7, r0
	BLVC	OnToWrtMdeWrd
	MOVVC	r0, #zizeofcfgwksp
	STRVC	r0, [r7, #0]
	MOVVC	r0, #0
	STRVC	r0, [r7, #4]
	MOVVC	r0, #0x0D
	STRVC	r0, [r7, #8]
	LDRVC	r0, startupformatwd
	STRVC	r0, [r7, #0x0C]
	LDRVC	r0, SDsasa		;   Dater 5%/8% !! vc= no !config file ?
	LDRVC	r1, [r11, #4]
	MOVVC	r2, #0
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #Zap_ModeData	;   call - RD/WRT Zap Dater mode words.
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	BLVC	UnkPreColBit		;   to set up colours with zmcs
justendtheresnoneed
	LDMFD	sp!, {r1, r7, r8, pc}


; --------- command table -----------

CmdTable
	DCD	CmdTable
	DCD	0
	=	"FORZAP_FLAGSTOGGLE",0
	ALIGN
	DCD	Cmdhtmlflagstoggle
	DCD	0

modenumberlocal
	DCD	0

startupformatwd
	DCD	0x07800000


; store r1 in the table index as an offset into the command table
GtIt	ADRL	r0, AlphaIndex
	SUB	r7, r8, #'A'
	ADD	r0, r0, r7, LSL #2
	ADRL	r7, TableHere
	SUB	r7, r1, r7
	STR	r7, [r0]
	B	backinaction

MenuExtension
	=	"Comments", 0
	=	"Strings", 0
	=	"< ... >", 0
	=	"( ... )", 0
	=	"Commands", 0
	=	"Punctuation", 0
	=	"Numbers", 0
	=	"* % #", 0
	=	"Directive", 0
	=	0
	ALIGN

R8tmp	DCD	0
R9tmp	DCD	0
R12tmp	DCD	0

lasttryadr
	DCD	0

UnkPreColBit
	STMFD	sp!, {r1-r4, lr}
	ADR	r3, DefaultColours
	LDR	r1, [r11, #4]		;   normally 0
PreZModColBit
	MOV	r2, #0x09		;   start colours
ZModColBit
	LDRB	r0, [r3], #1
	FNcall	Zap_ModeColour		;   Read colour definitions
	LDMVSFD	sp!, {r1-r4, pc}
	ADD	r2, r2, #1
	TEQ	r2, #c_max		;   max colours
	BNE	ZModColBit
	LDMFD	sp!, {r1-r4, pc}


; Default colour table
DefaultColours
	=	0x0A			; Comments (make this italic?)
	=	0x0F			; Strings
	=	0x03			; < ... >
	=	0x0D			; ( ... )
	=	0x09			; Commands
	=	0x0C			; Misc Punct.
	=	0x0E			; Numbers
	=	0x02			; * % #
	=	0x04			; JRF scripting directive
	=	1,0,0
	ALIGN

ZapModeWord
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
	LDR	r2, [r12, #0]
	ADD	r2, r2, #Zap_GetModeWord	;   Zap_GetModeWord - read the mode word
	MOV	lr, pc
	MOV	pc, r2
	MOV	r7, r0
	LDMFD	sp!, {r0-r2, pc}

OnToWrtMdeWrd
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
WrtMdeWrd
	MOV	r0, r7
	LDR	r2, [r12, #0]
	ADD	r2, r2, #Zap_PutModeWord	;   zap call...write the mode word
	MOV	lr, pc
	MOV	pc, r2
	LDMFD	sp!, {r0-r2, pc}

localdefltmw
	DCD	0

initialiseheap
	STMFD	sp!, {r1-r6, r8-r12, lr}
	MOV	r0, #zizeofcfgwksp
	LDR	lr, [r12, #0]
	ADD	lr, lr, #4
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	MOV	r7, r0
	STR	r1, [r7, #0]
	LDR	r0, localdefltmw
	LDR	r0, [r0, #0xC]
	STR	r0, [r7, #0xC]
	MOV	r0, #c_commands
	STR	r0, [r7, #8]	;   AT THE START MAKE COLOUR OK?
	BL	OnToWrtMdeWrd
	LDMFD	sp!, {r1-r6, r8-r12, pc}


; ------------ e_start -------------

E_Start
	STMFD	sp!, {r1, r6, r7, lr}
	STMFD	sp!, {r1-r12, lr}
	LDRB	r1, [r11, #4]
	ORR	r1, r1, #0x100
	FNcall	Zap_ReadVar
	STR	r0, localdefltmw
	LDMFD	sp!, {r1-r12, lr}
	BL	ZapModeWord
	CMP	r7, #0
	BLEQ	initialiseheap
	TEQ	r8, #0
	BEQ	BeforeAllare8
	LDRVC	r1, [r7, #0]
	TEQVC	r1, #zizeofcfgwksp
	BEQ	BeforeAllare8
	MOVVC	r1, #zizeofcfgwksp
	MOVVC	r0, r7
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #8
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	MOVVC	r7, r0
	STRVC	r1, [r7, #0]
	BLVC	OnToWrtMdeWrd
BeforeAll
	LDR	r0, localdefltmw
	LDR	r0, [r0, #0xC]
	STR	r0, [r7, #0xC]
	MOV	r0, #c_commands
	STR	r0, [r7, #8]	;   AT THE START MAKE COLOUR OK?
BeforeAllare8
	LDRVC	r0, [r11, #4]
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #0x015C	;   restore mode options on e_start
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	LDR	r1, [r7, #0x0C]
	ADRL	r0, w_formmb
	STR	r1, [r0, #0x08]
	CMP	r8, #0
	LDMEQFD	sp!, {r1, r6, r7, pc}
	ADR	r0, keyssrchstr
	MOV	r1, #2
	MOV	r3, #0x100
	MVN	r4, #0
	MOV	r5, #((1 << 25) :OR: (1 << 26) :OR: (1 << 24))
	FNcall	Zap_Search
	CMP	r0, #0
	LDR	r1, [r7, #0x0C]
	ORRPL	r1, r1, #(1 << 19)
	BICMI	r1, r1, #(1 << 19)
	STR	r1, [r7, #0x0C]
	ADRL	r0, w_formmb
	STR	r1, [r0, #0x08]
	LDMFD	sp!, {r1, r6, r7, pc}

keyssrchstr
	=	"KEY:\\|LineEditor\\|Paths:\\|Search macros:\\|&500\\|&400", 0, ""
	ALIGN

; ---------- e_end --------------

E_End	FNJSR	"R7"
	CMP	r8, #0
	BL	ZapModeWord
	LDRVC	r0, [r11, #4]
	FNcallc	Zap_SaveModeWord,VC
	FNRTS

SDsasa	DCD	0x1200004D



; ----------- redraw line -------------

adrofrsix
	DCD	0
redrawline
	FNJSR	"R6,R12"		; watch out - strange stack things hapenning
	STMFD	sp!, {r7, r11}
	STR	r6, adrofrsix
	BL	Get_Workspace
	BL	ZapModeWord
	LDR	r2, [r7, #8]		;   Preserved start colour & flags
	LDR	r3, [r7, #0x0C]
	ADRL	r12, w_formmb
	STR	r3, [r12, #8]
	LDMFD	sp!, {r7, r11}		;   calls...
	LDR	r3, [r8, #60]		;   char width of cached line (x 8)
	LDRB	r12, [r8, #88]		;   code of lf...?
	BIC	r2, r2, #0x700
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #c_commands
	ORR	r2, r2, #0xF000		;   ! ; fe? ; ff000
	BIC	r2, r2, #0x00E00000	;   HERE? &0F000000
	LDR	r5, [r9, #0]		;   ?
	LDR	r10, [r9, #4]		;   ?
	ADD	r10, r10, r5
	TEQ	r7, r10
	FNRTS	EQ
	LDR	r10, [r9, #56]		;   ?
	ADD	r10, r10, r5
	CMP	r7, r10
	MOVCC	r10, r5
	MOV	r6, #0
BitAftStart
	SUB	r6, r6, #1
	LDRB	r0, [r7], #-1
	TEQ	r0, r12
	BEQ	UpToStart
	CMP	r7, r10
	BCS	BitAftStart
	TEQ	r5, r10
	LDRNE	r10, [r9, #60]
	SUBNE	r7, r7, r10
	MOVNE	r10, r5
	CMP	r7, r10
	BCS	BitAftStart
	SUB	R6,R6,#1        	; cl fix
	SUB	R7,R7,#1        	;
UpToStart                       	;
	ADDS	r6, r6, #2		;
	ADD	r7, r7, #2		;
	SUBPL	r7, r7, r6
	LDMPLFD	sp, {r6}
	TEQ	r5, r10
	LDREQ	r10, [r9, #f_splito]
	ADDEQ	r10, r10, r5
	LDRNE	r10, [r9, #f_splits]
	ADDNE	r5, r5, r10
	LDRNE	r10, [r9, #f_len]
	ADDNE	r10, r10, r5
	LDRB	r0, [r8, #w_tabchar]
	ORR	r12, r12, r0, LSL #24
	LDR	r0, [r8, #w_bpl]	;   bytes per line / width of text
	ORR	r12, r12, r0, LSL #12

RtAtStrtA
	MOV	lr, #0			; column 0
RtAtStrtB
	CMP	r7, r10			;   EOF?
	BCC	Branch13
	LDR	r10, [r9, #f_len]
	ADD	r10, r10, r5
	CMP	r7, r10
	FNRTS	CS
	LDR	r1, [r9, #f_splits]
	ADD	r7, r7, r1
	ADD	r5, r5, r1
	ADD	r10, r10, r1
Branch13
	LDRB	r0, [r7], #1		;   get char
	AND	r1, r12, #0xFF
	EOR	r2, r2, #0x0400		; toggle newline flag for next test
	TEQ	r0, r1
	TSTEQ	r2, #0x0400		; ... this one
	BICEQ	r2, r2, #0x700
	BICEQ	r2, r2, #0xFF
	ORREQ	r2, r2, #c_commands
	BEQ	RtAtStrtB
	BIC	r2, r2, #0x0400
	TEQ	r0, r1
	BEQ	BranchNL
	CMP	r6, #0			;   wed morn-reinit
	MOVGT	r1, #1			;   @@@@ re init this?
	STRGTB	r1, [r6, r3,LSL #1]
	AND	r1, r2, #0xFF
	CMP	r1, #c_commands
	BEQ	BNL2			; store r6 and r7 in Sol6 and Sol7
Backhome
	AND	r1, r2, #0xFF		;   Here begins the |G-type GStrans Testing
	CMP	r1, #c_comments		;   comment
	BEQ	aftertestA
	TEQ	r0, #'>'		;   GSTrans Testing1
	BEQ	GSTtestMO		;  mon ok1
GSTstop
	TEQ	r0, #')'		;   GSTrans Testing1
	BEQ	GSTtestBO		;  mon ok1
GSTstopB
	CMP	r6, #0	;   Here begins the |G-type GStrans testing
	BGT	aftertestA	;  mon ok1

aftert7
	LDR	r1, Sol7
	ADD	r1, r1, #2
	CMP	r7, r1
	BLE	aftertestA	;   code never fires?
	LDRB	r1, [r7, #-2]	;   in hope
	CMP	r1, #'|'
	BEQ	AfterColour
aftertestA
	TEQ	r0, #'"'
	BEQ	QuoteBit
	AND	r1, r2, #0xFF
	CMP	r1, #c_commands
	CMP	r1, #c_comments
	BEQ	ComCodeRestart
	CMP	r1, #c_strings
	BEQ	BeforeColour
;noposscsvcommstart
	TST	r2, #0x10000000		;   START OF LINE FLAG...
	BNE	NotatStart
	BIC	r2, r2, #0x40000000
	TEQ	r0, #'|'
	TSTEQ	r2, #0x04000000
	BEQ	CommentStart
	CMP	r0, #'/'		;  	 what about "*." who cares...; make yellow?
	ORREQ	r2, r2, #0x10000000
	BICEQ	r2, r2, #0xFF		;   COL cream/normal - lt grey (= &0B);
	ORREQ	r2, r2, #c_punct		;   testing very dubious TST code...
	MOVEQ	r1, #c_commands
	BEQ	fromslash
NotatStart
	TST	r2, #0x0100		;   ok
	BICNE	r2, r2, #0xFF		;   COL cream/normal - lt grey (= &0B);
	ORRNE	r2, r2, #c_punct		;   testing very dubious TST code...
	AND	r1, r2, #0xFF
	TEQ	r1, #c_rounds
	BEQ	BranchYYY
	TEQ	r0, #'.'		;   &.Dir Testing
	TEQNE	r0, #'/'		;   Fish & Chips Testing
	BLE	testampersand
afterteststop
	AND	r1, r2, #0xFF
	TEQ	r1, #c_fg
	BEQ	NotANumber
	TEQ	r1, #c_commands		;   COL Command! c .... NO NuffinUMBERS...
	BICEQ	r2, r2, #0xFF
	ORREQ	r2, r2, #c_punct
	ANDEQ	r1, r2, #0xFF
	TEQ	r1, #c_punct		;   COL cream/normal ... NO NUMBERS...
	TEQNE	r1, #c_numbers		;   COL Orange/Numbers?
	BNE	BeforeColour
	TST	r2, #0x08000000
	BNE	NotANum2
	TEQ	r0, #'&'
	BEQ	PreTisNum
	CMP	r0, #'9'
	RSBLSS	r1, r0, #'0'
	BLS	PreTisNum
	AND	r1, r2, #0xFF
	TEQ	r1, #c_numbers		;   COL = Orange/NUMBERS?
	BNE	NotANumber
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #c_punct
	TEQ	r0, #'-'
	BEQ	TisANumber
	CMP	r0, #'%'
	BLE	NotANumber
	TEQ	r0, #'.'
	TEQNE	r0, #':'
	BEQ	pointinnum
	TEQ	r0, #'x'
	BEQ	TisANumber
	AND	r1, r0, #0xDF
	TEQ	r1, #'K'
	TEQNE	r0, #'_'
	BEQ	TisANumber
	CMP	r1, #'F'
	RSBLSS	r1, r1, #'A'
	BHI	NotANumber

TisANumber
	;   not numbers?
	ADRL	r1, w_formmb + 8
	LDR	r1, [r1]
	ANDS	r1, r1, #(1 << 19)
	BEQ	notkeynumberprob
	LDR	r1, adrofrsix
	ADD	r1, r1, #5
	CMP	r6, r1
	BCC	BeforeColour
notkeynumberprob
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #c_numbers
	TST	r2, #0x80000000
	BICNE	r2, r2, #0x90000000
	B	BeforeColour

NotANumber
	CMP	r0, #'_'
	BEQ	PlainNoOSChk
	CMP	r0, #128
	BCS	PlainNoOSChk
		; CMP	  0,#ASC"]"
		; BEQ	  itsoknow
	CMP	r0, #'0'
	BCC	itsoknow	;  AfterCmdCntChk
	CMP	r0, #':'
	BCC	DontBother	;  itsoknow
	AND	r1, r0, #0xDF
	CMP	r1, #'Z'
	RSBLSS	r1, r1, #'A'
	BLS	PlainNoOSChk
itsoknow
	AND	r1, r2, #0xFF
	TEQ	r1, #c_comments
	TEQNE	r1, #c_strings
	BEQ	DontBother
Bother
	STMFD	sp!, {lr}
	BL	TableChk2		;   **************************
	LDMFD	sp!, {lr}
	TEQ	r0, #'.'
	TEQEQ	r1, #0xEA00
	BEQ	AfterColour
	TST	r2, #0x14000000		;   START OF LINE FLAGS SET...
	TEQEQ	r0, #'|'
	BEQ	CommentStart		;   bugs
DontBother
	TST	r2, #0x00E00000
	BNE	CmdCntChk
AfterCmdCntChk
	AND	r1, r2, #0xFF
	TEQ	r1, #c_comments
	BEQ	BeforeColour
	TEQ	r1, #c_fg
	BNE	SymbolChecking		;    BR if not normal colour...
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #c_punct
	TEQ	r0, #'_'		;   If numbers check for end...
	TEQNE	r0, #'-'
	BEQ	PlainNoOSChk
	CMP	r0, #'9'
	RSBLSS	r1, r0, #'/'		;   = asc "0"
PlainNoOSChk
	BICLS	r2, r2, #0xFF
	ORRLS	r2, r2, #c_fg
	BLS	BeforeColour
SymbolChecking
	CMP	r6, #0
	BLT	BeforeColour		;   BLT     BeforeColour%
	TST	r2, #0x8000000
	BNE	ErrEchConf
	TEQ	r0, #'#'
	TEQNE	r0, #'%'
	TEQNE	r0, #'$'
	TEQNE	r0, #'*'
	MOVEQ	r1, #c_star		; * % # colour (and $, apparantly)
		; .fromslash
	STREQB	r1, [r6, r3]
	BEQ	AfterColour
BeforeColour
		;   NUMBERS?
	TEQ	r0, #' '
	TEQNE	r0, r12, LSR #24	;   = tab?
	BEQ	TabbingSub
Branch24
	CMP	r6, #0
	BLE	firstpass		;   new addition to test
	ANDGT	r1, r2, #0x0F		;   write colours
	STRGTB	r1, [r6, r3]
AfterColour
		; CMP	  R0,#&0D
		; MovEQ	  R0,#ASC"!"
	CMP	r6, #0
	STRGTB	r0, [r6], #1		;   write text
firstpass
	ADD	lr, lr, #1		; next column
BeginOfEnd
	AND	r1, r12, #0xFF		;   end character...
	TEQ	r0, r1			;   end character... yes!
	BICEQ	r2, r2, #0x78000000	;  START OF LINE FLAGS...
	CMP	r6, #0
	ADDLTS	r6, r6, #1
	BMI	RtAtStrtB		;   round loop...
	LDMEQFD	sp, {r6}		; load r6 if we've been scanning
	BEQ	RtAtStrtA
	AND	r1, r12, #0xFF		;   end character... yes! At last...
	TEQ	r0, r1			;   end character... yes!
	BEQ	tocheckbackwardsnow
	ORRNE	r2, r2, #0x0400
backcheckbackwardsnow
	BIC	r1, r12, #0xFF000000	;   if not width...
	CMP	lr, r1, LSR #12		;  WIDTH
	BICLT	r2, r2, #0x0400
	BLT	RtAtStrtB

	BEQ	tohaveajollygoodtime
tohaveajollygoodback
	BIC	r0, r12, #0xFF000000
	CMP	lr, r0, LSR #12		;  width...?
	BICGE	r2, r2, #0x0400		;   NE
		;  ADDEQ   R7,R7,#1
		;  ADDEQ   R11,R11,#1
	AND	r0, r12, #0x0200
	ORR	r2, r2, r0
	LDMFD	sp!, {r6, r12}
	STMFD	sp!, {r7, r11}
	BL	Get_Workspace
	BL	ZapModeWord
	STR	r2, [r7, #8]
	LDMFD	sp!, {r7, r11, pc}	;   on exit set things up r7...

fromslash
	CMP	r6, #0
	BLT	BeforeColour
	STRB	r1, [r6, r3]
	B	AfterColour
		;  B	      BeforeColour%
ComCodeRestart
	TEQ	r0, #'_'
	BEQ	AfterCmdCntChk
	AND	r1, r0, #0xDF
	CMP	r1, #'Z'
	RSBLSS	r1, r1, #'@'
	BLS	AfterCmdCntChk
	B	itsoknow

CmdCntChk
	CMP	r0, #32
	BNE	AfterCmdCntChk
	CMP	r6, #0
	BGT	r6version
		; LDR	  R1,Sol7
		; ADD	  R1,R1,#2 ;  ???
		; CMP	  R7,R1
	CMP	r6, #0
	MOVLE	r1, #10
	LDRGTB	r1, [r7, #-2]	;   danger
overdangerperhaps
	CMP	r1, #32
	BEQ	AfterCmdCntChk
	MOV	r1, r2, LSR #21
	AND	r1, r1, #7
	SUBS	r1, r1, #1
	BICEQ	r2, r2, #0x10000000
	BIC	r2, r2, #0x00E00000
	ORR	r2, r2, r1, LSL #21
	B	AfterCmdCntChk

r6version
	LDR	r1, Sol6		;   13/10
	SUB	r1, r1, #1
	CMP	r6, r1			;   13/10
	LDRGTB	r1, [r6, #-1]		;   13/10
	BGT	overdangerperhaps	;   13/10
	MOV	r1, #' '
	B	AfterCmdCntChk		;   13/10

ErrEchConf
	CMP	r6, #0
	BLE	AfterColour
	AND	r1, r2, #0xFF
	CMP	r1, #c_numbers
	BEQ	BeforeColour
	CMP	r1, #c_punct
	MOVEQ	r1, #c_fg
	STREQB	r1, [r6, r3]
	TEQ	r0, #' '
	TEQNE	r0, r12, LSR #24	;   = tab
	BEQ	TabbingSub
	B	AfterColour

NotANum2
	CMP	r6, #0
	BLE	NotANumber
	CMP	r0, #'%'
	BGT	NotANumber
	SUB	r1, r3, #1
	LDRB	r1, [r6, r1]
	AND	r1, r1, #0xFF
	CMP	r1, #c_numbers
	BNE	NotANumber
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #c_punct
	B	NotANumber

BranchNL
	AND	r1, r2, #0xFF
	TEQ	r1, #c_comments
	TEQNE	r1, #c_strings
	BEQ	DontBother2
Bother2
	STMFD	sp!, {lr}
	BL	TableChk2		;   swap with sect below?;;;
	LDMFD	sp!, {lr}
DontBother2
	MOV	lr, #0x70000000
	B	BeginOfEnd

BNL2
	BIC	r2, r2, #0x10000000	;   START OF LINE FLAGS SET...
	STR	r6, Sol6
	SUB	r1, r7, #1
	STR	r1, Sol7
	B	Backhome

PreTisNum
	;   not numbers?
	CMP	r6, #0
	BLT	TisANumber
	LDRB	r1, [r6, #-1]
	CMP	r1, #' '
	BEQ	TisANumber
	TEQ	r1, #'.'
	TEQNE	r1, #':'
	TEQNE	r1, #'$'
	TEQNE	r1, #'&'
	BNE	TisANumber
	ADD	r1, r6, r3
	LDRB	r1, [r1, #-1]
	AND	r1, r1, #0x0F
	CMP	r1, #c_numbers
	BEQ	TisANumber
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #c_fg
	B	BeforeColour

Sol6	DCD	0
Sol7	DCD	0

BranchYYY
	CMP	r6, #0
	BLT	BeforeColour	;   BLT     BeforeColour%
	CMP	r0, #'9'
	RSBLSS	r1, r0, #'0'
	MOVLS	r1, #c_numbers
	STRLSB	r1, [r6, r3]
	BLS	AfterColour
	LDR	r1, Sol7
	ADD	r1, r1, #2
	CMP	r7, r1
	MOVLE	r1, #10
	LDRGTB	r1, [r7, #-2]	;   danger
	TEQ	r0, #'.'	;   if in number
	BNE	TryNextA
	CMP	r1, #'9'
	BGT	TryNextA
	CMP	r1, #'0'
	BLT	TryNextA
	MOV	r1, #c_numbers
	STRB	r1, [r6, r3]
	B	AfterColour
TryNextA
	TEQ	r0, #'_'		;   if in number
	BNE	BeforeColour
	CMP	r1, #'9'
	BGT	BeforeColour
	CMP	r1, #'0'
	BLT	BeforeColour
	MOV	r1, #c_numbers
	STRB	r1, [r6, r3]
	B	AfterColour

pointinnum
	LDRB	r1, [r7, #-2]
	CMP	r1, #'9'
	BGT	NotANumber
	CMP	r1, #'/'
	BLE	NotANumber
	LDRB	r1, [r7]
	CMP	r1, #'9'
	BGT	NotANumber
	CMP	r1, #'/'
	BLE	NotANumber
	B	TisANumber		;   in a number...

testampersand
	CMP	r6, #0
	BLE	afterteststop
	LDRB	r1, [r6, #-1]
	TEQ	r1, #'&'
	BNE	afterteststop
	SUB	r1, r3, #1
	MOV	r0, #c_fg
	STRB	r0, [r6, r1]
	LDRB	r0, [r7, #-1]
	B	afterteststop

localrtadr
	DCD	0

GSTtestMO
	MOV	r1, #0
GSTtest
	STR	r1, localrtadr
	CMP	r6, #0
	BLT	GSTstop
	STMFD	sp!, {r0, r2, r4, r5}
	AND	r1, r2, #0xFF
	TEQ	r1, #c_strings
	TEQNE	r1, #c_comments
	BEQ	notaGSTSequence
	MOV	r4, r7
	MVN	r0, #0
GSTchklp
	SUB	r0, r0, #1
	ADD	r5, r4, r0
	LDR	r1, [r9, #f_ptr]
	CMP	r5, r1
	BCC	notaGSTSequence
	LDR	r2, [r9, #f_splito]
	ADD	r2, r1, r2
	CMP	r5, r2
	BCC	inbothalfalread
	LDR	r2, [r9, #f_splite]
	ADD	r2, r1, r2
	CMP	r5, r2
	LDRCC	r5, [r9, #f_splits]
	SUBCC	r4, r4, r5
inbothalfalread
	LDRB	r1, [r4, r0]
		; CMP	  R1,#09     : ;BEQ GSTchklp
	CMP	r1, #'>'
	BEQ	notaGSTSequence
	CMP	r1, #' '
	BLT	notaGSTSequence
	CMP	r1, #'"'
	BEQ	notaGSTSequence
	CMP	r1, #127
	BGT	notaGSTSequence
	CMP	r1, #'<'
	BNE	GSTchklp
BACKInEntity
	MOV	r1, #c_punct
	ADD	r5, r6, r3
	ADD	r0, r0, #1
	ADD	r4, r6, r0
	LDR	r2, adrofrsix
	CMP	r4, r2
	STRCSB	r1, [r5, r0]
	ADD	r0, r0, #1
	MOV	r1, #c_angles
	CMN	r0, #0
	BEQ	GupSAway
roundAloop
	ADD	r4, r6, r0
	CMP	r4, r2
	STRCSB	r1, [r5, r0]
	ADD	r0, r0, #1
	CMP	r0, #0
	BLT	roundAloop
GupSAway
	MOV	r1, #c_punct
	ADD	r4, r6, r0
	CMP	r4, r2
	STRCSB	r1, [r5, r0]
	LDMFD	sp!, {r0, r2, r4, r5}
	BCC	AfterColour
	LDR	r1, localrtadr
	CMP	r1, #0
	BEQ	AfterColour
	B	secondendofGST
notaGSTSequence
	LDMFD	sp!, {r0, r2, r4, r5}
	LDR	r1, localrtadr
	CMP	r1, #0
	BEQ	GSTstop
	B	secondendofGST
GSTtestBO
	MOV	r1, #0
GSTtestB
	STR	r1, localrtadr
	CMP	r6, #0
	BLT	GSTstopB
	STMFD	sp!, {r0, r2, r4, r5}
	TST	r2, #0x40000000
	BNE	notaGSTSequenceB
	ADRL	r1, w_formmb + 8
	LDR	r1, [r1]
	ANDS	r1, r1, #(1 << 19)
	BEQ	notaGSTSequenceB
	AND	r1, r2, #0xFF
	TEQ	r1, #c_strings
	TEQNE	r1, #c_comments
	BEQ	notaGSTSequenceB
	MOV	r4, r7
	MVN	r0, #0
GSTchklpB
	SUB	r0, r0, #1
	ADD	r5, r4, r0
	LDR	r1, [r9, #f_ptr]
	CMP	r5, r1
	BCC	notaGSTSequenceB
	LDR	r2, [r9, #f_splito]
	ADD	r2, r1, r2
	CMP	r5, r2
	BCC	inbothalfalreadB
	LDR	r2, [r9, #f_splite]
	ADD	r2, r1, r2
	CMP	r5, r2
	LDRCC	r5, [r9, #f_splits]
	SUBCC	r4, r4, r5
inbothalfalreadB
	LDRB	r1, [r4, r0]
		; CMP	  R1,#09     : ;BEQ GSTchklpB
	CMP	r1, #' '
	BLT	notaGSTSequenceB
		;  CMP	   1,#ASC")"
	CMP	r1, #'"'
		;  CMPNE   1,#ASC"'"
	BEQ	notaGSTSequenceB
	CMP	r1, #127
	BGT	notaGSTSequenceB
	CMP	r1, #'('
	BNE	GSTchklpB
	CMN	r0, #2
	BCS	GSTchklpB
BACKInEntityB
	MOV	r1, #c_rounds
	ADD	r5, r6, r3
	ADD	r0, r0, #1
	ADD	r4, r6, r0
	LDR	r2, adrofrsix
	CMP	r4, r2
	STRCSB	r1, [r5, r0]
	ADD	r0, r0, #1
	MOV	r1, #c_rounds
	CMN	r0, #0
	BEQ	GupSAwayB
roundAloopB
	ADD	r4, r6, r0
	CMP	r4, r2
	STRCSB	r1, [r5, r0]
	ADD	r0, r0, #1
	CMP	r0, #0
	BLT	roundAloopB
GupSAwayB
	MOV	r1, #c_rounds	;  ??
	ADD	r4, r6, r0
	CMP	r4, r2
	STRCSB	r1, [r5, r0]
	LDMFD	sp!, {r0, r2, r4, r5}
	BCC	AfterColour
	LDR	r1, localrtadr
	CMP	r1, #0
	BEQ	AfterColour
	B	secondendofGSTB

notaGSTSequenceB
	LDMFD	sp!, {r0, r2, r4, r5}
	LDR	r1, localrtadr
	CMP	r1, #0
	BEQ	GSTstopB
	B	secondendofGSTB

; | comment
CommentStart
	LDR	r1, Sol7
	ADD	r1, r1, #1
	CMP	r7, r1
	BEQ	sokinkeysfile
	LDR	r1, [r9, #f_ptr]
	ADD	r1, r1, #2
	CMP	r7, r1
	LDRCSB	r1, [r7, #-2]	;  check for \|...
	CMP	r1, #'\'
	BEQ	BeforeColour
	ADRL	r1, w_formmb + 8
	LDR	r1, [r1]
	ANDS	r1, r1, #(1 << 19)
	BNE	BeforeColour
sokinkeysfile
	AND	r1, r2, #0xFF
	CMP	r1, #c_strings		;   in quotes?
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #c_comments
	ORRNE	r2, r2, #0x10000000
	B	BeforeColour

; "Quotes"
QuoteBit
	AND	r1, r2, #0xFF
	CMP	r1, #c_comments
	BEQ	BeforeColour
	ADRL	r1, w_formmb + 8
	LDR	r1, [r1]
	ANDS	r1, r1, #(1 << 19)
	AND	r1, r2, #0xFF
	BEQ	notinthekeysfile
	CMP	r1, #c_commands
	BEQ	BeforeColour
notinthekeysfile
	CMP	r1, #c_strings
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #c_strings
	BNE	AfterColourafterchkback

; "No {} NUFFIN"
CurlyBrack
	CMP	r6, #0
	ANDGT	r1, r2, #0x0F
	STRGTB	r1, [r6, r3]
	BIC	r2, r2, #0xFF
	MOV	r1, r2, LSR #24
	AND	r1, r1, #0x01	;   Bits for {} depth
	CMP	r1, #0x00
	ORREQ	r2, r2, #c_punct
	ORRNE	r2, r2, #c_rounds
	B	AfterColour

AfterColourafterchkback
	AND	r1, r2, #0xFF
	STMFD	sp!, {lr}
	BL	TableChk2	;   **************************
	LDMFD	sp!, {lr}
	B	BeforeColour

CurlyBrackOpen
	;   originally for ' these ' ; "{"
	ORR	r2, r2, #0x10000000
	AND	r1, r2, #0xFF
	TEQ	r1, #c_strings
	TEQNE	r1, #c_comments
	BEQ	BeforeColour
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #c_rounds
	ORR	r2, r2, #0x1000000
	ORR	r12, r12, #0x0200
	B	BeforeColour

CurlyBrackClose
		;   originally for ' these ' ; "}"
	ORR	r2, r2, #0x10000000
	AND	r1, r2, #0xFF
	TEQ	r1, #c_strings
	TEQNE	r1, #c_comments
	BEQ	BeforeColour
	BIC	r2, r2, #0x1000000
	MOV	r1, r2, LSR #24
	AND	r1, r1, #0x01	;   Bits for {} depth
	TEQ	r1, #0x00
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #c_rounds	;   COL Grey/Redirected
	ORRNE	r12, r12, #0x0200
	BNE	BeforeColour
	BIC	r12, r12, #0x0200
	B	CurlyBrack

TabbingSub
	AND	r1, r2, #0xFF		; was 0F
	TEQ	r1, #c_commands
	TEQNE	r1, #c_angles
	ORREQ	r2, r2, #0x0100
	AND	r1, r4, #0x3000
	TEQ	r1, #0
	TEQEQ	r0, r12, LSR #24
	BEQ	AfterColour
	TEQ	r0, #' '
	BEQ	Branch24
	CMP	r6, #0
	BLT	BeginOfEnd
	MOV	r0, #9			; arrow -> char
	TEQ	r1, #0x1000
	MOVEQ	r0, #' '		; " "
	TEQ	r1, #0x3000
	MOVEQ	r0, #'-'		; "-"
TabLoop
	MOV	r1, #c_controls
	STRB	r1, [r6, r3]
	MOV	r1, #c_bg2
	STRB	r1, [r6, r3,LSL #1]
	STRB	r0, [r6], #1
	ADD	lr, lr, #1
	AND	r1, r4, #0x3000
	TEQ	r1, #0x2000
	MOVEQ	r0, #' '
	BIC	r1, r12, #0xFF000000
	TEQ	lr, r1, LSR #12
	TSTNE	lr, #7
	BNE	TabLoop
	AND	r0, r4, #0x3000
	TEQ	r0, #0x3000
	MOVEQ	r0, #9
	STREQB	r0, [r6, #-1]
	MOV	r0, r12, LSR #24
	B	BeginOfEnd


; ----------- e_prevline -------------

redrawA	SUBS	r0, r0, #32
	MOVMI	r0, #0
	MOV	pc, lr


; ----------- table lookup -----------

beginnchar
	DCD	0
storedr6flu
	DCD	0
cntcharback
	DCD	0
locssforcase
	DCD	0

TableChk2
	STR	r6, storedr6flu
	FNJSR	"R4-R12"
	MOV	r8, r7
	LDR	r1, [r9, #f_ptr]
	LDR	r12, [r9, #f_splito]
	ADD	r12, r1, r12
	CMP	r8, r12
	BCC	ploughonin
	LDR	r12, [r9, #f_splite]
	ADD	r12, r1, r12
	CMP	r8, r12
	LDRCC	r1, [r9, #f_splits]
	ADDCC	r8, r8, r1
ploughonin
	MVN	r11, #0
_altered_0
	SUB	r11, r11, #1
	ADD	r4, r8, r11
	LDR	r1, [r9, #f_ptr]
	CMP	r4, r1
	BCC	notanumberbackedonto
	LDR	r12, [r9, #f_splito]
	ADD	r12, r1, r12
	CMP	r4, r12
	BCC	inbothalfTC2
	LDR	r12, [r9, #f_splite]
	ADD	r12, r1, r12
	CMP	r4, r12
	LDRCC	r1, [r9, #f_splits]
	SUBCC	r4, r4, r1
inbothalfTC2
	LDR	r1, [r9, #f_ptr]
	CMP	r4, r1
	BCC	notanumberbackedonto
	LDRB	r1, [r4]
	CMP	r1, #'|'
	CMPNE	r1, #']'
	CMPNE	r1, #'['
	CMPNE	r1, #'}'
	CMPNE	r1, #'{'
	CMPNE	r1, #'@'
	BGT	_altered_0

rightatverystart
	CMP	r1, #'&'
	FNRTS	EQ
	CMP	r1, #'0'
	BCC	notanumberbackedonto
	CMP	r1, #':'
	BCC	_altered_0	;  notANYone
notanumberbackedonto
	STR	r1, beginnchar
	ADD	r11, r11, #1
	ADD	r4, r8, r11
	ADD	r11, r11, #1
	RSBS	r1, r11, #0
	FNRTS	EQ			; no chars to search
	STR	r1, cntcharback
	LDR	r1, [r9, #f_ptr]
	CMP	r4, r1
	FNRTS	CC
	LDR	r12, [r9, #f_splito]
	ADD	r12, r1, r12
	CMP	r4, r12
	BCC	inbothalfTC3
	LDR	r12, [r9, #f_splite]
	ADD	r12, r1, r12
	CMP	r4, r12
	LDRCC	r1, [r9, #f_splits]
	SUBCC	r4, r4, r1
inbothalfTC3
	LDRB	r1, [r4]
	FNupper	r1
	CMP	r1, #'A'
	FNRTS	LT
	CMP	r1, #'Z'
	FNRTS 	GT
	SUB	r1, r1, #'A'
	ADRL	r12, AlphaIndex
	ADD	r1, r12, r1, ASL #2
	LDR	r1, [r1]
	ADRL	r12, TableHere
	ADD	r12, r12, r1

; main loop per table entry
lpa2
	MOV	r8, #0			;   tablepointer
	LDRB	r1, [r12]
	CMP	r1, #'#'		; case sensitive?
	MOV	r1, #0
	MVNEQ	r1, #0
	ADDEQ	r12, r12, #1
	STR	r1, locssforcase	; flag as such
; main loop per table character
lpa1
	LDRB	r1, [r12, r8]
	CMP	r1, #'z'
	MOVGT	r10, r8			; found com_ variable
	BGT	gotexactmatch		; thus found command
	MOV	r7, r1
	ADD	r5, r4, r8
	LDR	r1, [r9, #f_ptr]
	LDR	lr, [r9, #f_splito]
	ADD	lr, r1, lr
	CMP	r5, lr
	BCC	inbothalfTC4
	LDR	lr, [r9, #f_splite]
	ADD	lr, r1, lr
	CMP	r5, lr
	LDRCC	r1, [r9, #f_splits]
	ADDCC	r5, r5, r1
inbothalfTC4
	ADRL	r1, w_formmb
	LDR	r1, [r1, #0x08]
	ANDS	r1, r1, #1 << 24
	LDRB	r1, [r5]		; load char from file
	BEQ	dothatupper
	LDR	lr, locssforcase
	CMP	lr, #0
	BNE	noupperheren
dothatupper
	FNupper	r1			; not case sensitive
noupperheren
skiptabovr1
	CMP	r1, #':'
	CMPNE	r1, #'<'
	CMPNE	r1, #'='
	CMPNE	r1, #'>'
	CMPNE	r1, #'/'
	MOVLE	r1, #' '
tabovr1
	ADD	r8, r8, #1
	CMP	r7, r1
	BGT	bigger1
	BEQ	lpa1
maybenot
	ADD	r12, r12, r8
	SUB	r12, r12, #1
_altered_1
	LDRB	r1, [r12], #1
	CMP	r1, #'z'
	BLE	_altered_1
	LDRB	r1, [r12]
	CMP	r1, #'*'
	BNE	lpa2
couldnotfindit
	RSB	r8, r11, #0
	ORR	r2, r2, #0x10000000	;  SOL ...? no brackets...!
	BIC	r2, r2, #0x40000000	;  a command yet flags...
	CMP	r1, #'.'
	ADDEQ	r8, r8, #1
notANYone
	FNRTS

	; this routine is unnecessary if the table is in alphabetical order
bigger1
	CMP	r8, #1
	BEQ	couldnotfindit		; not in table at all
	B	maybenot		; try next table entry


; found it!
; at this point, r1 = com_ variable  r9 = f_ pointer  r8 = r10 = pointer to com_variable
gotexactmatch
	ORR	r2, r2, #0x40000000	;  a command yet flags...
	ORR	r2, r2, #0x10000000	;  START OF LINE FLAG...
	MOV	R9,R1
	LDR	r1, beginnchar
	TEQ	r1, #'.'		; why are we testing this now?
	TEQNE	r1, #'!'		; why not /before/ we search all the way through the table?
	MOVEQ	r1, #c_fg		;  was &12
	BICEQ	r2, r2, #0x40000000	;  a command yet flags...
	BEQ	ChooseColour2
	TEQ	r1, #'#'		; was the first character checked in the file a #?
	TEQEQ	r9, #com_jrfscript
	TEQNE	r9, #com_directive
	MOVEQ	r1, #c_directive	;  gerph style...
	BEQ	ChooseColour2
	TEQ	r9, #com_dontcolour
	FNRTS	EQ
	MOV	r1, #c_commands
	TEQ	r9, #com_jrfscript
	MOVEQ	r1, #c_fg		;  was &12
	BICEQ	r2, r2, #0x40000000	;  a command yet flags...

ChooseColour2
	LDRB	r9, beginnchar
	CMP	r9, #10			; lf? shouldn't this be w_cr??
	BNE	everythingsfinerightnow
	ADRL	r9, w_formmb
	LDR	r9, [r9, #0x08]
	TST	r9, #(1 << 19)          ; are we in the keys file?
	MOVNE	r1, #c_fg		; was &12
everythingsfinerightnow
	LDR	r9, storedr6flu		; not doing this line
	CMP	r9, #0			; I think this test should be /right/ at the start
	FNRTS	LE			; of TableChk2 - cl
	ANDS	r9, r2, #0xFF		; and probably this one as well
	CMP	r9, #c_numbers
	CMPNE	r9, #c_strings
	FNRTS	EQ
	ADD	r9, r6, r3
	LDRB	r9, [r9, r11]		;   QUICK FIX...
	CMP	r9, #c_strings		;   ""
	FNRTS	EQ
	MOV	r9, #0
	ADD	r7, r6, r11
	ADD	r6, r7, r3
	LDRB	r5, [r6, r9]
	CMP	r5, #c_strings
	FNRTS	EQ
	LDR	r11, adrofrsix
	ADRL	r5, w_formmb
	LDR	r5, [r5, #0x08]
lasdwA
	ADD	r4, r7, r9
	CMP	r4, r11
	BCC	beforesolhereargh
	LDRB	lr, [r7, r9]
	LDRB	r4, [r12, r9]
	TST	r5, #1 << 27		; beautifty?
	CMPNE	lr, #'@'
	STRGTB	r4, [r7, r9]
lasdwA1
	ADD	r4, r7, r9
	CMP	r4, r11
	STRCSB	r1, [r6, r9]
beforesolhereargh
	ADD	r9, r9, #1
	LDR	r4, cntcharback
	CMP	r9, r4
	FNRTS	CS
	CMP	r9, r8
	BLT	lasdwA
	CMP	r9, r10
	BLT	lasdwA1
	MOV	r1, #0xEA00
colouringrapidexit
	FNRTS

workspace_pointer
	DCD	0
Get_Workspace
	LDR	r11, workspace_pointer
	MOV	pc, lr


; ------------- e_char -------------

charchar
	STMFD	sp!, {lr}
	MOV	r1, #0
FromMJE4
	CMP	r1, r5
	BGE	FromMJE5
	LDRB	r0, [r7, r1]
	TEQ	r0, #'>'
	TEQNE	r0, #')'
	TEQNE	r0, #'.'
	ADDNE	r1, r1, #1
	BNE	FromMJE4
	CMP	r5, #2
	ADDCS	r1, r1, #1
	BCS	FromMJE4
	BL	FromMJE6
	SUB	r5, r5, r1
	ADD	r7, r7, r1
	TEQ	r0, #'>'
	BLEQ	FromMJE9
	TEQ	r0, #')'
	BLEQ	FromMJE10
	TEQ	r0, #'.'
	BLEQ	Abbreviation
	SUB	r5, r5, #1
	ADD	r7, r7, #1
	MOV	r1, #0
	B	FromMJE4

FromMJE5
	BL	FromMJE6
	LDMFD	sp!, {pc}

FromMJE6
	CMP	r1, #0
	MOVLE	pc, lr
	FNJSR	"R1-R10"
	MOV	r5, r1
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
	FNRTS

FromMJE9
	STMFD	sp!, {r1-r10, lr}
	LDR	r0, [r10, #12]
	MOV	r1, #'<'
	MOV	r2, #'>'
	BL	FromMJE18
	BLEQ	FromMJE11
	MOV	r5, #1
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
	LDMFD	sp!, {r1-r10, pc}

FromMJE10
	STMFD	sp!, {r1-r10, lr}
	LDR	r0, [r10, #12]
	MOV	r1, #'('
	MOV	r2, #')'
	BL	FromMJE18
	BLEQ	FromMJE11
	MOV	r5, #1
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
	LDMFD	sp!, {r1-r10, pc}

Abbreviation
	STMFD	sp!, {r0-r12, lr}
	MOV	r0, #0x81
	MOV	r1, #0x8F
	MOV	r2, #0xFF
	SWI	XOS_Byte		; scan for ESCAPE?
	BCS	asnormaldot		; but don't bother testing the return value...
	ADRL	r0, w_formmb
	LDR	r0, [r0, #0x08]
	TST	r0, #(1 << 25)		; complete enabled?
	BEQ	asnormaldot
	MOV	r0, #0
	STR	r0, startslash
	STR	r0, isentity
	LDR	r0, [r10, #12]		; c_off?
	SUB	lr, r0, #1
	STR	lr, storedofsofeow	; stored offset of end of word?
	MOV	r1, #'('
	BL	checkbackone
	BEQ	firstabbrev

asnormaldot
	MOV	r5, #1
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
	LDMFD	sp!, {r0-r12, pc}

beepandexit
	;   stop full
	LDMFD	sp, {r0-r12, lr}
	ADR	r7, insstrtst
	MOV	r5, #1
	MOV	r9, #Zap_CallMode
	BL	FromMJE27
realbeepandexit
	LDMFD	sp!, {r0-r12, pc}

firstabbrev
	ADRL	r0, TableHere
		; LDR	  0,locoftablethree
	LDR	r1, storedofsofsow
	LDR	r2, storedofsofeow
	SUB	r2, r2, r1
	ADRL	r3, AlphaIndex
	BL	getadrofabrcmd
		;   returns adress in r7, length in r5. lies. R5 = 8 if found, 0 otherwise.
	BEQ	beepandexit		; couldn't find anything
	LDR	r1, inshash
	LDR	r2, delhash
	ADD	r2, r2, #1		; deleting more than we're inserting?
	CMP	r1, r2
	BLE	beepandexit		; yes - exit

insrtstfhre
	MOV	r2, #31			;  max value
	ADR	r3, deldatahere
	ADRL	r5, w_formmb
	LDR	r5, [r5, #0x08]
_altered_3
	LDRB	r1, [r7, r2]
	STRB	r1, [r3, r2]
	SUBS	r2, r2, #1
	BPL	_altered_3
	FNcall	Zap_StartOp
	LDR	r2, delhash
	ADD	r2, r2, #1
	LDR	r1, storedofsofsow
	MOV	r0, #0x2
	FNcall	Zap_Command
	LDR	r2, inshash
	ADR	r3, deldatahere
	LDR	r1, storedofsofsow
	MOV	r0, #0x1
	FNcall	Zap_Command
	FNcall	Zap_StopOp
	LDMFD	sp!, {r0-r12, pc}
deldatahere
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
insstrtst
	=	"...."


; X EQ if nothing found
getadrofabrcmd
	STMFD	sp!, {r8-r12, lr}
	MOV	r6, r3
	MOV	r3, r0
	MOV	r4, r1
	MOV	r5, r2
	MOV	r0, r4
	BL	FromMJE29
	FNupper	r0
	CMP	r0, #'A'
	BLT	rapidleaving
	CMP	r0, #'Z'
	BGT	rapidleaving
	SUB	r0, r0, #'A'
	ADD	r11, r6, r0, ASL #2
	LDR	r11, [r11]
	ADD	r11, r11, r3
_altered_4
	MVN	r12, #0
_altered_5
	ADD	r12, r12, #1
	ADD	r0, r4, r12		; r0 = file offset of char
	BL	FromMJE29		; r0 = char from file
	LDR	r7, isentity
	TST	r7, #0x100		; this bit is always clear
	BLEQ	maker0upper
	MOV	r2, r0
findnextincc
	LDRB	r1, [r11, r12]		; read char from table
	CMP	r1, #'#'		; case sensitive flag?
	ADDEQ	r11, r11, #1
	BEQ	findnextincc
	CMP	r1, #'{'		; end of table entry?
	BCS	fndcmdend2		; yup
	LDR	r7, isentity
	TST	r7, #0x100
	BLEQ	maker1upper
	CMP	r1, r2
	BNE	fndcmdend
dontcomparejn
	CMP	r12, r5			; compared far enough?
	BLT	_altered_5
	STR	r12, delhash		; length already present
	MOV	r7, r11			; start of table entry
	MOV	r12, #0
loop4					; count length of table entry
	ADD	r12, r12, #1
	LDRB	r1, [r11, r12]
	CMP	r1, #' '
	CMPNE	r1, #'{'
	BLT	loop4
	CMP	r1, #' '
	ADDEQ	r11, r11, r12
	LDREQB	r1, [r11, #1]
	STR	r1, endtermhere		; char to stop at
	STR	r12, inshash		; number of chars to inset
	MOVS	r5, #8			; clear Z flag
	LDMFD	sp!, {r8-r12, pc}

fndcmdend
	MOV	r0, r2
	BL	maker0upper
	BL	maker1upper
	CMP	r0, r1
	BEQ	loop3
	CMP	r12, #0
	BEQ	rapidleaving
loop3
	ADD	r12, r12, #1
	LDRB	r1, [r11, r12]
	CMP	r1, #'{'
	BCC	loop3
fndcmdend2
	ADD	r12, r12, #1
	ADD	r11, r11, r12
	B	_altered_4
rapidleaving
	MOVS	r5, #0
	LDMFD	sp!, {r8-r12, pc}

FromMJE11
	STMFD	sp!, {r0-r7, lr}
	LDR	r4, [r10, #12]
	STR	r0, [r10, #12]
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_ReflectCaret
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	SWI	XOS_ReadMonotonicTime
	MOV	r3, r0
	BL	FromMJE26
	ADD	r3, r3, r0
FromMJE12
	MOV	r0, #0x98
	MOV	r1, #0
	SWI	XOS_Byte
	BCC	FromMJE13
	SWI	XOS_ReadMonotonicTime
	CMP	r0, r3
	BLT	FromMJE12
FromMJE13
	STR	r4, [r10, #12]
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_ReflectCaret
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	LDMFD	sp!, {r0-r7, pc}

FromMJE18
	STMFD	sp!, {r3, r4, lr}
	MOV	r3, r0
	MOV	r4, #1
_altered_6
	SUBS	r3, r3, #1
	BLT	FromMJE20
	MOV	r0, r3
	BL	FromMJE29
	TEQ	r0, r2
	ADDEQ	r4, r4, #1
	BEQ	_altered_6
	CMP	r2, #'>'
	TEQEQ	r0, #' '
	BEQ	FromMJE20a
	TEQ	r0, r1
	BNE	_altered_6
	SUBS	r4, r4, #1
	BNE	_altered_6
FromMJE20
	MOV	r0, r3
	LDMFD	sp!, {r3, r4, pc}

FromMJE20a
	MOVS	r0, #1
	LDMFD	sp!, {r3, r4, pc}

FromMJE20b
	MOVS	r0, #0
	LDMFD	sp!, {r3, r4, pc}
storedofsofsow
	DCD	0
storedofsofeow
	DCD	0
delhash
	DCD	0
inshash
	DCD	0
endtermhere
	DCD	0
startslash
	DCD	0
isentity
	DCD	0

checkbackone
	STMFD	sp!, {r3, r4, lr}
	SUB	r3, r0, #1
_altered_7
	STR	r3, storedofsofsow	; stored offset of start of word?
	SUBS	r3, r3, #1
	BLT	FromMJE20b		; done
	MOV	r0, r3
	BL	FromMJE29		; get character from marker buffer?
	CMP	r0, #'@'
	BLE	FromMJE20b		; done
	TEQ	r0, r1
	BNE	_altered_7
	B	FromMJE20
fndspaloc
	DCD	0
checkbacktwo
	STMFD	sp!, {r3, r4, lr}
	MOV	lr, #0
	STR	lr, fndspaloc
	MOV	r3, r0
	MOV	r4, #1
_altered_8
	SUBS	r3, r3, #1
	BLT	FromMJE20a
	MOV	r0, r3
	BL	FromMJE29
	TEQ	r0, r2
	ADDEQ	r4, r4, #1
	BEQ	_altered_8
	LDR	lr, fndspaloc
	CMP	lr, #0
	BNE	overspecchars
	CMP	r0, #' '
	STREQ	r0, fndspaloc
	ADDEQ	lr, r3, #1
	STREQ	lr, storedofsofsow
	LDR	lr, fndspaloc
	CMP	lr, #0
	BNE	overspecchars
	TEQ	r0, #'>'
	TEQNE	r0, #'"'
	TEQNE	r0, #'/'
	BEQ	FromMJE20a
overspecchars
	TEQ	r0, r1
	BNE	_altered_8
	SUBS	r4, r4, #1
	BNE	_altered_8
	LDR	lr, fndspaloc
	CMP	lr, #0
	BEQ	FromMJE20a
	B	FromMJE20b
checkbackthree
	STMFD	sp!, {r3, r4, lr}
	MOV	r3, r0
	MOV	r4, #1
_altered_9
	STR	r3, storedofsofsow
	SUBS	r3, r3, #1
	BLT	FromMJE20a
	MOV	r0, r3
	BL	FromMJE29
	TEQ	r0, r2
	ADDEQ	r4, r4, #1
	BEQ	_altered_9
	TEQ	r0, #'>'
	TEQNE	r0, #'"'
	TEQNE	r0, #'/'
	BEQ	FromMJE20a
	CMP	r0, #33
	BCC	FromMJE20a
	TEQ	r0, r1
	BNE	_altered_9
	SUBS	r4, r4, #1
	BNE	_altered_9
	B	FromMJE20
checkbackent
	STMFD	sp!, {r3, r4, lr}
	MOV	r3, r0
	MOV	r4, #1
_altered_10
	STR	r3, storedofsofsow
	SUBS	r3, r3, #1
	BLT	FromMJE20a
	MOV	r0, r3
	BL	FromMJE29
	TEQ	r0, r2
	ADDEQ	r4, r4, #1
	BEQ	_altered_10
	CMP	r0, #'&'
	BCC	FromMJE20a
	TEQ	r0, r1
	BNE	_altered_10
	SUBS	r4, r4, #1
	BNE	_altered_10
	B	FromMJE20
FromMJE26
	;   get delay
	STMFD	sp!, {r1, r2, lr}
	MOV	r0, #0
	ADRL	r1, w_formmb
	LDR	r1, [r1, #0x08]
	ADRL	r2, w_formmb + 4
	LDRB	r2, [r2]
	TST	r1, #(1 << 26)
	MOVNE	r0, r2
	LDMFD	sp!, {r1, r2, pc}

FromMJE27
	STMFD	sp!, {r9, r11, lr}
	LDR	r9, [r11, #4]	;   mode word...
	LDMFD	sp!, {r11}
	LDR	lr, [r12, #0]
	ADD	lr, lr, #Zap_BaseMode
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	LDMFD	sp!, {r11, pc}

FromMJE29
	FNJSR
	LDR	lr, [r9, #f_splito]
	CMP	r0, lr
	LDRCS	lr, [r9, #f_splits]
	ADDCS	r0, r0, lr
	LDR	lr, [r9, #f_ptr]
	LDRB	r0, [lr, r0]
	FNRTS

maker1upper
	FNupper	r1
	MOV	pc, lr
maker0upper
	FNupper	r0
	MOV	pc, lr


		; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

tohaveajollygoodtime
	STMFD	sp!, {lr}
	BL	checkbackwardsnow
	LDR	lr, [r9, #f_ptr]
	LDR	r0, [r9, #f_splito]
	ADD	r0, r0, lr
	CMP	r7, r0
	LDREQ	r0, [r9, #f_splits]
	ADDEQ	r0, r0, r7
	MOVNE	r0, r7
	LDR	r1, [r9, #f_bufl]
	ADD	r1, lr, r1
	CMP	r0, r1
	LDRCCB	r0, [r0]		;  Hmm...(Beyond end...?)
	AND	r1, r12, #0xFF		;   end character... yes! At last...
	TEQ	r0, r1			;
	ADDEQ	r7, r7, #1
	ADDEQ	r11, r11, #1
	LDMFD	sp!, {lr}
	B	tohaveajollygoodback


tocheckbackwardsnow                     ; called at CR to check for commands
	ADD	r11, r11, #1		; next line
	BIC	r2, r2, #0xCF000000
	BIC	r2, r2, #0x00F00000
	STMFD	sp!, {lr}
	BL	checkbackwardsnow
	LDMFD	sp!, {lr}
	B	backcheckbackwardsnow

checkbackwardsnow
	STMFD	sp!, {r0, r2, r7, lr}
	AND	r1, r2, #0xFF
	TEQ	r1, #c_comments		; don't try to find commands inside comments or strings
	TEQNE	r1, #c_strings
	BEQ	endcheckbackwardsnow
	CMP	r0, #'{'
	BCS	endcheckbackontoent
alltizfine
	ADD	r7, r7, #1
	BL	TableChk2
	SUB	r7, r7, #1
endcheckbackontoent
	ADD	r7, r7, #1
	TEQ	r1, #c_comments
	BEQ	secondendofGSTB
	MOV	r1, #1
	B	GSTtest
secondendofGST
	MOV	r1, #1
	B	GSTtestB
secondendofGSTB
endcheckbackwardsnow
	LDMFD	sp!, {r0, r2, r7, pc}



; ---------- e_saveandrun etc -------------

localstorevalue
	DCD	0

BranchSave
	FNJSR	"R1,R2"
	FNcall	Zap_SaveFile
	FNPULL
JustRun
	FNJSR	"R1-R12"
	MOV	r0, #6
	MOV	r3, #0x260
	SWI	XOS_Module
	BVS	totalfailure
	LDR	r0, prestoregap		; "Run "
	STR	r2, localstorevalue
	STR	r0, [r2], #4
	LDR	r1, [r9, #f_name]
OneA	; copy the string in
	LDRB	r0, [r1], #1
	STRB	r0, [r2], #1
	CMP	r0, #0x20
	BCS	OneA
	MOV	r0, #0
	STRB	r0, [r2, #-1]
	LDR	r0, localstorevalue
	SWI	XWimp_StartTask
	MOV	r0, #7
	LDR	r2, localstorevalue
	SWI	XOS_Module
totalfailure
	FNRTS


; -------------- FLAGSTOGGLE ---------------

	DCD	0x8017
Cmdhtmlflagstoggle
	STMFD	sp!, {lr}
	LDR	r10, [r0]
	ADRL	r1, modenumberlocal
	LDR	r1, [r1]
	STMFD	sp!, {r1-r11}
	FNcall	Zap_GetModeWord
	LDMFD	sp!, {r1-r11}
	MOV	r6, r0
	LDR	r7, [r6, #0xC]
	CMP	r2, #15
	BEQ	tickquery
	MOV	r5, #0
	AND	r1, r10, #0xFF
	BL	execute
	MOV	r1, r10, LSR #8
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	MOV	r1, r10, LSR #16
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	MOV	r1, r10, LSR #24
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	STR	r7, [r6, #0xC]
	ADRL	r0, w_formmb
	STR	r7, [r0, #8]
	LDMFD	sp!, {pc}

execute	AND	r2, r1, #0x1F
	CMP	r2, #20
	ORREQ	r5, r5, #1
	CMP	r2, #28
	CMPNE	r2, #29
	CMPNE	r2, #30
	ORREQ	r5, r5, #2	;   only 2 needed...?
	CMP	r2, #31
	ORREQ	r5, r5, #0x1C
	CMP	r2, #27
	CMPNE	r2, #24
	CMPNE	r2, #19
	ORREQ	r5, r5, #0x08
	MOV	r3, #1
	MOV	r3, r3, LSL r2
	MOV	r2, #0
	MOV	r4, #0
	MOV	r1, r1, LSR #5
	AND	r1, r1, #3
	CMP	r1, #1
	MOVEQ	r2, r3
	CMP	r1, #2
	MOVEQ	r4, r3
	BIC	r7, r7, r2
	ORR	r7, r7, r4
	EOR	r7, r7, r3
	MOV	pc, lr

tickquery
	AND	r2, r10, #0x1F
	MOV	r3, #1
	MOV	r3, r3, LSL r2
	TST	r7, r3
	MOVNE	r0, #1
	MOVEQ	r0, #0
	LDMFD	sp!, {pc}

prestoregap
	=	"Run "

; this text is overwritten with indicies into the command table (1 per letter)
AlphaIndex
	=	10, "Greetings from The Mandala Centre.", 10
	=	"Please feel free place any additional commands in the space provided"
	ALIGN

	; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;   Okay, I guess we really need some comments here to know what the silly characters mean.
	;   They are something like the following (some types aren't used or possible even available
	;   in ForZap ...).
	;
	;     com_command    (|) - normal
	;     com_dontcolour (°) - don't colour? (seems to be)
	;     com_directive  («) - directive - always coloured as a directive (unnecessary?)
	;     com_jrfscript  (}) - directive - only coloured if preceeded by #
	;   # starting the command means case sensitive.
	;
	;   - sja
	DCD	0x2A2A0A2E

TableHere
	=	"AUTOINDENT ",			com_command
	=	"AUTOSOFTWRAP ",		com_command
	=	"ANYCOMPILE ",			com_command
	=	"#ASSEMBLE ",			com_command
	=	"AUTOSAVE ",			com_command
	=	"ADDLFSEL ",			com_command
	=	"ADDLF ",			com_command
	=	"ALLFILES ",			com_command
	=	"ALLWINDOWS ",			com_command
	=	"ASYOUTYPE ",			com_command
	=	"ALLMODES ",			com_command
	=	"ALTERSEL ",			com_command
	=	"#ADJUST ",			com_command
	=	"#ALT ",			com_command
	=	"ASM_FLAGSTOGGLE ",		com_command
	=	"ADA_FLAGSTOGGLE ",		com_command
	=	"#AND ",			com_directive
	=	"#ADDRESS ",			com_command
	=	"BLOCKID ",			com_command
	=	"#BASEMAP ",			com_command
	=	"#BASIC ",			com_command
	=	"BEAUTIFY ",			com_command
	=	"#BEEP ",			com_command
	=	"BINDTOKEY ",			com_command
	=	"BITMAPFONT ",			com_command
	=	"BITMAPLIST ",			com_command
	=	"BLOCKSTAR ",			com_command
	=	"BW ",				com_command
	=	"BASEMAPN ",			com_command
	=	"BASEMAPLIST ",			com_command
	=	"BREAK ",			com_command
	=	"BUTTONS ",			com_command
	=	"BUTTONS_MOVE ",		com_command
	=	"BUTTONS_CLOSE ",		com_command
	=	"BUTTONS_CHANGE ",		com_command
	=	"BUTTONS_FLAGSTOGGLE ",		com_command
	=	"BUTTONS_START ",		com_command
	=	"BASIC_FLAGSTOGGLE ",		com_command
	=	"BASIC_REMARKSEL ",		com_command
	=	"BASIC_REMARK ",		com_command
	=	"BASIC_UNREMARKSEL ",		com_command
	=	"BASIC_UNREMARK ",		com_command
	=	"BASIC_TWRUN ",			com_command
	=	"BRACKETSEL ",			com_command
	=	"BRACKETCURSOR ",		com_command
	=	"BASM_LABELLIST ",		com_command
	=	"BASM_MULTIPLE ",		com_command
	=	"BASM_NUMBERLABEL ",		com_command
	=	"BASM_INSERTPREFIX ",		com_command
	=	"BASIC_CHECKBUF ",		com_command
	=	"BYTE_FLAGSTOGGLE ",		com_command
	=	"BYTE_GROUPSIZE ",		com_command
	=	"BYTE_CONTROLREPLACE ",		com_command
	=	"CLEARSEL ",			com_command
	=	"#CHAR ",			com_command
	=	"#CANCEL ",			com_command
	=	"#CC ",				com_command
	=	"#CLI ",			com_command
	=	"CHAROFF ",			com_command
	=	"CHAROFFSTR ",			com_command
	=	"CLOSEOTHER ",			com_command
	=	"CLOSEPRINTER ",		com_command
	=	"CLOSETBTW ",			com_command
	=	"CLOSEWINDOW ",			com_command
	=	"COLOURLIST ",			com_command
	=	"COLUMNTAB ",			com_command
	=	"#COMMAND ",			com_command
	=	"#COMPILE ",			com_command
	=	"#COPY ",			com_command
	=	"COPYSEL ",			com_command
	=	"COREDUMP ",			com_command
	=	"COUNTMATCHES ",		com_command
	=	"CREATEFILE ",			com_command
	=	"CRIGHT ",			com_command
	=	"CDOWN ",			com_command
	=	"CLEFT",			com_command
	=	"CLONEBASE ",			com_command
	=	"CLONEBOX ",			com_command
	=	"CLONECREATE ",			com_command
	=	"CLONEDELETE ",			com_command
	=	"CLONEHIDE ",			com_command
	=	"#CUP ",			com_command
	=	"CURSORMENU ",			com_command
	=	"#CUT ",			com_command
	=	"CSV_FLAGSTOGGLE ",		com_command
	=	"CODE_FLAGSTOGGLE ",		com_command
	=	"CODE_DISASMTOGGLE ",		com_command
	=	"CLOSEALL ",			com_command
	=	"CLOSEFILE ",			com_command
	=	"CONFINEHORIZONTALLY ",		com_command
	=	"CONFINEVERTICALLY ",		com_command
	=	"COLONSEPARATOR ",		com_command
	=	"CLEARGC ",			com_command
	=	"COMMANDIB ",			com_command
	=	"COMMANDSEL ",			com_command
	=	"CHARSTR ",			com_command
	=	"#CTRL ",			com_command
	=	"#CLOSELIST ",			com_command
	=	"#CASE ",			com_command
	=	"CWHEN ",			com_command
	=	"#CURSOR ",			com_command
	=	"CURSORCOLUMN ",		com_command
	=	"#CONTINUE ",			com_command
	=	"DEFAULTMAP ",			com_command
	=	"#DATE ",			com_command
	=	"DDEFIND ",			com_command
	=	"DECANDSAVE ",			com_command
	=	"DECVERSION ",			com_command
	=	"DEFBLOCK ",			com_command
	=	"#DELETE ",			com_command
	=	"DELETENEXT ",			com_command
	=	"DELLINE ",			com_command
	=	"DELTOEND ",			com_command
	=	"DELTOSTART ",			com_command
	=	"DELWORDLEFT ",			com_command
	=	"DELWORDRIGHT ",		com_command
	=	"DELWORDSTART ",		com_command
	=	"DELWORDEND ",			com_command
	=	"DISCARDWINDOW ",		com_command
	=	"DISCARDFILE ",			com_command
	=	"DELETENEXTNOCOPY ",		com_command
	=	"#DOWN ",			com_command
	=	"DOUBLEWORD_CONTROLREPLACE ",	com_command
	=	"DOUBLEWORD_FLAGSTOGGLE ",	com_command
	=	"DOUBLEWORD_GROUPSIZE ",	com_command
	=	"DS_ADRL ",			com_command
	=	"DS_ADRX ",			com_command
	=	"DS_ADD ",			com_command
	=	"DS_SUB ",			com_command
	=	"DS_RSB ",			com_command
	=	"DS_AND ",			com_command
	=	"DS_OR ",			com_command
	=	"DS_EOR ",			com_command
	=	"DS_SWITONAME ",		com_command
	=	"DS_SWITONUMBER ",		com_command
	=	"DZAPBOX ",			com_command
	=	"DUMPFILE ",			com_command
	=	"DESC_FLAGSTOGGLE ",		com_command
	=	"DISCARDALL ",			com_command
	=	"#DEFAULT ",			com_command
	=	"DROPMARK ",			com_command
	=	"DISCARDTASKWINDOWS ",		com_command
	=	"DISCARDTHROWBACKS ",		com_command
	=	"EVAL ",			com_command
	=	"#EXECUTE ",			com_command
	=	"#EMACS ",			com_command
	=	"#ESCAPE ",			com_command
	=	"EVALH ",			com_command
	=	"EMAIL_ADDQUOTINGCHR ",		com_command
	=	"EMAIL_ADDSIGNATURE ",		com_command
	=	"EMAIL_ADDTAGLINE ",		com_command
	=	"EMAIL_CHANGEQUOTING ",		com_command
	=	"EMAIL_DECQUOTING ",		com_command
	=	"EMAIL_EDITSIGFILES ",		com_command
	=	"EMAIL_EDITTAGLINES ",		com_command
	=	"EMAIL_FIXSIG ",		com_command
	=	"EMAIL_DECODEQP ",		com_command
	=	"EMAIL_ENCODEQP ",		com_command
	=	"EMAIL_ENCODE8BIT ",		com_command
	=	"EMAIL_FLAGSTOGGLE ",		com_command
	=	"EMAIL_DECODEQPSEL ",		com_command
	=	"EMAIL_ENCODEQPSEL ",		com_command
	=	"EMAIL_FLAGSTOGGLE ",		com_command
	=	"EMAIL_NEXTSIGNATURE ",		com_command
	=	"EMAIL_MOREFLAGSTOGGLE ",	com_command
	=	"EMAIL_INCQUOTING ",		com_command
	=	"EMAIL_REMQUOTINGCHR ",		com_command
	=	"EMAIL_ROTENCODE ",		com_command
	=	"EMAIL_ROTENCODECUR ",		com_command
	=	"EMAIL_SENDURL ",		com_command
	=	"EMAIL_SETFORMATMOD ",		com_command
	=	"EMAIL_SETQUOTING ",		com_command
	=	"EMAIL_SNIP ",			com_command
	=	"EMAIL_SPLITFORINSERT ",	com_command
	=	"EMAIL_STAMP ",			com_command
	=	"EMAIL_STRIPSPCS ",		com_command
	=	"EMAIL_DATE ",			com_command
	=	"EMAIL_BUTTONS ",		com_command
	=	"EMAIL_RETURNRECEIPTTO ",	com_command
	=	"EMAIL_ANTISPAM ",		com_command
	=	"EMAIL_ADDHEADERLINE ",		com_command
	=	"EMAIL_EXECSCRIPT ",		com_command
	=	"EMAIL_HASSIGNATURE ",		com_command
	=	"EMAIL_HASHEADERLINE",		com_command
	=	"EMAIL_DELHEADERLINE",		com_command
	=	"#Else ",			com_jrfscript
	=	"#ELSE ",			com_command
	=	"#EndIf ",			com_jrfscript
	=	"#ENDIF ",			com_command
	=	"EDITBYTE ",			com_command
	=	"EDITHALFWORD ",		com_command
	=	"EDITWORD ",			com_command
	=	"#EOF ",			com_command
	=	"#ENDCASE ",			com_command
	=	"#EOR ",			com_directive
	=	"#ENDWHILE ",			com_command
	=	"EVENT ",			com_command
	=	"FINDFILE ",			com_command
	=	"FFLAGS_TOGGLE ",		com_command
	=	"FILTERSEL ",			com_command
	=	"FILTERBUF ",			com_command
	=	"FINDFILEREADONLY ",		com_command
	=	"FINDID ",			com_command
	=	"FONTLIST ",			com_command
	=	"FONTSIZE ",			com_command
	=	"FONTTYPE ",			com_command
	=	"FORMATTEXT ",			com_command
	=	"FASTUNDO ",			com_command
	=	"FULLUNDO ",			com_command
	=	"FORZAP_FLAGSTOGGLE ",		com_command
	=	"FREECLICK ",			com_command
	=	"FONTASPECT ",			com_command
	=	"FINDFUNCTION ",		com_command
	=	"FINDSEL ",			com_command
	=	"FINDFILECURSOR ",		com_command
	=	"FORMATINDENTED ",		com_command
	=	"FNHELP ",			com_command
	=	"FNHELPSEARCH ",		com_command
	=	"#FILENAME ",			com_command
	=	"#FALSE ",			com_command
	=	"GETVAR ",			com_command
	=	"GETDYNAMICAREA ",		com_command
	=	"GETMODULE ",			com_command
	=	"GETWORKSPACE ",		com_command
	=	"#GOTO ",			com_command
	=	"GOTOLINE ",			com_command
	=	"GOTOLINEP ",			com_command
	=	"#GREYED ",			com_command
	=	"GOTOADDRESS ",			com_command
	=	"HTMLTAGPAIR ",			com_command
	=	"HALFWORD_CONTROLREPLACE ",	com_command
	=	"HALFWORD_FLAGSTOGGLE ",	com_command
	=	"HALFWORD_GROUPSIZE ",		com_command
	=	"#HELP ",			com_command
	=	"HELPCOM ",			com_command
	=	"HELPFN ",			com_command
	=	"HELPKEY ",			com_command
	=	"HELPVAR ",			com_command
	=	"HEXASCII ",			com_command
	=	"HTMLENTITY ",			com_command
	=	"HTMLHEADING ",			com_command
	=	"HTMLIMAGE ",			com_command
	=	"HTMLINSERT ",			com_command
	=	"HTMLLINK ",			com_command
	=	"HTMLLIST ",			com_command
	=	"HELPTOPIC ",			com_command
	=	"HELPCONTEXT ",			com_command
	=	"HELPSEARCH ",			com_command
	=	"HELPSEARCHCONTEXT ",		com_command
	=	"HTMLRAWENTITY ",		com_command
	=	"HTMLREMARK ",			com_command
	=	"HTMLSINGLETAG ",		com_command
	=	"HTMLDEFITEM ",			com_command
	=	"HTMLTEMPLATE ",		com_command
	=	"HTMLFLAGSTOGGLE ",		com_command
	=	"HTMLSTRIPTAGS ",		com_command
	=	"HTMLINSERTIF ",		com_command
	=	"HTMLADDALTTEXT ",		com_command
	=	"HTMLSTRIPSCRIPT ",		com_command
	=	"HTMLSTRIPCOMMENTS ",		com_command
	=	"HTMLSTRIPENTITIES ",		com_command
	=	"#HELP ",			com_command
	=	"ICONISE ",			com_command
	=	"#IF ",				com_command
	=	"#IfModeN ",			com_jrfscript
	=	"#IfMode ",			com_jrfscript
	=	"#IfText ",			com_jrfscript
	=	"INCANDSAVE ",			com_command
	=	"INCVERSION ",			com_command
	=	"#INDENT ",			com_command
	=	"INDENTBY ",			com_command
	=	"#INDIRECT ",			com_command
	=	"#INFOBOX ",			com_command
	=	"#INSERT ",			com_command
	=	"INSERTDATE ",			com_command
	=	"INSERTGS ",			com_command
	=	"INSERTBLOCKGS ",		com_command
	=	"INSERTTIME ",			com_command
	=	"INFINITEWRAP ",		com_command
	=	"INSERTBLOCK ",			com_command
	=	"ISPELL ",			com_command
	=	"#IN ",				com_command
	=	"INSERTFILE ",			com_command
	=	"IMPRESSIONSPELL_SELECTION ",	com_command
	=	"IMPRESSIONSPELL_BUF ",		com_command
	=	"IMPRESSIONSPELL_PREV ",	com_command
	=	"IMPRESSIONSPELL_NEXT ",	com_command
	=	"IMPRESSIONSPELL_SELBUF ",	com_command
	=	"IMPRESSIONSPELL_DELDIC ",	com_command
	=	"IMPRESSIONSPELL_USEDIC ",	com_command
	=	"IMPRESSIONSPELL_ADDWORD ",	com_command
	=	"IMPRESSIONSPELL_DELWORD ",	com_command
	=	"IMPRESSIONSPELL_LOADDIC ",	com_command
	=	"IMPRESSIONSPELL_SAVEDIC ",	com_command
	=	"IMPRESSIONSPELL_CURRENT ",	com_command
	=	"IMPRESSIONSPELL_OFFSETS ",	com_command
	=	"INSTALLICON ",			com_command
	=	"INSERTBLANK ",			com_command
	=	"INSERTPIPE ",			com_command
	=	"INSERTPIPEDSEL ",		com_command
	=	"INSERTPIPEDBUF ",		com_command
	=	"INFORMCOMPILE ",		com_command
	=	"INFORMLISTFNS ",		com_command
	=	"INSELECTION ",			com_command
	=	"JOINLINE ",			com_command
	=	"JRF_ALTERSEL ",		com_command
	=	"JRF_CLEARSEL ",		com_command
	=	"JRF_EACHLINE ",		com_command
	=	"JRF_IF ",			com_command
	=	"JRF_PATCHTAB ",		com_command
	=	"JRF_SCRIPTADDR ",		com_command
	=	"JRF_MENUFORMODE ",		com_command
	=	"KEEPREGION ",			com_command
	=	"KEYMAPN ",			com_command
	=	"#KEYMAP ",			com_command
	=	"KILLFILES ",			com_command
	=	"LASTMARK ",			com_command
	=	"LASTMATCH ",			com_command
	=	"LASTSECTOR ",			com_command
	=	"LASTTRACK ",			com_command
	=	"LASTCYLINDER ",		com_command
	=	"#LEARN ",			com_command
	=	"#LEFT ",			com_command
	=	"LINEEDIT ",			com_command
	=	"LINEENDS ",			com_command
	=	"LINENOS ",			com_command
	=	"LINESELECT ",			com_command
	=	"LINESPACING ",			com_command
	=	"LINEWRAP ",			com_command
	=	"LISTFNS ",			com_command
	=	"LISTLABELS ",			com_command
	=	"LOADLIST ",			com_command
	=	"LOADMODULE ",			com_command
	=	"LOSECARET ",			com_command
	=	"LOWERCASECURSOR ",		com_command
	=	"LOWERCASE ",			com_command
	=	"LATEX_QUOTE ",			com_command
	=	"LATEX_ENVIRONMENT ",		com_command
	=	"LATEX_NEXTSECTION ",		com_command
	=	"LATEX_NEXTSUBSECTION ",	com_command
	=	"LATEX_NEXTCHAPTER ",		com_command
	=	"LATEX_PREVSECTION ",		com_command
	=	"LATEX_PREVSUBSECTION ",	com_command
	=	"LATEX_PREVCHAPTER ",		com_command
	=	"LATEX_FLAGSTOGGLE ",		com_command
	=	"LOCALPASTE ",			com_command
	=	"#LOCAL ",			com_command
	=	"#LINE ",			com_command
	=	"LINEP ",			com_command
	=	"MISCOPS ",			com_command
	=	"#MAKE ",			com_command
	=	"MAKEDEFAULT ",			com_command
	=	"#MARGIN ",			com_command
	=	"#MATCH ",			com_command
	=	"MINIMENU ",			com_command
	=	"MINIMISEMEMORY ",		com_command
	=	"MJE_CLOSECOMMENT ",		com_command
	=	"MJE_COMMENT ",			com_command
	=	"MJE_COMMENTLINE ",		com_command
	=	"MJE_CSTRINGS ",		com_command
	=	"MJE_ENDIF ",			com_command
	=	"MJE_FINDHEADER ",		com_command
	=	"MJE_GENERATEHEADER ",		com_command
	=	"MJE_PAUSE ",			com_command	;   ?
	=	"MJE_INDENT ",			com_command	;   ?
	=	"MJE_COMMENTSET ",		com_command	;   ?
	=	"MJE_IF ",			com_command
	=	"MJE_LASTFUNC ",		com_command
	=	"MJE_NEXTFUNC ",		com_command
	=	"MJE_SETINDENTCOMMENT ",	com_command
	=	"MJE_SHOWPREPROSET ",		com_command
	=	"MJE_INDENTCOMMENTSET ",	com_command
	=	"MJE_OPENCOMMENT ",		com_command
	=	"MJE_SMARTINDENTING ",		com_command
	=	"MJE_SWAPTOHEADER ",		com_command
	=	"MJE_UNCOMMENTLINE ",		com_command
	=	"MJE_REINDENT ",		com_command
	=	"MENUFROMFILE ",		com_command
	=	"MODELIST ",			com_command
	=	"MODEMENU ",			com_command
	=	"MODBRK ",			com_command
	=	"#MODE ",			com_command
	=	"MODEN ",			com_command
	=	"MODENMENU ",			com_command
	=	"MOVESEL ",			com_command
	=	"MULTICOMMAND ",		com_command
	=	"MZAPBOX ",			com_command
	=	"MESSAGES_FLAGSTOGGLE ",	com_command
	=	"MOUSETRAP ",			com_command
	=	"MOVEBOX ",			com_command
	=	"#MENU ",			com_command
	=	"MAN_SEARCH ",			com_command
	=	"MAN_REGULAR ",			com_command
	=	"MAN_BOLD ",			com_command
	=	"MAN_UNDERLINE ",		com_command
	=	"#MODIFIED ",			com_command
	=	"MODIFIERS ",			com_command
	=	"MODET ",			com_command
	=	"MENUOPEN ",			com_command
	=	"MAKEFILE_FLAGSTOGGLE ",	com_command
	=	"NEWTYPE ",			com_command
	=	"NEWVIEW ",			com_command
	=	"NEWVIEWLIST ",			com_command
	=	"NEXTMARK ",			com_command
	=	"NEXTMATCH ",			com_command
	=	"NEXTSECTOR ",			com_command
	=	"NEXTTRACK ",			com_command
	=	"NEXTCYLINDER ",		com_command
	=	"NONSTANDARD ",			com_command
	=	"NEXTFILE ",			com_command
	=	"NEXTWINDOW ",			com_command
	=	"NEXTVIEW ",			com_command
	=	"#NULL ",			com_command
	=	"NEWMAIL_FLAGSTOGGLE ",		com_command
	=	"NEWMAIL_LISTSENDERS ",		com_command
	=	"NEWFILE ",			com_command
	=	"NOTIFYUSER ",			com_command
	=	"#NOT ",			com_directive
	=	"OPENCH ",			com_command
	=	"OPENMAKE ",			com_command
	=	"OPENOTHER ",			com_command
	=	"OPENPRINTER ",			com_command
	=	"OPENREF ",			com_command
	=	"#OSCLI ",			com_command
	=	"OUTDENT ",			com_command
	=	"OBEY_FLAGSTOGGLE ",		com_command
	=	"OPENPARENT ",			com_command
	=	"OUTLINEFONT ",			com_command
	=	"OPENFILE ",			com_command
	=	"#OR ",				com_directive
	=	"OWNEDBY ",			com_command
	=	"PRINTFILE ",			com_command
	=	"#PASTE ",			com_command
	=	"#PIPE ",			com_command
	=	"PIPESEL ",			com_command
	=	"PIPEBUF ",			com_command
	=	"#PASSTHROUGH ",		com_command
	=	"PERL_FLAGSTOGGLE ",		com_command
	=	"PERL_SETINDENT ",		com_command
	=	"PERL_SETDELAY ",		com_command
	=	"PMS_FLAGSTOGGLE",		com_command
	=	"PMS_SETDELAY",			com_command
	=	"PMS_SETINDENT",		com_command
	=	"POWERSEARCH ",			com_command
	=	"PS_FLAGSTOGGLE ",		com_command
	=	"PYTHON_FLAGSTOGGLE ",		com_command
	=	"PYTHON_SETINDENT ",		com_command
	=	"PYTHON_SETDELAY ",		com_command
	=	"QUICKPRINT ",			com_command
	=	"QUICKSAVE ",			com_command
	=	"#QUIT ",			com_command
	=	"#QUOTE ",			com_command
	=	"READONLY ",			com_command
	=	"#REDO ",			com_command
	=	"RELOADKEYS ",			com_command
	=	"REMOVELIST ",			com_command
	=	"#RENUMBER ",			com_command
	=	"#REPLACE ",			com_command
	=	"#RETURN ",			com_command
	=	"RETURNCHAR ",			com_command
	=	"RETURNNOINDENT ",		com_command
	=	"#REVERT ",			com_command
	=	"#RIGHT ",			com_command
	=	"#RUN ",			com_command
	=	"#REM ",			com_command
	=	"RUNANDQUIT ",			com_command
	=	"REMOVELFSEL ",			com_command
	=	"REMOVELF ",			com_command
	=	"RUNSCRIPT ",			com_command	;
	=	"REPEAT ",			com_command	;
	=	"RUNAPP ",			com_command	;
	=	"SWAPCASE ",			com_command
	=	"#SAVE ",			com_command
	=	"SAVEANDRUN ",			com_command
	=	"SAVEFILE ",			com_command
	=	"SAVEOPTIONS ",			com_command
	=	"SAVESEL ",			com_command
	=	"SEARCHBACK ",			com_command
	=	"SEARCHBUF ",			com_command
	=	"SEARCHCUR ",			com_command
	=	"SEARCHFORWARD ",		com_command
	=	"SELECTBUFFER ",		com_command
	=	"SELREGION ",			com_command
	=	"SELANYWHERE ",			com_command
	=	"SETFILETYPE ",			com_command
	=	"#SOF ",			com_command
	=	"#SELECT ",			com_command
	=	"SELHERE ",			com_command
	=	"SELSIZE ",			com_command
	=	"SETNAME ",			com_command
	=	"SETNAMEINCORE ",		com_command
	=	"SETWIDTH ",			com_command
	=	"SPLITLINE ",			com_command
	=	"STARCOM ",			com_command
	=	"STARTADDR ",			com_command
	=	"STARTOP ",			com_command
	=	"STOPOP ",			com_command
	=	"STILLUP ",			com_command
	=	"STILLDOWN ",			com_command
	=	"STARTLINE ",			com_command
	=	"STRIPSPACES ",			com_command
	=	"SLEFT ",			com_command
	=	"SRIGHT ",			com_command
	=	"#SUP ",			com_command
	=	"SDOWN ",			com_command
	=	"#SUSPEND ",			com_command
	=	"SCDOWN ",			com_command
	=	"SCLEFT ",			com_command
	=	"SCRIGHT ",			com_command
	=	"SCUP ",			com_command
	=	"SWAPCHARS ",			com_command
	=	"SWAPWINDOW ",			com_command
	=	"SWITCHTAB ",			com_command
	=	"SAVEALL ",			com_command
	=	"#ScriptEnd ",			com_jrfscript
	=	"#Stop ",			com_jrfscript
	=	"SOFTWRAP ",			com_command
	=	"SWAPCRLF ",			com_command
	=	"SENDSEL ",			com_command
	=	"#SPELL ",			com_command
	=	"#SHIFT ",			com_command
	=	"SENDURL ",			com_command
	=	"SAVEANDCLOSEALL ",		com_command
	=	"SAVEANDDISCARDALL ",		com_command
	=	"SAVELIST ",			com_command
	=	"SETMARGINWIDTH ",		com_command
	=	"SWAPCASECURSOR ",		com_command
	=	"SPELL_ASYOUTYPE ",		com_command
	=	"SPELL_CLOSE ",			com_command
	=	"SPELL_INFOBOX ",		com_command
	=	"SPELL_REPLACE ",		com_command
	=	"SPELL_SAVEBOX ",		com_command
	=	"STRONG_FLAGSTOGGLE ",		com_command
	=	"SCHEME_FLAGSTOGGLE ",		com_command
	=	"STRIPCTRLCODES ",		com_command
	=	"SAVEKEEPSTAMP ",		com_command
	=	"SELECTWORD ",			com_command
	=	"SELECTUNTIL ",			com_command
	=	"SELECTWHILE ",			com_command
	=	"SENDURLSTRING ",		com_command
	=	"SAVELIST ",			com_command
	=	"SELSTR ",			com_command
	=	"SELECTLINE ",			com_command
	=	"#SET ",			com_command
	=	"#SELECTION ",			com_command
	=	"TOFRONT ",			com_command
	=	"#TAB ",			com_command
	=	"TABCHAR ",			com_command
	=	"TABDISPLAY ",			com_command
	=	"TABMODE ",			com_command
	=	"TABSASSPACES ",		com_command
	=	"#TASKWINDOW ",			com_command
	=	"THROWBACK_FLAGSTOGGLE ",	com_command
	=	"TLDBDIR ",			com_command
	=	"TLDBFILE ",			com_command
	=	"TLDBHEAD ",			com_command
	=	"#TICKED ",			com_command
	=	"#TRUE ",			com_command
	=	"TOBACK ",			com_command
	=	"TOGGLEHEX ",			com_command
	=	"TOGGLEINSERT ",		com_command
	=	"TOGGLEMARK ",			com_command
	=	"TOGGLEUNDO ",			com_command
	=	"TOGGLEWIND ",			com_command
	=	"TOFRONTLIST ",			com_command
	=	"TYPELIST ",			com_command
	=	"TMT_IF ",			com_command
	=	"TOICON ",			com_command
	=	"TOTALSEL ",			com_command
	=	"TASKWINDOW_CONTROL ",		com_command
	=	"TASKWINDOW_FLAGSTOGGLE ",	com_command
	=	"TEXTURE_FLAGSTOGGLE ",		com_command
	=	"UNIVERSALARG ",		com_command
	=	"UNSPACE ",			com_command
	=	"UPPERCASECURSOR ",		com_command
	=	"UPPERCASE ",			com_command
	=	"UPDATESTATUS ",		com_command
	=	"UPDATEWINDOW ",		com_command
	=	"UNTABIFYSEL ",			com_command
	=	"#UNTABIFY ",			com_command
	=	"UEVAL ",			com_command
	=	"#UNTIL ",			com_command
	=	"#UP ",				com_command
	=	"#UNSET ",			com_command
	=	"WIMPTASK ",			com_command
	=	"#WC ",				com_command
	=	"WCSEL ",			com_command
	=	"WFLAGS_ALTER ",		com_command
	=	"WFLAGS_TOGGLE ",		com_command
	=	"WFORMAT_ALTER ",		com_command
	=	"WFORMAT_TOGGLE ",		com_command
	=	"WINFO_ALTER ",			com_command
	=	"WINFO_TOGGLE ",		com_command
	=	"#WHILE ",			com_command
	=	"WINDOWN ",			com_command
	=	"WINLEFT ",			com_command
	=	"WINRIGHT ",			com_command
	=	"WINUP ",			com_command
	=	"WINDOWWRAP ",			com_command
	=	"#WORDWORKS ",			com_command
	=	"#WORDWRAP ",			com_command
	=	"WOSCLI ",			com_command
	=	"WRAPWIDTH ",			com_command
	=	"WRITEFILE ",			com_command
	=	"WRITEBUFFER ",			com_command
	=	"WORD_FLAGSTOGGLE ",		com_command
	=	"WORD_GROUPSIZE ",		com_command
	=	"WORDWORKS_SELECTION ",		com_command
	=	"WORD_CONTROLREPLACE ",		com_command
	=	"#WHEN ",			com_command
	=	"WORDSTR ",			com_command
	=	"WORDOFFSTR ",			com_command
	=	"#WINDOW ",			com_command
	=	"#YANK ",			com_command
	=	"ZAPBUTTONS ",			com_command
	=	"**", 10

	END
