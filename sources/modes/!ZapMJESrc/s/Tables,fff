; **************************************************************************
; *                                                                        *
; *  Project: ZapMJE                Purpose: Extensions for Zap            *
; *  Module: Tables.s               Purpose: Various table definitions     *
; *  © 1997 Martin Ebourne          Last update: 04-02-97                  *
; *                                                                        *
; **************************************************************************

;  Things to do: (in approx. order)


		GET	h.Main
		GET	h.Assembler
		GET	h.CMode
		GET	h.Commands
		GET	h.Common
		GET	h.C_Redraw
		GET	h.Header

		AREA	|Asm$$data|,DATA


;  Table of all modes

		EXPORT	modestable
modestable	DCD	entrytable$C
		DCD	infotable$C

		DCD	entrytable$CPP
		DCD	infotable$CPP

		DCD	entrytable$J
		DCD	infotable$J

		DCD	entrytable$ASM
		DCD	infotable$ASM

		DCD	entrytable$P
		DCD	infotable$P

		EXPORT	nummodes
nummodes	EQU	({PC}-modestable)/8


;  Mode titles

		EXPORT	modetitle$C
modetitle$C	=	"C",0
		EXPORT	modetitle$CPP
modetitle$CPP	=	"C++",0
		EXPORT	modetitle$J
modetitle$J	=	"Java",0
		EXPORT	modetitle$ASM
modetitle$ASM	=	"Assembler",0
		EXPORT	modetitle$P
modetitle$P	=	"Pascal",0



;  Entry tables

;  C

		ALIGN
entrytable$C	DCD	entrytable$C		;  Table offset from start of module
		DCD	modetitle$C		;  Title of mode
		DCD	authortext		;  Author's name
		DCD	0			;  Base mode number (text)
		DCD	8 + 1<<10 + 1<<12	;  This mode number (uses mode data block)
		DCD	service$C		;  Service code
		DCD	0	;  menu		;  Menu to be attached to 'Mode' menu
		DCD	etableend$C-entrytable$C ;  Total length of entry table
		DCD	postload$C		;  Called after file is loaded
		DCD	presave			;  Called before file is saved
		DCD	0	;  loading	;  Called when file loaded into window
		DCD	start$C			;  Called when window enters this mode
		DCD	end$C			;  Called when window leaves this mode
		DCD	0	;  width	;  Called when window (re)created to find width
		DCD	0	;  linecol	;  Column offset to file offset
		DCD	0	;  lineoff	;  File offset to column offset
		DCD	0	;  clnlog	;  Logical line to file offset/physical line
		DCD	clnphy$C		;  Physical line to file offset
		DCD	0	;  clnoff	;  File offset to physical/logical line & offset
		DCD	nextline$C		;  Return first line shiftable with no redraw
		DCD	0	;  minus	;  Move left one char
		DCD	0	;  plus		;  Move right one char
		DCD	0	;  sminus	;  Move left one word
		DCD	0	;  splus	;  Move right one word
		DCD	0	;  cminus	;  Move to start of line
		DCD	0	;  cplus	;  Move to end of line
		DCD	redrawline		;  Redraw single line of display
		DCD	0	;  redrawlnum	;  Check if physical line is start of logical
		DCD	char			;  Insert character(s)
		DCD	0	;  delete	;  Delete character(s)
		DCD	0	;  tab		;  Perform tab(s)
		DCD	return			;  Insert return(s)
		DCD	0	;  renumber	;  Perform renumber
		DCD	0	;  saveandrun	;  Perform save, run & quit
		DCD	0	;  linestart	;  Returns pos of first character of line
		DCD	0	;  lineend	;  Returns pos of last character of line
		DCD	0	;  linenext	;  Returns pos of actual line end (eg. at &0A)
		DCD	0	;  lineprev	;  Returns pos of actual line start (for BASIC)
		DCD	0	;  copy		;  Called when copying with copy key
		DCD	0	;  joinline	;  Called when joinline pressed
		DCD	0	;  splitline	;  Called when splitline pressed
		DCD	0	;  aligncaret	;  Align caret (& reset counters)
		DCD	command			;  Called when Zap_Command issued
		DCD	compile			;  Called when compile pressed (save and run)
		DCD	0	;  formattext	;  Called when formattext pressed
		DCD	run			;  Called when run pressed
		DCD	0	;  runandquit	;  Called when run and quit pressed
		DCD	0	;  basic	;  Called when enter BASIC pressed
		DCD	0	;  search	;  Called to validate search
		DCD	0	;  replace	;  Called to replace area
		DCD	0	;  selection	;  Check selection
		DCD	0	;  click	;  Called when user clicks on window
		DCD	message			;  Called when unrecognised messages received
		DCD	0	;  setwidth	;  Called when user changes width of window
		DCD	funcbrowser$C		;  Create function browser
		DCD	prevline$C		;  Find start of update region
		DCD	0			;  Open window
		DCD	interrogate		;  Answer Zap's questions...
		DCD	0	; returnword
		DCD	0	; help
		DCD	stripspaces$C
etableend$C


;  C++

		ALIGN
entrytable$CPP	DCD	entrytable$CPP		;  Table offset from start of module
		DCD	modetitle$CPP		;  Title of mode
		DCD	authortext		;  Author's name
		DCD	0			;  Base mode number (text)
		DCD	9 + 1<<10 + 1<<12	;  This mode number (uses mode data block)
		DCD	service$CPP		;  Service code
		DCD	0	;  menu		;  Menu to be attached to 'Mode' menu
		DCD	etableend$CPP-entrytable$CPP ;  Total length of entry table
		DCD	0	;  postload	;  Called after file is loaded
		DCD	presave			;  Called before file is saved
		DCD	0	;  loading	;  Called when file loaded into window
		DCD	start$CPP		;  Called when window enters this mode
		DCD	end$C			;  Called when window leaves this mode
		DCD	0	;  width	;  Called when window (re)created to find width
		DCD	0	;  linecol	;  Column offset to file offset
		DCD	0	;  lineoff	;  File offset to column offset
		DCD	0	;  clnlog	;  Logical line to file offset/physical line
		DCD	clnphy$C		;  Physical line to file offset
		DCD	0	;  clnoff	;  File offset to physical/logical line & offset
		DCD	nextline$C		;  Return first line shiftable with no redraw
		DCD	0	;  minus	;  Move left one char
		DCD	0	;  plus		;  Move right one char
		DCD	0	;  sminus	;  Move left one word
		DCD	0	;  splus	;  Move right one word
		DCD	0	;  cminus	;  Move to start of line
		DCD	0	;  cplus	;  Move to end of line
		DCD	redrawline		;  Redraw single line of display
		DCD	0	;  redrawlnum	;  Check if physical line is start of logical
		DCD	char			;  Insert character(s)
		DCD	0	;  delete	;  Delete character(s)
		DCD	0	;  tab		;  Perform tab(s)
		DCD	return			;  Insert return(s)
		DCD	0	;  renumber	;  Perform renumber
		DCD	0	;  saveandrun	;  Perform save, run & quit
		DCD	0	;  linestart	;  Returns pos of first character of line
		DCD	0	;  lineend	;  Returns pos of last character of line
		DCD	0	;  linenext	;  Returns pos of actual line end (eg. at &0A)
		DCD	0	;  lineprev	;  Returns pos of actual line start (for BASIC)
		DCD	0	;  copy		;  Called when copying with copy key
		DCD	0	;  joinline	;  Called when joinline pressed
		DCD	0	;  splitline	;  Called when splitline pressed
		DCD	0	;  aligncaret	;  Align caret (& reset counters)
		DCD	command			;  Called when Zap_Command issued
		DCD	compile			;  Called when compile pressed (save and run)
		DCD	0	;  formattext	;  Called when formattext pressed
		DCD	run			;  Called when run pressed
		DCD	0	;  runandquit	;  Called when run and quit pressed
		DCD	0	;  basic	;  Called when enter BASIC pressed
		DCD	0	;  search	;  Called to validate search
		DCD	0	;  replace	;  Called to replace area
		DCD	0	;  selection	;  Check selection
		DCD	0	;  click	;  Called when user clicks on window
		DCD	0;message		;  Called when unrecognised messages received
		DCD	0	;  setwidth	;  Called when user changes width of window
		DCD	funcbrowser$C		;  Create function browser
		DCD	prevline$C		;  Find start of update region
		DCD	0			;  Open window
		DCD	interrogate		;  Answer Zap's questions...
		DCD	0	; returnword
		DCD	0	; help
		DCD	stripspaces$C
etableend$CPP


;  Java

		ALIGN
entrytable$J	DCD	entrytable$J		;  Table offset from start of module
		DCD	modetitle$J		;  Title of mode
		DCD	authortext		;  Author's name
		DCD	0			;  Base mode number (text)
		DCD	10 + 1<<10 + 1<<12	;  This mode number (uses mode data block)
		DCD	service$J		;  Service code
		DCD	0	;  menu		;  Menu to be attached to 'Mode' menu
		DCD	etableend$J-entrytable$J ;  Total length of entry table
		DCD	0	;  postload	;  Called after file is loaded
		DCD	presave			;  Called before file is saved
		DCD	0	;  loading	;  Called when file loaded into window
		DCD	start$J			;  Called when window enters this mode
		DCD	end$C			;  Called when window leaves this mode
		DCD	0	;  width	;  Called when window (re)created to find width
		DCD	0	;  linecol	;  Column offset to file offset
		DCD	0	;  lineoff	;  File offset to column offset
		DCD	0	;  clnlog	;  Logical line to file offset/physical line
		DCD	clnphy$C		;  Physical line to file offset
		DCD	0	;  clnoff	;  File offset to physical/logical line & offset
		DCD	nextline$C		;  Return first line shiftable with no redraw
		DCD	0	;  minus	;  Move left one char
		DCD	0	;  plus		;  Move right one char
		DCD	0	; sminus	;  Move left one word
		DCD	0	; splus		;  Move right one word
		DCD	0	;  cminus	;  Move to start of line
		DCD	0	;  cplus	;  Move to end of line
		DCD	redrawline		;  Redraw single line of display
		DCD	0	;  redrawlnum	;  Check if physical line is start of logical
		DCD	char			;  Insert character(s)
		DCD	0	;  delete	;  Delete character(s)
		DCD	0	;  tab		;  Perform tab(s)
		DCD	return		;  Insert return(s)
		DCD	0	;  renumber	;  Perform renumber
		DCD	0	;  saveandrun	;  Perform save, run & quit
		DCD	0	;  linestart	;  Returns pos of first character of line
		DCD	0	;  lineend	;  Returns pos of last character of line
		DCD	0	;  linenext	;  Returns pos of actual line end (eg. at &0A)
		DCD	0	;  lineprev	;  Returns pos of actual line start (for BASIC)
		DCD	0	;  copy		;  Called when copying with copy key
		DCD	0	;  joinline	;  Called when joinline pressed
		DCD	0	;  splitline	;  Called when splitline pressed
		DCD	0	;  aligncaret	;  Align caret (& reset counters)
		DCD	command			;  Called when Zap_Command issued
		DCD	compile			;  Called when compile pressed (save and run)
		DCD	0	;  formattext	;  Called when formattext pressed
		DCD	run			;  Called when run pressed
		DCD	0	;  runandquit	;  Called when run and quit pressed
		DCD	0	;  basic	;  Called when enter BASIC pressed
		DCD	0	;  search	;  Called to validate search
		DCD	0	;  replace	;  Called to replace area
		DCD	0	;  selection	;  Check selection
		DCD	0	;  click	;  Called when user clicks on window
		DCD	0;message		;  Called when unrecognised messages received
		DCD	0	;  setwidth	;  Called when user changes width of window
		DCD	funcbrowser$C		;  Create function browser
		DCD	prevline$C ; 0			;  Previous line...
		DCD	0			;  Open window
		DCD	interrogate		;  Answer Zap's questions...
		DCD	0	; returnword
		DCD	0	; help
		DCD	stripspaces$C
etableend$J


;  Assembler

entrytable$ASM	DCD	entrytable$ASM		;  Table offset from start of module
		DCD	modetitle$ASM		;  Title of mode
		DCD	authortext		;  Author's name
		DCD	0			;  Base mode number (text)
		DCD	7 + 1<<10 + 1<<12	;  This mode number (uses mode data block)
		; was mode number 13... replaces soft wrap mode...
		DCD	service$ASM		;  Service code
		DCD	0	;  menu		;  Menu to be attached to 'Mode' menu
		DCD	etableend$ASM-entrytable$ASM ;  Total length of entry table
		DCD	0	;  postload	;  Called after file is loaded
		DCD	presave			;  Called before file is saved
		DCD	0	;  loading	;  Called when file loaded into window
		DCD	start$ASM		;  Called when window enters this mode
		DCD	end$ASM			;  Called when window leaves this mode
		DCD	0	;  width	;  Called when window (re)created to find width
		DCD	0	;  linecol	;  Column offset to file offset
		DCD	0	;  lineoff	;  File offset to column offset
		DCD	0	;  clnlog	;  Logical line to file offset/physical line
		DCD	clnphy$ASM		;  Physical line to file offset
		DCD	0	;  clnoff	;  File offset to physical/logical line & offset
		DCD	0	;  nextline	;  Return first line shiftable with no redraw
		DCD	0	;  minus	;  Move left one char
		DCD	0	;  plus		;  Move right one char
		DCD	0	;  sminus	;  Move left one word
		DCD	0	;  splus	;  Move right one word
		DCD	0	;  cminus	;  Move to start of line
		DCD	0	;  cplus	;  Move to end of line
		DCD	redrawline		;  Redraw single line of display
		DCD	0	;  redrawlnum	;  Check if physical line is start of logical
		DCD	0			;  Insert character(s)
		DCD	0	;  delete	;  Delete character(s)
		DCD	tab$ASM			;  Perform tab(s)
		DCD	0	;  return	;  Insert return(s)
		DCD	0	;  renumber	;  Perform renumber
		DCD	0	;  saveandrun	;  Perform save, run & quit
		DCD	0	;  linestart	;  Returns pos of first character of line
		DCD	0	;  lineend	;  Returns pos of last character of line
		DCD	0	;  linenext	;  Returns pos of actual line end (eg. at &0A)
		DCD	0	;  lineprev	;  Returns pos of actual line start (for BASIC)
		DCD	0	;  copy		;  Called when copying with copy key
		DCD	0	;  joinline	;  Called when joinline pressed
		DCD	0	;  splitline	;  Called when splitline pressed
		DCD	0	;  aligncaret	;  Align caret (& reset counters)
		DCD	command			;  Called when Zap_Command issued
		DCD	compile			;  Called when compile pressed (save and run)
		DCD	0	;  formattext	;  Called when formattext pressed
		DCD	run			;  Called when run pressed
		DCD	0	;  runandquit	;  Called when run and quit pressed
		DCD	0	;  basic	;  Called when enter BASIC pressed
		DCD	0	;  search	;  Called to validate search
		DCD	0	;  replace	;  Called to replace area
		DCD	0	;  selection	;  Check selection
		DCD	0	;  click	;  Called when user clicks on window
		DCD	0	;  message	;  Called when unrecognised messages received
		DCD	0	;  setwidth	;  Called when user changes width of window
		DCD	funcbrowser		;  Create function browser
		DCD	prevline$ASM		;  Find start of update region
		DCD	0			;  Open window
		DCD	asminterrogate		;  Answer Zap's questions...
etableend$ASM


;  Pascal

entrytable$P	DCD	entrytable$P		;  Table offset from start of module
		DCD	modetitle$P		;  Title of mode
		DCD	authortext		;  Author's name
		DCD	0			;  Base mode number (text)
		DCD	14 + 1<<10		;  This mode number (uses mode data block)
		DCD	service$P		;  Service code
		DCD	0	;  menu		;  Menu to be attached to 'Mode' menu
		DCD	etableend$P-entrytable$P ;  Total length of entry table
		DCD	0	;  postload	;  Called after file is loaded
		DCD	presave			;  Called before file is saved
		DCD	0	;  loading	;  Called when file loaded into window
		DCD	start$P			;  Called when window enters this mode
		DCD	end$P			;  Called when window leaves this mode
		DCD	0	;  width	;  Called when window (re)created to find width
		DCD	0	;  linecol	;  Column offset to file offset
		DCD	0	;  lineoff	;  File offset to column offset
		DCD	0	;  clnlog	;  Logical line to file offset/physical line
		DCD	0	;  clnphy	;  Physical line to file offset
		DCD	0	;  clnoff	;  File offset to physical/logical line & offset
		DCD	0	;  nextline	;  Return first line shiftable with no redraw
		DCD	0	;  minus	;  Move left one char
		DCD	0	;  plus		;  Move right one char
		DCD	0	; sminus	;  Move left one word
		DCD	0	; splus		;  Move right one word
		DCD	0	;  cminus	;  Move to start of line
		DCD	0	;  cplus	;  Move to end of line
		DCD	0	;  redrawline	;  Redraw single line of display
		DCD	0	;  redrawlnum	;  Check if physical line is start of logical
		DCD	0			;  Insert character(s)
		DCD	0	;  delete	;  Delete character(s)
		DCD	0	;  tab		;  Perform tab(s)
		DCD	0	;  return	;  Insert return(s)
		DCD	0	;  renumber	;  Perform renumber
		DCD	0	;  saveandrun	;  Perform save, run & quit
		DCD	0	;  linestart	;  Returns pos of first character of line
		DCD	0	;  lineend	;  Returns pos of last character of line
		DCD	0	;  linenext	;  Returns pos of actual line end (eg. at &0A)
		DCD	0	;  lineprev	;  Returns pos of actual line start (for BASIC)
		DCD	0	;  copy		;  Called when copying with copy key
		DCD	0	;  joinline	;  Called when joinline pressed
		DCD	0	;  splitline	;  Called when splitline pressed
		DCD	0	;  aligncaret	;  Align caret (& reset counters)
		DCD	command			;  Called when Zap_Command issued
		DCD	compile			;  Called when compile pressed (save and run)
		DCD	0	;  formattext	;  Called when formattext pressed
		DCD	run			;  Called when run pressed
		DCD	0	;  runandquit	;  Called when run and quit pressed
		DCD	0	;  basic	;  Called when enter BASIC pressed
		DCD	0	;  search	;  Called to validate search
		DCD	0	;  replace	;  Called to replace area
		DCD	0	;  selection	;  Check selection
		DCD	0	;  click	;  Called when user clicks on window
		DCD	0	;  message	;  Called when unrecognised messages received
		DCD	0	;  setwidth	;  Called when user changes width of window
		DCD	funcbrowser		;  Create function browser (hmm... shared with asm mode?)
etableend$P


		LOCAL


;  Info tables

;  Relocation table

		EXPORT	inforelocate
inforelocate	DCB	0		;  Internal mode number
		DCB	0		;  Zap mode number - this is written to!
		DCB	1		;  Ptr: Mode name
		DCB	0		;  Length of default mode block
		DCB	0		;  Length of full mode block
		DCB	1		;  Ptr: Default mode block
		DCB	1		;  Ptr: Default Zap mode block
		DCB	1		;  Ptr: Extra colour names
		DCB	0		;  Number of extra colours
		DCB	1		;  Ptr: Defaults for extra colours
		DCB	1		;  Ptr: Command to compile with
		DCB	1		;  Ptr: Parameters to compile with
		DCB	1		;  Ptr: Search text for function finding
		DCB	1		;  Fn: Jump to next function
		DCB	1		;  Fn: Jump to last function
		DCB	1		;  Ptr: Open comment string
		DCB	0		;  Length of open comment string
		DCB	1		;  Ptr: Alternative open comment string
		DCB	0		;  Length of alternativeopen comment string
		DCB	1		;  Ptr: Close comment string
		DCB	0		;  Length of close comment string
		DCB	1		;  Ptr: Alternative close comment string
		DCB	0		;  Length of alternative close comment string
		DCB	1		;  Ptr: If text
		DCB	0		;  Length of if text
		DCB	1		;  Ptr: Endif text
		DCB	0		;  Length of endif text
		DCB	1		;  Ptr: List of dirs that files this type are usually in
		DCB	1		;  Ptr: List of extensions files this type usually have
		DCB	1		;  Fn: Mode's e_redrawline
		DCB	0		;  Zap colour number for bracket highlights
		DCB	0		;  Pointer to mode's menu structure created at run time
		ASSERT	{PC}-inforelocate=i_size/4


;  C

		ALIGN
		EXPORT	infotable$C
infotable$C	DCD	c		;  Internal mode number
		DCD	0		;  Zap mode number - this is written to
		DCD	modetitle$C	;  Ptr: Mode name
		DCD	m_defsize$C	;  Length of default mode block
		DCD	m_totsize$C	;  Length of full mode block
		DCD	modeblk$C$L	;  Ptr: Default mode block
		DCD	modedata$C$L	;  Ptr: Default Zap mode block
		DCD	colnames$C$L	;  Ptr: Extra colour names
		DCD	numcols$C$L	;  Number of extra colours
		DCD	colours$C$L	;  Ptr: Defaults for extra colours
		DCD	compile$C$L	;  Ptr: Command to compile with
		DCD	params$C$L	;  Ptr: Parameters to compile with
		DCD	0		;  Ptr: Search text for function finding
		DCD	nextfunc$C	;  Fn: Jump to next function
		DCD	lastfunc$C	;  Fn: Jump to last function
		DCD	opencom$C$L	;  Ptr: Open comment string
		DCD	?opencom$C$L	;  Length of open comment string
		DCD	opencom$C$L	;  Ptr: Alternative open comment string
		DCD	?opencom$C$L	;  Length of alternativeopen comment string
		DCD	closecom$C$L	;  Ptr: Close comment string
		DCD	?closecom$C$L	;  Length of close comment string
		DCD	closecom$C$L	;  Ptr: Alternative close comment string
		DCD	?closecom$C$L	;  Length of alternative close comment string
		DCD	if$C$L		;  Ptr: If text
		DCD	?if$C$L		;  Length of if text
		DCD	endif$C$L	;  Ptr: Endif text
		DCD	?endif$C$L	;  Length of endif text
		DCD	directory$C$L	;  Ptr: List of dirs that files this type are usually in
		DCD	extension$C$L	;  Ptr: List of extensions files this type usually have
		DCD	redrawline$C	;  Fn: Mode's e_redrawline
		DCD	16		;  Zap colour number for bracket highlights
		DCD	0		;  Pointer to mode's menu structure created at run time
		ASSERT	{PC}-infotable$C=i_size


;  C++

		ALIGN
		EXPORT	infotable$CPP
infotable$CPP	DCD	cpp		;  Internal mode number
		DCD	0		;  Zap mode number - this is written to
		DCD	modetitle$CPP	;  Ptr: Mode name
		DCD	m_defsize$C	;  Length of default mode block
		DCD	m_totsize$C	;  Length of full mode block
		DCD	modeblk$C$L	;  Ptr: Default mode block
		DCD	modedata$CPP$L	;  Ptr: Default Zap mode block
		DCD	colnames$C$L	;  Ptr: Extra colour names
		DCD	numcols$C$L	;  Number of extra colours
		DCD	colours$C$L	;  Ptr: Defaults for extra colours
		DCD	compile$CPP$L	;  Ptr: Command to compile with
		DCD	params$CPP$L	;  Ptr: Parameters to compile with
		DCD	0		;  Ptr: Search text for function finding
		DCD	nextfunc$C	;  Fn: Jump to next function
		DCD	lastfunc$C	;  Fn: Jump to last function
		DCD	opencom$CPP$L	;  Ptr: Open comment string
		DCD	?opencom$CPP$L	;  Length of open comment string
		DCD	opencom$C$L	;  Ptr: Alternative open comment string
		DCD	?opencom$C$L	;  Length of alternativeopen comment string
		DCD	0		;  Ptr: Close comment string
		DCD	0		;  Length of close comment string
		DCD	closecom$C$L	;  Ptr: Alternative close comment string
		DCD	?closecom$C$L	;  Length of alternative close comment string
		DCD	if$CPP$L	;  Ptr: If text
		DCD	?if$CPP$L	;  Length of if text
		DCD	endif$CPP$L	;  Ptr: Endif text
		DCD	?endif$CPP$L	;  Length of endif text
		DCD	directory$CPP$L	;  Ptr: List of dirs that files this type are usually in
		DCD	extension$CPP$L	;  Ptr: List of extensions files this type usually have
		DCD	redrawline$C	;  Fn: Mode's e_redrawline
		DCD	16		;  Zap colour number for bracket highlights
		DCD	0		;  Pointer to mode's menu structure created at run time
		ASSERT	{PC}-infotable$CPP=i_size


;  Java

		ALIGN
		EXPORT	infotable$J
infotable$J	DCD	java		;  Internal mode number
		DCD	0		;  Zap mode number - this is written to
		DCD	modetitle$J	;  Ptr: Mode name
		DCD	m_defsize$C	;  Length of default mode block
		DCD	m_totsize$C	;  Length of full mode block
		DCD	modeblk$C$L	;  Ptr: Default mode block
		DCD	modedata$J$L	;  Ptr: Default Zap mode block
		DCD	colnames$C$L	;  Ptr: Extra colour names
		DCD	numcols$C$L	;  Number of extra colours
		DCD	colours$C$L	;  Ptr: Defaults for extra colours
		DCD	compile$J$L	;  Ptr: Command to compile with
		DCD	params$J$L	;  Ptr: Parameters to compile with
		DCD	0		;  Ptr: Search text for function finding
		DCD	nextfunc$C	;  Fn: Jump to next function
		DCD	lastfunc$C	;  Fn: Jump to last function
		DCD	opencom$CPP$L	;  Ptr: Open comment string
		DCD	?opencom$CPP$L	;  Length of open comment string
		DCD	opencom$C$L	;  Ptr: Alternative open comment string
		DCD	?opencom$C$L	;  Length of alternativeopen comment string
		DCD	0		;  Ptr: Close comment string
		DCD	0		;  Length of close comment string
		DCD	closecom$C$L	;  Ptr: Alternative close comment string
		DCD	?closecom$C$L	;  Length of alternative close comment string
		DCD	if$J$L		;  Ptr: If text
		DCD	?if$J$L		;  Length of if text
		DCD	endif$J$L	;  Ptr: Endif text
		DCD	?endif$J$L	;  Length of endif text
		DCD	directory$J$L	;  Ptr: List of dirs that files this type are usually in
		DCD	extension$J$L	;  Ptr: List of extensions files this type usually have
		DCD	redrawline$C	;  Fn: Mode's e_redrawline
		DCD	16		;  Zap colour number for bracket highlights
		DCD	0		;  Pointer to mode's menu structure created at run time
		ASSERT	{PC}-infotable$J=i_size


;  Assembler

		EXPORT	infotable$ASM
infotable$ASM	DCD	asm		;  Internal mode number
		DCD	0		;  Zap mode number - this is written to
		DCD	modetitle$ASM	;  Ptr: Mode name
		DCD	m_defsize$ASM	;  Length of default mode block
		DCD	m_totsize$ASM	;  Length of full mode block
		DCD	modeblk$ASM$L	;  Ptr: Default mode block
		DCD	modedata$ASM$L	;  Ptr: Default Zap mode block
		DCD	colnames$ASM$L	;  Ptr: Extra colour names
		DCD	numcols$ASM$L	;  Number of extra colours
		DCD	colours$ASM$L	;  Ptr: Defaults for extra colours
		DCD	compile$ASM$L	;  Ptr: Command to compile with
		DCD	params$ASM$L	;  Ptr: Parameters to compile with
		DCD	funcstr$ASM$L	;  Ptr: Search text for function finding
		DCD	nextfuncsrch	;  Fn: Jump to next function
		DCD	lastfuncsrch	;  Fn: Jump to last function
		DCD	opencom$ASM$L	;  Ptr: Open comment string
		DCD	?opencom$ASM$L	;  Length of open comment string
		DCD	opencom$ASM$L	;  Ptr: Alternative open comment string
		DCD	?opencom$ASM$L	;  Length of alternativeopen comment string
		DCD	0		;  Ptr: Close comment string
		DCD	0		;  Length of close comment string
		DCD	0		;  Ptr: Alternative close comment string
		DCD	0		;  Length of alternative close comment string
		DCD	if$ASM$L	;  Ptr: If text
		DCD	?if$ASM$L	;  Length of if text
		DCD	endif$ASM$L	;  Ptr: Endif text
		DCD	?endif$ASM$L	;  Length of endif text
		DCD	directory$ASM$L	;  Ptr: List of dirs that files this type are usually in
		DCD	extension$ASM$L	;  Ptr: List of extensions files this type usually have
		DCD	redrawline$ASM	;  Fn: Mode's e_redrawline
		DCD	16		;  Zap colour number for bracket highlights
		DCD	0		;  Pointer to mode's menu structure created at run time
		ASSERT	{PC}-infotable$ASM=i_size


;  Pascal

		EXPORT	infotable$P
infotable$P	DCD	pascal		;  Internal mode number
		DCD	0		;  Zap mode number - this is written to
		DCD	modetitle$P	;  Ptr: Mode name
		DCD	m_defsize$P	;  Length of default mode block
		DCD	m_totsize$P	;  Length of full mode block
		DCD	modeblk$P$L	;  Ptr: Default mode block
		DCD	modedata$P$L	;  Ptr: Default Zap mode blocks
		DCD	0		;  Ptr: Extra colour names
		DCD	0		;  Number of extra colours
		DCD	0		;  Ptr: Defaults for extra colours
		DCD	compile$P$L	;  Ptr: Command to compile with
		DCD	params$P$L	;  Ptr: Parameters to compile with
		DCD	funcstr$P$L	;  Ptr: Search text for function finding
		DCD	nextfuncsrch	;  Fn: Jump to next function
		DCD	lastfuncsrch	;  Fn: Jump to last function
		DCD	opencom$P$L	;  Ptr: Open comment string
		DCD	?opencom$P$L	;  Length of open comment string
		DCD	opencom2$P$L	;  Ptr: Alternative open comment string
		DCD	?opencom2$P$L	;  Length of alternativeopen comment string
		DCD	closecom$P$L	;  Ptr: Close comment string
		DCD	?closecom$P$L	;  Length of close comment string
		DCD	closecom2$P$L	;  Ptr: Alternative close comment string
		DCD	?closecom2$P$L	;  Length of alternative close comment string
		DCD	if$P$L		;  Ptr: If text
		DCD	?if$P$L		;  Length of if text
		DCD	endif$P$L	;  Ptr: Endif text
		DCD	?endif$P$L	;  Length of endif text
		DCD	directory$P$L	;  Ptr: List of dirs that files this type are usually in
		DCD	extension$P$L	;  Ptr: List of extensions files this type usually have
		DCD	0		;  Fn: Mode's e_redrawline
		DCD	8		;  Zap colour number for bracket highlights
		DCD	0		;  Pointer to mode's menu structure created at run time
		ASSERT	{PC}-infotable$P=i_size



;  Data for info tables

;  Default mode blocks

modeblk$C$L	DCD	m_defsize$C	;  Size of block (must be first for Zap)
		=	"MJE",0		;  Version of mode block layout
		DCD	m_sharedsize	;  Size of shared section of block
		DCD	0		;  Pointer to mode information block
		DCD	15		;  Delay in cs for matching brackets, 0 to disable
		DCD	0		;  Shared flags word 1
		ASSERT	{PC}-modeblk$C$L=m_sharedsize
		DCD	0		;  Flags word 1
		DCD	2		;  Indent; 0 to disable, -ve for by tabs
		ASSERT	{PC}-modeblk$C$L=m_defsize$C

modeblk$ASM$L	DCD	m_defsize$ASM	;  Size of block (must be first for Zap)
		=	"MJE",0		;  Version of mode block layout
		DCD	m_sharedsize	;  Size of shared section of block
		DCD	0		;  Pointer to mode information block
		DCD	15		;  Delay in cs for matching brackets, 0 to disable
		DCD	0		;  Shared flags word 1
		ASSERT	{PC}-modeblk$ASM$L=m_sharedsize
		DCD	0		;  Flags word 1
		ASSERT	{PC}-modeblk$ASM$L=m_defsize$ASM

modeblk$P$L	DCD	m_defsize$P	;  Size of block (must be first for Zap)
		=	"MJE",0		;  Version of mode block layout
		DCD	m_sharedsize	;  Size of shared section of block
		DCD	0		;  Pointer to mode information block
		DCD	15		;  Delay in cs for matching brackets, 0 to disable
		DCD	0		;  Shared flags word 1
		ASSERT	{PC}-modeblk$P$L=m_sharedsize
		DCD	0		;  Flags word 1
		ASSERT	{PC}-modeblk$P$L=m_defsize$P


;  Default Zap mode blocks (for use with Zap_ModeData)

modedata$P$L
modedata$CPP$L
modedata$J$L
modedata$C$L	DCD	2_01<<28 + 2_101<<19 + 1<<18 + 1<<16 + 77	;  Flags word 1

modedata$ASM$L	DCD	2_01<<28 + 2_000<<19 + 1<<18         + 77	;  Flags word 1


;  Extra colour names

colnames$C$L	=	"mje_c_colours",0
colnames$ASM$L	=	"mje_asm_colours",0


;  Defaults for extra colours

colours$C$L	DCD	&00FF0050
		DCD	&FFFF8C10
		DCD	&20FFFF30
		DCD	&FFBB0010
		DCD	&BCC9FF10
		DCD	&82FFFF10
		DCD	&00CCFF10
		DCD	&80808010
numcols$C$L	EQU	({PC}-colours$C$L)/4

colours$ASM$L	DCD	&00FF0050
		DCD	&FFFF8C10
		DCD	&20FFFF30
		DCD	&C7FFFF10
		DCD	&82FFFF10
		DCD	&82FFFF10
		DCD	&00CCFF10
		DCD	&80808010
numcols$ASM$L	EQU	({PC}-colours$ASM$L)/4


;  Commands and options for compilation

compile$C$L	=	"cc ",0
compile$CPP$L	=	"c++ ",0
compile$J$L	=	"java ",0
compile$ASM$L	=	"aasm -from ",0
compile$P$L	=	"pascal ",0

params$C$L	=	" -IC: -throwback -LC:o.stubs -desktop ^",0
params$CPP$L	=	" -IC: -throwback -LC:o.c++lib,C:o.stubs -desktop ^",0
params$J$L	=	" -throwback -desktop ^",0
params$ASM$L	=	" -throwback -stamp -desktop ^ -quit -closeexec",0
params$P$L	=	" -ranprv -LC:o.Stubs -throwback -desktop ^",0


;  Search strings for finding functions

funcstr$ASM$L	=	"\\<\\[^ \\x09;\\x0a]",0
funcstr$P$L	=	"\\<\\[ \\x09]\\*\\-\\(procedure\\|function\\) \\[^;]\\%\\[ "
		=	"\\x09;]\\%\\[^\\-\\(extern\\|forward\\)]",0


;  Open and close comments


opencom$C$L	=	"/* "
opencom$CPP$L	=	"// "
opencom$ASM$L	=	"; "
opencom$P$L	=	"(* "
opencom2$P$L	=	"{ "

closecom$C$L	=	" */"
closecom$P$L	=	" *)"
closecom2$P$L	=	" }"


;  If/endif for commenting large sections of code out

if$P$L
if$CPP$L
if$C$L		=	"#if 0",10
if$J$L		=	"if(0) {",10
if$ASM$L	=	" [ 1=0",10

endif$P$L
endif$CPP$L
endif$C$L	=	"#endif",10
endif$J$L	=	"}",10
endif$ASM$L	=	" ]",10


;  Lists of directories the files are usually stored in, in most likely order

directory$C$L	=	"c",0,"c++",0,"cc",0,"cpp",0,0
directory$CPP$L	=	"c++",0,"cc",0,"cpp",0,"c",0,0
directory$J$L	=	"j",0,"java",0,0
directory$ASM$L	=	"s",0,0
directory$P$L	=	"p",0,0


;  Lists of extensions the files usually have, in most likely order

extension$C$L	=	"C",0,"CC",0,"CPP",0,0
extension$CPP$L	=	"CC",0,"CPP",0,"C",0,0
extension$J$L	=	"J",0,"JVA",0,"JAV",0,0
extension$ASM$L	=	"ASM",0,0
extension$P$L	=	"P",0,"PAS",0,0


		END
