; Zap Text Command Extension
; Copyright (C) 1998 Zap Developers
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
; Text commands by Darren Salt (from ZapDS)
;
; FINDFILECURSOR	- FINDFILE on filename at cursor
; SAVEKEEPSTAMP		- Save a file without affecting its time stamp
; UNTABIFY		- Convert tabs to spaces (where appropriate)
; INSERTBLANK		- Inserts spaces or NULs as appropriate
; FORMATINDENTED	- Reformats paragraph indented
; STRIPCTRLCODES	- Strips control codes from document

; Includes
	GET	h.ZapText
	GET	h.minfo
	GET	h.module
	GET	h.dsutils
	GET	h.coreutils

; What we give to other people
	EXPORT	ds_findfilecursor
	EXPORT	ds_savekeepstamp
	EXPORT	ds_untabifysel
	EXPORT	ds_untabify
	EXPORT	ds_insertblank
	EXPORT	ds_formatindented
	EXPORT	ds_stripctrlcodes

	EXPORT	ds_wksp			; 320 byte workspace

; FINDFILECURSOR - find file at cursor
	LOCAL

	&	0
ds_findfilecursor
	CMP	r8,#0
	CMPNE	r9,#0
	CMPNE	r10,#0
	MOVEQ	pc,lr

	FNJSR

	BL	util_splitbuffer	; get split point out of the way
	FNRTS	VS

	MOV	r0,#2_010	; ctrls and given list are delimiters
	ADR	r1,list$l	; ", #, *, |, (127)
	LDR	r2,[r10,#c_off]
	FNcall	Zap_ReturnWord	; \X r0 = offset, r1 = length

	CMP	r1,#0
	BEQ	nullname$l

	LDR	r3,[r9, #f_ptr]	; start of data
	ADD	r3,r3,r0	; no need to worry about split point
	MOV	r4,r1

	SUB	r1,r1,#1
	LDRB	r0,[r3,r1]
	TEQ	r0,#'.'
	SUBEQS	r4,r4,#1	; remove trailing '.' if there is one
	BEQ	nullname$l	; if name becomes null, report it

; \E r4 length, r3 address
	ADD	r0,r4,#1	; length + NUL
	ADD	r0,r0,#14	; Filer_OpenDir
	FNcall	Zap_Claim	; returns in r0
	FNRTS	VS

; \E r0 buffer
	ADR	r1,opendir$l
	MOV	r2,r0
copyopendir$l
	LDRB	r6,[r1],#1
	CMP	r6,#32
	STRB	r6,[r2],#1
	BNE	copyopendir$l	; copy the string in
copyname$l
	LDRB	r6,[r3],#1
	SUBS	r4,r4,#1
	STRB	r6,[r2],#1
	BNE	copyname$l	; copy the filename in

	MOV	r7,r0		; r0->block; move it somewhere safe
	MOV	r0,#0
	STRB	r0,[r2]		; terminate string
	MOV	r0,#5
	ADD	r1,r7,#14	; skip "Filer_OpenDir "
	SWI	XOS_File
	BVC	noerror$l
	B	error$l
noerror$l
	TEQ	r0,#1
	BEQ	isafile$l
	TEQ	r0,#2
	TEQNE	r0,#3
	BEQ	isadir$l	; directory or image

	MOV	r0,#19
	MOV	r2,#0
	SWI	XOS_File

error$l	MOVVS	r1,r0
	MOVVC	r1,#0

	MOV	r0,r7
	FNcall	Zap_Free

	MOVS	r0,r1
	FNRTS	EQ		; no error
	FNRTV

list$l	=	"#*|", '"', 127, 0 ; ", #, *, |, (127)
opendir$l =	"Filer_OpenDir "
	ALIGN

isafile$l
	ADD	r0,r7,#14
	FNcall	Zap_FindFile

	MOVVS	r1,r0
	MOVVC	r1,#0

	MOV	r0,r7
	FNcall	Zap_Free

	MOVS	r0,r1
	FNRTS	EQ
	FNRTV

isadir$l
	MOV	r0,r7
	SWI	XWimp_StartTask

	MOVVS	r1,r0
	MOVVC	r1,#0

	MOV	r0,r7		; in case it corrupts due to error
	FNcall	Zap_Free

	MOVS	r0,r1
	FNRTS	EQ
	FNRTV

nullname$l
	ADR	r0,nullname_msg$l
	MOV	r1,#1<<31
	FNcall	Zap_Warning
	FNRTS
nullname_msg$l
	FNS	("No filename found")


; SAVEKEEPSTAMP - save a file without altering the time stamp
	LOCAL

	&	0
ds_savekeepstamp
	FNJSR
	LDR	r0,[r9,#f_name]
	FNcall	Zap_CheckFileName
	TEQ	r0,#0
	BEQ	next$l
;	SWINE	256+7	; beep!
	ADR	r0,beep$l
	ORR	r0,r0,#1<<31	; don't learn
	FNcall	Zap_CommandString
	FNRTSS			; status flags too

beep$l	=	"BEEP", 0
	ALIGN
next$l	LDR	r2,[r9,#f_load]
	LDR	r3,[r9,#f_exec]
	PUSH	"r2,r3"

	MOV	r3,#-1
	STRB	r3,[r9,#f_load]
	STR	r3,[r9,#f_exec]	; timestamp to zero
	FNcall	Zap_SaveFile
	FNRTP	"r2,r3", VS	; pull r2,r3 and stacked regs and return

	MOV	r0,#5
	LDR	r1,[r9,#f_name]
	SWI	XOS_File

	PULL	"r2,r3"
	STR	r2,[r9,#f_load]
	STR	r3,[r9,#f_exec]
	MOVVC	r0,#1		; if the file was there
	SWIVC	XOS_File	; set its load/exec

	FNRTS


; UNTABIFYSEL
	LOCAL

	&	0
ds_untabifysel
	MOV	r7,lr
	MOV	r6,r8
	FNcall	Zap_GetSel
	MOVVS	pc,r7
	MOVCS	pc,r7
	TEQ	r6,r8
	MOVNE	pc,r7
	MOV	lr,r7
	B	ds_untabify_entry


; UNTABIFY - convert tabs into spaces.
; Works assuming hard tabs are at 8 spaces.
	LOCAL

	&	0
ds_untabify
	MOV	r1,#0
	LDR	r2,[r9,#f_len]

ds_untabify_entry
	TEQ	r2,#0		; quick exit if nothing to do
	MOVEQ	pc,lr

	FNJSR	"r1,r2"
	LDRB	r0,[r8,#w_format] ; get mode number active
	BL	util_getmodeinfo ; returns in r0
	FNRTS	VS		; error
	MInfo	"BinMode"	; returns in r1 - with status flags set
	BEQ	next$l
;	SWINE	256+7		; beep
	ADR	r0,beep$l
	ORR	r0,r0,#(1:SHL:31)
	FNcall	Zap_CommandString
	FNRTS			; if this is a binary mode (basic, byte etc.)

beep$l	=	"BEEP",0
	ALIGN

next$l	LDRB	r7,[r8,#w_cr]
	LDRB	r11,[r8,#w_tabc]
	TEQ	r7,r11
	FNRTSS	EQ		; if tab is linefeed, don't expand
	MOV	r11,r11,LSL #24	; put tab char to the top

	; r0 = mode info word
	MInfo	"ProgSrc"
	ORRNE	r11,r11,#1	; if programming source mode

	LDRB	r7,[r8,#w_cr]
	BL	zap_startop
	FNRTS	VS

	LDR	r0,[sp,#4]	; length
	BL	util_percentage_on

	LDR	r0,[r9,#f_ptr]	; base to work from
	LDR	r4,[r9,#f_splito] ; split point
	LDR	r5,[r9,#f_splits] ; space in split
	MOV	r6,#0		; horizontal position
	LDMIA	sp,{r1,r2}	; r1=initial offset, r2=length
	CMP	r1,r4
	ADDGT	r0,r0,r5	; adjust for split (but see later adjustment)

	TST	r11,#1
	BIC	r11,r11,#1
	BNE	scantabquoted$l	; temporarily removed

scantab$l
	MOVS	r3,r2,LSL #23
	BLEQ	util_percentage	; update %age every 512n bytes remaining

	CMP	r1,r4
	ADDEQ	r0,r0,r5	; adjust base for split

	LDRB	r3,[r0,r1]	; get a byte
	TEQ	r3,r11,LSR #24
	BEQ	gottab$l	; tab?

	TEQ	r3,r7		; cr?
	ADDNE	r6,r6,#1	; if not, increment h pos
	MOVEQ	r6,#0		; if so, reset h pos to 0

	ADD	r1,r1,#1	; increment offset
	SUBS	r2,r2,#1	; have we finished?
	BNE	scantab$l
	B	done_ok$l

gottab$l
	BL	do_untabify$l
	SUBS	r2,r2,#1
	BNE	scantab$l
	B	done_ok$l	; finished

scantabquoted$l
	MOVS	r3,r2,LSL #23
	BLEQ	util_percentage

	CMP	r1,r4
	ADDEQ	r0,r0,r5

	LDRB	r3,[r0,r1]
	TEQ	r3,r11,LSR #24
	BEQ	gottabq$l

	TEQ	r3,r7
	ADDNE	r6,r6,#1
	BNE	notcr$l

	MOV	r6,#0
	TST	r11,#2
	BICEQ	r11,r11,#1	; if b1 unset, clear b0

notcr$l	TEQ	r3,#34		; " ?
	EOREQ	r11,r11,#1	; set b0
	TEQ	r3,#92		; \ ?
	BICNE	r11,r11,#2	; set b1 appropriately
	ORREQ	r11,r11,#2	; (so is set on a per-char basis)

nexttabq$l
	ADD	r1,r1,#1
	SUBS	r2,r2,#1
	BNE	scantabquoted$l
	B	done_ok$l	; done

gottabq$l
	TST	r11,#1		; b0 (in quotes) ?
	ADDNE	r6,r6,#8	; skip to next tab stop
	BICNE	r6,r6,#7
	BNE	nexttabq$l	; and fall through (ie don't expand)

	BL	do_untabify$l
	SUBS	r2,r2,#1
	BNE	scantabquoted$l	; more to do

done_ok$l
;	BL	util_escon
;	SWI	XHourglass_Off
	BL	util_long_op_off
	BL	zap_stopop
	FNRTS
fail_ok$l
;	BL	util_escon
	BL	util_long_op_off
	BL	zap_stopop
	FNRTV			; with error

do_untabify$l
	STMFD	sp!,{r1,r2,lr}
	MOV	r2,#1		; replace the tab
	ADR	r3,spaces$l	; with some spaces
	AND	r4,r6,#7	; get length into current tab stop
	RSB	r4,r4,#8	; spaces we need to fill
	FNcall	Zap_ReplaceArea	; do it

	SWIVC	XOS_ReadEscapeState ; does the user want to break out?

	ADDVS	sp,sp,#12
	BVS	fail_ok$l	; error in Zap_ReplaceArea or SWI
	ADDCS	sp,sp,#12
	BCS	done_ok$l	; escape pressed
	LDMFD	sp!,{r1,r2}

	ADD	r1,r1,r4	; skip past newly-inserted spaces
	LDR	r0,[r9,#f_ptr]	; reset all the variables we've corrupted
	LDR	r4,[r9,#f_splito]
	LDR	r5,[r9,#f_splits]
	CMP	r1,r4
	ADDHI	r0,r0,r5
	ADD	r6,r6,#8
	BIC	r6,r6,#7	; adjust h pos appropriately
	LDMFD	sp!,{pc}

spaces$l	=	32,32,32,32,32,32,32,32

; INSERTBLANK - insert blank data size
; Can only cope with datasize up to 4
	LOCAL

	&	0
ds_insertblank
	CMP	r8,#0
	CMPNE	r9,#0
	CMPNE	r10,#0
	MOVEQ	pc,lr

	FNJSR

	LDRB	r0,[r8,#w_format] ; mode number
	BL	util_getmodeinfo
	FNRTS	VS

	MInfo	"Blanks"
	BEQ	sb$l

; Insert zero bytes directly
zb$l	ADR	r3,zero$l
	MInfo	"Size", r2

	MOV	r0,#0x11	; atomic add
	BL	util_commandcur	; \X r1 = previous cursor offset

	MOVVC	r0,r1		; move back in to set
	BLVC	util_reflectcaret
	FNRTS

; 'Type' spaces via e_char
sb$l	LDR	r4,[windptr,#w_flags]

	LDR	r6,[windptr,#w_format]
	STR	r6,[ws,#wformattemp]
	MInfo	"NonStandard", r5	; for side-effect only
	BEQ	skip_nonstandard$l
	BIC	r6,r6,#(1:SHL:15)
	STR	r6,[windptr,#w_format]
skip_nonstandard$l
	MInfo	"Size", r5
;	LDR	r6,[windptr,#w_format]
	ADR	r7,space$l

	LDR	r0,[r9,#f_flags]
	ORR	lr,r0,#1<<24	; don't redraw cursor until we let you
	STR	lr,[r9,#f_flags]

	PUSH	"r0,r9,r10"	; e_char is allowed to corrupt it

	BIC	r4,r4,#2	; don't allow overwrite
	MOV	r11,#e_char
	FNcall	Zap_CallMode	; r8-r10 and r4-r7 set up above
	PULL	"r1,r9,r10"	; don't corrupt r0 (error pointer)!
	STR	r1,[r9,#f_flags]; okay to draw cursor again
	BVS	end$l
;	FNRTS	VS

	; Now we want to return to the earlier cursor position
	LDR	r0,[r10,#c_off]
	SUB	r0,r0,#1
	STR	r0,[r10,#c_off]
	FNcall	Zap_ReflectCaret

	; And get the modified situation right
	MOV	r0,#1		; changed
	FNcall	Zap_MarkChanged

; Restore nonstandard bit, if it has altered
; We don't alter flags here, so it's safe to BVS end$l.
end$l	BL	Get_Workspace	; ensure ws is valid, because e_char might corrupt it
	LDR	r6,[ws,#wformattemp]
	STR	r6,[windptr,#w_format]
	FNRTS

space$l		=	32,32,32,32
zero$l		=	0,0,0,0

; FORMATINDENTED - format paragraph indented
	LOCAL

	&	(3:SHL:3) + (1:SHL:6)
ds_formatindented
	TEQ	r2,#6
	ADREQ	r0,qf_prompt
	BEQ	zap_setprompt

	STMFD	sp!,{r1,r2,lr}
	LDRB	r1,[r0]
	TEQ	r1,#92
	LDREQB	r1,[r0,#1]
	TEQEQ	r1,#60
	BNE	fmtl_notthisind
	LDRB	r1,[r0,#2]
	CMP	r1,#32
	BHS	fmtl_notthisind
	BL	util_splitbuffer
	LDMVSFD	sp!,{r1,r2,pc}
	LDR	r1,[r9,#f_ptr]
	LDR	r2,[r10,#c_off]
	MOV	r3,#0
	ADD	r5,r2,r1
	BL	util_findlinestart
	ADD	r2,r2,r1
	SUB	r1,r5,r2
	ADRL	r4,ds_wksp
	SUB	r1,r1,#1
	MOV	r3,#320

loop1$l	TEQ	r2,r5
	LDRNEB	r0,[r2,#1]!
	STRNEB	r0,[r4],#1
	SUBNES	r3,r3,#1
	BNE	loop1$l
	ADRL	r0,ds_wksp
	B	fmtl_gotind

fmtl_notthisind
	MOV	r3,#320
	LDRB	r5,[r8,#w_tabc]
	ADRL	r4,ds_wksp

loop2$l	SUBS	r3,r3,#1
	LDRNEB	r2,[r0],#1
	MOVEQ	r2,#0
	TEQ	r2,#92
	LDREQB	r2,[r0],#1
	TEQEQ	r2,#'T'
	TEQNE	r2,#'t'
	ORREQ	r2,r5,#256
	TEQ	r2,#0
	STRNEB	r2,[r4],#1
	BNE	loop2$l
	RSB	r1,r3,#320
	SUB	r1,r1,#1

fmtl_gotind
	LDR	r4,[r8,#w_format]
	STR	r1,fmtl_quotlen
	ANDS	r4,r4,#&3000
	MOVNE	r4,#7
	LDRB	r14,[r8,#w_tabc]
	MOV	r5,#0
	ADRL	r7,ds_wksp

loop3$l	SUBS	r1,r1,#1
	LDRGEB	r0,[r7],#1
	BLT	fmtl_gotlen
	TEQ	r0,r14
	ORREQ	r5,r5,r4
	ADD	r5,r5,#1
	B	loop3$l

fmtl_gotlen
	STR	r5,fmtl_quotwidth
	BL	zap_startop
	LDR	r4,[r9,#f_flags]
	ORR	r0,r4,#1<<14
	STR	r0,[r9,#f_flags]
	LDR	r0,[r10,#c_off]
	BL	format_para
	MOV	r1,r0
	BL	zap_stopop
	MOV	r0,r1
	LDR	r1,[r9,#f_flags]
	BIC	r1,r1,#1<<14
	AND	r4,r4,#1<<14
	ORR	r1,r1,r4
	STR	r1,[r9,#f_flags]
	BLVC	util_reflectcaret
	FNcallc	Zap_ShowCursor,VC
	LDMFD	sp!,{r1,r2,pc}

qf_prompt	= "Format indent: ", 0
	ALIGN

format_para
	STMFD	r13!,{r0-r4,r14}
	LDR	r2,[r9,#f_len]
	CMP	r0,r2
	LDMHSFD	r13!,{r0-r4,pc}
	BL	util_splitbuffer
	ADDVS	r13,r13,#4
	LDMVSFD	r13!,{r1-r4,pc}
	LDMFD	r13!,{r0}
	LDR	r1,[r9,#f_ptr]
	MOV	r2,r0
	LDRB	r14,[r8,#w_cr]
	LDRB	r1,[r1,r2]
	TEQ	r1,r14
	ADDEQ	r0,r0,#1
	LDMEQFD	r13!,{r1-r4,pc}

fmt_line
	BL	format_line
	LDMVSFD	r13!,{r1-r4,pc}
	TEQ	r1,#1
	BNE	fmt_line
	LDMFD	r13!,{r1-r4,pc}

format_line
	STMFD	r13!,{r2-r7,r10,r11,r14}
	LDR	r1,[r9,#f_ptr]
	MOV	r2,r0
	MOV	r3,#0
	BL	util_findlinestart
	STR	r2,fmtl_start
	ADD	r7,r2,#1
	STMFD	r13!,{r0,r1}
	BL	util_splitbuffer
	ADDVS	r13,r13,#8
	LDMVSFD	r13!,{r2-r7,r10,r11,pc}
	LDMFD	r13!,{r0,r1}

fmtl_restart
	LDR	r3,[r9,#f_len]
	BL	cp_quote
	LDRNE	r0,fmtl_start
	ADDNE	r0,r0,#1
	MOVNE	r1,#1
	LDMNEFD	r13!,{r2-r7,r10,r11,pc}
	MOV	r11,r2
	LDR	r5,fmtl_quotwidth
	MOV	r6,#0
	LDR	r4,[r8,#w_format]
	LDR	r10,[r8,#w_wrapwidth]
	ANDS	r4,r4,#&3000
	MOVNE	r4,#7
	STMFD	r13!,{r9,r11}
	LDRB	r11,[r8,#w_cr]
	LDRB	r9,[r8,#w_tabc]

fmtl_search
	CMP	r2,r3
	BHS	fmtl_eol
	LDRB	r0,[r1,r2]
	ADD	r2,r2,#1
	TEQ	r0,r11
	BEQ	fmtl_eol
	TEQ	r0,r9
	ORREQ	r5,r5,r4
	ADD	r5,r5,#1
	TEQNE	r0,#32
	SUBEQ	r6,r2,#1
	BEQ	fmtl_search
	CMP	r5,r10
	BLS	fmtl_search
	TEQ	r6,#0
	BEQ	fmtl_search
	LDMFD	r13!,{r9,r11}
	MOV	r1,r6
	MOV	r2,#1
	ADD	r3,r8,#w_cr
	MOV	r4,#1
	BL	util_replacearea_nowind
	ADRVCL	r3,ds_wksp
	ADDVC	r1,r6,#1
	LDRVC	r2,fmtl_quotlen
	BLVC	util_doinsert_nowind
	ADDVC	r0,r6,#1
	MOVVC	r1,#2
	LDMFD	r13!,{r2-r7,r10,r11,pc}

fmtl_eof
	MOV	r0,r3
	MOV	r1,#1
	LDMFD	r13!,{r2-r7,r10,r11,pc}

fmtl_eop
	LDR	r1,[r9,#f_ptr]
	MOV	r3,#0
	BL	util_findlinestart
	ADD	r0,r2,#1
	MOV	r1,#1
	LDMFD	r13!,{r2-r7,r10,r11,pc}

fmtl_next
	TEQ	r11,#1
	BEQ	fmtl_gonext
	LDR	r1,[r9,#f_ptr]
	MOV	r3,#0
	BL	util_findlinestart

fmtl_gonext
	MOV	r0,r7
	MOVS	r1,r11
	LDMFD	r13!,{r2-r7,r10,r11,pc}

fmtl_eol
	LDMFD	r13!,{r9,r11}
	SUB	r0,r11,r7
	TEQ	r5,r0
	BEQ	fmtl_next
	STMFD	r13!,{r4,r5}
	MOV	r7,r2
	SUB	r2,r2,#1
	BL	cp_quote
	MOV	r11,r2
	MOVNE	r2,r7
	ADDNE	r13,r13,#8
	BNE	fmtl_eop
	LDRB	r4,[r8,#w_cr]
	TEQ	r5,r4
	MOVEQ	r2,r7
	ADDEQ	r13,r13,#8
	BEQ	fmtl_eop
	LDMFD	r13!,{r4,r5}
	STMFD	r13!,{r9,r10}
	LDRB	r9,[r8,#w_tabc]
	LDRB	r10,[r8,#w_cr]

fmtl_join
	CMP	r2,r3
	LDRLOB	r0,[r1,r2]
	MOVHS	r0,r10
	TEQ	r0,r9
	TEQNE	r0,r10
	TEQNE	r0,#32
	ADDNE	r2,r2,#1
	ADDNE	r5,r5,#1
	BNE	fmtl_join
	LDMFD	r13!,{r9,r10}
	TEQ	r2,r11
	BEQ	fmtl_eop
	CMP	r5,r10
	MOVHI	r11,#0
	BHI	fmtl_next
	SUB	r1,r7,#1
	SUB	r2,r11,r1
	ADR	r3,fmtl_spcs
	MOV	r4,#1
	BL	util_replacearea_nowind
	BLVC	util_splitbuffer
	LDMVSFD	r13!,{r2-r7,r10,r11,pc}
	LDR	r1,[r9,#f_ptr]
	LDR	r2,fmtl_start
	ADD	r7,r2,#1
	B	fmtl_restart

cp_quote
	STMFD	r13!,{r6,r14}
	TEQ	r2,r3
	BEQ	cp_quote_fail
	LDR	r6,fmtl_quotlen
	TEQ	r6,#0
	ADRL	r4,ds_wksp
	ADDEQ	r2,r2,#1
	LDMEQFD	r13!,{r6,pc}
loop4$l
	ADD	r2,r2,#1
	TEQ	r2,r3
	BEQ	cp_quote_fail
	LDRB	r5,[r1,r2]
	LDRB	r14,[r4],#1
	TEQ	r5,r14
	LDMNEFD	r13!,{r6,pc}
	SUBS	r6,r6,#1
	BNE	loop4$l
	ADD	r2,r2,#1
	TEQ	r2,r3
	LDRNEB	r5,[r1,r2]
	MOVEQ	r5,r14
	TEQ	r5,r5
	LDMFD	r13!,{r6,pc}
cp_quote_fail
	TEQ	r4,#0
	LDMFD	r13!,{r6,pc}

fmtl_start	&	0
fmtl_quotlen	&	0
fmtl_quotwidth	&	0
fmtl_spcs	=	"    "

ds_wksp		%	320

; STRIPCTRLCODES - strips control codes, top bit set chars from document
	LOCAL

default$l =	"#3", 0
prompt$l =	"Ctrl code mask or #byte: ", 0
	ALIGN

	DCD	(3:SHL:3)+(1:SHL:6)
ds_stripctrlcodes
	TEQ	r2,#6
	ADREQ	r0,prompt$l
	BEQ	zap_setprompt

	LDR	r11,[r9,#f_len]
	TEQ	r11,#0
	MOVEQ	pc,lr

	FNJSR			; start call proper
	MOV	r10,r0		; store (r11 is corrupted to ws by util_getmodeinfo)

	LDRB	r0,[r8,#w_format] ; mode number
	BL	util_getmodeinfo
	MInfo	"BinMode"	; returns with status flags set
	BEQ	go$l

;	MOV	r1,#opt_switches
;	FNcall	Zap_ReadVar
;	LDR	r0,[r12,#opt_switches]
;	TST	r0,#(1:SHL:20)	; never beep
;	SWIEQ	&20107		; beep: binary mode - d'oh!
	ADR	r0,beep$l
	ORR	r0,r0,#(1:SHL:31)
	FNcall	Zap_CommandString
	FNRTS

beep$l	=	"BEEP", 0
	ALIGN

go$l	MOV	r0,r10		; restore

	TEQ	r0,#0
	ADREQ	r0,default$l	; if they've suppled nothing

	LDRB	r1,[r0]
	CMP	r1,#0		; zero length string
	ADREQ	r0,default$l
	LDREQB	r1,[r0]

	CMP	r1,#'#'
	BNE	stripctrlmask$l

	ADD	r0,r0,#1	; actual numerical argument
	MOV	r2,#0		; no buffer
	SWI	XOS_EvaluateExpression ; evaluate
	FNRTS	VS

	TEQ	r1,#0
	BNE	err_neednum$l	; wasn't a number

	ANDS	r11,r2,#15	; slightly kludgy
	MOVEQ	r11,#3		; get the default in again

	BL	zap_startop
	FNRTS	VS

	BL	util_long_op_on

	BL	util_splitbuffer
	BVS	fail_ok$l

	TST	r11,#4
	BEQ	noctrlz$l	; soft EOF
	LDR	r0,[r9,#f_ptr]
	LDR	r2,[r9,#f_len]
	MOV	r1,#0
scanctrlz$l
	LDRB	r3,[r0,r1]
	TEQ	r3,#26
	BEQ	gotctrlz$l
	ADD	r1,r1,#1
	SUBS	r2,r2,#1
	BNE	scanctrlz$l
	B	noctrlz$l
gotctrlz$l
	MOV	r0,#&12
	BL	zap_command	; cut to end
	BVS	fail_ok$l
noctrlz$l
	TST	r11,#9		; are any other stripping bits in arg set?
				; b1 => don't strip is actionless on its own
	BEQ	done_ok$l	; nothing else to do

	LDR	r0,[r9,#f_flags]
	BIC	r1,r0,#(5:SHL:27) ; clear DOS/spool flags
	TEQ	r0,r1
	STRNE	r1,[r9,#f_flags]
	FNcallc	Zap_NewFileTitle,NE ; and update

	LDR	r0,[r9,#f_ptr]
	LDR	r2,[r9,#f_len]
	LDR	r4,[r9,#f_splito]
	LDR	r5,[r9,#f_splits]
	PUSH	"r9,r10"
	LDRB	r9,[r8,#w_tabc]
	LDRB	r10,[r8,#w_cr]
	MOV	r1,#0
scanctrlany$l
	MOVS	r3,r1,LSL #23
	BNE	skip$l
	LDR	r9,[r13]
	PUSH	"r0,r1"
	MOV	r0,r1
	LDR	r1,[r9,#f_len]
	BL	util_long_op_display ; update percentage display
	PULL	"r0,r1"
	LDRB	r9,[r8,#w_tabc]
skip$l	CMP	r1,r4
	ADDEQ	r0,r0,r5
	LDRB	r3,[r0,r1]
	TST	r11,#1
	BEQ	skip2$l		; not stripping ctrls
	TST	r11,#2
	BNE	ign_ext$l	; don't strip \a, \b, \f
	CMP	r3,r9
	CMPNE	r3,r10
	CMPHI	r3,#32
	BLO	gotctrlany$l	; start stripping; this is control
skip2$l	TST	r11,#8
	TSTNE	r3,#128
	BNE	gotctrlany$l	; start stripping; this is tbs
	ADD	r1,r1,#1
	SUBS	r2,r2,#1
	BNE	scanctrlany$l
	PULL	"r9,r10"
	B	done_ok$l

gotctrlany$l
	MOV	r6,r1
countctrl$l
	ADD	r6,r6,#1
	SUBS	r2,r2,#1
	BEQ	gotctrlblock$l
	CMP	r1,r4
	ADDEQ	r0,r0,r5
	LDRB	r3,[r0,r6]
	TST	r11,#1
	BEQ	skip_count$l
	CMP	r3,r9
	CMPNE	r3,r10
	CMPHI	r3,#32
	BLO	countctrl$l
skip_count$l
	TST	r11,#8		; stripping tbs too
	TSTNE	r3,#128		; this is
	BNE	countctrl$l	; so count this in the block
gotctrlblock$l
	PULLS	"r9, r10"
	PUSH	"r1"
	SUB	r2,r6,r1
	MOV	r0,#&12
	BL	zap_command
	SWIVC	XOS_ReadEscapeState
	PULL	"r1"
	PULL	"r9, r10", VS
	BVS	fail_ok$l
	PULL	"r9, r10", CS
	BCS	done_ok$l
	LDR	r0,[r9,#f_ptr]
	LDR	r2,[r9,#f_len]
	LDR	r4,[r9,#f_splito]
	LDR	r5,[r9,#f_splits]
	LDRB	r9,[r8,#w_tabc]
	LDRB	r10,[r8,#w_cr]
	CMP	r1,r4
	ADDHI	r0,r0,r5
	SUBS	r2,r2,r1
	BNE	scanctrlany$l
	PULL	"r9, r10"
	B	done_ok$l

ign_ext$l
	CMP	r3,r9
	CMPNE	r3,r10
	CMPNE	r3,#7
	CMPNE	r3,#8
	CMPNE	r3,#12
	CMPHI	r3,#32
	BLO	gotctrlalmostany$l
	TST	r11,#8		; stripping tbs too
	TSTNE	r3,#128		; this is
	BNE	gotctrlalmostany$l
	ADD	r1,r1,#1
	SUBS	r2,r2,#1
	BNE	scanctrlany$l
	PULL	"r9, r10"
	B	done_ok$l
gotctrlalmostany$l
	MOV	r6,r1
countmostctrl$l
	ADD	r6,r6,#1
	SUBS	r2,r2,#1
	BEQ	gotctrlblock$l
	CMP	r1,r4
	ADDEQ	r0,r0,r5
	LDRB	r3,[r0,r6]
	CMP	r3,r9
	CMPNE	r3,r10
	CMPNE	r3,#7
	CMPNE	r3,#8
	CMPNE	r3,#12
	CMPHI	r3,#32
	BLO	countmostctrl$l	; ctrl which isn't special case
	TST	r11,#8
	TSTNE	r3,#128
	BNE	countmostctrl$l	; tbs and we're stripping
	B	gotctrlblock$l

done_ok$l
	BL	util_long_op_off
	BL	zap_stopop
	FNRTS
fail_ok$l
	BL	util_long_op_off
	BL	zap_stopop
	FNRTV

zero$l		=	"0", 0
	ALIGN

stripctrlmask$l
	CMP	r1,#32
	ADRLO	r0,zero$l

	MOV	r2,#0		; no buffer
	SWI	XOS_EvaluateExpression ; evaluate to a numerical mask
	FNRTS	VS

	TEQ	r1,#0
	BNE	err_neednum$l

	MOVS	r11,r2		; result
	MVNEQ	r11,#&1180
	MOVEQ	r0,#1
	LDREQB	r1,[r8,#w_cr]
	LDREQB	r2,[r8,#w_tabc]
	BICEQ	r11,r11,r0,LSL r1
	BICEQ	r11,r11,r0,LSL r2 ; default

	BL	zap_startop
	FNRTS	VS

	BL	util_long_op_on

	BL	util_splitbuffer
	BVS	fail_ok$l
	LDR	r0,[r9,#f_ptr]
	LDR	r2,[r9,#f_len]
	LDR	r4,[r9,#f_splito]
	LDR	r5,[r9,#f_splits]
	MOV	r1,#0
	MOV	r10,#1
scanctrlmask$l
	MOVS	r3,r1,LSL #23
	BNE	skipmask$l
	PUSH	"r0,r1"
	MOV	r0,r1
	LDR	r1,[r9,#f_len]
	BL	util_long_op_display
	PULL	"r0,r1"
skipmask$l
	CMP	r1,r4
	ADDEQ	r0,r0,r5
	LDRB	r3,[r0,r1]
	TST	r11,r10,LSL r3
	BNE	gotctrlmask$l
	ADD	r1,r1,#1
	SUBS	r2,r2,#1
	BNE	scanctrlmask$l
	B	done_ok$l
gotctrlmask$l
	MOV	r6,r1
countctrlmask$l
	ADD	r6,r6,#1
	SUBS	r2,r2,#1
	BEQ	gotctrlmaskblock$l
	CMP	r1,r4
	ADDEQ	r0,r0,r5
	LDRB	r3,[r0,r6]
	TST	r11,r10,LSL r3
	BNE	countctrlmask$l
gotctrlmaskblock$l
	PUSH	"r1"
	SUB	r2,r6,r1
	MOV	r0,#&12
	BL	zap_command
	SWI	XOS_ReadEscapeState
	PULL	"r1"
	BCS	done_ok$l
	BVS	fail_ok$l
	LDR	r0,[r9,#f_ptr]
	LDR	r2,[r9,#f_len]
	LDR	r4,[r9,#f_splito]
	LDR	r5,[r9,#f_splits]
	CMP	r1,r4
	ADDHI	r0,r0,r5
	SUBS	r2,r2,r1
	BNE	scanctrlmask$l
	B	done_ok$l

err_neednum$l
	FNPULL			; return lr
	ERR	"Argument must evaluate to a number" ; error


	END
