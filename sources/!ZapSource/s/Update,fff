; Contains code used by Zap's window-wrapping routines.
; $Id: Update,fff,v 1.1 1999-01-06 16:59:28 dj Exp $

	GET	h.ZapHeader
	GET	h.AlterTxt
	GET	h.Heap
	GET	h.ModeBits
	GET	h.Redraw
	GET	h.CreateWind
	GET	h.Cursors
	GET	h.Mode0

	EXPORT	callupdatewindow
	EXPORT	Updatewindow

wintmp8
	DCD	0

wintmp9
	DCD    0

	DCD	1
Updatewindow
	PUSH	"R14"
	BL	blat_window_wrap_cache
	PULL	"R14"

callupdatewindow
	CMP	R8,#0			; from IB menu ???????
	MOVEQ	PC,R14

	FNJSR	"R0-R11"
	FNLDR	R14,wimp_block		; use for time
	STR	R8,[R14,#100]
	MVN	R5,#1
	STR	R5,[R14,#104]
	STR	R5,[R14,#112]
	STR	R5,[R14,#116]

	BL	store_selection_offsets

	BL	redrawcursor

	FNLDR	R14,car_selection
	LDR	R0,[R14,#c_wind]
	BL	conv_wind_off		; set R8/R9
	BVS	nomoreatall

	CMP	R8,#0
	BEQ	noselectionatall

	FNLDR	R14,car_selection
	LDR	R1,[R14,#c_off]		; selection 'start'
	LDR	R2,[R14,#c_owidth]		; selection 'end'
	CMP	R1,R2
	MOVHI	R0,R1
	MOVHI	R1,R2
	MOVHI	R2,R0			; swap over if start>end
	SUB	R2,R2,R1			; length of selection

	MOV	R6,R1
	FNLDR	R14,wimp_block		; use for time
	STR	R1,[R14,#112]
	ADD	R1,R1,R2
	STR	R1,[R14,#116]
	STR	R8,[R14,#104]
	STR	R9,[R14,#108]
noselectionatall
	FNLDR	R14,wimp_block		; use for time
	LDR	R14,[R14,#100]
;LDR	  R14,tmpwindblk
	CMP	R8,R14
	BEQ	selincurntwindow

	CMP	R14,#0
	MOV	R8,R14
	BL	get_wind_off
	BL	conv_wind_off
; FNcall  Zap_GetWindOff,R9	; r8->R0
; FNcall  Zap_ConvWindOff,R9	; R0 -> R8/R9
	BVS	nomoreatall

	MOV	R2,#0
	MOV	R3,#0

	BL	update_local_alter_selected_region

	;LDR	  R0,tmpwindblk + 12
	;CMN	  R0,#2
	;BLEQ	  update_local_update_clearsel2 ; bleq
	;LDR	  R0,tmpwindblk + 12
	;CMN	  R0,#2
	; dontclearselhere
	BL	update_local_update_clearsel2 ; bleq
	FNLDR	R14,wimp_block		; use for time
	LDR	R5,[R14,#112]
	CMN	R5,#2
	BEQ	nonewselectionrequired
anewselectionrequired ; only called if a new sel's needed.
	FNLDR	R14,wimp_block		; use for time
	ADD	R2,R14,#104
	LDMIA	R2!,{R8,R9}
	LDMIA	R2,{R2,R3}
	BL	update_local_alter_selected_region
	B	aftergetcarehwh2
nonewselectionrequired
	BL	restore_selection_offsets
aftergetcarehwh2
redrawatend
	FNLDR	R1,wimp_block		; use for time
	LDR	R8,[R1,#100]
	LDR	R2,[R8,#w_handle]
	STR	R2,[R1]

	MOV	R0,#&90000000
	STR	R0,[R1,#4]
	STR	R0,[R1,#8]
	MOV	R0,#&70000000
	STR	R0,[R1,#12]
	STR	R0,[R1,#16]
;
;BL	 update_whole_window_bar_title ; update_window
;
; B	  nomorerectangles
; ;
;
	SWI	XWimp_UpdateWindow	 ; REM problem?

	CMP	R0,#0
	BEQ	nomorerectangles

	MOV	R0,#&100
	BL	heap_claim
; FNcall  Zap_Claim,R11
	STR	R0,queuestore

	MOV	R11,R0
	MOV	R10,#0

	LDR	R5,[R1,#4]
	LDR	R0,[R1,#20]
	SUB	R5,R5,R0

	LDR	R6,[R1,#16]
	LDR	R0,[R1,#24]
	SUB	R6,R6,R0
loop1$l
	ADD	R1,R1,#28
	LDMIA	R1,{R1-R4}
	SUB	R2,R2,R6
	SUB	R4,R4,R6
	SUB	R3,R3,R5
	SUB	R1,R1,R5

	BL	queueforforceredraw

	FNLDR	R1,wimp_block		; use for time
	;ADR	  R1,aqwktable
	LDR	R2,[R8,#w_handle]
	STR	R2,[R1]

	SWI	XWimp_GetRectangle

	CMP	R0,#0
	BNE	loop1$l

	BL	forceredrawfromqueue

	LDR	R0,queuestore
	BL	heap_free
; FNcall  Zap_Free,R11
nomorerectangles
	BL	redrawcursor2
nomoreatall
	FNRTS

redrawcursor
	FNJSR
	FNLDR	R14,wimp_block		; use for time
	LDR	R8,[R14,#100]

	BL	get_wind_off
	BLVC	conv_wind_off

	FNLDR	R0,car_mode,VC
	CMPVC	R0,#0
	FNRTS	EQ

	FNLDR	R10,car_cursor
	BL	clear_caret
	BL	update_caret

	FNLDR	R10,car_input
	BL	clear_caret
	BL	update_caret

	FNRTS

redrawcursor2
	FNJSR
	FNLDR	R14,wimp_block		; use for time
	LDR	R8,[R14,#100]

	BL	get_wind_off
	BLVC	conv_wind_off

	FNLDR	R0,car_mode
	CMP	R0,#0
	FNRTS	EQ

	FNLDR	R10,car_cursor
	BL	clear_caret
	BL	set_caret

	FNLDR	R10,car_input
	BL	clear_caret
	BL	set_caret

	ADD	R10,R8,#w_pwind
	BL	update_caret

	FNRTS

ctmpss
	DCD 0

store_selection_offsets
	FNJSR "R0-R9"
	FNLDR R14,car_selection
	LDR R0,[R14,#c_wind]
	BL conv_wind_off		; set R8/R9
	STR R8,ctmpss
	FNRTS

restore_selection_offsets
	FNJSR "R4-R5"
	LDR	R5,ctmpss
	CMP	R5,#0
	FNRTS  NE

	MVN	R4,#&F0
	FNLDR  R5,car_selection
	STR	R4,[R5,#c_wind]
	FNRTS

selincurntwindow
	BL	update_local_update_clearsel2
	B	anewselectionrequired

queuestore
	DCD	0

queueforforceredraw
	STMIA	R11!,{R1-R4}
	ADD	R10,R10,#1
	MOV	PC,R14

forceredrawfromqueue
	LDR	R11,queuestore
loop2$l
	LDR	R0,[R8,#w_handle]
	LDMIA	R11,{R1-R4}

	SWI	XWimp_ForceRedraw

	ADD	R11,R11,#16
	SUBS	R10,R10,#1
	BNE	loop2$l
	MOV	PC,R14

update_local_update_clearsel2
	STMFD	R13!,{R1-R5,R8-R11,R14}
	FNLDR	R10,car_selection
	LDR	R0,[R10,#c_wind]
	BL	conv_wind_off		; set up R8/R9
	TEQ	R8,#0
	LDMEQFD R13!,{R1-R5,R8-R11,PC}
	LDR	R2,[R10,#c_col]
	LDR	R3,[R10,#c_line]
	LDR	R4,[R10,#c_ocol]
	LDR	R5,[R10,#c_oline]		; selected area
	BL	correct_region
	MOV	R2,#0
	MOV	R3,#0
	MOV	R4,#1
	MOV	R5,#1
	BL	update_region
	LDMFD	R13!,{R1-R5,R8-R11,PC}

update_local_alter_selected_region
	STMFD	R13!,{R1-R7,R10,R14}
	FNLDR	R10,car_selection
	BL	test_cblk
	BEQ	al10			; selection is in this window
	; BL clear_selection		; clear old selection
	; LDMVSFD R13!,{R1-R7,R10,PC}
	MOV	R6,#0
	MOV	R7,#0			; old selection start/end
	B	al12
al10
	LDR	R6,[R10,#c_off]		; sel start
	LDR	R7,[R10,#c_owidth]		; sel end
al12
	MOV	R4,R2
	MOV	R5,R3			; R4/R5=new sel
	BL	get_wind_off
	STR	R0,[R10,#c_wind]
	STR	R0,[R10,#c_owind]
	MOV	R0,R4
	BL	offset_line_column
	LDMVSFD R13!,{R1-R7,R10,PC}
	STR	R3,[R10,#c_line]
	STR	R2,[R10,#c_col]
	STR	R4,[R10,#c_off]
	STR	R0,[R10,#c_loff]
	STR	R1,[R10,#c_width]
	MOV	R0,R5
	BL	offset_line_column
	LDMVSFD R13!,{R1-R7,R10,PC}
	STR	R3,[R10,#c_oline]
	STR	R2,[R10,#c_ocol]
	STR	R5,[R10,#c_owidth]		; enter new selection vals

; CMP R4,R5
; MOVGT R0,R4
; MOVGT R4,R5
; MOVGT R5,R0			; ensure R4<=R5
; CMP R6,R7
; MOVGT R0,R6
; MOVGT R6,R7
; MOVGT R7,R0			; ensure R6<=R7
; CMP R6,R4
; MOVGT R0,R4			; selection was ( ) [ ]
; MOVGT R1,R5
; MOVGT R4,R6
; MOVGT R5,R7
; MOVGT R6,R0
; MOVGT R7,R1			; ensure R6<=R4
; CMP R4,R7
; BGT al13			; regions separate [ ] ( )
; CMP R7,R5
; BLT al14			; regions overlap  [ ( ] )
; MOV R0,R7			; regions embedded [ ( ) ]
; MOV R7,R4
; MOV R4,R5
; MOV R5,R0
; B al13
;al14
; MOV R0,R7
; MOV R7,R4
; MOV R4,R0
;al13
; MOV R0,R6
; MOV R1,R7
; BL update_between_offsets
; LDMVSFD R13!,{R1-R7,R10,PC}
; MOV R0,R4
; MOV R1,R5
; BL update_between_offsets
	LDMFD	R13!,{R1-R7,R10,PC}

	END

