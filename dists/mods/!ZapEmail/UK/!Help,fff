 ____	       ___	      _ _
|_  /__ _ _ __| __|_ __  __ _(_) |
 / // _` | '_ \ _|| '  \/ _` | | | 0.26 (03 Nov 2002)
/___\__,_| .__/___|_|_|_\__,_|_|_| © Darren Salt, 1996-2002
	 |_|

This software is COPYRIGHT, but has been released as FREEWARE. Please see the
end of this file for conditions of use and distribution.


A few definitions:

'Blank line': may contain quoting characters and trailing spaces, eg. "> > ".
'Empty line': contains nothing.
'QP', 'qp'  : MIME quoted printable.

A logical line is one which starts after a line feed (or start of file) and
is terminated by a line feed (or end of file), and as such may occupy one or
more physical (or display) lines.


Installation
òòòòòòòòòòòò

This version of ZapEmail requires Zap 1.44 or later.

You will need to create ~Cmd files should you wish to use facilities such as
anti-spam measures, signatures and taglines. I realise that your newsreader
will provide support for the latter two, but it probably won't provide this
level of flexibility. (See the "Configuration files" section below.)

Don't forget to edit the signatures file if you're going to use ZapEmail's
signatures facility; the patronising messages are there to remind you :-)

ZapEmail relies on ZapBits for its URL sending, and ZapButtons and ZapText
for the buttons.


Upgrading from earlier versions
óóóóóóóóóóóóóóóóóóóóóóóóóóóóóóó

Normally handled transparently, insofar as Zap's config file is concerned.

You should *always* ensure that the External file entry and HelpData text are
up to date.

Upgrade notes for any given version also apply to older versions. The upgrade
procedures are *not* guaranteed to work; as versions become older, upgrade
support for them is removed.

From 0.20:
    Run Zap. From the iconbar menu, select Email mode, reselect Text mode,
    save options.

From 0.23:
    Any commands present in !ZapEmail.Types must be moved into per-user ~Cmd
    files. (The Types file contains Email_ExecScript commands in appropriate
    places.)

Configuration files
óóóóóóóóóóóóóóóóóóó

è Types

This contains filename patterns used by most commonly-used news & mail reader
software.

Alterations to this can be tested by "Create config" then "Reload config",
both in the iconbar Options submenu.

(In earlier versions, this was the recommended place for on-message-load
command strings. ZapEmail now supports per-user command strings; see below,
in the section entitled "Configuring per-user commands". However, the Types
file is still useful for globally-applied commands.)

è Templates, Sprites, Scripts, Menus

These files (Menus excepted) must be present if you wish to use ZapButtons.
See the ZapButtons documentation for more details.

The Menus file is optional; if it is not present, clicking Menu on the button
pane will open the ZapEmail mode menu. Any ZapEmail command is suitable for
inclusion in a menu file, though Email_SetFormatMod and Email_SetQuoting may
only be used as submenu pointers.

For changes to these to come into effect, you will need to quit and rerun Zap
if ZapEmail has been loaded.

è External and HelpData

You should normally leave these well alone; Zap may need to use them to
rebuild, respectively, the master External and HelpData files.


And finally
óóóóóóóóóóó

If Zap was already running when you installed ZapEmail, you must quit and
rerun it.

(I recommend that you turn off automatic space stripping in this mode.)


The Email mode
òòòòòòòòòòòòòò

Think of text mode with email extensions :-)

By using this mode you gain the following advantages:

* Coloured headers
	Those of us who don't get to see the headers are catered for too.

* Coloured signatures
	Helps you spot broken .sig separators too :-)

* Coloured quoting, up to four levels (then it repeats)
	As inspired by Messenger.
	Can optionally colour some non-standard quoting methods.

* Coloured URLs and addresses
	Recognises any (absolute) URLs and email address in angle brackets.
	Knows about mailto: URLs and colours these as addresses.

* Substyles used for *word*, _word_, /word/ and -word-
	For added emphasis

* Long line warning
	The background colour changes when the line is longer than the
	display width or format width.

* Quoted text reformatting
	Via the normal text formatting mechanism.
	It won't let you format the header or the .sig separator.
	Join line, split line, linewrap and wordwrap know about quoting.

* Automatic LF termination (and .sig separator - obsolescent)
	Just before you save the message, this ensures that it's properly
	terminated. (Also repairs the .sig separator if it's broken.)

* .sig mapping
	Gives better control over the per-user .sig files, and allows each
	user to have newsgroup- and destinee-specific .sig files.

* Display width range check
	The display width cannot be less than 8 columns.

* Passing URLs to web browsers etc.
	Central support in Zap :-)

* Automatic insertion of empty lines before your .sig
	Only if the message is otherwise blank.

* Knows about MIME quoted printable
	Useful if your newsreader doesn't.

* AST (Anti-Spam Technology)
	Otherwise known as string substitution in the From: line.

* ZapButtons and ZapSpell support
	A nice little button pane for those awkward-to-remember functions,
	and no mistake. Also imports URL and URI files dragged to the button
	pane.


The Email mode menu
óóóóóóóóóóóóóóóóóóó

Buttons
	This toggles the buttons pane on and off, and also leads to a submenu
	in which you can alter a few buttons pane related flags.

Header

    Ignore header
	This controls whether the header is coloured or not, and whether
	editing controls (eg. no formatting) are applied when the cursor is
	in the header. For those whose newsreaders don't export the header
	with the message text for editing, this option should be switched on.

    Don't add X headers
	ZapEmail won't add its little advert or its antispam header lines if
	this is ticked.

Signature & taglines

    Ignore .sig separator
	This controls whether signature colouring is enabled. For those who
	don't use a .sig separator, switching this option on will prevent
	ZapEmail from slowing things down by searching for it, and warning
	you if it doesn't find one.
	(It also controls the obsolescent auto-repair function.)

    Don't reformat .sig
	When enabled, any attempt to reformat the signature will be ignored,
	exactly as for the header (ie. the cursor will move to the start of
	the next line).
	(Not relevant if the .sig separator is being ignored.)

    Auto unload .sigs & taglines
	If enabled, signature files and taglines files will be kept in memory
	for only as long as ZapEmail is actually using them.

    If no ~Cmd, add signature
	If enabled and no ~Cmd file is present for the user given in the From
	address, a signature is automatically added.
	(Not relevant if the .sig separator is being ignored.)

    If no ~Cmd, add tagline
	If this and the above "add signature" option are enabled and no ~Cmd
	file is present for the user given in the From address, a tagline is
	automatically added.
	(Not relevant if the .sig separator is being ignored.)

    No separator if .sigs file empty
	When enabled, this option causes the 'add signature' commands to
	remove the .sig separator and set the "ignore .sig separator" flag if
	the chosen signatures file is empty.
	(Not relevant if the .sig separator is being ignored.)

Formatting

    Spaces in quoting
	This controls the quoting style of reformatted text and whether
	Email_IncQuoting inserts spaces in already-quoted lines - when on,
	you get quoting like "> > > "; when off, you get ">>> " instead.

    Format to display width
	This ties the format width (normally the same as the wrap width) to
	the display width, less an amount between 0 and 255, which can be set
	from its submenu.
	Setting that value or toggling the flag will cause a redraw.
	Note that the actual format width used cannot be below 8: this is
	taken care of for you.

    Allow non-'>' quoting
	This enables colouring and correct formatting of quoting using the
	characters defined in the submenu (these default to :"| if none are
	specified). You can have up to eight quoting characters plus '>'. The
	other two submenu items should be obvious :-)

    FormatText uses '>' quoting
	When enabled, the FormatText command alters the quoting to the
	standard form. When disabled, FormatText preserves the quoting style.
	The quoting style, preserved or altered, is copied to following lines
	in the same paragraph (as is the case with wordwrap).

    & avoids split before quoting
	When enabled, FormatText and wordwrap won't split a long line
	immediately before an '>' or, if non-standard quoting is enabled, any
	current quoting character. (This does not affect linewrap.)

Mangle ctrl chars
	This causes all control characters to be inserted as "^<char>",
	provided that they're entered using CHAR or are QUOTEd.
	It also causes characters with codes between 128 and 159 to be
	'translated' on saving, if they're in the message header. The
	translation is:
	F:  Ä	Å   Ç	É   Ñ	Ö   Ü	á   à	â   ä	ã   å	ç   é	è
	T:  /	W   w	@   X	Y   y	87  <-	->  v	^   ...	TM  %.	∑
	F:  ê	ë   í	ì   î	ï   ñ	ó   ò	ô   ö	õ   ú	ù   û	ü
	T:  '	'   <	>   "	"   "	-   --	-   OE	oe  |	¶   fi	fl

2◊LF after attribution
	When the file is loaded into Zap, this ensures that there's an empty
	line between the attribution and the following (usually quoted) text.
	Note that it doesn't check for blank lines, just empty ones.
	This flag is not alterable via the mode menu for a file, since it has
	no effect during editing.

MIME handling

    Remove \n in QP =\n
	This affects how qp decoding is performed. When off, only the '=' at
	the end of a line is removed; the LF is left intact. When on, both
	are removed, thus joining the two lines.

    Remove quoting after QP =\n
	This affects how qp decoding is performed. When off, quoting is left
	intact; this may cause quoting characters to appear partway through a
	line of text. When on, the quoting is removed if the quoting level on
	the first line is equal to or exceeds the quoting level on the second
	line, eg. for ">>" and ">", the ">" will be removed and the lines
	joined; if the above condition is not met, the lines are left
	separate with just the '=' removed.
	(Not relevant if \n removal is disabled.)

Display

    Highlight top bit set
	When enabled, top-bit-set characters are shown on a different
	background. Useful for those occasions when you want 7-bit clean
	without using quoted printable.

    Emphasis enabling
	Leads to a submenu containing the four emphasis types; an entry is
	ticked if the corresponding emphasis type is enabled. Of course, to
	see the emphasis, you must also have a suitable font substyle...

    Two-level quoting in mail
	For mail messages, this limits quoted text colouring to two levels
	(before repeating).

Header present
	This is a status display, showing whether a valid header was found
	when Email mode was selected. If one wasn't, then 'Ignore header' is
	unavailable, and ZapEmail assumes that you're editing mail.
	It is not present in the mode menu when opened via the iconbar menu.

Is mail
	This is a status display, showing whether ZapEmail thinks that the
	message being edited is mail. A message is considered to be mail if
	it has a header but does not have a Newsgroups: header line.
	If there's no header, ZapEmail has to assume that it's news.

(These flags may also be set via the Email_FlagsToggle and
Email_MoreFlagsToggle commands.)


Formatting
óóóóóóóóóó

As mentioned above, just hit Ctrl-F6 or whatever key you have FORMATTEXT
on...

A paragraph is defined as a block of text terminated in one of the following
ways:
 - end of file
 - a blank line
 - white space at the start of a line (following quoting)
 - a line containing a different level of quoting

Leading blank lines are ignored; the paragraph is assumed to start on the
first non-blank line.

The quoting level is preserved up to 16 levels. Attempts to format more
deeply quoted text will cause truncation of the quoting, and attempts to
change the quoting style will be ignored; you will be warned in both cases.

If the first line being formatted contains excess indent (ie. can't fit
quoting, indent and first word) then it will be split just before that first
word. If a word is too long to fit on a line, the split will occur after that
word.

Both linewrap and wordwrap know about quoting. However, where FORMATTEXT
'standardises' the quoting, linewrap and wordwrap just replicate the quoting
on the current line.


Quoting
óóóóóóó

Only the standard quoting character ">" is recognised by default. As
mentioned above, you can enable recognition of other characters, the default
being
	: " |

You can have up to eight non-standard characters; no duplicates, control
characters, spaces, digits, letters, or top-bit-set characters are allowed.
Obviously, you can't define '>' as non-standard!

It's recommended that the most common ones appear first in the list.

ZapEmail cannot easily recognise when these characters are used as quoting
and when they are quoted - beware of things like

> : "Standard" quoting usage is encouraged.

which it'll get wrong, if ':' and '"' are defined as quoting characters and
either non-standard quoting is active or you're using Email_ChangeQuoting.

SPLITLINE will preserve the quoting level; JOINLINE will only do so if the
quoting levels are the same, or one of the lines is blank (unnecessary
quoting will be deleted). This is intended to aid in the insertion of
(unquoted) comments in the middle of a block of quoted text, and in avoiding
misquoted text.

DELTOSTART will preserve the quoting level unless the line is otherwise
blank.

I recommend the use of EMAIL_SPLITFORINSERT :-)

INDENT and OUTDENT work and take notice of the quoting, inserting or removing
following it. However, due to a hack required to stop DELTOSTART from
deleting quoting, if the cursor is within the quoting on the first complete
line in the selection, then they will ignore (some of) the quoting on that
line.

DELETENEXT will, if wordwrap is enabled and line editing is disabled, delete
quoting in one go (unless the quoting levels are different). This is because
it would otherwise be possible (with lines approaching the wrap width) to
delete the LF at the end of a line, causing the line to be wrapped and the
quoting to be regenerated in the same position...


Configuring signature files
óóóóóóóóóóóóóóóóóóóóóóóóóóó

This feature allows you to have different signature files for different
newsgroups, people, or mailing lists. 

Note that it *requires* that your news/mailreader allows header editing (ie.
includes it at the top of the message you're editing). Messenger and TTFN,
amongst others, allow this.

The signature file is chosen from the directory by finding the user name from
the "From:" line of the message being edited, and matching that against the
contents of a mappings file. If no mappings file is present, or no match was
found, then the name is used as is. (Note that names or mappings containing
dots will require subdirectories, eg. "foo.bar@wibble.co.uk" will, if
unmapped, try to use the directory or file "<ZapEmail$Signatures>.foo.bar".)

If no valid name exists, then the name "~default" (which may be a file or
directory) is used. If there's no suitable file, you'll be warned instead.

If a directory is found, then ZapEmail will check whether the message is
really a news article, and look inside as follows:

If a Newsgroups: header is found, then:
 - look for "~Map"; if found, then
   - check each newsgroup listed against the file contents, stopping at the
     first match and using the named file. If the file doesn't exist, or no
     match was found, default to "News".
 - else
   - default to "News"
 - if defaulted to "News" and the file doesn't exist, use "Mail" instead. If
   this also doesn't exist, use the default file.
Else, if a To: header is found, then:
 - look for "~MTo"; if found, then
   - check the first recipient *only* against the file contents, stopping at
     the first match and using the named file. If the file doesn't exist, or
     no match was found, default to "Mail".
 - else
   - default to "Mail"
 - if defaulted to "Mail" and the file doesn't exist, use "News" instead. If
   this also doesn't exist, use the default file.
Else:
 - use "Mail". If this doesn't exist, try "News"; if this also doesn't exist,
   use the default file.

Similar rules apply where "~default" is used, and is a directory.

(A few example files are supplied with ZapEmail.)

The signature file will not be loaded until this command is used, and will be
reloaded if this command notices it's been modified. It will be discarded if
a different file is needed.

The signature file format is the same as for the taglines file (see
Email_AddTagline).

The mappings file "<ZapEmail$Signatures>.~aliases" may contain one or more
mappings of the form
	<search_string><tab><mapping>
The search string is case insensitive and may include wildcards but not
macros, and the mapping must be less than 36 characters long, _including_ the
user name. (Note that the search string *must* be terminated by at least one
tab character; don't use spaces instead...) For example:

wibble@here	wibble1
wibble@there	wibble2

which will determine which of "wibble1" and "wibble2" is used, depending on
the email address.

The mappings files "~Map" and "~MTo" (which live inside the user's signatures
directory) may each contain one or more mappings of the form
	<search_string><tab>.<mapping>
The same limitations apply; the mapping implicitly includes the user ID and
the dot. For example (in "~Map"):

comp.sys.acorn.		.csa
comp.sys.sinclair	.css

"Newsgroups: comp.sys.acorn.misc" matches the first line, whereas
"Newsgroups: comp.sys.sinclair,comp.sys.acorn.apps" matches the second.

For both types of mapping file, comments may be appended to any line, or may
occupy a line of their own simply by indenting them.


WARNING: Those who would abuse this feature by using longer .sigs than is
generally accepted do so at their own mailboxes' risk...


Configuring per-user commands
óóóóóóóóóóóóóóóóóóóóóóóóóóóóó

This feature allows you to have a set of commands which are executed when a
message is loaded into Email mode. To use this, you will need to create a
file named "~Cmd" in your Zap signatures directory; eg. for an (unmapped)
address "foo.bar@wibble.co.uk", the file's name would be
"<ZapEmail$Signatures>.foo.bar.~Cmd". You will also need to use the command
Email_ExecScript (this is done for you in the default Types file).

You may use colons or line feeds to separate commands; tabs are also allowed,
but are treated as spaces.

Here's an example:

  FFlags_Toggle &40				; disable undo
  Email_AddSignature				; add signature
  Email_AddTagline				; add tagline
  Email_AntiSpam ".co. .com."			; anti-spam measure
  Email_Stamp					; restamp the msg
  Email_AddHeaderLine ".Path: \m!not-for-mail"	; news header
  Email_AddHeaderLine ".Sender: \f"		; news header
  FFlags_Toggle &C320				; enable undo, mark unchanged

In the absence of a ~Cmd file, the default is to add a signature and a
tagline then to mark the file as "unchanged" (but see the ZapEmail "if no
~Cmd" menu options).


Colouring and styles
óóóóóóóóóóóóóóóóóóóó

Name		Description				Default
®®®®		®®®®®®®®®®®				®®®®®®®
Header		The header colour			Grey 3
Signature	The .sig and .sig separator colour	Green
> quote		1st level quoting			Blue	   (cream)
>> quote	2nd level quoting			Red	   (orange)
>>> quote	3rd level quoting			Dark green
>>>> quote	4th level quoting			Cyan
Long line	Text beyond the <width>th column	Orange bg  (blue)
URL		Uniform resource locator		Grey 4	   (yellow)
Address		Email address				Grey 5	   (grey 2)
Header ID	Header line identifiers			Dark green (green)
Broken ID	Header lines with broken identifiers	Red
From:		"From: " and "From " header line IDs	Blue	   (grey 1)
To:, Cc:, Bcc:	Recipient line IDs			Blue	   (grey 1)
Newsgroups:	Newsgroups line ID			Blue	   (grey 1)
Subject:	Subject line ID				Green	   (dk green)
Organization:	Organisation line ID			Cyan
Content-*	Content-Type, etc.			Grey 2	   (grey 5)
X-*		Header IDs beginning "X-"		Orange
Top bit set	Highlights top bit set characters	Yellow bg  (grey 4)

Quoted text colouring wraps round every 4 levels, or 2 if in mail and the
'two colours' flag is set. 'bg' = background.

The default colours are set up for dark text on a light background (I use
black on white); the bracketed colours are the alternative defaults for light
on dark, where different (tested with white on black). Greys range from 1
(light) to 6 (dark).

The header ID colour acts as a catch-all for those not specially coloured.
Broken IDs are those not containing alphanumerics or hyphens, or not
terminated with ": ". "From " is only coloured as non-broken if it's on the
first line of the message (although it's really only of use when viewing a
single-message mbox file).

The long line warning applies to the body text and the signature; for what
should be obvious reasons, it isn't applied to the header. <width> is either
the display width or the format width, whichever is narrower. The 'format to
display width' settings are taken into account.

ZapEmail recognises URLs of the form "<{protocol}{address}>" or
"<URL:{protocol}{address}>". Recognised protocols are:
	finger://	http://		news:		telnet://
	ftp://		https://	nntp:		tn3270://
	gopher://	mailto:		rlogin://
Site names beginning with "ftp.", "www." or "news." are also recognised.
Minimal checking is performed on the {address}; however, email addresses
should contain one '@' else they'll not be coloured. mailto: is coloured
differently, and may be omitted if "URL:" is also. The "URL:" prefix is case
sensitive. (Note: some invalid URLs will be coloured. This will be corrected
so far as is practical in a future release.)

Emphasis display is designed to allow, as well as space, tab and line feed,
	any of (["' prior to the initial * _ / -
	any of )]"'.,:;!? after the trailing * _ / -
	any of the above within the emphasised text
but to disallow
	any of )]"'.,:;!? after the initial emphasis character
	sequences of more than one emphasis character
	text not containing alphanumerics or top-bit-set characters
Examples:
	Emphasised			Not emphasised
	(*this* is)			_but not this_
	/Wibble/.			*Disaster_!
	*Yes!*				*!No*
	*This*is*too*			*?*

(On loading, ZapEmail tries to hack WRAPWIDTH so that a redraw is forced if
in Email mode.)


MIME quoted printable
óóóóóóóóóóóóóóóóóóóóó

ZapEmail has the ability to encode and decode quoted printable ("qp").

When a file is loaded into ZapEmail mode (and it has a header which isn't
being ignored), ZapEmail will search for the content encoding type header and
if this specifies qp, decoding will be performed automatically. The header is
left untouched.

Similarly, when you save the file, it will be automatically qp encoded; you
don't get to see the consequences of this encoding, since ZapEmail then
decodes it immediately after Zap has saved the file. (This is similar to
BASIC mode's mangling of the line numbers and line lengths, and BASTXT mode's
tokenisation and detokenisation.)

The qp 'long line' break is done at the current wrap width, and the message
header is left intact. If any of this behaviour is incorrect according to the
qp specification, let me know.

The two flags 'Remove \n in QP =\n' and 'Remove quoting after QP =\n' affect
qp decoding; these are described in the 'Email mode menu' section above.

You can highlight top-bit-set characters if you so wish.

*** WARNING: if MIME headers are present and header ignore is enabled, the
text will *not* be encoded or decoded.


Passing URLs to web browsers
óóóóóóóóóóóóóóóóóóóóóóóóóóóó

Alt-double clicking is now supported by Zap; URL sending is configured as
part of this (by default), and so will work in any mode. Consequently,
ZapEmail no longer handles these clicks itself.


Zap's 'non-standard' option
óóóóóóóóóóóóóóóóóóóóóóóóóóó

Setting this flag has the following effects:

SPLITLINE will not insert quoting if the cursor was at the start or end of
the line (quoting characters are part of the start of the line). Spaces and
tabs will be removed.

JOINLINE will insert a space at the join.

DELTOSTART will delete the quoting if the cursor is at the end of the line.


Marking selections
óóóóóóóóóóóóóóóóóó

These restrictions apply when altering the selection directly via either a
mouse drag or the cursor keys. They do not apply to single Adjust clicks or
equivalent commands.

* The header separator
    The selection is limited to either the header or the message body. The
    separator can never be part of the selection.

* The .sig separator
    If you attempt to select this, it and the entire .sig will be selected.
    As soon as you move the cursor/pointer over either the body text or the
    .sig, the separator becomes deselected; moving back over the separator
    causes it and the .sig to be reselected.

It also ensures that quoting is selected or deselected appropriately; quoting
can never be partially selected, and if the quoting levels at each end of the
selection don't match (empty lines at the end of the selection excepted),
it's restricted to logical lines.

Where the selection would otherwise start and end immediately after quoting
characters, and the quoting is of the same depth, then the selection is
temporarily restricted to logical lines.

The logical lines restriction causes the inclusion the first line in the
selected area, and the exclusion of the last line, if incompletely selected
(the terminating line feed is, as usual, considered to be part of the line).

Since ZapEmail post-processes text mode's selection code, all the normal
selection operations are available.


Notes
óóóóó

This mode requires specific RETURN and TAB character codes. Trying to alter
them will have no effect.

When you load a file into Email mode:
   ZapEmail will perform some simple checks to determine whether the file
   looks like it's in mbox format and contains more than one message. If so,
   an attempt to select NewMail mode will occur (if this fails, Email mode
   will remain selected, but will ignore headers and signatures).

If that fails, or you (re)select Email mode:
   ZapEmail tries to determine whether the file has a header by examining the
   first line of text. This is done independently of the 'Ignore header'
   option. The cursor will, if in the (non-ignored) header, be moved past it;
   the window will *not* be scrolled to display it.

Commands which work on the header will do nothing if 'Ignore header' is
enabled; others which look for things in the header may either do nothing or
fall back on some suitable default action.

The missing .sig separator warning is disabled when 'Ignore .sig separator'
is ticked or 'Strip spaces' is selected.


Commands
òòòòòòòò

Those marked ** will only work in Email mode.

Note that minibuffer prompting will only occur if the command is issued *on
its own*, ie. not as part of a colon-separated list of commands such as might
be supplied to COMMAND or bound to a key.


Email_FixSig **
óóóóóóóóóóóó

Fixes the .sig separator. To do so, it searches backwards from the end of the
file, and stops as soon as it encounters either a valid or broken (missing
space) separator - in the latter case, it will be repaired.

This command does nothing if the 'Ignore .sig separator' option is enabled.


Email_StripSpcs **
óóóóóóóóóóóóóóó

This is the Email mode equivalent of STRIPSPACES. It performs space and
quoting altering according to bits in the supplied word:
	Bit	Action
	0	Strip spaces at ends of lines
	1	Strip tabs at ends of lines
	2	Tabify
	3	Strip quoting from otherwise blank lines
	4	Convert quoting to standard form
	5-31	Reserved

The quoting conversion is identical to that done by FORMATTEXT. The header
and .sig separator are always left unmodified (except possibly by the tabify
function, since this is done via STRIPSPACES).

Example:
	Email_StripSpcs &1B	does all of the above


Email_Stamp **
óóóóóóóóóóó

Regenerates the Date: line using the current date and time, and the
Message-ID: line using the format <date%user@domain>. For example:

From: Darren Salt <ds@youmustbejoking.demon.co.uk>
Date: Sun, 28 Jun 1998 12:57:01 +0100
Message-ID: <485D43FD54%ds@youmustbejoking.demon.co.uk>


Email_Date **
óóóóóóóóóó

Regenerates the Date: line using the current date and time, similarly to
Email_Stamp.


Email_ChangeQuoting **
óóóóóóóóóóóóóóóóóóó

Changes the quoting character for the current paragraph, starting at the
beginning of the current line. You may use any of the currently-defined
quoting characters; attempts to change to something else will result in it
using the default '>'.

Extra indent is preserved; the 'Spaces in quoting' flag is accounted for. No
reformatting is done.

Examples:
	Email_ChangeQuoting ":"		use : as quoting character
	Email_ChangeQuoting		prompts you


Email_SplitForInsert **
óóóóóóóóóóóóóóóóóóóó

Splits the text, ensuring that there are n empty lines, and places the cursor
on the second one. (At start of file, the first line is omitted; at end of
file, the third onwards are omitted.)

If wordwrap is enabled, then the text following the split is reformatted.

n is a byte parameter, and defaults to 3.


Email_IncQuoting **
óóóóóóóóóóóóóóóó

Increases the quoting level of the selected text, using the supplied quoting
character (as for Email_ChangeQuoting). It takes notice of the 'Spaces in
quoting' flag for already-quoted text, and, in non-standard mode, won't quote
empty lines.

Indentation is preserved. No reformatting is done.


Email_DecQuoting **
óóóóóóóóóóóóóóóó

Decreases the quoting level of the selected text. If a line is unquoted, it
remains unchanged.

Indentation is preserved as far as possible. No reformatting is done.


Email_RotEncode
óóóóóóóóóóóóóóó

Performs Rot13 encoding on the current selection; if there is none, or it's
in a different buffer, it calls Email_RotEncodeCur instead.


Email_RotEncodeCur
óóóóóóóóóóóóóóóóóó

Performs Rot13 encoding on the character at the cursor. The cursor is then
moved right by one character.


Email_FlagsToggle
óóóóóóóóóóóóóóóóó

This command alters the email mode flags for either the current window or the
default options. The command takes a word parameter which is treated in the
same way as for WFLAGS_TOGGLE.
	Bit	Description
	&00	FormatText uses '>' quoting
	&01-04	Disable emphasis (underline, bold, italic, strikethrough)
	&05-08	(unused)
	&09	Don't add X-headers
	&0A	Buttons (toggles pane on/off)
	&0B	Buttons -> Top
	&0C	Buttons -> Left
	&0D	Buttons -> Fleeting
	&0E	Don't reformat .sig (if not ignoring .sig separator)
	&0F	Remove \n in QP =\n
	&10	Remove quoting after QP =\n (not used if no \n removal)
	&11	Ignore .sig separator
	&12	2◊LF after attribution
	&13	Don't ignore header
	&14	No spaces in quoting
	&15	Format to display width
	&16	Allow non-'>' quoting
	&17	Mangle ctrl characters
	&18-1F	Format width modifier (for 'Format to display width')

For example:
	Email_FlagsToggle &17		toggle 'Mangle ctrl characters'
	Email_FlagsToggle &9637		enable it & toggle 'non-> quoting'

(See the ZapButtons documentation for details of the buttons flags.)


Email_MoreFlagsToggle
óóóóóóóóóóóóóóóóóóóóó

This command alters some more email mode flags for either the current window
or the default options. The command takes a word parameter which is treated
in the same way as for WFLAGS_TOGGLE.
	Bit	Description
	&08	Two-level quoting in mail
	&09	Avoid formatting split before quoting
	&0A	Highlight top bit set
	&0B	Auto unload signatures & taglines files
	&0C	Add a signature in the absence of ~Cmd
	&0D	Add a tagline in the absence of ~Cmd
	&0E	Strip .sig sep & ignore it if the chosen .sigs file is empty


Email_SetFormatMod
óóóóóóóóóóóóóóóóóó

This command sets the format width modifier, for either the current window or
the default options, to the supplied (quoted) byte parameter. It does *not*
enable the 'Format to display width' flag.

For example:
	Email_SetFormatMod "20"


Email_SetQuoting
óóóóóóóóóóóóóóóó

Sets the non-standard quoting characters to the supplied string. If no string
is supplied, you are prompted for one; the current list is automatically
inserted into the minibuffer.

You are allowed up to eight unique, valid characters; anything else is
ignored. (See the subsection 'Quoting' above for more details.)

If an empty string is supplied, the default list :"| is used; this can be
suppressed by using a string containing only invalid characters. (This allows
you to have non-standard quoting enabled while having no non-standard quoting
defined.)

The window will be redrawn if in Email mode and non-standard quoting is
enabled (this flag is *not* enabled by this command).


Email_AddQuotingChr
óóóóóóóóóóóóóóóóóóó

Adds a character (supplied as a string parameter) to the non-standard quoting
characters list. If no string is supplied, you are prompted for a character.

The character is only added if it is valid for use as a quoting character, it
is not already in the list, and there are less than eight characters already
defined.

The window will be redrawn if in Email mode and non-standard quoting is
enabled.


Email_RemQuotingChr
óóóóóóóóóóóóóóóóóóó

Removes a character (supplied as a string parameter) from the non-standard
quoting characters list. If no string is supplied, you are prompted for a
character.

The character is only removed if it is actually in the list; no warnings are
given for characters not in the list.

The window will be redrawn if in Email mode and non-standard quoting is
enabled.


Email_AddTagLine **
óóóóóóóóóóóóóóóó

Inserts a random tagline from the file "<Zap$3rdParty>.Salt.Taglines", first
ensuring that the message is LF-terminated. (Repeated action will remove the previously-added tagline in much the same way as repeated YANKs work.)

The taglines file will not be loaded until this command is used, and will be
reloaded if this command notices that it's been modified. If it's missing,
you'll be warned instead.

The file format is as follows:

<tagline 1>
 
<tagline 2>
 
<tagline 3>
<this one's long>
 

Those who would abuse this feature by using longer taglines than is generally
accepted do so at their own mailboxes' risk...

(Note that a file one byte long is treated as empty.)


Email_AddSignature **
óóóóóóóóóóóóóóóóóó

Inserts a random signature from a file in <ZapEmail$Signatures>, ensuring
that there is a valid .sig separator (broken ones will *not* be repaired). If
a .sig is already present, it is replaced. If the message is empty and
contains no .sig, empty lines may be inserted to ensure sufficient separation
between the header (or start of file) and the .sig.

See also the section "Configuring signature files".


Email_NextSignature **
óóóóóóóóóóóóóóóóóóó

Inserts the next signature from the currently-loaded signatures file,
ensuring and replacing as for Email_AddSignature. If no file is loaded, then
this command behaves identically to Email_AddSignature.

If a non-zero parameter is supplied, then the nth signature (modulo the
number of signatures) in the current file is used.

Which file you're editing, the contents of any From: header, and whether
you're editing mail or news are all ignored.


Email_EditTaglines
óóóóóóóóóóóóóóóóóó

Loads the taglines file for editing, first creating it if there isn't one.


Email_EditSigFiles
óóóóóóóóóóóóóóóóóó

Opens the signatures directory so that you can load a file for editing,
creating the directory if required.

If an attempt is made to use a badly-formed signatures file, then the next
time that this command is executed, it will (try to) load the file for you.


Email_Snip **
óóóóóóóóóó

Snips the selected text, preserving the quoting of the last line in the
selected area (if it isn't fully snipped), and inserts the supplied string -
you'll be prompted if one isn't supplied. If the string is null, then
"[snip]" is used.

No empty lines are inserted; if there's a line feed at or immediately before
the end of the selected area, it will be removed or left alone as necessary.
Quoting immediately to the left of (and on the same line as) the start of the
selection will be removed, as will surrounding spaces; quoting indent will be
preserved.

You can specify the tab character using '\t' or '\T', and linefeed by '\n' or
'\N'; to specify \, use '\\'. If \ is followed by any other character, then
that character is treated normally.

If you actually want to snip using a null string, just use '\' on its own.


Email_DecodeQP **
óóóóóóóóóóóóóó

Decodes MIME quoted printable (unless 7bit or 8bit encoding is specified),
and optionally discards the relevant MIME headers if present: this is
controlled by a numeric parameter, which (if non-zero) will cause the headers
to be preserved.

This is particularly useful for newsreaders which don't support MIME; it does
not require the MIME headers (or any headers at all, for that matter) to be
present in order to work.

Quoting is left intact where it immediately follows =\n.

(A future version may cope with situations where the quoting depth on the
next line is less than on the current line: either one less, or zero.)


Email_EncodeQP **
óóóóóóóóóóóóóó

Inserts suitable MIME header lines to tell ZapEmail to perform quoted
printable encoding prior to saving the file.

Like Email_DecodeQP, this command is only useful if your newsreader does not
support MIME. However, it requires that headers be supplied and that ZapEmail
isn't ignoring them in order to actually do anything, since ZapEmail looks
for the Content-Transfer-Encoding: header line when loading and saving.


Email_Encode8bit **
óóóóóóóóóóóóóóóó

Inserts suitable MIME header lines to say that the message/article is
unencoded 8-bit. It is otherwise identical to Email_EncodeQP.


Email_DecodeQPSel **
óóóóóóóóóóóóóóóóó

Applies immediate quoted-printable decoding to the selected text, if it's in
the current buffer. No header lines are removed.


Email_EncodeQPSel **
óóóóóóóóóóóóóóóóó

Applies immediate quoted-printable encoding to the selected text, if it's in
the current buffer. No header lines are added.


Email_ReturnReceiptTo **
óóóóóóóóóóóóóóóóóóóóó

Inserts a Return-Receipt-To: line and/or a Disposition-Notification-To: line,
according to the (optional) parameter, in the message header. The address
used is that found in the From: line.

  Parameter	Header(s) added or replaced
  0 or 1	Return-Receipt-To
  2		Disposition-Notification-To
  3		Return-Receipt-To, Disposition-Notification-To

If the message has no To: or Cc: line, then nothing will be done.

*** It should be noted that Return-Receipt-To: is non-standard, is not
    guaranteed to work, and is generally discouraged. It's included here
    because Newsbase recognises it...


Email_AntiSpam **
óóóóóóóóóóóóóó

With AST - Anti-Spam Technology. :-)

This command munges your email address in the From: line. This only works for
news (and therefore not with mail-to-news gateways, or moderated groups if
emailing to the moderator), and provides a measure of spam protection.

It will also append ".invalid".

Given a string parameter of the form "<x> <y>", this will substitute all
occurrences of string <x> with string <y> (having first done the reverse).
You must, however, ensure that neither string is a substring of the other:
using "sp spam" will not work.

This command is best used in your ~Cmd file (see section "Configuring
per-user commands").

The default ZapEmail button scripts file (Scripts) contains two antispam
buttons, one per button pane; you are advised to alter these instead if you
do not wish to put the commands in your ~Cmd file. Alternative spam
repellents may be added to ZapEmail's menus file (which you'll have to
create) if you so wish.


Email_AddHeaderLine **
óóóóóóóóóóóóóóóóóóó

Adds or replaces the first occurrence of a line in the message header. The
parameter is of the form:
	Header: text
	@MailHeader: text
	.NewsHeader: text
The '@' prefix tells ZapEmail to check for the To: header line, and the '.'
prefix tells it to check for the Newsgroups: line; in both cases, if the
header line is not found, then nothing is done. Using no prefix ensures that
neither is checked for.

The following escapes are recognised:

	Escape	Description		Example
	\f	the From: line		A. Person (me@some.where)
	\u	the email address	me@some.where
	\i	the user name		me
	\m	the mailname		some.where

Example:
	Email_AddHeaderLine ".X-no-archive: yes"
will insert the header line "X-no-archive: yes" if you are editing a news
article.

The same usage recommendations apply as for Email_AntiSpam. See also
ZapEmail's Types file for a working example.


Email_DelHeaderLine **
óóóóóóóóóóóóóóóóóóó

Removes the first occurrence of a given header line. The parameter is the
header name, prefixed with "@" or "." if you want it to be removed only in
mail or only in news.

Example:
	Email_DelHeaderLine "@X-no-archive"
will remove the last X-no-archive header if you are editing an email.


Email_ExecScript **
óóóóóóóóóóóóóóóó

Executes a user-specific script file.

(See the section "Configuring per-user commands" for more details.)


Email_Buttons
óóóóóóóóóóóóó

Selects a different buttons pane (if used in a buttons pane) and configures
it as the current pane. Any views created subsequently will use this pane.
For example, if you want the pane named "buttons1" in the template file,
you'd use "Email_Buttons 1".

To make the current pane the default, use 255 as the parameter. Don't forget
to save the options afterwards :-)

The supplied sets of buttons work as follows:

Name		Select click			Adjust click
----		------------			------------
Encode=QP	Email_EncodeQP			Email_Encode8bit
	+Shift	Email_EncodeQPSel
Decode=QP	Email_DecodeQP 0		Email_DecodeQP 1
		 (affecting header)		 (leaving header intact)
	+Shift	Email_DecodeQPSel
Stamp		Email_Stamp			Email_Date
Rot13		Email_RotEncode			(same)
> \n ◊		Email_StripSpcs &B		Email_StripSpcs &1B
		 (spaces, tabs, unused		 (spaces, tabs, unused
		  quoting)			  quoting, convert quoting
						  to standard form)
-- SPC		Email_FixSig			(same)
> std		Email_ChangeQuoting ">"		Email_ChangeQuoting
		 (convert to standard form)	 (convert to user-defined)
+> chr		Email_AddQuotingChr		(same)
-> chr		Email_RemQuotingChr		(same)
[snip]		Email_Snip ""			Email_Snip
		 (standard "[snip]")		 (enter your own)
+> inc		Email_IncQuoting ">"		Email_IncQuoting
		 (increment quoting level,	 (increment quoting level,
		  using standard form)		  using user-defined form)
-> dec		Email_DecQuoting		(same)
>A split >B	Email_SplitForInsert 3		(same)
Add .sig	Email_AddSignature		Email_NextSignature
Add tag		Email_AddTagline		(same)
Edit .sig	Email_EditSigFiles		(same)
		 (opens <ZapEmail$Dir>.Signatures)
Edit tag	Email_EditTaglines		(same)
		 (loads the taglines file)
RCPT		Email_ReturnReceiptTo		(same)
Spam X		Email_AntiSpam ".co. .com"	(same)
		 (replace first string with second in From: header)
Spell check	ImpressionSpell_Buf		Spell
		 (spellcheck message)		 (open ZapSpell's window)
No archive	Email_AddHeaderLine ".X-No-Archive: yes"
*B		JRF_Bracket " * *"		JRF_BracketSel " * *"
		 (embolden word)		 (embolden selection)
/I		JRF_Bracket " / /"		JRF_BracketSel " / /"
		 (italicise word)		 (italicise selection)
_U		JRF_Bracket " _ _"		JRF_BracketSel " _ _"
		 (underline word)		 (underline selection)
-S		JRF_Bracket " - -"		JRF_BracketSel " - -"
		 (strikethrough word)		 (strikethrough selection)
Save		QuickSave			(same)
Save & Close	QuickSave:CloseFile		(same)


Functions
òòòòòòòòò


Email_HasSignature
óóóóóóóóóóóóóóóóóó

Returns true if the message being edited has a .sig separator (and signatures
are enabled).


Email_FlagsToggle & Email_MoreFlagsToggle
óóóóóóóóóóóóóóóóó   óóóóóóóóóóóóóóóóóóóóó

Returns true if the specified flag bit (supplied as a byte parameter) is set.
See the commands of the same names for the flag bit details.


Email_HasHeaderLine
óóóóóóóóóóóóóóóóóóó

Returns true if the header is present. (False if Email mode isn't selected or
headers are being ignored or are not present.)


ZapButtons support
òòòòòòòòòòòòòòòòòò

This requires the files 'Templates', 'Sprites', 'Sprites22' and 'Scripts' to
be present. If a file 'Menus' is present, then this is used to generate the
menu displayed when you click Menu over the buttons pane; otherwise,
ZapEmail's built-in mode menu is used. (A suitable default menus file is
supplied, with two entries: the first leading to the mode menu, the second to
the colours menu.)

Changes to these files will NOT take effect until after Zap is quit and
rerun.

You may alter these if you wish; you may distribute modified files as long as
the standard files are also distributed unchanged.

Clicking Shift-Adjust on the toggle pane icon sets the default pane.


ZapSpell support
òòòòòòòòòòòòòòòò

This requires ZapSpell 0.09 or later. You will also need the ImpressionSpell
module, available either in your copy of Impression (if you have one), or
from Computer Concepts.

Basically, it prevents checking of the header, .sig, and any quoted text.


Credits
òòòòòòò

The Beta Testers (those who reported bugs and suggested ideas, or at least
said "Great, like it"):

Miles Sabin
	For the original, and suggesting that I "Ignore headers";
	for mentioning the dreaded word "wordwrap" ;-)
Sergio Monesi
	For finding the 77-column limit I'd imposed annoying
Ian Hinder
	For giving my old FormatText code some hammer
Joseph Heenan
	For continually complaining about config save failure
Tony Houghton
	For suggesting URL sending, and following it up;
	for mentioning a few other things - indent, wordwrap...;
	for pointing out a formatting split-before-quoting problem;
	no splitting on hyphens yet, though
Andy Fawcett
	Encouragement;
	for suggesting * and _ emphasis colouring
David Croft
	Encouragement :-)
Glyn Royds
	For hacking in non-standard quoting characters into his copy
Richard Hallas
	For wanting non-standard quoting;
	for wanting / emphasis colouring, and a foreground option
Jon Ribbens
	For pointing out the fallacy of Shift-double click and URL sending
And last, but not least...
Chris Manning
	For suggesting ensuring the file is LF terminated, then complaining
	  about the cursor moving if at EOF (a Zap 'feature');
	for breaking it (lots of times) and reporting back quickly;
	for complaining about errors in the documentation

The Users (those who suggested improvements which made it to implementation):

Tony Finch
	For being sensible (once I'd lightly singed him);
	for suggesting a definable width warning, and no width restriction
Richard Sterry
	For forwarding the ANT suite OLE info from Donald McFarlane
Martin Tillman
	For wanting a empty line after attribution, back in his Marcel-using
	  days
Samuel Penn
	For wanting more flexible non-standard quoting (given some of the
	  quoting I've seen...)
Nick Craig-Wood
	For wanting an improved (ie. better than TTFN/Messenger) tagline
	  and signature facility
Ian Richardson
	A little bug-hunting, a pointer to some URL info, and not wanting to
	  format .sigs
Robin Moffatt
	For wanting receipts returned to, and an anti-spam feature
Richard Atterer
	For wanting two-level quote colouring in mail, no X headers, and
	  email address mapping
Iain Truskett
	For wanting the next signature (Marcel not exporting headers...!)
And others with bug reports (you know who you are!)

The Developers (well, some of us):

Dominic Symes
	Without the text mode source, I probably wouldn't have done linewrap
	  and wordwrap;
	I hardly need mention Zap ;-)
Tim Tyler
	For ZapButtons, despite his NewMail mode ;-) ;
	for general bug hunting and Zap substyles;
James Aylett
	Yes, he said, addresses should be in a different colour from URLs,
	  and mailto: URLs should be treated as addresses
Matthew Hambley
	Things would have taken 'slightly' longer without his ZapHTML redraw
	  code

I'm not listing the users who said "Great, like it" because I suspect the
list would become longer than the rest of the help text ;-)

I don't remember who mentioned coloured URLs; I suspect Tony Houghton.


Copyright
òòòòòòòòò

The conditions of copying this program and its associated documentation are
the same as those of the main Zap application, with the following changes and
clarifications: development versions, eg. those distributed in beta test, are
not for general distribution. Otherwise, distribution is allowed as long as
all files are present and unmodified.

This software is provided as is with no warranty as to its suitability or
otherwise for any particular task. If it does anything nasty then I want to
know so I can fix it, but I cannot (and cannot afford to) take any
responsibility.

Please note that I reserve the right to make alterations to this program, its
operation, documentation, and/or conditions of use without notice in any way
I see fit. I rarely see fit to make things worse :-)


Contact
òòòòòòò

Darren Salt - Zap: ds@zap.tartarus.org
	     Misc: ds@youmustbejoking.demon.co.uk
	 Fallback: arcsalt@spuddy.mew.co.uk
