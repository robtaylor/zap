; s/module,fff
; converted from strongzap.bas by bas2asm.pl
	GET	h.StrongZap

sw_bit		* 1 << 26			; not used anymore?
beautify_bit	* 1 << 27

	ENTRY

	DCD	0x00
	DCD	StartUpHere
	DCD	0x00
	DCD	0x00
	DCD	D1
	DCD	ModHelpString
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	mod_flags

D1	=	"StrongZap",0
	ALIGN

ModHelpString
	=	"StrongZap",9, "0.15 (00 Jan 0000) © "
lp1	=	"Tim Tyler",0
	ALIGN

mod_flags       DCD	1				; 32 bit compatible

w_formmb
	DCD	0
	DCD	0
	DCD	0

Data3
	=	"Zap",0
	DCD	0

StartUpHere
	STMFD	sp!, {lr}
	LDR	r2, [r12, #0]
	CMP	r2, #0
	BNE	ModuleInit
	MOV	r0, #6
	MOV	r3, #0x20
	SWI	XOS_Module
	LDMVSFD	sp!, {pc}
	STR	r2, [r12, #0]
	ADRL	r0, Data47			; keep workspace pointer
	STR	r2, [r0, #0]
	MOV	r0, #0
	STR	r0, [r2, #20]
ModuleInit
	MOV	r0, #4
	STR	r0, [r2, #12]
	MOV	r0, #0x12
	ADR	r1, Data3
	SWI	XOS_Module			; check for Zap 1.00 - unnecessary?
	MOVVC	r0, #0x0C
	SWIVC	XOS_Module
	LDMVSFD	sp!, {pc}
	MOV	r12, r4
	LDR	r2, [r3, #20]
	ADD	r3, r3, r2
	LDRB	r0, [r3, #3]
	TEQ	r0, #'X'
	ADDEQ	r3, r3, #1
	LDRB	r0, [r3, #5]
	CMP	r0, #'9'
	RSBLSS	r0, r0, #'1'
	BHI	MakeError
	BNE	RefDataTab
	LDRB	r0, [r3, #7]
	CMP	r0, #'9'
	RSBLSS	r0, r0, #'0'
	BHI	MakeError
	BNE	RefDataTab
	LDRB	r0, [r3, #8]
	CMP	r0, #'9'
	RSBLSS	r0, r0, #'0'
	BHI	MakeError
RefDataTab
	ADR	r0, DataTable
	FNcall	Zap_AddMode
	ADR	r0, CmdTable
	FNcall	Zap_AddCommands
	LDMFD	sp!, {pc}

MakeError
	ADR	r0, ErrorMess
	SWI	OS_GenerateError
ErrorMess
	DCD	0x00
	=	"StrongZap requires Zap version 1.00 or greater.", 0
	=	0
	ALIGN

ObeyLabeled
	=	"Strong",0
	ALIGN

DataTable
	DCD	DataTable
	DCD	ObeyLabeled
	DCD	lp1
	DCD	0				; BaseMode = Text
	DCD	0x40D + 1<<14			; e_mode = 13 ; bit 10 = workspace, please!
	DCD	Initialisation			; e_init
	DCD	menu				; e_menu
	DCD	TableEnd - DataTable		; size of table
	DCD	0				; e_postload
	DCD	0				; e_presave  \ called before being saved
	DCD	0
	DCD	0 ;E_Start				; e_start     \ window entering this mode
	DCD	0 ;E_End				; e_end		\ window leaving this mode
	DCD	0				; mode_width	      \ find work area width
	DCD	0				; mode_linecol
	DCD	0
	DCD	0				; mode_clnlog
	DCD	0				; mode_clnphy
	DCD	0				; mode_clnoff
	DCD	0				; mode_nextline
	DCD	0				; mode_minus
	DCD	0				; mode_plus
	DCD	0				; e_sminus	 \ perform shift-left
	DCD	0				; e_splus	 \ perform shift-right
	DCD	0				; mode_cminus
	DCD	0				; mode_cplus
	DCD	redrawline			; e_redrawline \ redraw display line
	DCD	0				; mode_redrawlnum
	DCD	0
	DCD	0
	DCD	0				; e_tab		  \ tab key pressed
	DCD	0
	DCD	0
	DCD	0				; e_saveandrun
	DCD	0				; mode_calllinestart
	DCD	0				; mode_lineend
	DCD	0				; mode_linenext
	DCD	0				; mode_lineprev
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0
	DCD	0				; e_compile \ compile & run and don't exit
	DCD	0
	DCD	0				; e_run	    \ run the program being edited
	DCD	0				; e_runandquit \  run
	DCD	0x00				; e_basic   \ drops into language...?
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00
	DCD	0x00				; e_setwidth - changing window width
	DCD	0x00				; mode_prevline
	DCD	mode_prevline			; e_prevline \ find start of update reg'n
;	DCD	gotoopenwindow			; e_openwindow
TableEnd

menu	=	"ZapStrong:Menus",0
	ALIGN

; ---------- e_init -------------

Initialisation
	CMP	r1, #9
	BEQ	spellcheck
	CMP	r1, #1
	MOVCC	pc, lr
	STREQ	r0, [r11, #4]
	STREQ	r0, modenumberlocal
	TEQ	r1, #6
	ADREQ	r1, MenuExtension
	MOVEQ	pc, lr
	TEQ	r1, #2
	MOVNE	pc, lr
	STMFD	sp!, {r1, r7, r8, lr}
		;   here? yes!
	STMFD	sp!, {r0, r1, r7}
	MOV	r8, #'A'
	ADRL	r1, TableHere
loop2
	LDRB	r0, [r1]
	CMP	r0, r8
	BGE	GtIt
loop
	LDRB	r0, [r1], #1
	CMP	r0, #'z'
	BLE	loop
	LDRB	r0, [r1]
	CMP	r0, #'*'
	BNE	loop2
backinaction
	ADD	r8, r8, #1
	CMP	r8, #'Z'
	BLE	loop2
	LDMFD	sp!, {r0, r1, r7}
	MOV	r8, #0
	BL	ZapModeWord
	TEQ	r7, #0
	BEQ	nocfginit
	LDR	r0, [r7, #0]
	CMP	r0, #zizeofcfgwksp
	LDMEQFD	sp!, {r1, r7, r8, pc}
		;   no !Config...
nocfginit
	MOV	r0, #0x11				; is this right??
	FNcall	Zap_ModeColourNum			; change palette size.
	TEQ	r7, #0
	BEQ	noheapblkatall
	LDR	r1, [r7, #0]
	TEQ	r1, #zizeofcfgwksp
	BEQ	justendtheresnoneed
	MOV	r1, #zizeofcfgwksp	;   all vc
	MOV	r0, r7
	LDR	lr, [r12, #0]
	ADD	lr, lr, #8	;   zap call - ensure heap block
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	MOV	r7, r0
	STR	r1, [r7, #0]
	BL	OnToWrtMdeWrd
noheapblkatall
	MOV	r0, #zizeofcfgwksp
	LDR	lr, [r12, #0]
	ADD	lr, lr, #4	;   zap call - start heap block
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	MOV	r7, r0
	BL	OnToWrtMdeWrd
	MOV	r0, #zizeofcfgwksp	;   vc
	STR	r0, [r7]
	MOV	r0, #0
	STR	r0, [r7, #4]
	MOV	r0, #0x0D
	STR	r0, [r7, #8]
	LDR	r0, startupformatwd
	STR	r0, [r7, #0x0C]
	LDRVC	r0, SDsasa	;   DATA 5%/8% ! vc= no !config file ?
	LDRVC	r1, [r11, #4]
	MOVVC	r2, #0
	LDRVC	lr, [r12, #0]
	ADDVC	lr, lr, #0x0184	;   call - RD/WRT Zap data mode words.
	STMVCFD	sp!, {lr}
	MOVVC	lr, pc
	LDMVCFD	sp!, {pc}
	BLVC	UnkPreColBit	;   to set up colours with zmcs
justendtheresnoneed
	LDMFD	sp!, {r1, r7, r8, pc}


; ----------- command table ------------

CmdTable
	DCD	CmdTable
	DCD	0	; zapservice%
	=	"STRONG_FLAGSTOGGLE",0,0
	DCD	Cmdhtmlflagstoggle
	DCD	0

modenumberlocal
	DCD	0
startupformatwd
	DCD	0x77800000

GtIt
	ADRL	r0, AlphaIndex
	SUB	r7, r8, #'A'
	ADD	r0, r0, r7, LSL #2
	ADRL	r7, TableHere
	SUB	r7, r1, r7
	STR	r7, [r0]
	B	backinaction

MenuExtension
	=	"#",0
	=	"Link",0
	=	"=>",0
	=	"{ to }",0
	=	"< and >",0
	=	"Body",0
	=	"Number",0
	=	"File",0
	=	"Char",0
	=	"Command",0
	ALIGN


UnkPreColBit
	STMFD	sp!, {r1-r4, lr}
	ADR	r3, DefaultColours
	LDR	r1, [r11, #4]		;   normally 0
PreZModColBit
	MOV	r2, #9			;   start colours
ZModColBit
	LDRB	r0, [r3], #1
	FNcall	Zap_ModeColour		;   Read colour definitions
	LDMVSFD	sp!, {r1-r4, pc}
	ADD	r2, r2, #1
	TEQ	r2, #0x13		;   max colours
	BNE	ZModColBit
	LDMFD	sp!, {r1-r4, pc}

DefaultColours				; Colour Numbers :
	=	0x0A			;  9 #
	=	0x0F			; 10 Link
	=	0x01			; 11 =>
	=	0x04			; 12 { to }
	=	0x03			; 13 < and >
	=	0x0C			; 14 Body (really? - why not fg?)
	=	0x0E			; 15 Number
	=	0x08			; 16 File
	=	0x02			; 17 Char
	=	0x09			; 18 Command
	ALIGN


Tk1frm12andret
	LDR	r0, [r11, #12]
	SUBS	r0, r0, #1
	STR	r0, [r11, #12]
	MVNNE	r0, #0
	MOV	pc, lr

ZapModeWord
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
	LDR	r2, [r12, #0]
	ADD	r2, r2, #0x0164	;   Zap_GetModeWord - read the mode word
	MOV	lr, pc
	MOV	pc, r2
	MOV	r7, r0
	LDMFD	sp!, {r0-r2, pc}
OnToWrtMdeWrd
	STMFD	sp!, {r0-r2, lr}
	LDR	r1, [r11, #4]
WrtMdeWrd
	MOV	r0, r7
	LDR	r2, [r12, #0]
	ADD	r2, r2, #0x0168	;   zap call...write the mode word
	MOV	lr, pc
	MOV	pc, r2
	LDMFD	sp!, {r0-r2, pc}
localdefltmw
	DCD	0

initialiseheap
	STMFD	sp!, {r1-r6, r8-r12, lr}
	MOV	r0, #zizeofcfgwksp
	LDR	lr, [r12, #0]
	ADD	lr, lr, #4
	STMFD	sp!, {lr}
	MOV	lr, pc
	LDMFD	sp!, {pc}
	MOV	r7, r0
	MOV	r0, #zizeofcfgwksp
	STR	r0, [r7]
	LDR	r0, localdefltmw
	LDR	r0, [r0, #0xC]
	STR	r0, [r7, #0xC]
	MOV	r0, #0x0D				; appears to be col_angles
	STR	r0, [r7, #8]				; AT THE START MAKE COLOUR OK?
	BL	OnToWrtMdeWrd
	LDMFD	sp!, {r1-r6, r8-r12, pc}


SDsasa	DCD	0x1200004D



adrofrsix
	DCD	0


; ----------- e_redrawline -----------

redrawline
	STMFD	sp!, {r6, r12, lr}
	STMFD	sp!, {r7, r11}
	STR	r6, adrofrsix
	BL	Branch208
	BL	ZapModeWord
	LDR	r2, [r7, #8]			; Preserved start colour & flags
	LDR	r3, [r7, #0x0C]
	ADRL	r12, w_formmb
	STR	r3, [r12, #8]
	LDMFD	sp!, {r7, r11}			; calls...
	LDR	r3, [r8, #60]			; char width of cached line (x 8)
	STR	r4, [r12]
	LDRB	r12, [r8, #88]			; At very beginning.
	BIC	r2, r2, #0x700
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #col_angles
	ORR	r2, r2, #0xF000			; ! ; fe? ; ff000
	BIC	r2, r2, #0x00E00000		; HERE? &0F000000
	LDR	r5, [r9, #0]			; ?
	LDR	r10, [r9, #4]			; ?
	ADD	r10, r10, r5
	TEQ	r7, r10
	LDMEQFD	sp!, {r6, r12, pc}		;   end - return for good!
	LDR	r10, [r9, #56]			;   ?
	ADD	r10, r10, r5
	CMP	r7, r10
	MOVCC	r10, r5
	MOV	r6, #0
BitAftStart
	SUB	r6, r6, #1
	LDRB	r0, [r7], #-1
	TEQ	r0, r12
	BEQ	UpToStart
	CMP	r7, r10
	BCS	BitAftStart
	TEQ	r5, r10
	LDRNE	r10, [r9, #60]
	SUBNE	r7, r7, r10
	MOVNE	r10, r5
	CMP	r7, r10
	BCS	BitAftStart
	SUB	R6,R6,#1			; cl fix
	SUB	R7,R7,#1			;
UpToStart					;
	ADDS	r6, r6, #2			;
	ADD	r7, r7, #2			;
	SUBPL	r7, r7, r6
	LDMPLFD	sp, {r6}
	TEQ	r5, r10
	LDREQ	r10, [r9, #f_splito]
	ADDEQ	r10, r10, r5
	LDRNE	r10, [r9, #f_splits]
	ADDNE	r5, r5, r10
	LDRNE	r10, [r9, #f_len]
	ADDNE	r10, r10, r5
	LDRB	r0, [r8, #w_tabchar]
	ORR	r12, r12, r0, LSL #24
	LDR	r0, [r8, #w_bpl]
	ORR	r12, r12, r0, LSL #12
RtAtStrtA
	MOV	lr, #0				; zero column count
RtAtStrtB
	CMP	r7, r10				; at split
	BCC	Branch13
	LDR	r10, [r9, #f_len]
	ADD	r10, r10, r5
	CMP	r7, r10
	LDMCSFD	sp!, {r6, r12, pc}
	LDR	r1, [r9, #f_splits]
	ADD	r7, r7, r1
	ADD	r5, r5, r1
	ADD	r10, r10, r1
Branch13
	LDRB	r0, [r7], #1			; get char
	AND	r1, r12, #0xFF
	EOR	r2, r2, #0x0400			; toggle flag for following test
	TEQ	r0, r1
	TSTEQ	r2, #0x0400
	BICEQ	r2, r2, #0x700			;
	BICEQ	r2, r2, #0xFF
	ORREQ	r2, r2, #col_angles
	BEQ	RtAtStrtB
	BIC	r2, r2, #0x0400
	TEQ	r0, r1
	BEQ	BranchNL
	CMP	r6, #0				; have we reached this physical line?
	MOVGT	r1, #1
	STRGTB	r1, [r6, r3,LSL #1]
		; BGT	  tostorem
bftostorem
	AND	r1, r2, #0xFF
	CMP	r1, #col_angles
	BEQ	BNL2

Backhome
	AND	r1, r2, #0xFF				; Here begins the |G-type GStrans Testing
	CMP	r1, #col_hash				; #command
	CMPNE	r1, #col_curlies			; {command}
	BEQ	aftertestA
		; TEQ	  R0,#ASC">" ;  GSTrans Testing1
		; BEQ	  GSTtest
GSTstop
	CMP	r6, #0
	BLE	aftert7
	LDRB	r1, [r6, #-1]
	CMP	r1, #'\'
	BNE	aftertestA
	SUB	r1, r3, #1
	LDRB	r1, [r6, r1]
	TEQ	r1, #col_chars
	BEQ	aftertestA
	SUB	r1, r3, #1
	MOV	r0, #col_eqgt
	STRB	r0, [r6, r1]
	MOV	r0, #col_chars
	STRB	r0, [r6, r3]
	LDRB	r0, [r7, #-1]
	B	BeforeColour	;  AfterColour%

aftert7
	LDR	r1, Sol7
	ADD	r1, r1, #2
	CMP	r7, r1
	BLE	aftertestA	;   code never fires?
	LDRB	r1, [r7, #-2]	;   in hope
	CMP	r1, #'\'
	BEQ	BeforeColour	;  AfterColour%
aftertestA
	AND	r1, r2, #0xFF
	CMP	r1, #col_hash
	BEQ	ComCodeRestart
	TEQ	r0, #'{'
	BEQ	CurlyBrackOpen
	TEQ	r0, #'<'
	BEQ	pointyBrackOpen
	TEQ	r0, #'>'
	BEQ	pointyBrackClose
	TEQ	r0, #'='
	TEQNE	r0, #'-'
	BEQ	EqualsClose
endvariouschecks
	AND	r1, r2, #0xFF
	CMP	r1, #col_numbers
	CMPEQ	r0, #':'
	BEQ	colonendofeff
	CMP	r1, #col_curlies
	BEQ	ComCodeRestart
	TST	r2, #0x10000000				; start of line flag...
	BNE	NotatStart
	LDR	r1, Sol7
	ADD	r1, r1, #2
	CMP	r7, r1
	BGT	aftercchk
	TEQ	r0, #'#'
	TSTEQ	r2, #0x04000000
	BEQ	CommentStart
aftercchk
NotatStart
	TST	r2, #0x0100				; ok
	BICNE	r2, r2, #0xFF				; COL cream/normal - lt grey (= &0B);
	ORRNE	r2, r2, #col_body			; testing very dubious TST code...
	AND	r1, r2, #0xFF
	TEQ	r1, #col_curlies			; {command}
	TEQNE	r1, #col_hash				; #command
	BEQ	BranchYYY
afterteststop
	AND	r1, r2, #0xFF
	TEQ	r1, #col_body
	BEQ	BeforeColour
	TEQ	r1, #col_angles
	BICEQ	r2, r2, #0xFF
	ORREQ	r2, r2, #col_body
	TST	r2, #0x20000000
	BNE	NotANumber
	AND	r1, r2, #0xFF
	TEQ	r1, #col_curlies
	TEQNE	r1, #col_hash
	TEQNE	r1, #col_numbers
	BNE	BeforeColour
		; TST	  2,#&08000000
		; BNE	  NotANum2%
		; TEQ	  R0,#ASC"&"
		; BEQ	  PreTisNum%
	CMP	r0, #'9'
	RSBLSS	r1, r0, #'0'
	BGT	killnumbers
TisANumber
		;   not numbers?
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #col_numbers
	TST	r2, #0x80000000
	BICNE	r2, r2, #0x90000000
		;  B	   BeforeColour%
NotANumber
	AND	r1, r2, #0xFF
	TEQ	r1, #col_hash
	TEQNE	r1, #col_curlies
	TEQNE	r1, #col_numbers
	BNE	DontBother
	CMP	r0, #'}'
	BEQ	Bother
	CMP	r0, #'@'
	BGT	DontBother
Bother
	STMFD	sp!, {lr}
	BL	TableChk2
	LDMFD	sp!, {lr}
DontBother
	TST	r2, #0x00E00000
	BNE	CmdCntChk
	TEQ	r0, #'}'
	BEQ	CurlyBrackClose

AfterCmdCntChk
		; And	  R1,R2,#&FF
		; CMP	  1,#&12
		; CMPEQ	  0,#ASC";"
		; BICEQ	  2,2,#&FF
		; OrrEQ	  2,2,#&0C
	AND	r1, r2, #0xFF
	TEQ	r1, #col_hash
	BEQ	BeforeColour
	TEQ	r1, #0x02
	BNE	SymbolChecking	;    BR if not normal colour...
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #col_body
	TEQ	r0, #'_'	;   If numbers check for end of numbers
	BEQ	PlainNoOSChk
	CMP	r0, #'9'
	RSBLSS	r1, r0, #'/'	;   = asc "0"
PlainNoOSChk
	BICLS	r2, r2, #0xFF
	ORRLS	r2, r2, #0x02
	BLS	BeforeColour
SymbolChecking
	CMP	r6, #0
	BLT	BeforeColour	;   BLT	    BeforeColour%
	TST	r2, #0x8000000
	BNE	ErrEchConf
		; TEQ	  R0,#ASC"!" ;  ?
		; TEQNE	  R0,#ASC"#" ;  ?
		; TEQNE	  R0,#ASC"%" ;  ?
		; TEQNE	  R0,#ASC"*" ;  ?
		; MovEQ	  R1,#&0B    ;  ?
		; .fromslash
		; STREQB  R1,[R6,R3]
		; BEQ	  AfterColour%
BeforeColour
	TEQ	r0, #' '
	TEQNE	r0, r12, LSR #24		; = tab
	BEQ	TabbingSub
Branch24
	CMP	r6, #0
	BLE	firstpass			;   new addition to test
	ANDGT	r1, r2, #0x1F			;   write colours
	STRGTB	r1, [r6, r3]
AfterColour
	CMP	r6, #0
	STRGTB	r0, [r6], #1
firstpass
	ADD	lr, lr, #1
BeginOfEnd
	AND	r1, r12, #0xFF			; end character... yes! At last...
	TEQ	r0, r1				;  end character... yes!
		; ADDEQ	  R11,R11,#1  ;  This code only executed if <CR>...
	BICEQ	r2, r2, #0x78000000		; start of line flags...
	CMP	r6, #0
	ADDLTS	r6, r6, #1
	BMI	RtAtStrtB			; still on previous physical line
	LDMEQFD	sp, {r6}			; reached start - restore r6
	BEQ	RtAtStrtA
	AND	r1, r12, #0xFF			; end character... yes! At last...
	TEQ	r0, r1				; end character... yes!
	BEQ	tocheckbackwardsnow
	ORRNE	r2, r2, #0x0400

backcheckbackwardsnow
	BIC	r1, r12, #0xFF000000		; if not width...
	CMP	lr, r1, LSR #12
	BICLT	r2, r2, #0x0400
	BLT	RtAtStrtB			; go round loop...
	BEQ	tohaveajollygoodtime

tohaveajollygoodback
	BIC	r0, r12, #0xFF000000
	CMP	lr, r0, LSR #12
	BICGE	r2, r2, #0x0400	;   NE
	AND	r0, r12, #0x0200
	ORR	r2, r2, r0
	LDMFD	sp!, {r6, r12}
	STMFD	sp!, {r7, r11}
	BL	Branch208
	BL	ZapModeWord
	STR	r2, [r7, #8]			; store current colour for next line
	LDMFD	sp!, {r7, r11, pc}		; on exit set things up... r7...

ComCodeRestart
	B	afterteststop
killnumbers
	AND	r1, r2, #0xFF
	TEQ	r1, #col_numbers
	BNE	NotANumber
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #col_curlies
	B	NotANumber
CmdCntChk
	CMP	r0, #32
	BNE	AfterCmdCntChk
	CMP	r6, #0
	BGT	r6version
	LDR	r1, Sol7
	ADD	r1, r1, #2	;   ???
	CMP	r7, r1
	CMP	r6, #0
	MOVLE	r1, #10
	LDRGTB	r1, [r7, #-2]	;   danger
overdangerperhaps
	CMP	r1, #32
	BEQ	AfterCmdCntChk
	MOV	r1, r2, LSR #21
	AND	r1, r1, #7
	SUBS	r1, r1, #1
	BICEQ	r2, r2, #0x10000000
	BIC	r2, r2, #0x00E00000
	ORR	r2, r2, r1, LSL #21
	B	AfterCmdCntChk

r6version
	LDR	r1, Sol6	;   13/10
	SUB	r1, r1, #1
	CMP	r6, r1	;   13/10
	LDRGTB	r1, [r6, #-1]	;   13/10
	BGT	overdangerperhaps	;   13/10
	MOV	r1, #' '
	B	AfterCmdCntChk	;   13/10

ErrEchConf
	CMP	r6, #0
	BLE	AfterColour
	AND	r1, r2, #0xFF
	CMP	r1, #col_numbers
	BEQ	BeforeColour
	CMP	r1, #col_body
	MOVEQ	r1, #0x02
	STREQB	r1, [r6, r3]
	TEQ	r0, #' '
	TEQNE	r0, r12, LSR #24	;   = tab?
	BEQ	TabbingSub
	B	AfterColour

NotANum2
	CMP	r6, #0
	BLE	NotANumber
	CMP	r0, #'%'
	BGT	NotANumber
	SUB	r1, r3, #1
	LDRB	r1, [r6, r1]
	AND	r1, r1, #0xFF
	CMP	r1, #col_numbers
	BNE	NotANumber
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #col_body
	B	NotANumber

BranchNL
Bother2
	AND	r1, r2, #0xFF
	TEQ	r1, #col_hash
	TEQNE	r1, #col_curlies
	TEQNE	r1, #col_numbers
	BNE	DontBother2
	STMFD	sp!, {lr}
	BL	TableChk2	;   swap with sect below?;;;
	LDMFD	sp!, {lr}
DontBother2
	MOV	lr, #0x70000000	;	   ;;Jeez, what a mess!;;
	B	BeginOfEnd
BNL2
	BIC	r2, r2, #0x10000000	;   START OF LINE FLAGS SET...
	STR	r6, Sol6
	SUB	r1, r7, #1
	STR	r1, Sol7
	B	Backhome

Sol6	DCD	0
Sol7	DCD	0

BranchYYY
	CMP	r6, #0
	BLT	BeforeColour	;   BLT	    BeforeColour%
	CMP	r0, #'9'
	RSBLSS	r1, r0, #'0'
	MOVLS	r1, #col_numbers
	STRLSB	r1, [r6, r3]
	BLS	AfterColour
	LDR	r1, Sol7
	ADD	r1, r1, #2
	CMP	r7, r1
	MOVLE	r1, #10
	LDRGTB	r1, [r7, #-2]	;   danger
	TEQ	r0, #'.'	;   if in number
	BNE	TryNextA
	CMP	r1, #'9'
	BGT	TryNextA
	CMP	r1, #'0'
	BLT	TryNextA
	MOV	r1, #col_numbers
	STRB	r1, [r6, r3]
	B	AfterColour
TryNextA
	TEQ	r0, #'_'	;   if in number
	BNE	BeforeColour
	CMP	r1, #'9'
	BGT	BeforeColour
	CMP	r1, #'0'
	BLT	BeforeColour
	MOV	r1, #col_numbers
	STRB	r1, [r6, r3]
	B	AfterColour

pointinnum
	LDRB	r1, [r7, #-2]				; pardon?
	CMP	r1, #'9'
	BGT	NotANumber
	CMP	r1, #'/'
	BLE	NotANumber
	LDRB	r1, [r7]
	CMP	r1, #'9'
	BGT	NotANumber
	CMP	r1, #'/'
	BLE	NotANumber
	B	TisANumber				; in a number...

testampersand
	CMP	r6, #0
	BLE	afterteststop
	LDRB	r1, [r6, #-1]
	TEQ	r1, #'&'
	BNE	afterteststop
	SUB	r1, r3, #1
	MOV	r0, #col_fg
	STRB	r0, [r6, r1]
	LDRB	r0, [r7, #-1]
	B	afterteststop

GSTtest
	CMP	r6, #0
	BLT	GSTstop
	MOV	r0, #0
gstchklp
	SUB	r0, r0, #1
	ADD	r1, r6, r0
	CMP	r1, #0
	BLT	notaGSTseq
	LDRB	r1, [r6, r0]
	CMP	r1, #' '
	BLE	notaGSTseq
	CMP	r1, #127
	BGT	notaGSTseq
	CMP	r1, #'<'
	BNE	gstchklp
	ADD	r6, r6, r3
	MOV	r1, #col_body
	STRB	r1, [r6, r0]
	MOV	r1, #col_chars
	ADD	r0, r0, #1
roundAloop
	STRB	r1, [r6, r0]
	ADD	r0, r0, #1
	CMP	r0, #0
	BLT	roundAloop
	SUB	r6, r6, r3
	MOV	r1, #col_body
	STRB	r1, [r6, r3]
	MOV	r0, #'>'
	B	AfterColour
notaGSTseq
	MOV	r0, #'>'
	B	GSTstop


CommentStart
		;   | comment..........
	AND	r1, r2, #0xFF
	CMP	r1, #col_link	;   in quotes?
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #col_hash
	ORRNE	r2, r2, #0x10000000
	B	BeforeColour

QuoteBit
		;   "Quotes"
	AND	r1, r2, #0xFF
	CMP	r1, #col_hash
	BEQ	BeforeColour
	CMP	r1, #col_link
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #col_link
	B	BeforeColour	;  new code...
		; BNE	  BeforeColour%

colonendofeff
	STMFD	sp!, {lr}
	BL	TableChk2	;   **************************
	LDMFD	sp!, {lr}
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #col_body
	ORR	r2, r2, #0x20000000
	MOV	r1, #0x11
	CMP	r6, #0
	BLE	firstpass	;   new addition to test
	STRB	r1, [r6, r3]
	B	AfterColour

CurlyBrack
		;   "No {} NUFFIN"
	CMP	r6, #0
	ANDGT	r1, r2, #col_numbers
	STRGTB	r1, [r6, r3]
	BIC	r2, r2, #0xFF
	MOV	r1, r2, LSR #24
	AND	r1, r1, #0x01	;   Bits for {} depth
	CMP	r1, #0x00
	ORREQ	r2, r2, #col_body			; COL Cream/Normal
	ORRNE	r2, r2, #col_curlies
	B	AfterColour

CurlyBrackOpen
		;   originally for ' these ' ; "{"
	ORR	r2, r2, #0x10000000
	AND	r1, r2, #0xFF
	TEQ	r1, #col_link
	TEQNE	r1, #col_hash
	BEQ	BeforeColour
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #col_curlies
	ORR	r2, r2, #0x1000000
	ORR	r12, r12, #0x0200
	B	BeforeColour

CurlyBrackClose
		;   originally for ' these ' ; "}"
	ORR	r2, r2, #0x10000000
	AND	r1, r2, #0xFF
	TEQ	r1, #col_link
	TEQNE	r1, #col_hash
	BEQ	BeforeColour
		; CMP	  1,#&12
		; OrrEQ	  1,#&1000000
	BIC	r2, r2, #0x1000000
	MOV	r1, r2, LSR #24
	AND	r1, r1, #0x01	;   Bits for {} depth
	TEQ	r1, #0x0
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #col_curlies
	ORRNE	r12, r12, #0x0200
	BNE	BeforeColour
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #col_curlies
	BIC	r12, r12, #0x0200
	B	CurlyBrack

pointyBrack
		;   "No {} NUFFIN"
	MOV	r1, #col_angles
	CMP	r6, #0
	STRGTB	r1, [r6, r3]
		;     AndGT   R1,R2,#&0D
		;     STRGTB  R1,[R6,R3]
	BIC	r2, r2, #0xFF
	MOV	r1, r2, LSR #24
	AND	r1, r1, #0x01	;   Bits for {} depth
	CMP	r1, #0x00
	ORREQ	r2, r2, #col_body			;   COL Cream/Normal
	ORRNE	r2, r2, #col_link
	B	AfterColour

pointyBrackOpen
		;   originally for ' these ' ; "{"
	AND	r1, r2, #0xFF
	TEQ	r1, #col_hash
	TEQNE	r1, #col_curlies
	BEQ	BeforeColour
	LDR	r1, [r9, #f_ptr]
	SUB	r7, r7, #2
	CMP	r7, r1
	ADDLT	r7, r7, #2
	BLT	straightp
	STMFD	sp!, {r2}
	LDR	r2, [r9, #f_splito]
	ADD	r2, r1, r2
	CMP	r7, r2
	MOVCC	r1, r7
	BCC	inbothalfalrea
	LDR	r2, [r9, #f_splite]
	ADD	r2, r1, r2
	CMP	r7, r2
	LDRCC	r1, [r9, #f_splits]
	SUBCC	r1, r7, r1
	MOVCS	r1, r7
inbothalfalrea
	LDMFD	sp!, {r2}
	LDRB	r1, [r1]	;   get char
	ADD	r7, r7, #2
	CMP	r1, #'<'
		; CMPNE	  1,#ASC"-"
		; CMPNE	  1,#ASC"="
	BEQ	tonormality
straightp
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #col_link
	ORR	r2, r2, #0x1000000
	ORR	r12, r12, #0x0200
	MOV	r1, #col_angles
	CMP	r6, #0
	STRGTB	r1, [r6, r3]
	B	AfterColour

pointyBrackClose
		;   originally for ' these ' ; "}"
	ORR	r2, r2, #0x10000000
	AND	r1, r2, #0xFF
	TEQ	r1, #col_hash
	BEQ	BeforeColour
	LDR	r1, Sol7
	ADD	r1, r1, #2
	CMP	r7, r1
	BLE	BeforeColour
	LDRB	r1, [r7, #-2]	;   get char
	CMP	r1, #'='
	BEQ	foundeqgt
	AND	r1, r2, #0xFF
	TEQ	r1, #col_link
	TEQNE	r1, #col_files
	BNE	BeforeColour
	BIC	r2, r2, #0x1000000
	MOV	r1, r2, LSR #24
	AND	r1, r1, #0x01	;   Bits for {} depth
	TEQ	r1, #0x00
	BICNE	r2, r2, #0xFF
	ORRNE	r2, r2, #col_link
	ORRNE	r12, r12, #0x0200
	BNE	BeforeColour
	BIC	r12, r12, #0x0200
	B	pointyBrack

EqualsClose
	AND	r1, r2, #0xFF
	TEQ	r1, #col_link
	BNE	endvariouschecks
	LDR	r1, Sol7
	ADD	r1, r1, #2
	CMP	r7, r1
	BLT	endvariouschecks
	LDRB	r1, [r7, #-2]	;   get char
	CMP	r1, #'<'
	BNE	endvariouschecks
tonormality
	MOV	r1, #col_body
	SUBS	r6, r6, #1
	CMP	r6, #0
	STRGTB	r1, [r6, r3]
	ADD	r6, r6, #1
	BIC	r2, r2, #0xFF
	ORR	r2, r2, r1
		;  SWI &107
	B	BeforeColour

foundeqgt
	AND	r1, r2, #0xFF
	TEQ	r1, #col_link
	BNE	BeforeColour
	MOV	r1, #col_eqgt
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #col_files			; after link to...
	CMP	r6, #0
	BLE	AfterColour
	STRB	r1, [r6, r3]
	SUB	r3, r3, #1
	STRB	r1, [r6, r3]
	ADD	r3, r3, #1
	B	AfterColour

TabbingSub
	AND	r1, r2, #0xFF
	TEQ	r1, #col_angles				;
	TEQNE	r1, #col_eqgt				;
	ORREQ	r2, r2, #0x0100				; set 'next field now' bit
	AND	r1, r4, #0x3000				; get tab mode
	TEQ	r1, #0					; none
	TEQEQ	r0, r12, LSR #24			; is this the tab char?
	BEQ	AfterColour				; yes - just store it (Zap will set colour)
	TEQ	r0, #' '
	BEQ	Branch24				; not a tab
	CMP	r6, #0
	BLT	BeginOfEnd				; nothing to do - before this physical line
	MOV	r0, #9
	TEQ	r1, #0x1000
	MOVEQ	r0, #' '
	TEQ	r1, #0x3000
	MOVEQ	r0, #'-'
TabLoop
	MOV	r1, #col_controls
	STRB	r1, [r6, r3]				; fg colour
	MOV	r1, #col_bg2
	STRB	r1, [r6, r3,LSL #1]			; bg colour
	STRB	r0, [r6], #1
	ADD	lr, lr, #1
	AND	r1, r4, #0x3000
	TEQ	r1, #0x2000
	MOVEQ	r0, #' '				; (->      )
	BIC	r1, r12, #0xFF000000			; get bpl
	TEQ	lr, r1, LSR #12
	TSTNE	lr, #7
	BNE	TabLoop
	AND	r0, r4, #0x3000
	TEQ	r0, #0x3000
	MOVEQ	r0, #9					; (------>)
	STREQB	r0, [r6, #-1]
	MOV	r0, r12, LSR #24			; tab char
	B	BeginOfEnd


;--------------
; table lookup

storedr6flu
	DCD	0
cntcharback
	DCD	0
locssforcase
	DCD	0

TableChk2
	STR	r6, storedr6flu
	STMFD	sp!, {r4-r12, lr}
		;  LDR	   R7,Sol6
	MOV	r8, r7
	LDR	r1, [r9, #f_ptr]
	LDR	r12, [r9, #f_splito]
	ADD	r12, r1, r12
	CMP	r8, r12
	BCC	ploughonin
	LDR	r12, [r9, #f_splite]
	ADD	r12, r1, r12
	CMP	r8, r12
	LDRCC	r1, [r9, #f_splits]
	ADDCC	r8, r8, r1
ploughonin
	MVN	r11, #0
_altered_0
	SUB	r11, r11, #1
	ADD	r4, r8, r11
	LDR	r1, [r9, #f_ptr]
	CMP	r4, r1
	BCC	notanumberbackedonto
	LDR	r12, [r9, #f_splito]
	ADD	r12, r1, r12
	CMP	r4, r12
	BCC	inbothalfTC2
	LDR	r12, [r9, #f_splite]
	ADD	r12, r1, r12
	CMP	r4, r12
	LDRCC	r1, [r9, #f_splits]
	SUBCC	r4, r4, r1
inbothalfTC2
	LDRB	r1, [r4]
	CMP	r1, #'{'
	CMPNE	r1, #'}'
	CMPNE	r1, #'@'
	BGT	_altered_0
	CMP	r1, #'0'
	BLT	dontloop
	CMP	r1, #'9'
	BLE	_altered_0
dontloop
rightatverystart
notanumberbackedonto
	ADD	r11, r11, #1
	ADD	r4, r8, r11
	ADD	r11, r11, #1
	RSBS	r1, r11, #0
	BEQ	notANYone			; nothing to do
	STR	r1, cntcharback
	LDR	r1, [r9, #f_ptr]
	CMP	r4, r1
	BCC	notANYone
	LDR	r12, [r9, #f_splito]
	ADD	r12, r1, r12
	CMP	r4, r12
	BCC	inbothalfTC3
	LDR	r12, [r9, #f_splite]
	ADD	r12, r1, r12
	CMP	r4, r12
	LDRCC	r1, [r9, #f_splits]
	SUBCC	r4, r4, r1
inbothalfTC3
	LDRB	r1, [r4]
	FNupper	r1
	CMP	r1, #'A'
	BLT	notANYone
	CMP	r1, #'Z'
	BGT	notANYone
	SUB	r1, r1, #'A'
	ADRL	r12, AlphaIndex
	ADD	r1, r12, r1, ASL #2
	LDR	r1, [r1]
	ADRL	r12, TableHere
	ADD	r12, r12, r1
		;  TST	   R2,#&04000000
		;  FNlong_adr("NE",12,TableEval)
lpa2
	MOV	r8, #0	;   tablepointer
		; LDRB	  1,[12]
		; CMP	  1,#ASC"#"
		; MOV	  1,#0
		; MVNEQ	  1,#0
		; ADDEQ	  12,12,#1
		; STR	  1,locssforcase
lpa1
	LDRB	r1, [r12, r8]
	FNupper	r1
	CMP	r1, #'{'
	MOVGT	r10, r8
	BGT	gotexactmatch
	MOV	r7, r1
	ADD	r5, r4, r8
	LDR	r1, [r9, #f_ptr]
	LDR	lr, [r9, #f_splito]
	ADD	lr, r1, lr
	CMP	r5, lr
	BCC	inbothalfTC4
	LDR	lr, [r9, #f_splite]
	ADD	lr, r1, lr
	CMP	r5, lr
	LDRCC	r1, [r9, #f_splits]
	ADDCC	r5, r5, r1
inbothalfTC4
	ADRL	r1, w_formmb
	LDR	r1, [r1, #0x08]
	ANDS	r1, r1, #1 << 24			; not needed?
	LDRB	r1, [r5]
	BEQ	dothatupper
	LDR	lr, locssforcase
	CMP	lr, #0
	BNE	noupperheren
dothatupper
	FNupper	r1
noupperheren
		; TEQ	  7,#ASC" "
		; BEQ skiptabovr1
skiptabovr1
	CMP	r1, #':'
	CMPNE	r1, #'}'
	CMPNE	r1, #'/'
	MOVLE	r1, #' '
tabovr1
	ADD	r8, r8, #1
	CMP	r7, r1
	BGT	bigger1
	BEQ	lpa1
maybenot
	ADD	r12, r12, r8
	SUB	r12, r12, #1
_altered_1
	LDRB	r1, [r12], #1
	CMP	r1, #'z'
	BLE	_altered_1
	LDRB	r1, [r12]
	CMP	r1, #'*'
	BNE	lpa2
couldnotfindit
		; TST	  2,#&1C000000
		; LDMNEFD 13!,{R4-R12,PC}
	RSB	r8, r11, #0
		; Orr	  2,2,#&10000000
		; LDRB	  1,[5] ;  ??? V DUBIOUS...
		; CMP	  1,#ASC"."
		; ADDEQ	  8,8,#1
		; MOV	  1,#&12
		; B	  ChooseYerColour
	CMP	r8, #3
	ORRCS	r2, r2, #0x20000000
notANYone
	LDMFD	sp!, {r4-r12, pc}
bigger1
	CMP	r8, #1
	BEQ	couldnotfindit
	B	maybenot

ChooseYerColour
	LDR	r9, storedr6flu
	CMP	r9, #0
	BLE	notANYone
		; ADD	  9,6,3
		; LDRB	  9,[9,11]  ;  QUICK FIX...
		; CMP	  9,#&0A      ;  ""
		; LDMEQFD 13!,{R4-R12,PC}
	MOV	r9, #0
	ADD	r7, r6, r11
	ADD	r6, r7, r3
		; LDR	  11,Sol6
	LDR	r11, adrofrsix
lasdwAO
	ADD	r4, r7, r9
	CMP	r4, r11
		; BCC	  dontputitonsc
		; LDRB	  4,[R12,R9]
		; CMP	  4,#ASC"@"
	STRCSB	r1, [r6, r9]	;   CS
dontputitonsc
	ADD	r9, r9, #1
	CMP	r9, r8
	BLT	lasdwAO
	MOV	r1, #0xEA00
	LDMFD	sp!, {r4-r12, pc}

Prefixbit
	RSB	r10, r11, #0
		; STR	  10,cntcharback
		; LDRB	  R1,[R6] ;  ??? V DUBIOUS...
	CMP	r1, #'.'
	ADDEQ	r10, r10, #1
	MOV	r1, #col_angles
	B	ChooseColour2

Prefixbit2A
	RSB	r10, r11, #0
		; STR	  10,cntcharback
		; LDRB	  R1,[R6] ;  ??? V DUBIOUS...
	CMP	r1, #'.'
	ADDEQ	r10, r10, #1
	MOV	r1, #col_angles
	BIC	r2, r2, #0xFF
	ORR	r2, r2, #col_numbers
	B	ChooseColour2

gotexactmatch
	BL	CheckRoutine
	TEQEQ	r9, #151
	MOVEQ	r1, #0x11
	MOVNE	r1, #0x12
	BEQ	Prefixbit2A
	TEQ	r9, #156
	LDMEQFD	sp!, {r4-r12, pc}
	TEQ	r9, #174
	BEQ	leaveitalone
ChooseColour2
	CMP	r0, #';'
	CMP	r0, #','
	CMPNE	r0, #'}'
leaveitalone
	LDR	r9, storedr6flu
	CMP	r9, #0
	BLE	notANYone
	ADD	r9, r6, r3
	LDRB	r9, [r9, r11]	;   QUICK FIX...
	CMP	r9, #col_link	;   ""
	LDMEQFD	sp!, {r4-r12, pc}
	MOV	r9, #0
	ADD	r7, r6, r11
		; ADD	  7,7,#1 ;  ??? TT
		; SUB	  8,8,#1
	ADD	r6, r7, r3
	LDRB	r5, [r6, r9]
	CMP	r5, #col_link
	LDMEQFD	sp!, {r4-r12, pc}
	LDR	r11, adrofrsix
	ADRL	r5, w_formmb
	LDR	r5, [r5, #0x08]
lasdwA
	ADD	r4, r7, r9
	CMP	r4, r11
	BCC	beforesolhereargh
	LDRB	lr, [r7, r9]
	LDRB	r4, [r12, r9]
	TST	r5, #beautify_bit
	CMPNE	lr, #64
	STRGTB	r4, [r7, r9]
lasdwA1
	ADD	r4, r7, r9
	CMP	r4, r11
	CMPCS	r4, #'@'
	STRCSB	r1, [r6, r9]
beforesolhereargh
	ADD	r9, r9, #1
	LDR	r4, cntcharback
	CMP	r9, r4
	BCS	colouringrapidexit
	CMP	r9, r8
	BLT	lasdwA
	CMP	r9, r10
	BLT	lasdwA1
	MOV	r1, #0xEA00
colouringrapidexit
	LDMFD	sp!, {r4-r12, pc}


CheckRoutine
	ADD	r1, r12, r8
	SUB	r1, r1, #1
_altered_2
	LDRB	r9, [r1], #1
	CMP	r9, #'z'
	BLE	_altered_2
NotAThen
	CMP	r9, #166
	ORREQ	r2, r2, #0x20000000
	MOV	pc, lr


Data47
	DCD	0x0
Branch208
	LDR	r11, Data47
	MOV	pc, lr

Branch210
	STMFD	sp!, {r0, r1, lr}
	LDR	r11, Data47
	LDR	r0, [r8, #40]
	AND	r0, r0, #0xFF
	MVN	lr, #0
	LDR	r1, [r11, #8]
	TEQ	r0, r1
	ADDEQ	lr, lr, #1
	LDRNE	r1, [r11, #4]
	TEQNE	r0, r1
	ADDEQ	lr, lr, #1
	LDRNE	r1, [r11, #0]
	TEQNE	r0, r1
	ADDEQ	lr, lr, #1
	LDMFD	sp!, {r0, r1, pc}
	STMFD	sp!, {r11, lr}
	LDR	r11, Data47
	TEQ	r1, #0
	BLEQ	Tk1frm12andret
	LDMFD	sp!, {r11, pc}



; -------- FLAGSTOGGLE command ------------

	DCD	0x8017
Cmdhtmlflagstoggle
	STMFD	sp!, {lr}
	LDR	r10, [r0]				; r10 = parameter
	ADRL	r1, modenumberlocal
	LDR	r1, [r1]
	STMFD	sp!, {r1-r11}
	FNcall	Zap_GetModeWord
	LDMFD	sp!, {r1-r11}
	MOV	r6, r0
	LDR	r7, [r6, #0xC]
	CMP	r2, #15					; are we ticked?
	BEQ	tickquery
	MOV	r5, #0
	AND	r1, r10, #0xFF
	BL	execute
	MOV	r1, r10, LSR #8
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	MOV	r1, r10, LSR #16
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	MOV	r1, r10, LSR #24
	AND	r1, r1, #0xFF
	TST	r1, #0x80
	BLNE	execute
	STR	r7, [r6, #0xC]
	ADRL	r0, w_formmb
	STR	r7, [r0, #8]
	CMP	r8, #0
	LDMEQFD	sp!, {pc}
	ANDS	r0, r5, #8
	BLNE	sortwwout2
	LDMFD	sp!, {pc}

execute
	AND	r2, r1, #0x1F
	CMP	r2, #27
	ORREQ	r5, r5, #0x08
	MOV	r3, #1
	MOV	r3, r3, LSL r2
	MOV	r2, #0
	MOV	r4, #0
	MOV	r1, r1, LSR #5
	AND	r1, r1, #3
	CMP	r1, #1
	MOVEQ	r2, r3
	CMP	r1, #2
	MOVEQ	r4, r3
	BIC	r7, r7, r2
	ORR	r7, r7, r4
	EOR	r7, r7, r3
	MOV	pc, lr

tickquery
	AND	r2, r10, #0x1F
	MOV	r3, #1
	TST	r7, r3,LSL R2
	MOVNE	r0, #1
	MOVEQ	r0, #0
	LDMFD	sp!, {pc}

sortwwout2
	STMFD	sp!, {r5, lr}
	FNcall	Zap_SaveWinStatus
	FNcall	Zap_NewWinStatus	;
	LDMFD	sp!, {r5, pc}


verylocalR8tmp
	DCD	0
	DCD	0


tohaveajollygoodtime
	STMFD	sp!, {lr}
	BL	checkbackwardsnow
	LDR	lr, [r9, #f_ptr]
	LDR	r0, [r9, #f_splito]
	ADD	r0, r0, lr
	CMP	r7, r0
	LDREQ	r0, [r9, #f_splits]
	ADDEQ	r0, r0, r7
	MOVNE	r0, r7
	LDR	r1, [r9, #f_bufl]
	ADD	r1, lr, r1
	CMP	r0, r1
	LDRCCB	r0, [r0]	;  Hmm...(Beyond end...?)
	AND	r1, r12, #0xFF	;   end character... yes! At last...
	TEQ	r0, r1	;    ! the same length as the width
	ADDEQ	r7, r7, #1
	ADDEQ	r11, r11, #1
	LDMFD	sp!, {lr}
	B	tohaveajollygoodback

tocheckbackwardsnow
	ADD	r11, r11, #1	;   This code only executed if <CR>...
	BIC	r2, r2, #0xCF000000	;   START OF LINE FLAGS...xxx
	BIC	r2, r2, #0x00F00000
		;  B	   backcheckbackwardsnow ; yyy
	STMFD	sp!, {lr}
	BL	checkbackwardsnow
	LDMFD	sp!, {lr}
	B	backcheckbackwardsnow

checkbackwardsnow
	STMFD	sp!, {r0, r2, lr}
	AND	r1, r2, #0xFF
	TEQ	r1, #col_hash
	BNE	endcheckbackwardsnow
		; CMP	  0,#ASC"@"
		; BCC	  endcheckbackontoent
	CMP	r0, #'{'
	BCS	endcheckbackontoent

alltizfine
	ADD	r7, r7, #1
	BL	TableChk2
	SUB	r7, r7, #1
endcheckbackontoent
secondendofGST
secondendofGSTB
endcheckbackwardsnow
	LDMFD	sp!, {r0, r2, pc}

mode_prevline
	SUBS	r0, r0, #32
	MOVMI	r0, #0
	MOV	PC,R14

spellcheck
	STMFD	sp!, {lr}
	MOV	r7, r0
	SUBS	r0, r7, #2
	MVNMI	r1, #0	;  sof
	BLPL	charfromoffset
	CMP	r0, #'\'
	LDMEQFD	sp!, {pc}	;  ok to query
	CMP	r0, #'='
	BEQ	possiblyeqgt
	SUBS	r0, r7, #1
	BLPL	charfromoffset
	CMP	r0, #'{'	;  GSTrans |M etc...
	CMPNE	r0, #'#'	;  # comment...
	MVNEQ	r1, #0	;  +> pass back 'ignore' flag
	LDMEQFD	sp!, {pc}
_altered_4
	SUB	r7, r7, #1
	MOVS	r0, r7
	BMI	afterloop
	BLPL	charfromoffset
	CMP	r0, #0x0A
	BNE	_altered_4
afterloop
	ADD	r0, r7, #1
	BLPL	charfromoffset
	CMP	r0, #'#'	;  %s for a string...
	MVNEQ	r1, #0	;  +> pass back 'ignore' flag
	LDMFD	sp!, {pc}
possiblyeqgt
	SUBS	r0, r7, #1
	BLPL	charfromoffset
	CMP	r0, #'>'
	MVNEQ	r1, #0	;  +> pass back 'ignore' flag
	LDMFD	sp!, {pc}

charfromoffset
	STMFD	sp!, {lr}
	LDR	lr, [r9, #f_splito]
	CMP	r0, lr
	LDRCS	lr, [r9, #f_splits]
	ADDCS	r0, r0, lr
	LDR	lr, [r9, #f_ptr]
	LDRB	r0, [lr, r0]
	LDMFD	sp!, {pc}

AlphaIndex
	=	10, "Greetings from The Mandala Centre."
	=	10, "Please feel free place any additional commands in the space provided"
	ALIGN


	DCD	0x2A2A0A2E
TableHere
	=	"Align®"
	=	"Background®"
	=	"Below"
	=	"Bottom"
	=	"Centre"
	=	"Columns"
	=	"Column"
	=	"Commands"
	=	"Draw"
	=	"EndTable"
	=	"End"
	=	"FCite"
	=	"FCode"
	=	"FEmphasis"
	=	"FH1"
	=	"FH2"
	=	"FH3"
	=	"FH4"
	=	"FH5"
	=	"FH6"
	=	"FLink"
	=	"FName"
	=	"FNo"
	=	"FStd"
	=	"FStrong"
	=	"FUnderline"
	=	"F"
	=	"Include¦"
	=	"Indent"
	=	"Left"
	=	"Lines"
	=	"Line"
	=	"Linkattributes"
	=	"Manuals"
	=	"MenuExtra"
	=	"NoJoin"
	=	"Off"
	=	"On"
	=	"Parent¦"
	=	"Pointer"
	=	"Postfix¦"
	=	"Prefix¦"
	=	"Right"
	=	"RGB"
	=	"Spritefile¦"
	=	"Sprite"
	=	"Subpage"
	=	"Table®"
	=	"Tab®"
	=	"Type"
	=	"WIMP"
	=	"Wrap®"
	=	"Zap "
	=	"**", 10

	END


