\#
\# $Id: Chapter10,fff,v 1.1.1.1 1998-12-03 15:49:04 dj Exp $
\#
\# Manual.Section10/src
\# Modes stuff. And lots of it :-)
\# Original author: James Aylett
\#
\# This section contains bits taken from Section C (Individual
\# mode help) of the original manual.
\#

\C{Modes} Zap's modes: helping with particular types of file

Here we look at one of Zap's most powerful features; the different editing and displaying modes. While you might be perfectly comfortable using the basic mode (Text) for editing emails, program source, and so on, you will probably find that many of these modes have features which can help you do the job faster and more effectively. In addition, Zap has some modes which offer features that Text mode can't supply - such as the binary editing modes, and Code, which allows you to edit ARM binaries (executable programs) directly.

To change mode, either use \c{scFn} (where \c{Fn} is a function key from \c{F1} to \c{F10}), or select the mode's name from the Mode menu. Modes are \e{dynamically loaded}, meaning that they aren't loaded until they are needed. If a mode hasn't been loaded yet, its name won't be on the Mode menu - instead it will be on the \c{Mode->Load} mode submenu.

So far in this manual, we have in general only discussed the features of Text mode. Many of the modes described here inherit some or all of those features - if they aren't available, the relevant key press will beep or do nothing, and the menu option will be greyed out or will do nothing.

Each mode can have a number of the options discussed previously set independently of the settings of any other mode. These are known as \e{per\-mode options}; all the options introduced in \k{Advanced editing}, and most of those in \k{Display options} can be set up differently for each mode. For more information about this, see \k{per mode config}.

In addition, each mode can have its own, unique options. For instance, many modes have a number of colours which aren't available in any other mode (the HTML colouring mode has a colour for HTML 'tags', which would be of no use in other modes). Except for specialised colours, which are at the bottom of the \c{Display->Colours} menu, all options unique to a mode will be presented in the mode's own menu - this is a submenu from the Modes menu itself - for instance, the options for Byte mode are in the submenu \c{Mode->Byte}.

All modes come with documentation; this will be in the application directory of the extension when you install it. Extensions modes are stored in \c{!Zap.Modules}.

\H{binary modes} Zap's binary editing modes

One set of modes which Zap has which are radically different to Text mode are the binary editing modes. These allow you to directly edit files either a byte or a word at a time. The two modes are called Byte and Word, and they share several common features.

\S{binary editing} Editing in binary modes

Firstly, they typically employ an entry system called '\i{hex entry}'. With it turned on, you type the byte or word's value in hexadecimal, a \e{nibble} (ie: a single hexadecimal digit) at a time. For instance, in byte mode with hex entry turned on, typing \c{8} will set the byte at the cursor to \c{08}, but keep the cursor where it is. Completing the byte (since a byte has two hex digits) by typing \c{B} will change the byte to \c{8B} (the first nibble is rotated to make way for the second), and move the cursor on to the next byte. In Word mode, you have to type eight nibbles to complete a word. (Byte mode will also do normal entry - with hex entry turned off you can simply type as if you were in Text mode. Word mode will not do normal entry - with hex entry turned off, typing has no effect.)

(Note that while the option is called 'hex entry', it doesn't always employ hexadecimal - see below.)

The other editing option that the two modes share is that if you press \c{Return} the byte or word at the cursor is dropped into the \i{minibuffer} for you to edit; pressing \c{Return} in the minibuffer will set the edited value. This is actually done through an interface to the BASIC assembler - a word of value \c{&8000} will be placed in the minibuffer as \c{DCD &00008000}. In addition, the address of the byte or word will be displayed at the far left of the minibuffer. As a variation, in Word mode pressing \c{cReturn} will disassemble the word at the cursor - for instance the word of value 0 will be disassembled to \c{ANDEQ R0,R0,R0}. Again, the address will be displayed at the far left of the minibuffer.

\S{binary display} Display options in binary modes

If you have already played with the binary modes, you will have noticed that the display falls into three sections. On the left is the address (this is done using Zap's line numbering system, and so can be turned off or altered if you require - see \k{line numbers}). In the middle is a line of byte or word values, and at the right is those values displayed as the corresponding ASCII characters. You can click on either of the right hand two sections to set the cursor.

Zap '\i{display width}' (see \k{display width}) here sets the number of bytes or words to display per line. A useful option here is \i{window wrap} (see \k{window wrap}), since this allows you to change the number per line quickly with the mouse.

There are a number of options that control how the display is formatted.

Firstly, you can make all 'control characters' (characters with values less than 32) be mapped to any other character. This is the \c{Suppress ctrls} option; the submenu from it sets the character to replace them with.

Secondly, you can choose to 'group' the bytes or words, and the ASCII dump at the far right. The group size must be the same in both cases (the \c{Group size} submenu from the Byte and Word options menus gives the value used for both); a space is displayed between each group. In the default setup, Word mode groups to every fourth word, and Byte mode groups to every eight bytes.

Thirdly, you can change the byte and word display in the middle of the window to work in binary instead. If you do this, the 'hex entry' system, and editing through the minibuffer by pressing \c{Return} will work in binary also. (The system is still called 'hex entry' for historical reasons :\-)

Finally, both modes have one mode\-specific colour, ASCII chars, which is used for non\-control characters in the ASCII dump at the right hand edge of the screen.

\S{grab memory} Creating files directly from memory

The Byte and Word modes also come in handy with Zap's ability to create files directly from memory or disc. This works from the iconbar \c{Create} submenu; the options are:

\b \c{Get module} - Reads a module from memory and dumps it into Code mode (see \k{Code mode} below).

\b \c{Get workspace} - Reads a module's workspace and dumps it into Code mode (see \k{Code mode} below).

\b \c{Get dynamic area} - Grabs the contents of a dynamic area and displays it in Text mode (On \i{RISC OS 3.5} and later only).

\b \c{Read memory...} - Allows you to read the memory of a Wimp application.

\b \c{Read disc...} - Allows you to read data directly from a disc.

\S{read memory} Reading directly from memory.

Selecting \c{Create->Read memory ...} from Zap's iconbar menu opens a small dialogue box allowing you to specify which range of memory and from which task you want to create a file. Dragging the Acorn icon at the top (Archimedes icon for RISC OS 2) to a window or icon will set the task name to the task that owns it. For instance, to grab memory from \i\e{Alarm}, drag the icon to \i\e{Alarm}'s iconbar icon. At the bottom you can specify the range of memory to grab - when you set the task, Zap will update these fields to show to maximum range possible; the \c{Grab} button at the bottom grabs the memory and makes a file out of it.

\S{read disc} Reading directly from disc

Selecting \c{Create->Read disc ...} from Zap's iconbar menu opens a large dialogue box allowing you to specify which bit of which disc you want to read. At the top you specify the filing system (eg: \c{SCSIFS}, \c{ADFS}, \c{RAMFS}); to the right of this Zap will report the number of hard drives and floppy drives for the filing system you have chosen. In the middle on the left will be information about the disc you have selected - name, size, number of tracks, number of heads, bytes per sector and sectors per track.

At the right you can specify which drive, and which part of the disc to read, either by sector, head and cylinder or by sector address. Then you can click on \c{Read Disc}, \c{Read Track} or \c{Read Sector} to grab the relevant part of the disc into a file.

When a window on the file is opened, the \c{Navigate disc} dialogue will also pop up. This allows you to move the view around the disc. If you close this dialogue, you can bring it back up from the \c{Misc->Move} submenu (which also has entries which double the function of the buttons in the navigate dialogue).

You can only have one active disc reading operation in progress at a time.

\H{ASCII mode} ASCII editing mode

ASCII mode allows you to edit text as an ASCII dump - the line length is fixed to the display width (so line endings are ignored), but otherwise editing is as you'd expect for Text mode.

\H{Code mode} ARM code editing mode

This mode displays data in disassembled format with one instruction per line. The format of a line is address on the left (again using Zap's line numbering system, so this is configurable), an ASCII dump of the word, followed by a binary or hex display of the opcode (binary or hex display is controlled by the \c{Binary OP codes} option), followed by the disassembly itself. Some instructions will have comments or warnings displayed off to the right, unless you suppress them with the \c{Comment free} option.

Many of the normal keys don't perform as you'd expect in Code mode; instead they perform functions which are more useful in the context of editing ARM code.

Firstly, typing any normal letter, as well as typing \c{Return}, will place the disassembly of the instruction at the cursor in the \i{minibuffer} for you to edit. Pressing \c{Return} in the minibuffer will reassemble the command; this uses the BASIC assembler (optionally augmented by \i\e{ExtBASICAsm} - see \k{extbasasm}), and so you can use BASIC functions sure as \c{ASC}, \c{EQUD}, \c{ADR} etc.

Secondly, \c{Left} and \c{Right} work differently. \c{Right} will follow a referenced address in an instruction (for instance, pressing \c{Right} with the cursor on an instruction \c{BL &12345} will jump to address \c{&12345}); it also places a mark when it does so, so the \c{LASTMARK} and \c{NEXTMARK} commands (see \k{marking}) can be used to help you keep track of function calls. To make life easier, pressing \c{Left} moves you back to the last mark.

Thirdly, pressing \c{cI} will cause you to jump to the address given by the contents of the word at the cursor position - for instance in a module, the first word in the file gives the start offset of the module; pressing \c{cI} will jump to the start code. This also places a mark when it does so, and is known as \e{indirecting} (the command \c{INDIRECT} does the same thing).

\S{Code mode colours} Code mode colours

Code mode supplies a very rich set of options to configure how it colours the disassembly. First there are some 'utility' colours, not associated with the disassembly itself:

\b \c{ASCII chars} - Used for non\-control characters in the ASCII dump of the word.

\b \c{Hex chars} - Used for the hex (or binary) number dump.

\b \c{Comment} - Comments, warnings and offset information.

The other colours affect how the disassembly itself is coloured. There are also three options in the \c{Mode->Code} submenu which affect this:

\b \c{Unconditional} - Colour condition codes the same colour as the rest of the instruction.

\b \c{Minimal} - Colour instruction operands the same colour as the rest of the instruction.

\b \c{Condition back} - The \c{Conditions} colour affects the background rather than the foreground (see the entry on this colour below for more information).

The colours are as follows:

\b \c{SWIs} - \c{SWI} instructions.

\b \c{Branches} - \c{BL} and \c{B} instructions.

\b \c{Push R14s} - \c{STM} instructions that push \c{R14} (these tend to indicate the start of a subroutine).

\b \c{Pull PCs} - \c{LDM} instructions that pull \c{PC} (these tend to indicate an exit from a subroutine).

\b \c{[ and ]} - The square bracket characters in \c{STR} and \c{LDR} instructions.

\b \c{\{ and \}} - The curly brace characters in \c{STM} and \c{LDM} instructions.

\b \c{#, !, ^ & -} - The character \c{#} prefixing an immediate constant; the character \c{!}  used for writeback in \c{STM/LDM/STR/LDR}, the character \c{^} used for \c{SPSR} to \c{CPSR} with \c{PC} in \c{LDM}, and force user bank transfer for all other \c{STM} and \c{LDM} instructions, commas, and the character \c{-} used in a register list in \c{LDM} and \c{STM} instructions.

\b \c{Registers} - All registers.

\b \c{Numbers} - All numbers that aren't immediate constants (typically addresses in \c{ADR} and branch instructions).

\b \c{Immediate} - Immediate constants.

\b \c{Shifts} - Shift operators (\c{ASR}, \c{LSL}, \c{LSR}, \c{ROR}, \c{RRX}).

\b \c{LDM or STM} - \c{LDM} and \c{STM} instructions (unless trapped above for push/pull \c{R14/PC}).

\b \c{LDR or STR} - \c{LDR} and \c{STR} instructions.

\b \c{SWI names} - SWI names (if a SWI number can't be resolved to a name, it is displayed as the number, using the \c{Number} colour).

\b \c{Conditions} - Condition codes. If \c{Unconditional} is turned on, this won't do anything; if \c{Condition back} is turned on then it will affect the background instead of the foreground. Its style information will be used either way. If you want to change the style only, set \c{Condition back} and change the colour to the same as the \c{Background 2} colour..

\b \c{'Undefined'} - Undefined instructions. Note that this won't be used if the \c{DCD} option is turned on - see \k{advanced disassembly}.

\b \c{FP regs} - Floating point registers.

\b \c{CP regs} - Coprocessor registers.

\b \c{FP instrs} - Floating point instructions.

\b \c{CP instrs} - Coprocessor instructions.

\S{advanced disassembly} Advanced disassembly

If you have set Disassembler (Darren Salt's \i\e{Debugger Plus}) to be autoloaded (see \k{extbasasm} and \k{autoload}), then the \c{Code->Disassembler} submenu will enable you to alter how the disassembler is done. In general, if you don't understand these options, you probably want to leave them at their default settings; however here is a brief description of what each does. The \c{Global} option at the top sets whether the alterations you make to the settings will only affect disassembly within Zap, or everything using \i\e{Debugger Plus}. For more information, see the documentation which comes with \i\e{Debugger Plus}, in \c{!Zap.Code.Extensions.ExtAsm}.

\b \c{FD if R13} - Use \c{FD} with \c{R13}, eg: \c{STMDB R13} is disassembled as \c{STMFD R13}.

\b \c{APCS support} - Use APCS\-R register set, and recognise C function entry.

\b \c{LFM Stack} - Use stack notation with \c{LFM} and \c{SFM} where possible.

\b \c{LFS & SFS} - Use \c{LFS} and \c{SFS} in preference to \c{LFM} and \c{SFM}.

\b \c{Quote SWIs} - Put quotes \c{"} around SWI names.

\b \c{DCD} - Use \c{DCD} instead of \c{Undefined instruction}, and \c{BRK} where \c{DCD &x6000010} would be used.

\b \c{VDU} - Use \c{VDU x} instead of \c{SWI OS_WriteI+x}.

\b \c{More DCDs} - Use \c{DCD} instead of \c{ANDEQ, MOV Rn,Rn} (same register), etc.

\b \c{ADRL} - Use \c{ADRL/ADRX} instead of \c{ADR} then \c{ADD/SUB} on same register.

\b \c{ADRW} - Use \c{ADRW} instead of \c{ADD/SUB Rn,R12,#m} and \c{LDRW}, \c{STRW}, \c{LDRBW}, \c{STRBW} instead of\c{ xxxx Rn,[R12,#m]}.

\b \c{Long MULs} - Append \c{L} to \c{UMUL}, \c{UMLA}, \c{SMUL}, \c{SMLA} (thus using the official forms).

\b \c{LDRL} - Use \c{LDRL} instead of \c{ADD/SUB Rn,Rm,#o + LDR Rn,[Rn,#p]} and \c{ADD/SUB Rm,Ra,#o + LDR Rn,[Ra,#p]!} and \c{STRL} instead of equivalent \c{STRs} (the \c{LDRWL} form is enabled by this option and \c{ADRW} together).

\b \c{NOP} - Use \c{NOP} instead of \c{MOV R0,R0}.

\b \c{Old PSR} - Use the old \c{PSR} suffixes \c{_ctl}, \c{_flg}, \c{_all}.

\b \c{Wide} - Disassemble for a wide display.

\b \c{HS and LO} - Use \c{HS} and \c{LO} instead of \c{CS} and \c{CC}.

\b \c{Shift} - Use \c{x<<y} comments where possible for numbers >= 8192. This affects arithmetic and logic instructions; y is restricted to multiples of 4 if possible, unless x=1.

\b \c{Lower} - Force all register names to lower case.

\S{module disassembly} \i{Module disassembly}

If a file is filetyped as Module (&FFA), Code mode will attempt to display useful comments instead of disassembling garbage for the module header.

\S{AIF disassembly} \i{AIF disassembly}

AIF disassembly comes in two parts; firstly there's the part which isn't specific to AIF files, and secondly there's the part that is. The part that isn't is that when a disassembled offset (eg from an \c{ADR}) points to a string or some other pointer information, a useful comment is printed alongside. For instance, if you have \c{ADR R0,<address>} where \c{<address>} contains a string, the comment will be \c{string: <string>}. This system also puts comments for embedded debugging information (function names). The possibilities are:

\b \c{'func: <name>'} - C\-style function name embedded prior to the function.

\b \c{'-> code: <func>'} - C\-style function reference; SharedCLibrary routines are identified in AIF files, where possible.

\b \c{'-> code: at <address>'} - Unidentified code reference (no embedded function name).

\b \c{'error: <string>'} - Reference to a standard error block (only when the \c{ADR} that finds the error is followed by an instruction which returns that error; only the string is shown).

\b \c{'string: <string>'} - Reference to a string, where the destination contains no control characters but 10, 13 and 9.

\b \c{'-> string: <string>'} - Reference to a string pointer.

\b \c{'-> <header definition>'} - Reference to the header of the file; this should work in both AIF and Modules.

\b \c{'-> ->... recursion: at <address>'} - A reference refers to itself (this isn't recursive, so it won't spot loops).

\b \c{'-> ->... too deep: at <address>'} - References which would imply more than four arrows.

The second part is that AIF files (recognised by the \c{SWI OS_Exit} as the fifth instruction) have their headers given descriptive comments instead of disassembly garbage, much as for Modules. In addition, the bits of the header that \e{are} valid ARM code are also given useful comments.

\H{BASIC modes} BASIC editing modes

The mode BASIC edits BASIC files directly in tokenised form. The mode BASTXT allows you to edit in detokenised form; however you need to load a BASIC file directly into it to detokenise it. Note that both these modes actually fiddle with the contents of the file to a greater or lesser extent to make editing easier - so you \e{must} save BASIC files from the same mode as you loaded them into. If you don't, you'll probably get garbage.

In its default setup, line numbers are displayed at the left hand side of the window, automatic renumbering occurs when needed, and all \c{GOTO} and \c{GOSUB} line number references are updated automatically. In addition, the mode will auto\-expand keywords - for instance, typing \c{P} and then \c{.} will expand the \c{P} to \c{PRINT}. Unix \I{tabbing}tab mode also just advances to the next tab stop (spaces are inserted, and only then when you are at the end of a line; tab characters - ASCII 9 - cause problems in BASIC files).

The documentation that comes with ZapBASIC contains far more details about these modes that this section does (in particular, it describes the colours, of which there are an awful lot).

\S{ARMBE emulation} \i\e{ARM Basic Editor} emulation

Once upon a time there was a BASIC editor called the ARM Basic Editor (ARMBE). This was single tasking, but at least it edited BASIC in tokenised form. If you want, Zap can emulate ARMBE fairly successfully (although you still have access to all the extended features).

First, turn on line editing (\c{Edit->Misc->Line edit}) and non standard editing (\c{Edit->Misc->Non standard}). The former will prevent you from editing across lines - you need to use \c{SPLITLINE} and \c{JOINLINE} (\c{sF1} and \c{cF1}) to break up and reconstruct lines. The second strips spaces from the ends of lines as you type them.

These options are provided for those who are familiar with ARMBE, and don't want to take the time to learn a new system; the default options have both these turned off, because it tends to be much easier to edit BASIC (even tokenised BASIC) as close to the way you edit normal text as is possible.

To find out how to set these options permanently, see \k{per mode config}.

\H{C modes} C, C++ and Java editing modes

\i\e{ZapMJE} provides a set of modes; in addition to a simple Pascal editing mode (not documented here), and an ARM Assembly editing mode (see \k{Assembler mode}), there are three program source modes for languages with similar syntax. These are C, C++ and Java. the modes share a number of features, including bracket matching (the cursor momentarily flicks back to a bracket if you type its pair), syntax colouring, and smart auto indentation which tries to follow a sensible indentation style. If you don't like these, you can turn them off.

For information about all of these modes, see the documentation that comes with \i\e{ZapMJE}.

\H{Assembler mode} ARM assembler editing mode

Assembler mode is another part of \i\e{ZapMJE}; it provides basic syntax colouring. This is done simply by highlighting the first column as labels, and the rest as instructions, picking out comments, strings, operators, names, numbers and brackets in different colours. It also uses the \c{non standard} option (see \k{other options}) to alter the way the \c{Tab} key works; with it turned on, it creates three 'tab stops', one for instructions, one for their arguments, and one for comments. Thereafter it does the normal job of \c{Tab}.

For more information about Assembler mode, see the documentation that comes with \i\e{ZapMJE}.

\H{Throwback mode} \i{Throwback} mode

This mode handles the files generated by Zap's \i{search to buffer}, C throwback and \i\e{Find} info output (as well as any other program which uses the throwback system). Double clicking on an item will jump to that item in the source file. \c{Shift} double clicking will jump to the item and then kill the throwback buffer. Clicking \c{Adjust} on a line will remove the line from the file. Triple clicking will move to the match and then bring the window to the front of the window stack.

Clicking on the title of a file, or on the blank lines surrounding it, will simply load the file.

Also note that \c{Return} acts in the same way as double click and \c{Delete} in the same way as adjust if you move into the file.

Throwback mode provides simple colouring, colouring different types of messages and information differently. It has no support for, for instance, colouring the matched words in a throwback search.

\H{Taskwindow mode} \i{Taskwindow} mode

This mode handles task windows. To create a new taskwindow, press \c{cF12}, or pick the appropriate option either from the Task manager iconbar menu, or from the \c{Create} submenu of Zap's iconbar menu.

Basically, a task window acts like the command line, only running in the desktop. It is vaguely similar to the Command Prompt under Windows. You can type in commands, and they are executed - if you have Olly Betts' \i\e{Line editor} loaded (see \k{lineeditor}), then you will have a command history available by pressing the arrow keys.

If you change mode, you will temporarily suspend the task - changing back to Taskwindow mode will resume it.

There are optios on the mode's menu to suspend, resume, unlink, relink, and terminate and resurrect the task. When unlinked, the task will continue to run independently of the output window, changing mode will no longer suspend it, and closing the window or quitting Zap will no longer terminate it. This can be of use in low memory conditions. If a task window becomes permanently separated from Zap in this manner, it may need to be killed from the Task Manager.

The \c{Die silently} option allows you to kill the task without prompting simply by closing the window, for instance by pressing \c{cF2}.

The \c{Bracket Matching} option will cause the cursor to flick back briefly to a bracket if you type its pair.

More complete documentation is supplied with ZapBASIC, which contains the Taskwindow mode.

\H{Email mode} Email reading and editing mode

Email mode provides a powerful way to read and edit single emails (if you need to read or edit an entire BSD\-style mbox, check out Newmail mode). It includes fancy things such as style\-based emphasis recognition (like *this* etc.), header colouring, and a few automatic facilities. It also provides a button bar with access to many of the more common facilities.

Email mode will work happily with \i\e{Messenger}, \i\e{TTFN}, \i\e{Marcel}, \i\e{GMail}, \i\e{Pluto} and \i\e{ArcWeb} to supply email editing facilities.

You almost certainly won't be able to use Email mode straight off; you'll need to set it up so it knows which email system you use. See the documentation that comes with the mode for more information.

\H{Hotmeal mode} HTML editing mode

\i\e{HoTMeaL} is a syntax colouring mode for HTML. It currently supports HTML 3.2, and has a variety of useful commands, and a button bar, to assist in HTML editing. You can also drop files into \i\e{HoTMeaL} to create links - and with images, it will work out the relevant \c{WIDTH} and \c{HEIGHT} attributes.

For full documentation of \i\e{HoTMeaL}'s features, see the supplied documentation.

RULEHERE

The next section in the manual is \k{Commands}, which explains in more detail Zap's command language, including a look a functions, variables, and conditional and looping constructs.

Alternatively, you could move on to \k{Configuration}, which looks at how to customise Zap to suit your specific needs.
