Beyond v1.40
============

(Old ToDo list follows at end of file.)

Brief note to everyone
*--------------------*

Hi. This probably isn't useful to anyone other than me, especially now we
have a proper bug and wish list. *This* is a list of:

a)	notes about release schedules
b)	bugs in the development version of Zap. These are only when not noted in the
	main buglist for some reason. (Typically they're transient bugs in my own
	development work.)
c)	things I'm working on. This is more for my own notes on where I've got to. If
	you're looking for what I'm planning to do, check which items in the wishlist
	and/or buglist I've claimed responsibility for. (And you can ask to take them
	off me if you want to :-)
d)	things I want to do to extensions, in no order at all.
e)	other things

James Aylett <dj@zap.uk.eu.org>


Release schedules:
------------------

	- v1.44 is the candidate release phase. Dunno when; for as long as possible
	  before v1.45. Basically, we enter here once we've stopped adding features.
	  
	- v1.45 scheduled for "shortly before Wakefield". Therefore, sometime in
	  March need to look at the documentation and update all of that.
	  
	- Ideally at the start of March take a long look at the outstanding bugs
	  from v1.40, with a view to fixing them for v1.45 (if they're easy,
	  back fix them in v1.40 patch 10 or later).

Bugs with v1.41:
----------------

Documentation:
--------------
	- FAQ updated for v1.42 public beta.
	- Change logs :-/
	- Update thank you list.

Core:
-----

(now in some sort of order)

  may leave until post v1.45, but would be nice to do earlier:
  	- ZapUtil uses c-vars for SETNAME
	- Core uses c-vars for soft wrap chars, maybe e_returnword?

  in progress:
	- TMFs
		- 'boolean' variables, using t/f strings to indicate value?
		- variable substitution
		- per-file variable overrides (setvar) - export as Zap_ call too
		  (do we allow interpolation? ideally, yes ... would be nice to
		   have % as a special mode name meaning 'in this file'?)
		  This may be tricky to do ...
		- dumpvars command? Same for mode?

  things that look fun and/or incredibly useful:
	- keypresses on a hotkey window
	- throwback sets file title to something useful (internal, plus
	  Message_ThrowbackStart -> Message_TaskNameRq)
	  Probably do this by extending create_throwback to take b31
	  of r0 => r1 gives filename to use (for internal), and
	  b30 => use TaskNameRq to look it up. All code in s.Mode11
	  (also need to investigate s.Commands, s.Search, and think
	  about ZapSpell and ZapMJE).
	- commands in file header

  little things which I'll try to get done pre v1.45:  
	- a generic Autoload directory (or path? - ZapUser:Autoload)
	  (RepeatPath?)

  v1.50 things I've started thinking about:
  	- Buttons done centrally ... notes: call on e_start, for kicks to
	  sort everything out. Call on e_openwindow ... note that
	  e_openwindow can be called without e_start being called on that
	  window ... do something about this (possibly just call e_start).
	  Extend Buttons_Misc #3 flags so we can lie things inside the
	  borders. Probably need to add redraw top and bottom margins to get
	  this really swish ... and have all margins configurable per-mode.
	  Ideally do all Buttons configuration via TMFs, except for the
	  positions flags.
	  Call Buttons_Misc #7 (flush redraw cache) automatically on
	  changing the wrap type; don't assume the mode will do it.
	  Tell Buttons when windows close (gets rid of a fudge) ... probably
	  need to ask Tim about this, unless he's commented interally.
	  Similarly, input focus location needs to be called into, I think.
	  See Tim's emails, and check the Buttons source.
	  Why does Buttons currently have its own mode? Kill that off.
	  Extend formats to give interactive help on the buttons. (cf: Menus)
	  (Note that this may be partly implemented - the bottleneck may be
	  in Zap's core ...)
	  Add an e_init or similar flag to say "never do my buttons for me",
	  to allow modes to do sophisticated button stuff.
	  Take out all Buttons code from all modes, unless they need it to do
	  something swish.

Extensions: (where not mentioned elsewhere)
-----------

These aren't unlikely to be touched before v1.45; I'm more concerned in
tracking down bugs.

ZapSEd	- parsing StrongED mode files (plus extensions?) - see core
ZapSGML	- colours based on supplied DTD

Other things:
-------------

RCS/CVS for Risc OS, and support within Zap
Perhaps port PuTTY's ssh (scp?) for this?

Probably drop:
--------------

Larch, ZapTerm (=> ssh for Risc OS), ZapW3
Other IDE functions / external tie-in IDE (source browser / makefile management)?

















Things to do
============

									Notes
Core:
-----
e_returnword
	- DELETE "WORD", DELWORDSTART|END	Day ?			Necessary?	?
	  (delete whitespace around also)			-- not binary modes
source
	- All bit field things should use symbols not constants
Newfile
	- Fix cursor positioning bug?
Revert
	- Tie down details?

ZapBASIC:
---------
	- basic_returnword						TMT
	- basic_help							TMT

Command extensions:
-------------------

ZapText
	- SwapCase is nice to BASIC					TMT
ZapProgram
	- New MAKE/CC/etc. commands
	- ??? header/function/TLD finding
	- AssembleADRL/X
	- DataAdd
	- SWIToName, SWIToNumber

v1.50 alterations:
------------------
TMFs
	- setname: param, or if "" search for in-core.
	  This should be configurable by a variable, using
	  InCoreName-Start and InCoreName-End or similar.
	  Also InCoreName-Translate (to-dir-format, maintain-extension,
	  nil).
Mode info block (e_interrogate #14 replacement)
Folding

Internet things:
----------------
ZapSGML
ZapMailer (Larch)
ZapTerm (=> ssh for Risc OS)
ZapW3

Other:
------
CVS for Risc OS
RCS support internal to Zap (or external using a service call?)
Other IDE functions? Source browsing, etc.?				Necessary?
