; LineEditor code
; $Id: LineEditor,fff,v 2.1 2000-10-05 00:13:14 ds Exp $

	GET	h.ZapHeader
	GET	h.modebits
	GET	h.heap

	EXPORT	lineeditor_select
	EXPORT	lineeditor_append
	EXPORT	lineeditor_append_current
	EXPORT	lineeditor_retrieve
	EXPORT	lineeditor_retrieve_current
	EXPORT	lineeditor_reset
	EXPORT	lineeditor_reset_current
	EXPORT	lineeditor_setpos
	EXPORT	lineeditor_setpos_current
	EXPORT	lineeditor_kill
	EXPORT	lineeditor_kill_current
	EXPORT	kill_lineeditor

; lineed_buflist structure:
;  +0 = number of entries in this list
;  +4 = first of a series of (Zap, LineEditor) handle pairs
;  list is unterminated


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Remove line editor buffers before dying			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	LOCAL

kill_lineeditor
	FNJSR	"R1-R3"
	FNLDR	R1,lineed_buflist
	LDR	R2,[R1],#8	; number of entries
	TEQ	R2,#0
	FNRTS	EQ
	MOV	R3,#0
kill$l	LDR	R0,[R1],#8	; LineEditor handle
	TEQ	R0,#0
	STRNE	R3,[R1,#-8]
	SWINE	XLineEditor_DeleteBuffer
	SUBS	R2,R2,#1
	BNE	kill$l
	FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Interface to Olly's line editor				;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	LOCAL

;E R0=buffer handle
;X R0 corrupt # (but safe to ignore errors)
;  LineEditor buffer selected (but not necessarily created) |

lineeditor_select
	FNJSR	"R1-R4"
	FNSTR	R0,lineed_currentbuf
	BL	internal_find_buffer
	BLNE	create_buffer
	FNRTS

	LOCAL

;E (R0=buffer handle) R1=line to insert
;X #

lineeditor_append_current
	FNLDR	R0,lineed_currentbuf
lineeditor_append
	FNJSR
	BL	buf_lookup_create
	SWINE	XLineEditor_AppendLine
	FNRTS


;E (R0=buffer handle) R1=buffer R2=buffer len
;X String read into buffer (if exists); Z set if no LineEditor buffer #

lineeditor_retrieve_current
	FNLDR	R0,lineed_currentbuf
lineeditor_retrieve
	FNJSR	"R1-R2"
	BL	buf_lookup
	FNRTS	EQ
	SWI	XLineEditor_GetLine
	CMPVC	PC,#0		; force NE if VC
	FNRTS

;E (R0=buffer handle)
;X Buffer pointer reset to empty string at end #

lineeditor_reset_current
	FNLDR	R0,lineed_currentbuf
lineeditor_reset
	FNJSR	"R1"
	BL	buf_lookup
	MOVNE	R1,#&7FFFFFFF
	SWINE	XLineEditor_SetPos
	FNRTS

;E R0=buffer handle /0 R1=buffer position
;X Buffer pointer decreased by one

lineeditor_setpos_CURRENT
	FNLDR	R0,lineed_currentbuf
lineeditor_setpos
	FNJSR
	BL	buf_lookup
	SWINE	XLineEditor_SetPos
	FNRTS

;E (R0=buffer handle)
;X Buffer killed

lineeditor_kill_current
	FNLDR	R0,lineed_currentbuf
lineeditor_kill
	FNJSR	"R7"
	BL	buf_lookup
	MOVNE	R7,#0
	STRNE	R7,[R14]	; erase buffer handle
	SWINE	XLineEditor_DeleteBuffer
	FNRTS


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Internal LineEditor support code				;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;E R0=buffer handle
;X R0=internal buffer handle /0 R14=address of handle /corrupt |

	LOCAL
buf_lookup
	FNJSR	"R1-R4"
	BL	internal_find_buffer
	MOVNE	R0,#0		; ... not found
	MOVEQ	R0,R3		; ... found
	SUB	R14,R1,#4
	CMP	R0,#0
	FNRTS

	LOCAL
buf_lookup_create
	FNJSR	"R1-R4"
	BL	internal_find_buffer
	BNE	create$l
	MOVS	R0,R3		; found matching Zap handle
	BNE	yes$l
	BL	lineeditor_createbuffer ; create the buffer if needed
	STR	R0,[R1,#-4]
yes$l	CMP	R0,#0		; adjust Z
	FNRTS
create$l			; no matching Zap handle
	BL	create_buffer
	CMP	R0,#0		; adjust Z
	FNRTS

;E R0=buffer handle
;X R0=internal buffer handle /0 |

	LOCAL
create_buffer
	FNJSR	"R1-R4"
	MOV	R3,R0
	FNLDR	R14,opt_switches
	SUBS	R3,R3,#0	; ensure V clear
	TST	R14,#switch_Autoload_lineeditor
	BLNE	loadlineeditor
	BVS	fail$l
	FNLDR	R0,lineed_buflist
	LDR	R1,[R0]
	ADD	R2,R1,#1	; (avoid an extra LDR afterwards)
	MOV	R1,R1,LSL #3
	ADD	R1,R1,#12	; R1=entries*8+12 (ie. required memory)
	BL	heap_ensure	; ensure that the list is big enough
	BVS	fail$l
	FNSTR	R0,lineed_buflist
	STR	R2,[R0]		; update number of entries
	SUB	R1,R1,#8	; offset of new entry
	STR	R3,[R1,R0]!	; write the new entry's Zap handle
	BL	lineeditor_createbuffer
	STR	R0,[R1,#4]	; and its LineEditor handle
	FNRTS
fail$l	SUBS	R0,R0,R0	; CLV
	FNRTS

lineeditor_createbuffer
	FNJSR	"R1-R2"
	MOV	R0,#0
	FNLDR	R1,wimp_task
	MOV	R2,#0
	SWI	XLineEditor_CreateBuffer
	SUBVSS	R0,R0,R0	; force R0=0 on error
	FNRTS


;E R0=Zap handle
;X found: Z set, R1=next entry, R2=R0, R3=[R1,#-4]=LineEditor handle, R4=?
;  not found: Z clear, R1-R4 corrupt

internal_find_buffer
	FNLDR	R1,lineed_buflist
	LDR	R4,[R1],#4
find$l	LDMIA	R1!,{R2,R3}
	TEQ	R2,R0
	MOVEQ	PC,R14
	SUBS	R4,R4,#1
	BNE	find$l
	TEQ	R4,#1	; clear Z
	MOV	PC,R14


	END
