module:	Zap
by:	DS
change:	Block editing implemented on a per-mode basis. It affects
   <code>CHAR</code>, <code>DELETE</code>, <code>DELETENEXT</code>,
   <code>DELTOSTART</code>, <code>DELTOEND</code>, <code>TAB</code> and
   related commands (more specifically, the mode entry points
   <em>e_char</em>, <em>e_delete</em> and <em>e_tab</em>). <em>Text</em> mode
   provides support in these places; many modes will inherit this behaviour.
   <em>Wordwrap=off</em> and <em>linewrap=off</em> are disabled when editing within
   the selection with this option enabled.

---

module:	Zap
by:	DS
change:	Dynamic sub-style loading implemented.

---

module:	Zap
by:	DS
change:	Alt double click causes some action to be taken on the text at the cursor.
   Normally, this is a word; it may, however, be something looked up by a
   function.  The action is a Zap command which takes a string parameter; the
   function used is of the same name as the command, but takes as its
   parameter the file offset (this is optional, but preferred), and returns a
   string.
   <br>
   An extra configuration file, ZapUser:Config.ClickSend
   (&lt;Zap$ClickSend&gt;), is provided for this. See this file for more
   details.
   <br>
   (Mode type &quot;BASIC&quot; renamed as &quot;Tokenised&quot;.)

---

module:	Commands
by:	DS
change:	Command arguments:
   <ul>
    <li>Dynamic (evaluated on the fly):
     <table border=0>
      <tr>
       <td><kbd>$(...)</kbd>
       <td>string parameter (numbers automatically converted)
      <tr>
       <td><kbd>#(...)</kbd>
       <td>byte or word parameter
      <tr>
       <td><kbd>@(...)</kbd>
       <td>as <kbd>$(...)</kbd>; <em>deprecated</em>
     </table>
    <li>Static (evaluated once only, at parse time):
     <table border=0>
      <tr>
       <td><kbd>$<em>fn</em></kbd>
       <td>string parameter (numbers automatically converted)
      <tr>
       <td><kbd>#<em>fn</em></kbd>
       <td>byte or word parameter
      <tr>
       <td><kbd>$=(...)</kbd>
       <td>string expression (numbers automatically converted)
      <tr>
       <td><kbd>#=(...)</kbd>
       <td>numeric expression (numbers automatically converted)
      <tr>
       <td><kbd>@<em>fn</em></kbd>
       <td>as <kbd>$<em>fn</em></kbd>; <em>deprecated</em>
     </table>

    <li>
     These changes are intended to allow bracketed expressions to be supplied
     to commands and functions which require byte or word parameters.

    <li>
     Function arguments (syntax shown above). The argument is always
     evaluated when the function is evaluated.

    <li>
     Note to <em>Zap</em> developers and extension authors:
     <br>
     <em>Zap_ProcessCommand</em> and <em>Zap_ProcessKeyCommand</em>
     have changed slightly; this will only affect usage where the command
     data has been generated from a string supplied by the user or read from
     a config file.

   </ul>

---

module:	Commands
by:	DS
change:	Dynamic expression arguments may be used for commands in menus, keys and
   types definitions.

---

module:	Zap
by:	DS
change:	String expression evaluation available via
   <em>Zap_EvaluateExpression</em>.

---

module:	Commands
by:	DS
change:	Numeric arguments may be enclosed in either parentheses or quotation
   marks.

---

module:	Printing
by:	DS
change:	Clicking on the portrait and landscape options in the 'fancy print' dbox
   causes an update of the page dimensions. Also, the 'add title' option icon
   is initialised correctly.

---

module:	Printing
by:	DS
change:	Colour optionally added to fancy print :-)
   <br>
   The 'use colour' option is initialised according to the printer driver
   settings.

---

module:	Zap
by:	DS
change:	Keyboard handling markedly improved via the keycode and modifier buffering
   performed by the <em>KeyboardExtend</em> module (provided as a Zap
   extension). (<em>Zap</em> will revert to the old behaviour if this module
   is not present.) Note that this requires that commands (except for those
   which cannot be sensibly bound to a key) may not check <em>Shift</em> or
   <em>Ctrl</em> unless they're waiting for them to be pressed or released.

---

module:	Commands
by:	DS
change:	New commands <code>SET</code>, <code>UNSET</code> for <em>Zap</em>
   variables.

   <ul>
    <li>
     Variable names may contain letters, digits, '`', '_' and '$'; they must
     not start with a digit or '$'.

    <li>
     Variables may be included in expressions as follows:
     <table border=0>
      <tr>
       <td><kbd>@$<em>var</em></kbd>
       <td>string variable
      <tr>
       <td><kbd>@#<em>var</em></kbd>
       <td>integer variable
      <tr>
       <td><kbd>@$<em>var</em></kbd>
       <td>string variable to be evaluated as a <em>Zap</em> expression
     </table>
    </ul>

---

module:	Zap
by:	DS
change:	New <em>Zap</em> call, <em>Zap_ClaimMessage</em>. Necessary for
   protocols where a SWI may be replied to with a WIMP message; Acorn's
   <em>URI dispatch protocol</em> is one such. (<em>ZapDS</em> uses this
   call.)

---

module:	Commands
by:	DS
change:	Command strings may now include comments, eg.<br>
   <code>WIBBLE &quot;foo&quot; ; do something:WIBBLE &quot;bar&quot; ; do
   something else</code><br>
   Comments may not include ':'.

---

module:	Byte
by:	DS
change:	Byte and Word modes: clicking on a character in the character dump now
   positions the cursor over the appropriate byte or word.

---

module:	Byte
by:	DS
change:	Default click behaviour in Byte, Word and ASCII modes changed to allow
   double, triple and quadruple clicks to select words, lines and the whole
   buffer.

---

module:	Zap
by:	DS
change:	New structure commands:

   <ul compact>
    <li><code>IF...THEN...[ELSE]...ENDIF</code>
    <li><code>REPEAT...UNTIL</code>
    <li><code>WHILE...ENDWHILE</code>
    <li><code>CASE...WHEN...DEFAULT...ENDCASE</code>
    <li><code>CWHEN</code> C-like alternative to <code>WHEN</code>
    <li><code>BREAK</code>, <code>CONTINUE</code>
   </ul>

   <br>
   Infinite loops may be escaped from by pressing Alt-Escape.

---

module:	Zap
by:	DS
change:	<em>Zap_Ensure</em> and <em>Zap_Extend</em> may have R0=0. If so, they set
   R0=R1 and jump to <em>Zap_Claim</em>.

---

module:	Commands
by:	DS
change:	<code>LOCAL</code> variables implemented. Scope is the current command
   block (string).

---

module:	Zap
by:	DS
change:	Minibuffer filename completion improved. It will now work in situations such
   as<br>
   <code>FINDFILE &quot;ADFS::HardDisc4.$.Apps.!Zap.C&quot;</code><br>
   (command flags permitting).
   <br>
   Note that it will <strong>not</strong> work where the partial filename is
   enclosed in parentheses, since these may be part of the filename.

---

module:	Zap
by:	DS
change:	Minibuffer scrolling improved, wrt caret position.

---

module:	Zap
by:	DS
change:	The minibuffer may be drawn using either the system font or the desktop font.
   <em>Options.Minifuffer.System font</em> controls this.

---

module:	Zap
by:	DS
change:	Dragging a file or directory to the minibuffer results in its name being
   inserted.

---

module:	Za[
by:	DS
change:	Minibuffer early closure bug fixed. (This bug affected any warning
   displayed before the previous one had timed out.)

---

module:	Zap
by:	DS
change:	Support for 'big' discs added to the 'DZap' dialogue.
   <br>
   'Big' disks (&gt;=512MB) use a sector address instead of a disk address.
   (The sector address is the disk address divided by the sector size.) The
   disk size will be given as a 16-digit number, and the file title will
   contain the disk address (again, 16 digits). Small disks (&lt;512MB) are
   unaffected by these changes.

---

module:	Zap
by:	DS
change:	Added <code>NEXTCYLINDER</code> and <code>LASTCYLINDER</code> commands.
   The front end is currently not affected by this.</LI>

---

module:	Zap
by:	DS
change:	New dbox &quot;Movebox&quot; for use with dzap buffers, and a command
   <code>MOVEBOX</code> to open it. It's opened automatically when you click
   on one of the &quot;Read...&quot; icons in the dzap box.

---

module:	Zap
by:	DS
change:	Adjusted the self-modifying code in a disk-reading subroutine so that it
   works on StrongARMs.

---

module:	TaskWindow
by:	DS
change:	<em>Taskwindow</em> program extensively modified and improved.

---

module:	Zap
by:	DS
change:	Input focus change problem fixed.

---

module:	Zap
by:	DS
change:	RETURN shortcut implemented in Quit box.

---

module:	Zap
by:	DS
change:	More keypress changes:
   <table border=0>
    <tr>
     <td><strong>Key</strong>
     <td><strong>Where</strong>
     <td><strong>Function</strong>
    <tr valign=top>
     <td>Ctrl&nbsp;P
     <td>Search dbox, S&amp;R dbox
     <td>
      Paste the selection to the caret, translating control codes according
      to the '\ commands' option; pasting will stop after a \n unless the
      'raw' option is set. Macros are ignored.
    <tr valign=top>
     <td>Ctrl&nbsp;P
     <td>Minibuffer
     <td>
      Paste the selection to the caret, replacing control codes with spaces.
    <tr valign=top>
     <td>Ctrl&nbsp;W
     <td>Minibuffer
     <td>Paste the minibuffer contents to the editing window's cursor.
    <tr valign=top>
     <!-- was NOWRAP=OFF=1 in Shift Copy and Ctrl Copy -->
     <td>Shift&nbsp;Copy
     <td>Minibuffer
     <td>Delete word to right.
    <tr valign=top>
     <td>Ctrl&nbsp;Copy
     <td>Minibuffer.
     <td>Delete to end.
    <tr valign=top>
     <td>Ctrl&nbsp;K
     <td>Goto dbox, minibuffer
     <td>Clear history.
   </table>
   <br>
   (Minibuffer command codes 16, 14 and 23 correspond to <em>ctrl-P</em>,
   <em>ctrl-N</em> and <em>ctrl-W</em>.)

---

module:	Search
by:	DS
change:	Search and replace:
   <ul compact>
    <li>new special character <code>\?</code>, representing DEL (chr code
    &amp;7F).
   <li>
    <code>\[...]</code> construct fixed:
    <ul compact>
     <li>
      Now allows ] to be included as a literal at the start of the string,
      eg. <code>\[][]</code> (find '[' or ']') or <code>\[^][]</code> (find
      anything except '[' and ']'). Search strings such as
      <code>\[[x]y]</code> are not affected by this change.
     <li>
      Ranges may now be specified in reverse order, eg. <code>Z-A</code>.
    </ul>
   </ul>

---

module:	Search
by:	DS
change:	The search code can now check for a string starting at the given offset;
   to use this, set R4 (search direction) to 0. Also, setting b21 of R5
   causes the search code to set R3 to the cursor/point offset and R4 to 0
   (useful for conditional commands).

---

module:	Search
by:	DS
change:	Hourglass percentage for 'all files' search/replace now uses the sum of
   the file lengths.

---

module:	Zap
by:	DS
change:	'Possibly modified' status for large files which are of their original
   length and marked as modified. This will be resolved on various actions
   which require to know whether the files are actually modified.

---

module:	Zap
by:	DS
change:	Fixed &quot;move down unnecessarily&quot; redraw bug (eg.
   <kbd>x\ny\n\nz\n\n\n</kbd>, first five lines selected,
   <code>INDENT</code>).

---

module:	Commands
by:	DS
change:	Commands accepting string parameters are now allowed to force the string
   to be supplied with the command; omitting the string for such commands
   (which would normally cause the minibuffer to be opened) will cause an
   error.

---

module:	Zap
by:	DS
change:	<em>Zap</em> now offers the option to try to stay up when an exception
   occurs. There may be occasions when <em>Zap</em> objects to this happening
   and will need to be restarted. Users are advised to attempt to preserve
   anything they have unsaved when this happens.
   <br>
   Zap will dump the registers for later retrieval via <em>*ShowRegs</em>.

---

module:	Zap
by:	DS
change:	New file naming fixed for unnamed types: <samp>&quot;xxx_n&quot;</samp>
   instead of <samp>&quot;&amp;xxxn&quot;</samp>.

---

module:	Zap
by:	DS
change:	Exception-handling code now tries to write &lt;Zap$Dir&gt;.ZapDump on a
   number of low level errors if a &lt;Zap$Dir&gt;.Debug file is present.

---

module:	Zap
by:	DS
change:	Horizontal scrollbar removal implemented (MISCOPS 18). There are two
   situations in which the scrollbar will be missing:
   <ul compact>
    <li>
     <strong>Window wrap=off</strong>. This works with any
     <em>WindowManager</em>; if it's recent enough, the extended
     <em>Wimp_OpenWindow</em> is used, else the window is deleted and
     recreated.
    <li>
     <strong>Full-width window</strong>. This works with
     <em>WindowManager</em> &gt;=3.80 (the "Nested Wimp") to avoid the
     possibly excessive redraws which would occur due to having to delete and
     recreate the window. (It uses the extended <em>Wimp_OpenWindow</em>.)
   </ul>

---

module:	Zap
by:	DS
change:	<code>BASEMAP</code> per window and as a default per mode.
   <br>
   From the extension author's POV, this means that <em>Zap</em> variables 13
   (key_basemap) and 23 (key_current) are now in the window block as
   w_basemap and w_currentmap. <em>Zap_ReadVar</em> and <em>Zap_WriteVar</em>
   will access these via R8; if R8=0 then attempts to read will return
   key_default and attempts to write will quietly fail.  The per-mode default
   is stored in the low byte of mode data variable 2, and as such, will be
   stored in &lt;Zap$Config&gt;.
   <br>
   Calling <em>Zap_ReadVar</em> for <em>key_default</em> will return
   <em>w_defaultmap</em> if R8<>0. Similarly, <em>Zap_WriteVar</em> will
   write to <em>w_defaultmap</em>.

---

module:	Zap
by:	DS
change:	In an editing window, <code>DEFAULTMAP</code> will reselect the default
   keymap for the mode in use in that window. Otherwise, it will select the
   global default keymap (as defined in the Keys file, variable number
   &amp;400) as the default for the default mode. In either case, if the
   keymap doesn't exist, it'll fall back on keymap 0.</LI>

---

module:	Zap
by:	DS
change:	When selecting a mode, if its configured basemap doesn't exist,
   <em>Zap</em> will fall back on the global default keymap then on keymap 0.

---

module:	Zap
by:	DS
change:	Keymap naming implemented; new commands <code>BASEMAPN</code> and
   <code>KEYMAPN</code>.
   <br>
   Names may currently be anything except &quot;&quot;; given a declaration<br>
   <kbd>&amp;401 &amp;000 &amp;1FF wibble</kbd><br>
   then keymap 1 will be named &quot;wibble&quot; and may be selected as the
   basemap via <code>BASEMAPN &quot;wibble&quot;</code> (exactly equivalent
   to <code>BASEMAP 1</code>).
   <br>
   Names are matched case insensitively. Two keymaps with the same name is
   silly; the first declared will be found.

---

module:	Zap
by:	DS
change:	Keymap 0 is called &quot;Default&quot;.</LI>

---

module:	Zap
by:	DS
change:	The <code>EMACS</code> command expects to find a keymap named
   &quot;Emacs&quot;.

---

module:	Zap
by:	DS
change:	<code>BASEMAPLIST</code> added (builds a keymaps list menu for basemap
   selection).

---

module:	Zap
by:	DS
change:	<code>BASEMAPN</code> now tickable on menus (in addition to
   <code>BASEMAP</code> and the <code>BASEMAPLIST</code> menu entries).

---

module:	Zap
by:	DS
change:	The editing window click handler now distinguishes between mouse buttons;
   multiple clicks must be done using the same mouse button.

---

module:	Zap
by:	DS
change:	The <code>HELP</code> commands now tell you if no help text has been found.

---

module:	Zap
by:	DS
change:	<code>HelpKey</code> (and <code>Help</code>) now use the keymap selected
   by the most recent <code>KeyMap</code>, <code>BaseMap</code>,
   <code>Emacs</code> etc. thus more easily allowing for help for keys in
   maps other than the current base map. If accessed via a keypress,
   <code>HelpKey/Help</code> must be present in that keymap.
   <br>
   A second <code>HelpKey</code> will, without first selecting a different
   keymap, use the base map.</LI>

---

module:	Zap
by:	DS
change:	Careful optimisation of all Zap's string handling routines for maximum speed.

---

module:	Code
by:	DS
change:	Changes to the replacement <em>Debugger</em> to allow faster and better
   support from within <em>Zap</em> for syntax-colouring of assembler
   conditions.

---

module:	Zap	
by:	DS
change:	Menu handling altered such that including an extension command in menus
   will not cause the extension module containing that command to be loaded
   unless the command has to be called when the menu is opened, updated or
   clicked on.

---

module:	Zap
by:	DS
change:	Hourglass activity added around file load/save operations.

---

module:	Zap
by:	DS
change:	Clicking Select or Adjust on certain dialogue box backgrounds will give
   them the input focus.

---

module:	Zap
by:	DS
change:	Adjust-click fixed for the case where the input focus is in a different
   <em>Zap</em> editing window.

---

module:	Code
by:	DS
change:	Code mode branch-following now correctly sets the disassembler flags.

---

module:	Zap
by:	DS
change:	<em>Zap_UpdateWholeWindow</em> now calls <code>UPDATEWINDOW</code>.

---

module:	Zap
by:	DS
change:	Calls to <em>Zap_UpdateArea</em> and <em>Zap_UpdateWindow</em>
   generate 'deprecated' warnings.

---

module:	Zap
by:	DS
change:	Save box for untyped file now opens with Load/Exec writable.

---

module:	Zap
by:	DS
change:	Save boxes' <em>TAB</em> bug fixed.

---

module:	Zap
by:	DS
change:	<code>DELETENEXT</code> no longer checks Shift, always copying if the copy
   cursor is active. If you want the delete behaviour regardless, use
   <code>DELETENEXTNOCOPY</code> instead.

---

module:	Zap
by:	DS
change:	New command <code>PASSTHROUGH</code>. Use in TaskWindow mode to override
   Zap's claiming of certain keys/commands.

---

module:	Zap
by:	DS
change:	New function <code>@COPY</code>, indicating whether the copy cursor is
   active.

---

module:	Zap
by:	DS
change:	If you have both <em>LineEditor</em> and <em>Zap</em> set up such that
   <code>DELETENEXT</code> is bound to Copy, then changing the <em>Zap</em>
   key definition to<br>
   <code>IF (@MODET=3 AND @COPY=0):PASSTHROUGH
   &amp;18B:ELSE:DELETENEXT:ENDIF</code><br>
   will allow Copy to work in a taskwindow exactly as it does in any other
   window or at the (F12) command prompt.

---

module:	Zap
by:	DS
change:	Mode entry point e_return modified: on entry, R0=0 if <code>RETURN</code>,
   1 if <code>RETURNNOINDENT</code>. Code mode has been suitably modified so
   that RETURN maps to <code>ASSEMBLE</code> and <code>RETURNNOINDENT</code>
   to <code>EDITWORD</code>.</LI>

---

module:	Zap
by:	DS
change:	<em>Zap_Warning</em> modification: R1 bit 30 set to suppress the
   <samp>Warning:</samp> prefix.

---

module:	Zap
by:	DS
change:	Zap_ReturnWord allows \ddd, \xnn, \&amp;nn (search-like).

---

module:	Zap
by:	DS
change:	Zap_ProcessKeyCommand now relies on the parameter type passed in R2 b24-27
   (it used to rely on the type given in the command's flag word). Ensure
   that you're setting R2 up correctly...

---

module:	Zap
by:	DS
change:	Zap_ReadValidateCommand always returns R1=0 or R1-&gt;heap block. It is up
   to the calling code to free this block even if this call has returned an
   error.

---

module:	Zap
by:	DS
change:	All of the conditional commands, various functions and
   <code>MULTICOMMAND</code> (in practice, <code>COMMAND</code> or a command
   sequence) will work from places such as the iconbar menu.

---

module:	Zap
by:	DS
change:	Clipboard paste bug fixed (transfer via scrap file, Shift held down); the
   file contents will be inserted.

---

module:	Zap
by:	DS
change:	New cursor variable c_charoff. This is used to maintain offsets within
   tokens; it (mostly) fixes the situation in <em>BASIC</em> mode where the
   copy cursor is in a token below or to the right of the input cursor).
   <ul compact>
    <li><em>Zap_UpdateCaret</em> sets <em>c_charoff</em> to 0.
    <li><em>Zap_SetCaret</em> calculates a value for <em>c_charoff</em>.
    <li><em>Zap_AlterCaret</em> uses <em>c_charoff</em>.
   </ul>

---

module:	Zap
by:	DS
change:	Cursor scrolling misalignments fixed (bottom row of pixels of last
   displayed row not scrolled into view; left margin ignored).

---

module:	Zap
by:	DW
change:	Softwrap mode has now been added centrally to Zap.  It has been etended so 
        that soft-wrap may be an aspect of most modes, and modes may choose which 
        characters may be soft-wrapped on.
        
---

module:	Code
by:	JRF
change:	Code mode now uses embedded debugging information to provide the names of 
        functions in branches and when they are defined, in compiled and linked code.

---

module:	Code
by:	JRF
change:	Code mode also now displays information on <em>AIF headers</em>, and 
        information relating to embedded (and possibly indirected) str

---

module:	Zap
by:	JRF
change:	Zap_Command command added centrally to Zap from ZapJRF.  This allows other 
        applications to execute Zap commands conveniently.

---

module:	Zap
by:	MJE
change:	CreateConf written and used to provide plug-and-play configuration for Zap 
        extension modules.  More details are in the documentation which accompanies 
        CreateConf (in !Zap.Code.Config).

---

module:	Zap
by:	MJE
change:	The 'Smart shift-cursor keys' originally used in C code has been added 
        centrally to Zap.

---

module:	Zap
by:	MJE
change:	The 'ALTERSEL' command is now present centrally in Zap's core.

---

module:	Zap
by:	SJA
change:	Global clipboard support added. The <code>PASTEGC</code> command
	pastes the clipborad contents in and <code>CUT</code> and
	<code>KEEPREGION</code> now affect the global clipboard.  There is also the
	<code>CLEARGC</code> command which may  be used to determine whether Zap is
	currently maintaining the clipboard.  As Zap will often own the clipboard's
	contents while in use, this is not queried when Zap quits.

---

module:	Zap
by:	SJA
change:	<strong>OLE</strong> support internally to Zap.  This uses code from
	<em>!ZapOLE</em> - which is no longer required as an extension mode.  Note
	that this requires an alteration to Zap's <em>!Run</em> and <em>!Boot
	</em>files to work properly.

---

module:	Zap
by:	SJA
change:	<code>Newfile</code> command takes mode name and filetype as
	parameters. From the iconbar it defaults to &amp;FFF and the mode associated
	with the specified filetype; from a window it defaults to the window's
	current filetype and mode. This is expected to replace
	<code>Createfile</code>. (It doesn't set the caret correctly in cases such as
	&quot;Byte &amp;FFF&quot;. This is being looked into.)

---

module:	Zap
by:	SJA
change:	<em>Settings</em> variables &amp;30E and &amp;30F modified to execute
	arbitrary commands. The main advantage is that you can set the adjust type to
	(eg) NEWFILE&quot;C &amp;FFF&quot;, and create a <em>C</em> file ready to go
	on an adjust click.

---

module:	Zap
by:	SJA
change:	Byte and word mode alterations: number and ascii dumps may be
	optionally grouped;  number dumps optionally displayed in binary (hex input
	mode inputs in binary in this case); optionally suppress control characters;
	tidied colouring.

---

module:	Zap
by:	SJA
change:	Fixed bug in <em>Zap-&gt;Remove</em> menu when dealing with modified
	files.

---

module:	Zap
by:	SJA
change:	The <code>FINDFILE</code> command now brings the found window to the
	front of the window stack if it is already loaded.

---

module:	Zap
by:	SJA
change:	More flexible support for context-sensitive help designed and
	incorporated into most Zap modes (except BASIC, so far). This relies on the
	<code>ZapText</code> module to provide the actual commands and functions used
	to interface this with <code>StrongHelp</code>; other interfaces should be
	possible.

---

module:	Zap
by:	SJA
change:	<code>ZapText</code> and <code>ZapUtil</code> central command
	extensions provide replacements for lots of commands in other extensions. In
	some cases these are identical (sometimes with more useful names); some have
	been improved. In addition, ZapUtil contains a large number of new
	functions.
	

module:	Zap
by:	TMT
change:	<em>Font sub-styles</em> are now available.  These supplement the exisiting syntax colouring, and allow combinations of <strong>bold</strong>, <em>italic</em> and <U>underlined</U> variants of the main font to be used.  This allows syntax information from the selected area to remain visible, and can help to provide additional visual clues about a document's meaning to readers.

---

module:	Zap
by:	TMT
change:	There is a soft-link protocol to allow fonts to be linked to other places in the font directory.  Links are text files with a self-explanatory format. The idea is largely to prevent the need to store multiple copies of a font when it is to be used as a main font, and also as a sub-style.

---

module:	Zap
by:	TMT
change:	Support within <em>ZapRedraw</em> for altering the aspect ratio of displays using outline fonts.  <em>DSA</em> and <em>VDU</em> modes both benefit.  The top 16 bits of the font size now contain the aspect ratio (as 100xY/X).

---

module:	Zap
by:	TMT
change:	<code>FONTASPECT</code> command provided within <em>Zap</em>to allow the aspect ratio of outline fonts to be altered.

---

module:	Zap
by:	TMT
change:	Coloured throwback. The colouring is still quite simple with no highlighting of matched words implemented.

---

module:	Zap
by:	TMT
change:	There are now an additional fifteen colours in the <strong>Code</strong> mode. You can probably guess that it is felt that the only disadvantage of large numbers of colours is the hassle of configuring them. The old colours are still there, but ar now confined to the mnemonics. Perhaps most interesting is the condition colouring. This can take some getting used to when reading the code, but it is genuinely useful. It has been tested fairly extensively with <em>Darren Salt</em>'s excellent disassembler and should work on RPCs.

---

module:	Zap
by:	TMT
change:	Added <code>BITMAPFONT</code> &lt;string&gt; command. This simply sets the bitmap font in the relevant window to be &quot;ZapFont:&lt;string&gt;&quot; e.g. to force a font change, use: <code>BITMAPFONT &quot;08x15.Teletext&quot; : FONTTYPE 1</code><br>The main uses of this command are:
   <ul>
   <li>Using the useful feature of being able to execute arbitrary strings of <strong>Zap</strong> commands whenever a new file is loaded (these commands go in the filetype or path sections of the keys file) to put different types of files into windows with different fonts.</li>
   <li>Putting frequently used fonts at the bottom of the font menu to avoid unnecessarily wading into the main font menu.</li>
   </UL>

---

module:	Zap
by:	TMT
change:	Added the <code>OUTLINEFONT</code> &lt;string&gt; command. This acts much like the <code>BITMAPFONT</code> command. &lt;string&gt; is a font name, optionally preceded by a '#' character. If present, the hash prevents the font from being installed and cached - useful to stop the font from being cached twice when used in conjunction with the <code>FONTSIZE</code> command. '<code>OUTLINEFONT &quot;#Corpus.Bold&quot; : FONTSIZE 12 : FONTTYPE 3</code>' is an example of its use.

---

module:	Zap
by:	TMT
change:	A fix for truncated descenders when using anti-aliased outline font displays has been implemented.

---

module:	Zap
by:	TMT
change:	Anti-aliasing is now applied to all text colours in modes with 256, 32K and 16M colours. The technique involves no memory overhead, and incurrs no speed penalty, but it can produce imperfect displays. The innaccuracies are best seen with a magnifier on characters which have a low contrast between themselves and the background. With a black backdrop dark grey characters are displayed poorly. It may be possible to filter out these low- contrast cases and feed them to the non-anti-aliased routines for a slightly better display. It may also be possible to use the technique to some extent in &lt; 256 colour modes in the future. If the effect is disliked then it can be disabled by setting the keys file variable &amp;31F to a non-zero value.

---

module:	Zap
by:	TMT
change:	Added code to filter out the very worst cases in the anti-aliased DSA redraw code. Unfortunately, at the moment this only filters out <em>very</em> low contrast combinations that are unlikely to be being used in the first place.

---

module:	Zap
by:	TMT
change:	Interactive help messages for third-party windows are now passed on correctly, allowing <em>ZapButtons</em> to provide interactive help properly. There have also been a number of other modifications to allow applications which open their own windows to behave in a more responsive manner.

---

module:	Zap
by:	TMT
change:	A second Zap-handled mode word for storing options in has been created. This modifies the format of the <em>!Config</em> file in an appropriate manner. This enable:
    <ul>
      <li>Universal soft-wrap;</li>
      <li>Universal window-wrap;</li>
      <li>Smart shift-cursor keys option;</li>
      <li>Confined action of cursor-right;</li>
      <li>...and a number of other new options.</li>
    </ul>

---

module:	Zap
by:	TMT
change:	Added a new variable to the Keys file. &quot;Dialogue box offsets&quot; is variable &amp;31D and crudely controls where dialogue boxes which are associated with windows are brought up. The format is: &lt;xoffs&gt;,&lt;yoffs&gt; with default values of &amp;80,&amp;80 if no offsets are given. The format is currently subject to change.

---

module:	Zap
by:	TMT
change:	The number of permitted command tables has been increased from 16 to 32.

---

module:	Zap
by:	TMT
change:	Emulation of a cursor movement pattern of some other editors is now available. The &quot;Confine V&quot; cursor option acts to give the cursor a 'current column'. The cursor is then moved to the nearest available position when cursor up and down are executed.

---

module:	Zap
by:	TMT
change:	<em>Zap</em> now uses the <code>&lt;Zap$HelpData&gt;</code> variable when looking for its HelpData.

---

module:	Zap
by:	TMT
change:	'Last', 'To eof' and 'Exit' buttons now close window when adjust-clicked.

---

module:	Zap
by:	TMT
change:	Q (quit) abbreviation added as a synonym for E (exit) in the replace buttons d-box and the load d-box.

---

module:	Zap
by:	TMT
change:	'To Front' (T or F) option added in Edit/Overwrite/Cancel d-box [icon 6]. Also all buttons now close this window when adjust-clicked on.

---

module:	Zap
by:	TMT
change:	New option not to use hourglass in search routines added.

---

module:	Zap
by:	TMT
change:	Pressing 'tab' repeatedly now repositions caret properly in search/replace d-boxes (instead of painting carets all over the place and not rubbing them out).

---

module:	Zap
by:	TMT
change:	For the benefit of '!Clipboard' users who use ctrl-Z, ctrl-X, ctrl-C and ctrl-V to provide a 'writable icon clipboard', Zap's search and replace dialogues now pass these keys on to the WIMP so clipboard programs can use them. Note that as ctrl-C is used for toggling the 'Case sensitive' flag this may be generated by pressing ctrl-D instead.

---

module:	Zap
by:	TMT
change:	Select-clicking on the title of a file in a throwback window (or on the blank lines surrounding it now simply loads the relevant file.

---

module:	Zap
by:	TMT
change:	Added routines designed to make window update much smoother when using window wrap with a selected region.

---

module:	Zap
by:	TMT
change:	Added support for a new system variable: <code>Zap$DummyOSVsn</code>. If this exists then it overrides <code>Zap$OSVsn</code> when <em>Wimp_Initialise</em> is called.

---

module:	Zap
by:	TMT
change:	Integrated support for <em>Darren Salt's</em> replacement <strong>Debugger</strong> in <strong>Code</strong> mode.

---

module:	Zap
by:	TMT
change:	There are new options in the <strong>Code</strong> mode to control the colouring as the default options may not always be appropriate.

---

module:	Zap
by:	TMT
change:	Code mode now handles instructions whose disassembly depends on the last two instructions being disassembled immediately beforehand (as implemented in the disassembler to provide LDRL, etc). LDRL and LDRX also now work properly when left-arrow is pressed over them.

---

module:	Zap
by:	TMT
change:	Code mode is now aware of offset &amp;2C (Messages file offset RO&gt;3.5).

---

module:	Zap
by:	TMT
change:	Code mode is now aware of bit 31 of addresses acting as a flag bit. In particular in module finalisation offset where this acts as a flag preventing the module from being killed on RMClear. (Thanks to <em>Darren Salt</em> for information relating to these issues.)

---

module:	Zap
by:	TMT
change:	Added a new option in 'Code' mode to allow stripping of comments.

---

module:	Zap
by:	TMT
change:	<em>ZapRedraw</em> has been modified to cope with <em>small</em> negative horizontal window offsets.

---

module:	Zap
by:	TMT
change:	<em>Zap</em> has been changed to take advantage of this.  The selection is intended to extend into the margin.  <em>Zap</em>variable &amp;30C (which should now be titled &quot;<em>Window left margin (os)</em>&quot;) now works.  It would be appreciated if those with an interest in making sure <em>Zap</em>works properly could set this to some <em>small</em> positive value (4, say) for a while so any lurking difficulties may be uncovered.

---

module:	Zap
by:	TMT
change:	Drag-and-drop of the current selection implemented.  To activate this, shift-select-drag while the pointer is over the selected region. If the drag is to a <em>Zap</em>window, the cursor is positioned appropriately before the text is copied.  The leafname used for exported selections will be that present in the <code>Save selection</code> box. Drags may be aborted by pressing <em>ESCAPE</em>.

---

module:	Zap
by:	TMT
change:	Variable width line numbers implemented.  The interface is via the <code>SETMARGINWIDTH</code> and <code>COLONSEPARATOR</code> commands.  These will come set up higgle-de-piggledy for those who have been following the progress here; upgraders straight from 1.35 should not experience this.  Hopefully there will eventually be a way of setting things up so that <em>BASIC</em> mode gets a width of 5 and no colons by default. If the margin width is set to 1 and the colons are turned off then then a '*' (or, if the 'Hex' option is selected, a '&gt;') will be displayed where the last visible digit of the line number would normally go.  This can sometimes be useful to provide feedback about which lines are logical and which are physical, especially in soft-wrapped modes where  the distinction between these is being deliberately blurred.

---

module:	Zap
by:	TMT
change:	The <em>LineEditor</em> now helps to provide a history in the '<em>Search</em>' '<em>Search and Replace</em>' and '<em>Goto</em>' dialogue boxes.  It may be navigated by using <em>Page Up/Page Down</em>.  Everywhere, except in the <em>Search and Replace</em> dialogue, the cursor keys also perform this function. <em>Tab</em> restores the original setting as before. <em>Ctrl-K</em> clears the history of the current icon.  <em>Ctrl-T</em> copes text between the icons. There is a WIMP front-end available by calling up menus containing the history.  <em>Adjust</em> performs a different action from <em>Select</em> in many places.

---

module:	Zap
by:	TMT
change:	There is a bug in the <em>WIMP</em> which means that the ends of drags are not always reported properly. Until now when these circumstances occurred, <em>Zap</em>got confused and could crash. This problem has been fixed by always checking to see that a mouse button is being pressed while a drag is occurring and faking a drag close event for the benefit of any dragging clients if this is not the case. The bug affects most <em>RISC-OS</em> programs that use the <em>WIMP</em> dragging routines. It can usually be provoked by not calling <code>Wimp_Poll</code> for a while. One very common cause for this is using the <em>!MoveWindo</em> application. To observe the bug in programs, the easiest method is to start the drag and press F12. In <em>Zap</em>doing this while dragging a selection caused severe problems if that window was subsequently closed.

---

module:	Zap
by:	TMT
change:	With the cursor in one window and a selection in another <em>ctrl-ADJUST</em> to extend the selection, and watch the cursor redraw and move around in the other window. This bug has now been fixed.

---

module:	Zap
by:	TMT
change:	Extending the selection with <em>ctrl-ADJUST</em> would, under some circumstances, cause the selected area to flicker when the drag kicked in. This has been rectified.

---

module:	Zap
by:	TMT
change:	The &quot;Load mode&quot; menu now only contains the modes not already loaded. If there is any possible use for reloading a previously-loaded mode, then now would be a good time to point this out to me. The shorter menu should make it easier to find things though there is no longer an exhaustive alphabetical list available when choosing modes.

---

module:	Zap
by:	TMT
change:	The cursor no longer wraps incorrectly when cursor-right is pressed and held down at the end of files.

---

module:	Zap
by:	TMT
change:	&quot;Copy ops&quot; i.e. the <code>MAKEDEFAULT</code> command, when issued from a read-only window no longer makes all subsequently opened windows read-only.

---

module:	Zap
by:	TMT
change:	Handling of the Save box's type picker modified to allow prettier templates. Clicking with select now brings up the type menu.

---

module:	Zap
by:	TMT
change:	The command <code>TMT_UPDATEWINDOW</code> has been rewritten, renamed and moved into the kernel.  This improves window-wrap redraw massively.

---

module:	Zap
by:	TMT
change:	The horizontal scroll bar and scroll icons are no longer active when window-wrap is engaged.

---

module:	Zap
by:	TMT
change:	Soft-wrap now also wraps on the characters which may be defined by indivadual modes, allowing more intelligent soft-wrap in HTML modes for example.

---

module:	Zap
by:	TMT
change:	<code>SOFTWRAP</code> and <code>WINDOWWRAP</code> commands added. These <em>must</em> be used in place of their flag-toggling equivalents.

---

module:	Zap
by:	TMT
change:	Soft-wrap now permits characters to extend into the last column, on the proviso that they are followed immediately by a CR.  Soft-wrap and line-wrap are now mutually exclusive - using one will deselect the use of the other.  Soft-wrap is now indicated by a capital 'W' in the title bar.

---

module:	Zap
by:	TMT
change:	'Infinite' window wrap implemented. It defaults to being off. One point to note about it is that the old width is not stored, and so deselecting window wrap sets the current width as the new window width. This may be of some use when using &quot;<code>WINDOWWRAP:WINDOWWRAP</code>&quot; to set the current window's width as the permanent width.

---

module:	Zap
by:	TMT
change:	&quot;<em>Copy ops</em>&quot; i.e. the <code>MAKEDEFAULT</code> command now also copies the data for the mode of the window it was issued from (i.e. the options usually accessible through that mode's menu) into the default options.  This is useful as it can save some wading around in the icon-bar menu.However, there seem to be some imperfections in the original command which have not been tracked down yet.

---

module:	Zap
by:	TMT
change:	Added absolute cursor positioning on a mouse click as an option. This option is is sometimes useful when performing activities like creating ASCII art.

---

module:	Zap
by:	TMT
change:	Added the <code>AUTOSOFTWRAP</code> command. When the option is turned on, auto soft-wrap detection routines fire whenever a mode change takes place.

---

module:	Zap
by:	TMT
change:	Auto-width now does not operate if the mode is currently being soft-wrapped.  The auto-width option will remain ticked, though. When autowidth is on and soft-wrap is off there are still some circumstances which will cause autowidth to 'kick' in unexpectedly. To observe this load a file with autowidth and softwrap on. Then toggle softwrap, and then window-wrap.  When window-wrap is toggled, the autowidth will suddenly wake up.  I'm aware of this issue.

---

module:	Zap
by:	TMT
change:	Soft-wrap modified so different modes can choose which characters are soft-wrapped on.  Text mode (i.e. most modes) now wrap by default on spaces, tabs and &quot;-&quot;.  HTML modes (for example) should also wrap on &quot;&gt;&quot; for the best display.

---

module:	Zap
by:	TMT
change:	Selections can now be made by pressing and holding down <em>ESCAPE</em> and then using the cursor keys.  Shift- and control- cursor combinations work with this, as do <em>Page Up</em> and <em>Page Down</em>.

---

module:	Zap
by:	TMT
change:	Selections made using <code>SELREGION</code> are now <em>always</em> confined in such a manner that the cursor follows the text exactly.  This should eliminate long standing redraw 'issues' associated with selecting regions that start or end in empty space.

---

module:	Zap
by:	TMT
change:	A number of <em>Zap</em>commands currently being proposed for being in Zap's kernel have been placed there.  Hopefully the ones picked are fairly uncontroversial, and they are all very short. &quot;<code>DELETEFILE</code>&quot;, &quot;<code>DISCARDFILE</code>&quot;, &quot;<code><code>DISCARDWINDOW</code></code>&quot;, &quot;<code>DROPMARK</code>&quot;, &quot;<code>INSERTBLOCK</code>&quot;, <code>INSERTBLOCKGS</code>&quot;, &quot;<code>OPENPARENT</code>&quot;, &quot;&quot;<code>STARTOP</code>&quot; and &quot;<code>STOPOP</code>&quot; have been done so far.

---

module:	Zap
by:	TMT
change:	A fairly radical change has been made to the passing of parameters to <em>Zap</em>commands.  Commands which take string parameters may now have them passed enclosed in brackets, instead of inside quotes. <strong>WARNING!:</strong> this change <em>may</em> require changes to your Keys file. For details see the &quot;WARNING!&quot; section in the installation notes.

---

module:	Zap
by:	TMT
change:	The <em>Save selection</em> box has been modified to be more like the <em>Save</em> box.  Note that filetype information, and load and execution addresses can <strong>not</strong> yet be modified independently of those of the main file.

---

module:	Zap
by:	TMT
change:	Made dialogue box buttons press themselves in when the relevant shortcut key is pressed to provide visual feedback.

---

module:	Zap
by:	TMT
change:	<code>STILLUP</code> and <code>STILLDOWN</code> commands have been implemented.  These are roughly equivalent to <code>UP:SCUP</code> and <code>DOWN:SCDOWN</code>.  The latter are fairly useless, however as those combinations would fail to repeat in an intelligent manner when bound to cursor up and cursor down in the keys file.  <code>STILLLEFT</code> and <code>STILLRIGHT</code> would be easy to implement, but also not particularly useful.

---

module:	Zap
by:	TMT
change:	<code>SCUP, SCDOWN, SCLEFT</code> and <code>SCRIGHT</code> have had their 'auto-repeat' bit set.  This will probably only normally make a difference for those with rapid keyboard auto-repeat rates and slow machines.  To get the effect of the original commands, it is possible to use commands like SCUP:NULL to stop multiple <code>SCUP</code>s being combined.  However, this should /not/ be the default setting IMO.

---

module:	Zap
by:	TMT
change:	The <em>Save/Discard/Cancel</em> box now offers the same options as the <em>Save</em> box, in addition to the normal functions.  The main advantage of this is it is easier to save from a window's close icon. <em>Discard</em> and <em>Cancel</em> are still supported.  There is a <em>To Save</em> icon (to be deleted) which brings up the normal save box as before for those who prefer the old style for some reason.<br />
        Because the new box has writable icons in it, 'S', 'D', and 'C' keyboard shortcuts will not function with the default set-up.  These (in my experience) were infrequently used because frequently the user had just clicked on the close icon of the window, and so using the mouse was natural. However, the shortcuts are present internally, and if <strong>all</strong> the writable icons are all made non-writable, then they will start to work <em>exactly</em> as before.  This way the new system offers all the functionality of the original templates for those who preferred the old system.

---

module:	Zap
by:	TMT
change:	<em>Zap</em> now uses the <em>Zap$Keys</em>, <em>Zap$Settings</em> and <em>Zap$Types</em> variables when looking for its resources, and loads them separately.  This means that changes to the keys file (for instance) no longer cause CreateConf to perform a complete rescan of the Modules directory when <em>Zap</em>loads.

---

module:	Zap
by:	TMT
change:	A new template has been added.  This is used for a save-&gt;CSD query when saving the selection.  There has not been such a dialogue box up until this point.

---

module:	Zap
by:	TMT
change:	Inserting and deleting regions which are not currently visible on the screen has, until now, failed completely to update the screen. These circumstances are very commonly produced while undoing or redoing insertions or deletions.  Now the integrity of the display is always maintained.  This is currently done by catching the cases which would cause redraw problems and then updating the whole window, rather than just the sections which need doing.

---

module:	Zap
by:	TMT
change:	Auto soft-wrap now no longer selects soft-wrap if it finds any control characters in the file.  This will usually occur when binary files which are being viewed in Text mode.

---

module:	Zap
by:	TMT
change:	Inserting text by dragging it into a <em>Zap</em>window now inserts by placing the cursor at the dropped position if <em>SHIFT</em> is pressed. This applies to both imported texts, and selections which are <em>SHIFT</em>-dragged from <em>Zap</em>itself.  If <em>SHIFT</em> is not pressed then the text is inserted at the position of the cursor (or the 'point' marker).  The way the <em>SHIFT</em> operation works could easily be reversed - it is set the way it is mainly for the sake of backwards compatibility.

---

module:	Zap
by:	TMT
change:	Modes can now specify whether the various cursor options are relevant to them.  The corresponding menu entries are greyed out if the options are not applicable.

---

module:	Zap
by:	TMT
change:	<em>Zap</em> no longer causes address exceptions when the desktop is shut down and restarted.  This problem seems to have been introduced with <em>Zap</em>1.35.  The fix is a crude one and has the consequence that <em>Zap</em>does not reinitialise itself and place an icon on the icon bar  upon restart any more.  For the technically minded, <em>Zap</em>now traps, <em>Service_WimpCloseDown</em>, looks for itself dying, and issues a <em>OS_ExitAndDie</em> on itself if this happens.

---

module:	Zap
by:	TMT
change:	New commands <code>CONFINEHORIZONTALLY,</code> <code>CONFINEVERTICALLY</code> and <code>FREECLICK</code> added.  This means that the occasional conflict between <code>CONFINEHORIZONTALLY</code> and <code>FREECLICK</code> has been eliminated, and that these menu entries will now have sensible interactive help on them.

---

module:	Zap
by:	TMT
change:	Modified the behaviour of <code>COPYSEL, MOVESEL</code> and <code>YANK</code> so that they insert the text at the cursor position, rather than at the nearest offset.  The old behaviour was poor and so is not even available now as an option.

---

module:	Zap
by:	TMT
change:	<code>MOVESEL</code> now leaves the region <code>MOVE</code>'d selected.  Probably <code>YANK</code> should do this too.  The old behaviour was questionable; it is not available as an option. Note that these changes make using the 'Non-standard' option in BASIC mode <em>much</em> more viable.  This strips spaces from the ends of lines, including ones which are otherwise blank, as they are typed.

---

module:	Zap
by:	TMT
change:	Serious long standing bug in the <code>MAKEDEFAULT</code> command has been located and cured. It was copying most of the options from the current window into the default opinions of whatever mode was currently selected in the icon bar menu.  No wonder it seemed unreliable.  It now correctly copies the options across from the specified window into the options of the relevant mode.

---

module:	Zap
by:	TMT
change:	WC and WCSEL commands added to <em>Zap.</em> Having WC in <em>Zap</em>means that it can be properly used as a submenu in the File menu without loading an extra <em>Zap</em>mode by default.  And menu entries using the WCSEL command are now shaded depending on whether there is a current selection, and ADJUST-clicking on the commands in menu entries works correctly.  WCSEL no longer beeps to indicate that there is a current selection and gives a minibuffer warning if it is executed without one.  The commands were originally written by <em>Elliot Hughes</em> as part of his <em>ZapENH</em> module.  Many thanks are due to Elliot for kindly providing his source code.

---

module:	Zap
by:	TMT
change:	If a minibuffer warning is given when a command is issued from the minibuffer the warning no longer disappears immediately.  The input focus is retained by the minibuffer's owning window, even while the warning is being displayed.  I think the psychology of doing this is questionable, but it does mean that <em>Zap</em>behaves more responsively, and in particular, that long minibuffer warnings can be cancelled by pressing <em>ESCAPE</em>.

---

module:	Zap
by:	TMT
change:	The undo buffer now stores a flag to indicate the position of the cursor when text is inserted or deleted.  This is then used to reposition the cursor when <code>UNDO</code> is executed.  When deletions are undone, the cursor now moves to the start of the inserted region if it was there when the deletion occurred.  This mainly affects <code>CUTSEL, DELETENEXT</code> and <code>DELETETOEND</code>.  Storing the position of the cursor (if it is inside the deleted region) would be a superior strategy, but it would also be a more expensive
        <p>
         Note: <code>DELETENEXT</code> in <em>ZapBASIC</em> currently works 'the old way'. I can't <em>neatly</em> fix this without making <em>ZapBASIC</em> non-backwards compatible with <em>Zap</em>1.35. I'm now not sure when this will get fixed.
        </p>

---

module:	Zap
by:	TMT
change:	A 'count the number of matches' option added to the <em>Zap_Search</em> call.

---

module:	Zap
by:	TMT
change:	A front end integrated into the <em>Zap</em>search and replace dialogues based on the above call.  This counts the number of matches of a specified search string in one or all of the loaded files. There are in fact two possible methods used to display the search information.  One (currently being used in the search box) involves a popup window (which saves on template real estate).  The other (currently in service in the search and replace dialogue box) uses a simple display icon to show the number of matches.  Whether you get the pop-up box is controlled in the templates file; set a non-zero ESG for icon 3 to stop it from appearing.

---

module:	Zap
by:	TMT
change:	More changes to <code>MAKEDEFAULT</code> (and thus copy ops).  It should be saving its settings more reliably (again).  Also it no longer affects options in any modes apart from the mode of the file it was issued from.  It was (for example) saving the colours in all the modes whenever it was issued.  I don't think this was good behaviour.

---

module:	Zap
by:	TMT
change:	Text mode now uses &quot;-------I&quot; to display tabs.  It was using &quot;]]]]]]I&quot; because both &quot;]&quot; and &quot;I&quot; are control characters, so this was easier and faster as the foreground colour buffer didn't have to be used.  The soft-wrap code has also been changed, so this change also applies to any modes which have soft-wrap turned on.  I have minimised any performance loss by recoding the (already pretty well optimised) redraw routines.  In text mode, an unused register was found and half the branch instructions were eliminated.  In principle this change could affect modes which use the text mode's code to help perform their redraw.  <em>AFAIK</em> there aren't any modes which do this.

---

module:	Zap
by:	TMT
change:	It is no longer possible to open the minibuffer from the icon bar menu. Commands which use the minibuffer in this context now abort themselves if they are supplied without any string.  The minibuffer would have been opened at the position dictated in the template file. The functionality has been removed largely for aesthetic reasons; Most of the time when the minibuffer is opened in this manner, it was in error.

---

module:	Zap
by:	TMT
change:	Added <code>ALLMODES</code> and <code>ALLWINDOWS</code> commands.  These execute a given string of <em>Zap</em>commands once in each <em>Zap</em>window, and once for each loaded mode respectively.

---

module:	Zap
by:	TMT
change:	<em>Byte, Word, ASCII</em> and <em>Code</em> modes are now using their background colours for the first time.

---

module:	Zap
by:	TMT
change:	<em>Zap</em> now tries to reset <em>Alias$Taskwindow</em> if it thinks it needs to do so if it exits ungracefully.  This should prevent the symptom of ctrl-F12 from not working until <em>Zap</em>is reloaded.

---

module:	Zap
by:	TMT
change:	An old throwback bug cured.  If entries were deleted from the end of a throwback buffer so that all the entries for the last file were deleted, and then more entries added, these subsequent entries failed to operate.

---

module:	Zap
by:	TMT
change:	Support for inserting selected regions.  Currently the clients for this are the <code>CUT, PASTE, YANK</code> and <code>MOVESEL</code> commands which use it to mark the cut text as being in need of reselection when they are undone.

---

module:	Zap
by:	TMT
change:	The 'mode_0' template has been deleted from templates file. The <code>Main</code> template has been added - this is used as a template for all <em>Zap</em>file windows.  This has been done mainly to allow different coloured borders to be used. The supplied default template uses a dark grey/colour 6 background. The idea is to allow users to colour their border differently from their most commonly used background colour, to help with situations where one <em>Zap</em>window lies on top of another one.  Regrettably, the colour controlling window borders also controls the title bar text foreground colour :(

---

module:	Zap
by:	TMT
change:	Executing <code>BINDTOKEY</code> now terminates any learned key sequence.  This prevents <code>LEARN:RETURN:BINDTOKEY:TAB:TAB:TAB...TAB:TAB:TAB</code> from crashing <em>Zap</em>.

---

module:	Zap
by:	TMT
change:	A '<code>COREDUMP</code>' is now produced when an exception occurs if there is a file called 'Debug' in <em>Zap</em>'s root.

---

module:	Zap
by:	TMT
change:	An old bug which caused the undo buffer to become corrupted cured. This bug could be consistently reproduced by using <code>FULLUNDO</code> in conjunction with attempts to undo beyond the first undo in files whose undo data contained concatenated sections of insertions and deletions at critical points.

---

module:	Zap
by:	TMT
change:	Some changes to the definition of what <em>Zap</em>takes to be a 'word' (in the context of double clicking in 'Text' mode).

---

module:	Zap
by:	TMT
change:	'<em>As above</em>' tab mode (previously '!Edit tab' mode) now searches backwards through the file to find a line long enough to provide it with a guide if the previous line is inadequate for this purpose.  If no such line is found the default tab setting of 8 columns is used.

---

module:	Zap
by:	TMT
change:	An old bug in <em>ZapRedraw</em> cured.  This only affected VDU redraw mode. It meant that areas were often redrawn using an incorrect background colour in the anti-aliasing - it was most noticeable on partly selected lines and could usually be reproduced simply by dragging a selection.  The area under the cursor is now also redrawn correctly.

---

module:	Zap
by:	TMT
change:	Configuration of the <em>Disassembler</em> in <em>Code</em> mode is now better integrated into <em>Zap.</em> Use of the <code>CODE_DISASMTOGGLE</code> command should soon be discontinued as the command will be dropped from <em>Zap.</em>The <em>Disassembler</em> options may now be set up on a per-window basis and preferred options may be saved in the !Config file. Any existing <em>Code</em> mode options will be scrambled - sorry. Changing the <em>Disassembler</em> options from within <em>Zap</em>no longer affects the behaviour of the <em>Disassembler</em> with other <em>RISC-OS</em> applications, as <em>Zap</em>now preserves its flags.

---

module:	Zap
by:	TMT
change:	<code>WORD_EDIT</code> command added.  This acts like the <code>ASSEMBLE</code> command, only it always disassembles the word at the cursor into a <code>DCD</code> instruction.  If the file has a binary display option turned on then it uses a binary <code>DCD</code>, otherwise a Hex one is used. It is used in Word mode when <code>RETURN</code> is executed, and in Code mode if <code>RETURNNOINDENT</code> is.

---

module:	Zap
by:	TMT
change:	<code>BYTE_EDIT</code> command added.  This acts like the <code>WORD_EDIT</code> command It is used in Byte mode when <code>RETURN</code> is executed.

---

module:	Zap
by:	TMT
change:	A change has been made to the default routines which select words of text when these are double-clicked on. Such selections now terminate at brackets, quotes and various other symbols.

---

module:	Zap
by:	TMT
change:	<em>Zap</em> now <em>WimpTask</em>s a number of items on the <em>ZapExtensions</em> path when it feels it needs the resources they provide.  <em>BootDisasm, BootExtAsm, BootHide, BootIClear, BootLineEd</em> and <em>BootRedraw</em> are supplied. If your main use for any of these is from within <em>Zap</em>then it may be preferable to load them with this interface, to avoid them being loaded unnecessarily.

---

module:	Zap
by:	TMT
change:	<code>INSERTTIME</code> and <code>INSERTDATE</code> can now take strings as parameters. These specify the format used in the same way as they are specified in the default settings.

---

module:	Zap
by:	TMT
change:	Adjust-click on throwback windows now pays attention to the file's read-only status.

---

module:	Zap
by:	TMT
change:	Trying to execute 'To EOF' the the 'Replace?' dialogue on a read-only file no longer generates a WIMP error box with a message full of top-bit-set characters.

---

module:	Zap
by:	TMT
change:	Long-standing bug in Zap's selection routines fixed.  The problem involved starting a drag, pressing a button and then continuing the drag.

---

module:	Zap
by:	TMT
change:	Cured a bug involving auto-clear selections not working with multiple views of a single file.  The code that stopped this from working looked like it was intended to only clear the selection if it was in the document being edited, but it wasn't working properly, so it's been commented out.

---

module:	Zap
by:	TMT
change:	<code>UNDO</code>ing an operation performed using <em>Zap_ReplaceArea</em> now higlights the result (if this was selected when the operation was performed).

---

module:	Zap
by:	TMT
change:	The <code>INDENT</code> command can now indent by a supplied string.

---

module:	Zap
by:	TMT
change:	'<em>Binary OP codes</em>' option added to <em>Code</em> mode.

---

module:	Zap
by:	TMT
change:	Fixed an old bug which caused <code>DELTOEND</code> and <code>DELLINE</code> at the end of files to add regions to the yank buffer repeatedly.

---

module:	Zap
by:	TMT
change:	Function keys are now active on a file when some dialogue boxes associated with the file have the input focus.  This can take some getting used to, but is very useful.

---

module:	Zap
by:	TMT
change:	The <em>LineEditor</em> module now helps to provide a history to the search icons.  <em>Shift-Tab</em> takes over the role of the cursor keys in providing a way of moving the caret in the <em>replace</em> dialogue box. Ctrl-K clears the history of the current icon.

---

module:	Zap
by:	TMT
change:	Option to set the global disassembler options in <em>Code</em> mode menu provided.

---

module:	Zap
by:	TMT
change:	'Ghost' images of the cursor are now no longer left lying around if performing a concatenated sequence of insertion/deletions.

---

module:	Zap
by:	TMT
change:	'Last' button in the 'Replace?' dialogue box, 'Undo' and 'Redo' buttons added.

---

module:	Zap
by:	TMT
change:	Added 'Silent operation' (<code>MISCOPS 14</code>) option which causes <em>Zap</em>never to beep. Third-party extensions may still make noise, but it is recommeneded that they use Zap's <code>BEEP</code> command to do this (or read this flag before making their noise).

---

module:	Zap
by:	TMT
change:	Added <code>DELTOSOF</code> and <code>DELTOEOF</code> commands.  These delete to the start of the file and to the end of the file respectively, maintaining the current selection.

---

module:	Zap
by:	TMT
change:	Goto box revamped, so that the displayed co-ordinates of the cursor are continuously updated while it is open.

---

module:	Zap
by:	TMT
change:	<code>FINDFUNCTION</code> command added.  This also currently appears in <em>ZapBASIC</em>, a location from which it will shortly be deleted.

---

module:	Zap
by:	TMT
change:	A line based selection model is now available as an <em>option</em> in all text-like modes. The selection model is closely related to the one used by <em>ZapBASIC</em>.

---

module:	Zap
by:	TMT
change:	<code>SENDSEL</code> command added.  This sends the selected text into the keyboard buffer, a character at a time.  It may be aborted by pressing <em>ESCAPE</em>.

---

module:	Zap
by:	TMT
change:	The fonts used in the font sub-styles should now be placed in a directory with the name of the main font.  The fonts should be files within this directory, called 'B', 'I' and 'U' for the <em>Bold</em>, <em>Italic</em> and <em>Underlined</em> sub-styles, and '0' for the main font. Fonts which have no substyles should <em>not</em> be directories with a single '0' file, but simple font files as normal. A '0' file (which should usually be a link) may be placed inside the main directories to provide a short-cut to a commonly used font of that size/type.<BR>Note: These changes may cause incompatabilities with other <em>ZapRedraw</em> clients which expect the existing font structure (which has now also changed in some other respects).

---

module:	Zap
by:	TMT
change:	<em>Zap</em> provides an interface to allow <em>ZapSpell</em> to spell-as-you-type.

---

module:	Zap
by:	TMT
change:	Better integration with <em>ZapSpell</em>. Double/triple clicking on a throwback entry generated by <em>ZapSpell</em> now looks up the relevant word in the dictionary.

---

module:	Zap
by:	TMT
change:	Added the <em>'-noicon'</em> command line switch and the <code>INSTALLICON</code> command. This latter installs an icon bar icon if one is not already present.

---

module:	Zap
by:	TMT
change:	Use of directories starting with '~' for backup files now has a minimum time (specified in seconds) which may be used to control when backups are made.  If the file in the first backup directory is newer than the specified time, then no backups are made.  This stops the backup directory from being flodded with recent files when rapid multiple saves are made.

---

module:	Zap
by:	TMT
change:	A number of options which were global (namely '<em>Wordwrap</em>', '<em>Linewrap</em>', and the '<em>Insert tabs as spaces</em>' option are now stored on a per mode/per window basis.

---

module:	Zap
by:	TMT
change:	<em>Zap</em> now no-longer trusts throwback tasks to feed it filenames in the correct case (as some of them failed to do this).  It now double-checks the case of the letters in the leaf with the filing system if it is asked to load the file.

---

module:	Zap
by:	TMT
change:	'<em>Strong soft wrap</em>' option added.

---

#
# Start changes from beta one -> beta two
#

module:	 Zap
change:	 Sixteen font sub-styles are now available.
by:	 Zap developers
release: beta-one

---

module:	 Zap
change:	 Dynamic sub-style loading implemented.
by:	 Zap developers
release: beta-one

---

module:	 Zap
change:	 Byte &amp; Word modes: clicking on a character in the character dump now positions the cursor over the appropriate byte or word.
by:	 Zap developers
release: beta-one

---

module:	 Zap
change:	 Better support for 'big' discs in the 'DZap' dialogue. 'Big' disks (&gt;=512MB) use a sector address instead of a disk address. The disk size will be given as a 16-digit number, and the file title will contain the disk address (again, 16 digits). Small disks (&lt;512MB) are unaffected by these changes.
by:	 Zap developers
release: beta-one

---

module:	 Zap
change:	 Shift dragging files into Zap now causes Zap to gain the input focus.
by:	 Zap developers
release: beta-one

---

module:	 Zap
change:	 ZapObey didn't work as the !Zap.Modules.!Setup file was missing.
by:	 Zap developers
release: beta-one

---

module:	 Zap
change:	 The 'StrongZap' mode didn't work properly.
by:	 Zap developers
release: beta-one

---

module:	 Zap
change:	 Redraw of the area after the end of the file in VDU redraw mode fixed.
by:	 Zap developers
release: beta-one

---

module:	 Zap
change:	 New versions of several extension modes (see their own !Help files).
by:	 Zap developers
release: beta-one

---

module:	 Zap
change:	 A large number of minor bug fixes, tweaks, and incremental improvements.
by:	 Zap developers
release: beta-one

---

#
# beta two -> beta three
#

module:	 Zap
change:	 External Edits didn't work.
by:	 Zap developers
release: beta-two

---

module:	 Zap
change:	 Dragging files into existing windows positioned the text incorrectly.
by:	 Zap developers
release: beta-two

---

module:	 Zap
change:	 Fixed problem with displaying/selecting fonts three deep in the menus.
by:	 Zap developers
release: beta-two

---

module:	 Zap
change:	 Bug stopping close icon from working on modified 'MZap'ped files fixed.
by:	 Zap developers
release: beta-two

---

module:	 Zap
change:	 Goto box now clears with the auto-clear search box flag.
by:	 Zap developers
release: beta-two

---

module:	 Zap
change:	 Shift-dragging can now be aborted when the drag started when Zap didn't start out with the input focus.
by:	 Zap developers
release: beta-two

---

module:	 Zap
change:	 The search box didn't work well when used with 'TextCopy'.
by:	 Zap developers
release: beta-two

---

module:	 Zap
change:	 Changing modes could lead to poorly redrawn windows.
by:	 Zap developers
release: beta-two

---

module:	 Zap
change:	 ZapSpell windows come to the front when they are in use.
by:	 Zap developers
release: beta-two

---

module:	 Zap
change:	 A crude mechanism for loading user dictionaries on start up added.
by:	 Zap developers
release: beta-two

---

module:	 Zap
change:	 Minor bug in HoTMeaL mode's unix path translation fixed.
by:	 Zap developers
release: beta-two

---

#
# beta three -> beta four
#

module:	 Zap
change:	 <em>ZapSpell</em> tried to autoload a missing dictionary when it started.
by:	 Zap developers
release: beta-three

---

module:	 Zap
change:	 <em>ZapEmail</em> needed recompiling for word wrap and <em>'FORMATTEXT'</em> to work.
by:	 Zap developers
release: beta-three

---

module:	 Zap
change:	 <em>Save/Discard/Cancel</em> window could break if <em>Save to CSD</em> window was used.
by:	 Zap developers
release: beta-three

---

module:	 Zap
change:	 <em>ZapMJE</em> would only operate very slowly sometimes.
by:	 Zap developers
release: beta-three

---

module:	 Zap
change:	 Pretty display of font sub-styles in menus wasn't firing.
by:	 Zap developers
release: beta-three

---

module:	 Zap
change:	 Inverse video sub style implemented.
by:	 Zap developers
release: beta-three

---

module:	 Zap
change:	 Darren's conditional commands included.
by:	 Zap developers
release: beta-three

---

#
# beta four -> beta five
#

module:	 Zap
change:	 <code>DS_EVAL</code> and a number of other commands which use a minibufer prompt didn't work if the module they were in wasn't loaded.
by:	 Zap developers
release: beta-four

---

module:	 Zap
change:	 Due to a problem with Zap, <code>EMAIL_SPLITFORINSERT</code> and other similar commands didn't work at all.
by:	 Zap developers
release: beta-four

---

module:	 Zap
change:	 Errors were not being reported properly when saving files.
by:	 Zap developers
release: beta-four

---

module:	 Zap
change:	 <em>NewMail</em> mode was completely broken.
by:	 Zap developers
release: beta-four

---

module:	 Zap
change:	 <em>ZapBASIC</em> <code>FINDFILE</code> in an empty buffer caused aborts.
by:	 Zap developers
release: beta-four

---

module:	 Zap
change:	 There was a <em>ZapRedraw</em> bug which sometimes caused all text to invert.
by:	 Zap developers
release: beta-four

---

module:	 Zap
change:	 There have been a number of changes to <em>ZapMJE</em>. These improve it's speed slightly, add very primitive support for <code>FINDFUNCTION</code>, make its word-selection behaviour appear more object oriented, and make it's indenting work more consistently.
by:	 Zap developers
release: beta-four

---

#
# beta five -> beta six
#

module:	 Zap
change:	 Errors were <em>still</em> not being reported properly when saving files.
by:	 Zap developers
release: beta-five

---

module:	 Zap
change:	 Selecting regions in learned sequences didn't always work properly.
by:	 Zap developers
release: beta-five

---

module:	 Zap
change:	 Window stack order could be disturbed by changing mode.
by:	 Zap developers
release: beta-five

---

module:	 Zap
change:	 Code to add spaces in <code>COPYSEL</code> and <code>MOVESEL</code> was disabled by mistake.
by:	 Zap developers
release: beta-five

---

module:	 Zap
change:	 <em>IfThere</em> command ungracefully gave an error if it was asked to check for files on non-existent paths.
by:	 Zap developers
release: beta-five

---

module:	 Zap
change:	 Save/Discard/Cancel window could <em>still</em> get broken sometimes.
by:	 Zap developers
release: beta-five

---

module:	 Zap
change:	 Darren's <em>'ClickSend'</em> protocol put in place. This describes how Zap responds to alt-double-clicks - currently URLs are broadcast and a <em>StrongHelp</em> lookup is performed.
by:	 Zap developers
release: beta-five

---

module:	 Zap
change:	 Some minor improvements to <em>Taskwindow</em> mode.
by:	 Zap developers
release: beta-five

---

#
# beta six -> beta seven
#

module:	 Zap
change:	 <em>Darren</em>'s '<em>Block editing</em>' code activated. This enables actions taken on individual lined to be duplicated on all the lines in the selected region with no additional effort on the part of the user.
by:	 Zap developers
release: beta-six

---

module:	 Zap
change:	 <em>Justin</em>'s AIF header detection, and recognition of string pointers and indirected string pointers in <em>Code</em> mode included.
by:	 Zap developers
release: beta-six

---

module:	 Zap
change:	 Bitmap fonts load faster, and the delay when checking for them when they are already used in another document has been much reduced.
by:	 Zap developers
release: beta-six

---

module:	 Zap
change:	 The first of the icon bar file handling improvements has been made.
by:	 Zap developers
release: beta-six

---

module:	 Zap
change:	 TaskWindow clicks weren't working properly.
by:	 Zap developers
release: beta-six

---

module:	 Zap
change:	 Opening various icon bar options submenus no longer cause exceptions.
by:	 Zap developers
release: beta-six

---

#
# beta seven -> beta eight
#

module:	 Zap
change:	 <em>Darren</em>'s <code>REPEAT...UNTIL</code> and <code>WHILE...ENDWHILE</code> implemented.
by:	 Zap developers
release: beta-seven

---

module:	 Zap
change:	 Some small cosmetic improvements to <em>Code</em> mode.
by:	 Zap developers
release: beta-seven

---

module:	 Zap
change:	 Search as you type would often fail to draw the cursor.
by:	 Zap developers
release: beta-seven

---

module:	 Zap
change:	 Windows onto new views no longer brought to the top when text inserted.
by:	 Zap developers
release: beta-seven

---

module:	 Zap
change:	 <em>Darren</em>'s '<em>Block editing</em>' code activated. This enables actions taken on individual lined to be duplicated on all the lines in the selected region with no additional effort on the part of the user.
by:	 Zap developers
release: beta-seven

---

module:	 Zap
change:	 <em>Justin</em>'s AIF header detection, and recognition of string pointers and indirected string pointers in <em>Code</em> mode included.
by:	 Zap developers
release: beta-seven

---

module:	 Zap
change:	 Bitmap fonts load faster, and the delay when checking for them when they are already used in another document has been much reduced.
by:	 Zap developers
release: beta-seven

---

module:	 Zap
change:	 The first of the icon bar file handling improvements has been made.
by:	 Zap developers
release: beta-seven

---

module:	 Zap
change:	 TaskWindow clicks weren't working properly.
by:	 Zap developers
release: beta-seven

---

module:	 Zap
change:	 Opening various icon bar options submenus no longer cause exceptions.
by:	 Zap developers
release: beta-seven

---

#
# beta eight -> beta nine
#

module:	 Zap
change:	 <em>James</em> has provided a new <em>ZapText</em>. This contains lots of new work including much improved support for <em>StrongHelp</em>, and commands to allow <em>Zap</em> to interface better with othe text manipulation programs. See <em>!ZapText.HelpData</em> for details of the new commands.
by:	 Zap developers
release: beta-eight

---

module:	 Zap
change:	 <em>Darren</em>'s support for dynamic and static command arguments implemented. This allows things like: <code>INSERT $(Sys$Time)</code> to be used.
by:	 Zap developers
release: beta-eight

---

module:	 Zap
change:	 <em>Justin</em>'s extended his support for decoding a variety of objects in Code mode. This now includes names of C library function calls.
by:	 Zap developers
release: beta-eight

---

module:	 Zap
change:	 Bug preventing the outline font being changed fixed.
by:	 Zap developers
release: beta-eight

---

module:	 Zap
change:	 Problem with the '<em>IfThere</em>' utility was not fixed properly in beta 5.
by:	 Zap developers
release: beta-eight

---

#
# beta nine -> beta ten
#

module:	 Zap
change:	 <code>CASE...WHEN...DEFAULT...ENDCASE</code> implemented.
by:	 Zap developers
release: beta-nine

---

module:	 Zap
change:	 <code>CWHEN</code> implemented; functionally like 'case' in C/C++/Java.
by:	 Zap developers
release: beta-nine

---

module:	 Zap
change:	 <code>BREAK</code> and <code>CONTINUE</code> implemented for looping constructs.
by:	 Zap developers
release: beta-nine

---

module:	 Zap
change:	 String expression evaluation now available (<code>Zap_EvaluateExpression</code>).
by:	 Zap developers
release: beta-nine

---

module:	 Zap
change:	 New versions of <em>ZapEmail, ZapDS, ZapText, ZapNewMail</em> and <em>ZapSpell</em>.
by:	 Zap developers
release: beta-nine

---

module:	 Zap
change:	 Bug stopping minibuffer commands in learnt sequences operating.
by:	 Zap developers
release: beta-nine

---

module:	 Zap
change:	 Interactive help on menu entries sorted out.
by:	 Zap developers
release: beta-nine

---

module:	 Zap
change:	 '~' backup delay wasn't working correctly.
by:	 Zap developers
release: beta-nine

---

#
# beta ten -> beta eleven
#

module:	 Zap
change:	 The &quot;File modified&quot; flag now works in a more intelligent manner.  
by:	 Zap developers
release: beta-ten

---

module:	 Zap
change:	 <em>Zap</em> now really saves files which it believes are unmodified when it is asked to.  
by:	 Zap developers
release: beta-ten

---

module:	 Zap
change:	 Option to make the horizontal scroll bar disappear when not needed.    
by:	 Zap developers
release: beta-ten

---

module:	 Zap
change:	 Extensive changes to Zap's type checking which is now stronger.    
by:	 Zap developers
release: beta-ten

---

module:	 Zap
change:	 The <code>HELP</code> commands now tell you if no help text has been found.   
by:	 Zap developers
release: beta-ten

---

module:	 Zap
change:	 Parentheses may be used around numeric arguments in commands.     
by:	 Zap developers
release: beta-ten

---

#
# beta eleven -> beta twelve
#

module:	 Zap
change:	 Named keymaps implemented.  These are tickable on the (new) menu which lists them.  Their names are defined in a new section in the '<em>Keys</em>' file (included).        
by:	 Zap developers
release: beta-eleven

---

module:	 Zap
change:	 Adjust-click fixed for the case where the input focus is in a different <em>Zap</em> editing window.      
by:	 Zap developers
release: beta-eleven

---

module:	 Zap
change:	 New Zap call, <code>Zap_ClaimMessage</code>. Necessary for protocols where a <em>SWI</em> may be replied to with a <em>WIMP message</em>; Acorn's <em>URI dispatch protocol</em> is one such.       
by:	 Zap developers
release: beta-eleven

---

module:	 Zap
change:	 New versions of large numbers of extension modes.          
by:	 Zap developers
release: beta-eleven

---

module:	 Zap
change:	 New 'Debugger', new 'Taskwindow' loader, new 'Eval' filter provided, etc.      
by:	 Zap developers
release: beta-eleven

---

module:	 Zap
change:	 Simple 'Total' command adds up any integers in the selected region.       
by:	 Zap developers
release: beta-eleven

---

module:	 Zap
change:	 'Persistent save box' bug rectified.       
by:	 Zap developers
release: beta-eleven

---

module:	 Zap
change:	 <em>Global clipboard</em> support now works better with some clients.       
by:	 Zap developers
release: beta-eleven

---

module:	 Zap
change:	 The 'file modified' hash function should now work more rapidly.       
by:	 Zap developers
release: beta-eleven

---

module:	 Zap
change:	 *<code>ZapCommand</code> rewritten to use pollwords.  It should now work correctly.      
by:	 Zap developers
release: beta-eleven

---

module:	 Zap
change:	 Cursor now flashes properly during intensive taskwindow output.                                    
by:	 Zap developers
release: beta-eleven

---

module:	 Zap
change:	 Rewrite of code which identifies FP/co-processor opcodes in <em>Code</em> mode.     
by:	 Zap developers
release: beta-eleven

---

#
# beta twelve -> stable
#

module:	 Zap
change:	 The <em>!Help</em> file completely revamped by James.  Many changes were also made to the FAQ and other technical documentation.        
by:	 Zap developers
release: beta-twelve

---

module:	 Zap
change:	 Support for coloured printing added by Darren.         
by:	 Zap developers
release: beta-twelve

---

module:	 Zap
change:	 Keyboard Extend, which curbs problems associated with modifier keys being 'lost', added by Darren.         
by:	 Zap developers
release: beta-twelve

---

module:	 Zap
change:	 Static expression Types implemented.        
by:	 Zap developers
release: beta-twelve

---

module:	 Zap
change:	 Line Editor 2.73 included, thanks to Olly Betts.       
by:	 Zap developers
release: beta-twelve

---

module:	 Zap
change:	 Debugger Plus updated.      
by:	 Zap developers
release: beta-twelve

---

module:	 Zap
change:	 Lots of minor changes to a number of extension modules.      
by:	 Zap developers
release: beta-twelve

---

module:	 Zap
change:	 Most betas had suffered from a bug in the undo buffer - this should now have finally been fixed.       
by:	 Zap developers
release: beta-twelve

---

module:	 Zap
change:	 Behaviour of the caret in the 'save box' fixed.      
by:	 Zap developers
release: beta-twelve

---

#
# stable -> patch 1
#

module:	 Zap
by:	 DS
change:	 two scrolling bugs fixed
release: stable

---

#
# patch 1 -> patch 2
#

module:	 Zap
by:	 DS
change:	 block editing when not in the selection fixed
release: patch-1

---

module:	 Zap
by:	 DS
change:	 search and replace bug fixed
release: patch-1

---

#
# patch 2 -> patch 3
#

module:	 Zap
by:	 SJA
change:	 checksum calculation on loading file moved to look nicer
release: patch-2

---

module:	 Zap
by:	 DS     
change:	 shift-drag of files fixed wrt name/file insertion
release: patch-2

---

#
# patch 3 -> patch 4
#

module:	 Zap
by:	 DS
change:	 checksumming long op fixed
release: patch-3

---

module:	 Zap
by:	 DS
change:	 default config no longer initialised from
release: patch-3

---

module:	 Zap
by:	 SJA
change:	 Patch levels now noted in code
release: patch-3

---

#
# patch 4 -> patch 5
#

module:	 Zap
by:	 SJA
change:	 Throwback adjust-and-hold bug fixed
release: patch-4

---

#
# patch 5 -> patch 6
#

module:	 Zap
by:	 SJA
change:	 Iconbar menu alignment, and KeyboardExtend back in the main archive
release: patch-5

---

#
# patch 6 -> patch 7
#

module:	 Zap
by:	 SJA
change:	 Updated manual, buffer overrun fix for WC and related commands
release: patch-6

---

module:	 Zap
by:	 Dan Ellis
change:	 Cursor movement bugfix
release: patch-6

---

module:	 Zap
by:	 SJA
change:	 (Source change only) Start of alterations to allow Unix-hosted builds
release: patch-6

---

#
# patch 7 -> patch 8
#

module:	 Zap
by:	 DS
change:	 DDE current directory in various commands
release: patch-7

---

module:	 Zap
by:	 DS
change:	 universal argument sets hourglass
release: patch-7

---

module:	 Zap
by:	 DS
change:	 Selection autoclr works with block edit, INDENT/OUTDENT
release: patch-7

---

module:	 Zap
by:	 DS
change:	 UNIVERSALARG can take numbers from keypad
release: patch-7

---

module:	 Zap
by:	 DS
change:	 Fixes to FINDFILE and OPENPARENT wrt taskwindows
release: patch-7

---

module:	 Zap
by:	 DS
change:	 now tries hard to find writeable area for on-the-fly files
release: patch-7

---

#
# patch 8 -> patch 9
#

module:	 Zap
by:	 DS
change:	 Obey$Dir preserved when loading an extension mode
release: patch-8

---

module:	 Zap
by:	 DS
change:	 Distribution now fixed
release: patch-8
