; Contains MessageTrans interface code,
; $Id: Messages,fff,v 2.4 2002-11-16 22:22:45 christian Exp $

	GET	h.ZapHeader
	GET	h.Heap
	GET	h.Strings

	EXPORT	messages_open
	EXPORT	messages_close
	EXPORT	lookup_token
	EXPORT	lookup_token_gs
	EXPORT	lookup_error
	EXPORT	lookup_token_R0
	EXPORT	expand_menu

msgsblk	&	0
block	%	16
file	=	"<Zap$Messages>",0
	ALIGN

;X Messages file opened, or VS
	FNAME	messages_open
messages_open
	FNJSR	"R1-R3"
	ADR	R1,file
	SWI	XMessageTrans_FileInfo
	FNRTS	VS
	TST 	R0,#1
	MOVNE	R2,#0
	BNE	inmem
	MOV	R0,#6
	MOV	R3,R2
	SWI	XOS_Module
	FNRTS	VS
	STR	R2,msgsblk
inmem	ADR	R0,block
	ADR	R1,file
	SWI	XMessageTrans_OpenFile
	FNRTS

;X Messages file closed (use on exit)
	FNAME	messages_close
messages_close
	LDR	R2,msgsblk
	TEQ	R2,#0
	MOVEQ	PC,R14
	FNJSR
	ADR	R0,block
	SWI	XMessageTrans_CloseFile
	MOV	R0,#7
	SWI	XOS_Module
	MOV	R0,#0
	STR	R0,msgsblk
	FNRTS

	MACRO
	MT_LU	$id,$swi,$r
	FNAME 	lookup_$id
lookup_$id
	FNJSR	"R1,R4-R7"
	LDRB	R0,[R1]			; skip 27 if 27,token form
	TEQ	R0,#27
	ADDEQ	R1,R1,#1
	ADR	$r,block
	CMN	R2,#1
	FNLDR	R2,wimp_kbdbuf,EQ
	MOVEQ	R3,#4*kbdbuf_size
	SWI	$swi
	FNRTS
	MEND

	MACRO
	MT_LU_W	$id,$swi
	FNAME	lookup_$id._R0
lookup_$id._R0
	FNJSR	"R1-R7"
	LDRB	R1,[R0]			; skip 27 if 27,token form
	TEQ	R1,#27
	ADDEQ	R0,R0,#1
	MOV	R1,R0
	MOV	R4,R0
	ADR	R0,block
	MOV	R2,#0
	SWI	$swi
	MOVVC	R0,R2
	ADDVSS	R0,R4,#0		; and clv
	FNRTS
	MEND

	LOCAL

;E,X as for the SWIs
;E   If R2=-1 then use default buffer (wimp_kbdbuf)

	MT_LU	token,   XMessageTrans_Lookup,     R0
	MT_LU	token_gs,XMessageTrans_GSLookup,   R0

	MT_LU_W	token,   XMessageTrans_Lookup


	FNAME	lookup_error
lookup_error
	FNJSR	"R1-R7"
	ADR	R1,block
	MOV	R2,#0
	SWI	XMessageTrans_ErrorLookup
	FNRTS

	LOCAL

;E R0->menu R1->submenu handler (0 for this) R2->module base
;X R0->expanded menu
;  Unrecognised tokens are treated as literal strings
	FNAME	expand_menu
expand_menu
	FNJSR	"R1-R11"
	MOV	R11,R0
	MOV	R0,#4096
	BL	heap_claim
	FNRTS	VS
	MOV	R7,#0		; longest string
	MOV	R8,R0		; menu buffer
	MOV	R9,R11		;  used (but currently pointing to menu)
	MOV	R10,#4096	;  length
	LDRB	R0,[R11]
	TEQ	R0,#0
	ADDEQ	R11,R11,#1
	MOVEQ	R2,R11
	BEQ	useliteraltitle$l
	MOV	R1,R11
	MOV	R2,#0
	BL	lookup_token	; get menu title
	MOVVS	R2,R11
useliteraltitle$l
	MOV	R0,#12
	MOV	R1,R8
	BL	strbuf
	SUB	R7,R1,R8	; title length
	MOV	R7,R7,LSL #4
	BL	skip$l		; returns R0=0
	STRB	R0,[R8,#11]
	LDMIA	R11!,{R0,R1}	; width, update menu code
	STR	R0,[R8,#12]
	STR	R1,[R8,#16]
	TST	R0,#1<<31
	BIC	R0,R0,#1<<31
	LDRNE	R1,[R11],#4
	STRNE	R1,[R8,#20]	; help pointer
	MOVEQ	R9,#20
	MOVNE	R9,#24		; R9=used space in buffer
	SUB	R0,R0,#12
	CMP	R7,R0
	MOVLO	R7,R0
entry$l	LDR	R0,[R11]	; menu entries...
	CMN	R0,#1
	BEQ	finish$l
	LDRB	R0,[R11,#16]!
	TEQ	R0,#0
	ADDEQ	R2,R11,#1
	BEQ	useliteralitem$l
	MOV	R1,R11
	MOV	R2,#0
	BL	lookup_token	; get entry token
	MOVVS	R2,R11
useliteralitem$l
	MOV	R0,R2
	BL	str_len
	LDR	R3,[R11,#-16]
	TST	R3,#4		; writable?
	STRNEB	R3,[R8,#15]
	BNE	nolen$l
	CMP	R7,R0,LSL #4	; update menu width
	MOVLO	R7,R0,LSL #4
nolen$l	ADD	R3,R0,#20	; entry length
	BIC	R3,R3,#3
	ADD	R1,R9,R3
	CMP	R1,R10
	BLHS	realloc$l	; claim more space if necessary
	BVS	error$l
	LDMDB	R11,{R4-R6,R14}	; copy flags etc.
	ADD	R1,R8,R9
	STMIA	R1!,{R4-R6,R14}
	TST	R4,#8		; submenu warning bit
	BNE	ignoresub$l
	MOV	R4,R2
	TEQ	R5,#0		; submenu?
	LDREQ	R0,[R13,#4]	; no
	BLNE	submenu$l	; yes - process it...
	FNRTS	VS
	LDR	R14,[R13,#4]	; no
	ADD	R1,R8,R9
	SUB	R0,R0,R14
	STR	R0,[R1,#4]	; store submenu pointer
	ADD	R1,R1,#16
	MOV	R2,R4
ignoresub$l
	BL	strcopy		; copy menu entry text
	ADD	R11,R11,#1	; safe; tokens must be >=1 chr long
	BL	skip$l
	ADD	R9,R9,R3
	B	entry$l
finish$l
	MOV	R0,R8		; minimise block size
	ADD	R1,R9,#4	; (allowing for end marker)
	BL	heap_ensure
	MVN	R0,#0
	STR	R0,[R8,R9]	; store end marker
	LDR	R0,[R8,#15]
	TST	R0,#4
	MOVEQ	R0,#0
	MOVNE	R0,R0,LSR #8
	ADD	R7,R7,#12
	CMP	R7,R0
	MOVLO	R7,R0
	LDR	R0,[R8,#12]
	TST	R0,#1<<31
	ORRNE	R7,R7,#1<<31
	STR	R7,[R8,#12]	; and menu width (preserving top bit)
	MOV	R0,R8
	FNRTS			; done!
error$l	PUSH	"R0"
	MOV	R0,R8
	BL	heap_free	; free block
	PULL	"R0"	; error return
	FNRTV
realloc$l
	FNJSR	"R1-R2"		; enlarge the block
	MOV	R0,R8
	ADD	R10,R10,#4096
	MOV	R1,R10
	BL	heap_ensure
	MOVVC	R8,R0
	FNRTS
submenu$l
	LDMIA	R13,{R1,R2}	; submenu to deal with...
	TEQ	R1,#0
	ADD	R0,R5,R2
	MOVNE	PC,R1
	B	expand_menu
skip$l	LDRB	R0,[R11],#1	; skip string at R11
	TEQ	R0,#0
	BNE	skip$l
	ADD	R11,R11,#3
	BIC	R11,R11,#3
	MOV	PC,R14

	END
