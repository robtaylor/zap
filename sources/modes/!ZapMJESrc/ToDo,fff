Things we need to do with ZapMJE
================================

 * trailing single-line comments /sometimes/ cause the following line to be indented incorrectly (one further than correct?)
   eg:
   
   if (inquotes==0) {// anything interesting on this line?
       indentation_is_to_here();
       
   case ':': // label
       indentation_is_to_here();

   The comment is causing an extra level of indentation. Dunno why. (eg:
   
   case ':': // label
     case '{': // this definitely shouldn't be here!

   It's also been observed on lines without normal indentors:
   
   zap_basemode_e_return(type,wflags,wformat); // with appropriate indent
     if ((!blank) || (window->addr == -1)) { /* non-blank line / start address is -1 (?) */

 * The line after while(z())'s empty body is correctly indented outside a switch, but not inside.

 int y(void) {
   while(z())
     ;
   return 0;
 }
 
 void x(void) {
   switch(p()) {
   case 0:
     while(z())
       ;
       break;
   }
 }

 * Similar problems outside switches (see Darren's email). Appears to be going back too far sometimes,
   sometimes not far enough, in finding a useful line to match indents to.
   
 * if(...) etc. broken over a line causes the following indent to be in the wrong place:
 
   if (something ||
     something_else)
     {
       indented_to_here();
     }
     
     proceeds_from_here();

 * if {
     ...
   } else
   not_indented_correctly();

 * rewrite or at least tidy up word move code

 + done
    + indentation level after "{/*comment*/" et al?
    + unindenting by one level on finding 'case' or 'default'
    + automatic reindentation on ':' after 'case' or 'default'
    + indentation inserts an LF if applied to first line in file
    + repeated case labels unindent too far

 ! done more recently
    ! braces in comments are treated as level changers -- getbrackdepth() ischarincomment() check
    ! protected, etc. unindent after ':', and seem to get now work properly, ie they act more like case:
      than if()
    ! MJE_REINDENT no longer does anything in non-MJE modes
    ! alphanum() extended to include '_', which can also be part of identifiers
