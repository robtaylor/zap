/*	menus.c
	© James Aylett	*/

#include "menus.h"

void attribsmenu()
{
  int i;
  if(KeysFile[0x11c]!=NULL)
    i=(int)strtol(KeysFile[0x11c]+1,NULL,16);
  else
    i=0;

  menuheader_lookup(&(Menu.header),250,"AttribM");
  menuitem_lookup(&(Menu.items[0]),NOSUBMENU,ticked(i&1),MENUFLAGS,"AttribM0");
  menuitem_lookup(&(Menu.items[1]),NOSUBMENU,ticked(i&2),MENUFLAGS,"AttribM1");
  menuitem_lookup(&(Menu.items[2]),NOSUBMENU,ticked(i&16),MENUFLAGS,"AttribM2");
  menuitem_lookup(&(Menu.items[3]),NOSUBMENU,ticked(i&32),MENUFLAGS,"AttribM3");
  menuitem_lookup(&(Menu.items[4]),NOSUBMENU,(ticked(i&8)) | ((FilerPatch_Support)?(0):(WimpMenuItem_Last)),MENUFLAGS,"AttribM4");
  if (FilerPatch_Support)
  {
    menuitem_lookup(&(Menu.items[5]),NOSUBMENU,ticked((i&192)==64),MENUFLAGS,"AttribM5");
    menuitem_lookup(&(Menu.items[6]),NOSUBMENU,(ticked((i&192)==192))|(WimpMenuItem_Last),MENUFLAGS,"AttribM6");
  }
  Wimp_CreateMenu((menu_ptr)&Menu, result->mouse.pos.x-64, result->mouse.pos.y);

  MenuActive=ATTRIBSMENU;
}

void tabeditmenu()
{
  int i;
  i=zap_mode_flags.flags.tab_entry_mode;
  menuheader_lookup(&(Menu.header),250,"TabEditM");
  menuitem_lookup(&(Menu.items[0]),NOSUBMENU,ticked(i==0),MENUFLAGS,"TabEditM0");
  menuitem_lookup(&(Menu.items[1]),NOSUBMENU,ticked(i==1),MENUFLAGS,"TabEditM1");
  menuitem_lookup(&(Menu.items[2]),NOSUBMENU,(ticked(i==2)) | (WimpMenuItem_Last),MENUFLAGS,"TabEditM2");
  Wimp_CreateMenu((menu_ptr)&Menu, result->mouse.pos.x-64, result->mouse.pos.y);

  MenuActive=TABEDITMENU;
}

void tabdisplaymenu()
{
  int i;
  i=zap_mode_flags.flags.tab_display_format;
  menuheader_lookup(&(Menu.header),250,"TabDisplayM");
  menuitem_lookup(&(Menu.items[0]),NOSUBMENU,ticked(i==0),MENUFLAGS,"TabDisplayM0");
  menuitem_lookup(&(Menu.items[1]),NOSUBMENU,ticked(i==1),MENUFLAGS,"TabDisplayM1");
  menuitem_lookup(&(Menu.items[2]),NOSUBMENU,ticked(i==2),MENUFLAGS,"TabDisplayM2");
  menuitem_lookup(&(Menu.items[3]),NOSUBMENU,(ticked(i==3)) | (WimpMenuItem_Last),MENUFLAGS,"TabDisplayM3");
  Wimp_CreateMenu((menu_ptr)&Menu, result->mouse.pos.x-64, result->mouse.pos.y);

  MenuActive=TABDISPLAYMENU;
}

void linenosmenu()
{
  int i;
  if(zap_mode_flags.flags.show_line_numbers)
  {
    if(zap_mode_flags.flags.lines_are_lines)
    {
      if(zap_mode_flags.flags.lines_physical)
        i=1;
      else
        i=2;
    }
    else
      i=3;
  }
  else
    i=0;
  menuheader_lookup(&(Menu.header),250,"LineNosM");
  menuitem_lookup(&(Menu.items[0]),NOSUBMENU,ticked(i==0),MENUFLAGS,"LineNosM0");
  menuitem_lookup(&(Menu.items[1]),NOSUBMENU,ticked(i==1),MENUFLAGS,"LineNosM1");
  menuitem_lookup(&(Menu.items[2]),NOSUBMENU,ticked(i==2),MENUFLAGS,"LineNosM2");
  menuitem_lookup(&(Menu.items[3]),NOSUBMENU,(ticked(i==3)) | (WimpMenuItem_Last),MENUFLAGS,"LineNosM3");
  Wimp_CreateMenu((menu_ptr)&Menu, result->mouse.pos.x-64, result->mouse.pos.y);

  MenuActive=LINENOSMENU;
}

void modesmenu(int which)
{
  makemodesmenu();
  switch(which)
  {
    case 0:case 1:
      Menu_PopUp((menu_ptr)ModesMenu, windows[FileOpts].openblock.window, 16+which);
      break;
    case 2:
      Menu_PopUp((menu_ptr)ModesMenu, windows[ModeOpts].openblock.window, 31);
      break;
    case 3:
      Menu_PopUp((menu_ptr)ModesMenu, windows[ModeOpts2].openblock.window, 3);
      break;
    case 4:case 5:
      Menu_PopUp((menu_ptr)ModesMenu, windows[Misc].openblock.window, 46+which); // 50 and 51
      break;
  }
  MenuActive=MODESMENU+which;
}

void makemodesmenu()
{
  int i,j;
  struct modeentry *m;

  if (ModesMenu!=NULL)
    memfree(ModesMenu);
  ModesMenu = memalloc(sizeof(menu_block) + totalmodes*sizeof(menu_item));

  m = mode_head->next;
  menuheader_lookup(&(ModesMenu->header),200,"ModesM");
/*  BP("Done header");*/
  for (i=0, j=0; i<totalmodes && m!=mode_head; i++)
  {
    if (m->name!=NULL)
    {
/*      BP(m->name);*/
      menuitem(&(ModesMenu->items[j++]),NOSUBMENU,0,MENUFLAGS,m->name);
    }
    else
    {
/*      BP("No name");*/
    }
    m=m->next;
  }
  ModesMenu->items[j-1].menuflags.data.last=1;
}

void filetypemenu()
{
  menuheader_lookup(&(Menu.header),150,"FileM");
  menuitem(&(Menu.items[0]),NOSUBMENU,ticked(Filetype==0xfff),MENUFLAGS,"Text");
  menuitem(&(Menu.items[1]),NOSUBMENU,ticked(Filetype==0xffb),MENUFLAGS,"BASIC");
  menuitem(&(Menu.items[2]),NOSUBMENU,ticked(Filetype==0xfaf),MENUFLAGS,"HTML");
  menuitem(&(Menu.items[3]),NOSUBMENU,ticked(Filetype==0xffd),MENUFLAGS,"Data");
  menuitem_indirected(&(Menu.items[4]), NOSUBMENU, (WimpMenuItem_Writable) | (WimpMenuItem_Last), MENUFLAGS, FiletypeItem, (void *)FiletypeValid, 5);

  Wimp_CreateMenu((menu_ptr)&Menu, result->mouse.pos.x-64, result->mouse.pos.y);

  MenuActive=FILETYPEMENU;
}

void cursormenu(int menu)
{
  /* Following line relies on cursors being in continuous block in ZapGlobalOptions */
  char type=(&ZapGlobalOptions.cursor_normal)[menu];
  menuheader_lookup(&(Menu.header),250,"CursM");
  menuitem_lookup(&(Menu.items[0]),NOSUBMENU,ticked(type==0),MENUFLAGS,"CursM0");
  menuitem_lookup(&(Menu.items[1]),NOSUBMENU,ticked(type==1),MENUFLAGS,"CursM1");
  menuitem_lookup(&(Menu.items[2]),NOSUBMENU,ticked(type==2),MENUFLAGS,"CursM2");
  menuitem_lookup(&(Menu.items[3]),NOSUBMENU,ticked(type==3),MENUFLAGS,"CursM3");
  menuitem_lookup(&(Menu.items[4]),NOSUBMENU,(ticked(type==4)) | (WimpMenuItem_Last),MENUFLAGS,"CursM4");
  Wimp_CreateMenu((menu_ptr)&Menu, result->mouse.pos.x-64, result->mouse.pos.y);

  MenuActive=CURSORMENU+menu;
  KeyCode=menu; /* for re-opening and setting */
}

void fontstylemenu(int current)
{
  menuheader_lookup(&(Menu.header),250,"RedM");
  menuitem_lookup(&(Menu.items[0]),NOSUBMENU,ticked(current==2),MENUFLAGS,"RedM2");
  menuitem_lookup(&(Menu.items[1]),NOSUBMENU,ticked(current==0),MENUFLAGS,"RedM0");
  menuitem_lookup(&(Menu.items[2]),NOSUBMENU,ticked(current==5),MENUFLAGS,"RedM5");
  menuitem_lookup(&(Menu.items[3]),NOSUBMENU,ticked(current==1),MENUFLAGS,"RedM1");
  menuitem_lookup(&(Menu.items[4]),NOSUBMENU,ticked(current==4),MENUFLAGS,"RedM4");
  menuitem_lookup(&(Menu.items[5]),NOSUBMENU,(ticked(current==3)) | (WimpMenuItem_Last),MENUFLAGS,"RedM3");

  Wimp_CreateMenu((menu_ptr)&Menu, result->mouse.pos.x-64, result->mouse.pos.y);

  MenuActive=FONTSTYLEMENU;
}

void ibmenu()
{
  /* Hey hey! Let's have a menu!	*/

  menuheader_lookup(&(Menu.header), 150,"IconM");
  menuitem_lookup(&(Menu.items[0]),(int)InfoWind,0,MENUFLAGS,"IconM0");
  menuitem_lookup(&(Menu.items[1]),NOSUBMENU,WimpMenuItem_Last,MENUFLAGS,"IconM1");

  Menu_Show((menu_ptr)&Menu, result->mouse.pos.x, -1);
  /* y = 184 */

  MenuActive=IBMENU;
}

void set_templates()
{
  strcpy(templates,Menu.items[result->selection[0]].icondata.text);
  set_indtext(windows[Main].openblock.window,12,templates);
  Modified=TRUE;
}

void templatesmenu()
{
  int sets=0,doneany=0;
  filing_dirdata f_dirdata;
  filing_readdirtype f_readdirtype=readdirtype_DIRENTRY;
  filing_direntry *f_direntry;
  int offset=0,max;
//  char dir[]="ZapTemplates:";

  if (!OS_ReadVarVal("ZapTemplates$Path",output,256))
    makeerror(FALSE,"ETemplMenu");
  max = strlen(output);
//  BP(output);

  while (output[offset]!=0)
  {
    while (output[offset]!=',' && output[offset]!=0) offset++; // Skip path segment
    output[offset-1]=0; // Terminate path segment ON TRAILING : OR .
    offset++; // Skip separator
  }
  offset=0;

  menuheader_lookup(&(Menu.header), 350,"TemplatesM");
  /* Now get the various option sets ... */
  /* I've also hard-coded the maximum number of user sets */

  while (offset<max && sets<2+MAXOPTIONSETS)
  {
    char *dir = output+offset;
//    BP(dir);
    if (Filing_OpenDir(dir, &f_dirdata, 256, f_readdirtype)==NULL)
    {
      while((f_direntry=(filing_direntry *)Filing_ReadDir(&f_dirdata))!=NULL && sets<2+MAXOPTIONSETS)
      {
        if(f_direntry->objtype==filing_FILE && FILETYPE(f_direntry->loadaddr)==filetype_TEMPLATE)
        {
          doneany=1;
          menuitem(&(Menu.items[sets]),NOSUBMENU,ticked(!strcmp(f_direntry->name,templates)),MENUFLAGS,f_direntry->name);
          sets++;
        }
      }
      Filing_CloseDir(&f_dirdata);
    }

    while (output[offset]!=0) offset++; // Skip this path segment
    offset+=2; // And skip terminator and separator
  }

  if (doneany==0)
  {
    makeerror(FALSE,"EBadTemplates");
    return;
  }

  Menu.items[sets-1].menuflags.data.last=1;
  Wimp_CreateMenu((menu_ptr)&Menu, result->mouse.pos.x-64, result->mouse.pos.y);
  MenuActive=TEMPLATESMENU;
}

void cursor_change(int which)
{
  if (result->selection[0] < 0 || result->selection[0] > 4) return;
  (&ZapGlobalOptions.cursor_normal)[which]=(char) result->selection[0];
  switch (which)
  {
    case 0 : which=3; break;
    case 1 : which=6; break;
    case 2 : which=12; break;
    case 3 : which=9; break;
  }
  sprintf(output, "CursM%d", result->selection[0]);
  lookup_message(MessageBlock, output, output, 256);
  set_indtext(windows[DisplayOpts].openblock.window, which, output);
}

void fontstyle_change()
{
  int fish;
  switch(result->selection[0])
  {
    case 0 :
      ZapGlobalOptions.opt_flags.flags.redraw_mode_low=0;
      ZapGlobalOptions.opt_flags.flags.redraw_mode_medium=1;
      ZapGlobalOptions.opt_flags.flags.redraw_mode_high=0;
      break;
    case 1 :
      ZapGlobalOptions.opt_flags.flags.redraw_mode_low=0;
      ZapGlobalOptions.opt_flags.flags.redraw_mode_medium=0;
      ZapGlobalOptions.opt_flags.flags.redraw_mode_high=0;
      break;
    case 2 :
      ZapGlobalOptions.opt_flags.flags.redraw_mode_low=1;
      ZapGlobalOptions.opt_flags.flags.redraw_mode_medium=0;
      ZapGlobalOptions.opt_flags.flags.redraw_mode_high=1;
      break;
    case 3 :
      ZapGlobalOptions.opt_flags.flags.redraw_mode_low=1;
      ZapGlobalOptions.opt_flags.flags.redraw_mode_medium=0;
      ZapGlobalOptions.opt_flags.flags.redraw_mode_high=0;
      break;
    case 4 :
      ZapGlobalOptions.opt_flags.flags.redraw_mode_low=0;
      ZapGlobalOptions.opt_flags.flags.redraw_mode_medium=0;
      ZapGlobalOptions.opt_flags.flags.redraw_mode_high=1;
      break;
    case 5 :
      ZapGlobalOptions.opt_flags.flags.redraw_mode_low=1;
      ZapGlobalOptions.opt_flags.flags.redraw_mode_medium=1;
      ZapGlobalOptions.opt_flags.flags.redraw_mode_high=0;
      break;
  }

  fish=    ZapGlobalOptions.opt_flags.flags.redraw_mode_low    +
       2 * ZapGlobalOptions.opt_flags.flags.redraw_mode_medium +
       4 * ZapGlobalOptions.opt_flags.flags.redraw_mode_high;
  sprintf(output, "RedM%d", fish);
  lookup_message(MessageBlock, output, output, 256);
  set_indtext(windows[FontOpts].openblock.window, 42, output);
}

/* Commented until I reinstate options sets */
#if 0
void choose_optionset()
{
  char *temp;
  temp=Menu.items[result->selection[0]].icondata.text;
  lookup_message(MessageBlock, "OptSMn", output, 256);
  if(strcmp(temp,output))
  {
    /* Select this option set */
    strcpy(optionset, temp);
    set_indtext(windows[Main].openblock.window,7,optionset);
    open_optionset();
  }
  else
  {
    /* Create a new set and select it */
    sprintf(output, "CDir <Zap$Dir>.Options.%s", NewSetItem);
    if(OS_CLI(output)==NULL)
    {
      strcpy(optionset,NewSetItem);
      set_indtext(windows[Main].openblock.window,7,optionset);
      open_optionset();
    }
  }
}
#endif
/* End of choose_optionset() */

/*	Menus		*/

void menuheader(menu_ptr m, int width, char *title)
{
  strcpy(m->title,title);
  m->titlefore=7;
  m->titleback=2;
  m->workfore=7;
  m->workback=0;
  m->width=width;
  m->height=44;
  m->gap=0;
}

void menuheader_lookup(menu_ptr m, int width, char *tag)
{
  lookup_message(MessageBlock,tag,m->title,12);
  m->titlefore=7;
  m->titleback=2;
  m->workfore=7;
  m->workback=0;
  m->width=width;
  m->height=44;
  m->gap=0;
}

/*
// Only works for non-indirected, text-only, but this is the most common
*/

void menuitem(menu_item *m, int submenu, int flags, int textflags, char *text)
{
  m->menuflags.value=flags;
  m->submenu.value=submenu;
  m->iconflags.value=textflags;
  strcpy(m->icondata.text,text);
}

void menuitem_lookup(menu_item *m, int submenu, int flags, int textflags, char *tag)
{
  m->menuflags.value=flags;
  m->submenu.value=submenu;
  m->iconflags.value=textflags;
  lookup_message(MessageBlock,tag,m->icondata.text,12);
}

/*
// Indirected version
*/

void menuitem_indirected(menu_item *m, int submenu, int flags, int textflags, char *ptr, char *valid, int length)
{
  m->menuflags.value=flags;
  m->submenu.value=submenu;
  m->iconflags.value=textflags;
  m->iconflags.data.indirected=1;
  m->icondata.indirecttext.buffer=ptr;
  m->icondata.indirecttext.validstring=valid;
  m->icondata.indirecttext.bufflen=length;
}
