; Zap Text Command Extension
; $Id: module,fff,v 1.6 2002-11-24 02:46:39 christian Exp $
; Copyright (C) 1998-1999 Zap Developers
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
; Module header and init/final code etc.

; Includes
		GET	h.Version
		GET	h.ZapText
		GET	h.commands

; What we give to other people
		EXPORT	Module_Header
		EXPORT	Module_End
		EXPORT	Get_Workspace

		EXPORT	ARM32_VCRet

; Entry point and at start of module
		AREA	|!!!Module_Header_Comes_First|,CODE,READONLY
		ENTRY

; Module header
Module_Header
Start_Code		&	0
Init_Code		&	init_code
Final_Code
			[	WorkspaceSize <> 0
			&	final_code
			|
			&	0
			]
Service_Code		&	0
Title_String		&	title_string
Help_String		&	help_string
Command_Table		&	0
SWI_chunk_number	&	0
SWI_handler_code	&	0
SWI_decoding_table	&	0
SWI_decoding_code	&	0
Messages_file		&	0
Module_Flags		&	module_flags


; Title, version and copyright strings
; Include build number if set
title_string	=	"ZapText",0
help_string	=	"ZapText",9,9
		=	version," (00 Jan 0000)"
 [ BUILD > ""
	=	" ",BUILD
  [ (BUILD:RIGHT:1 < "0" :LOR: BUILD:RIGHT:1 > "9") :LAND: patch_level <> ""
	=	"-",patch_level
  ]
 |
  [ test_flag
	=	" [TEST"
   [ patch_level <> ""
	=	" ",patch_level
   ]
	=	"]"
  |
   [ patch_level <> ""
	=	" patch-",patch_level
   ]
  ]
 ]
 [ INTL>"" :LAND: TMFS>""
        =	" Zap 1.40"
 ]
	=	" © Zap developers",0
	ALIGN

module_flags	DCD	1			; 32 bit compatible


; Initialisation code.
; Claim workspace.
; Find Zap, and register our command table.
; Initialise workspace.
init_code
		FNJSR
		[	WorkspaceSize <> 0
		MOV	r0,#6
		MOV	r3,#WorkspaceSize
		SWI	XOS_Module
		FNRTS	VS
		MOV	ws,r2			; workspace is addressed as ws from here on
		STR	ws,[r12]
		STR	ws,workspace_addr
		]

		MOV	r0,#18
		ADR	r1,zap_title
		SWI	XOS_Module
		FNRTS	VS			; find Zap
		MOV	zapws,r4		; Zap's workspace

		ADR	r0,Zap_Command_Table
		FNcall	Zap_AddCommands
		FNRTS	VS			; add our command table

		[	WorkspaceSize <> 0
		MOV	r1,#0
		MOV	r2,ws
		MOV	r3,#WorkspaceSize
		FNcall	Zap_FillWords		; zero workspace
		]
;		[	:DEF:buflen
		MOV	r0,#129
		MOV	r1,#0
		MOV	r2,#255
		SWI	XOS_Byte
		MOVVS	r1,#0
		CMP	r1,#&A8
		MOVLO	r0,#255
		MOVHS	r0,#1024
		SUBHS	r0,r0,#1
		STR	r0,[ws,#buflen]
;		]

		FNRTS

zap_title	=	"Zap", 0
;		ALIGN				; kind of superfluous :-)

; Return workspace pointer in ws. This allows us to access
; our workspace from within a Zap command.
Get_Workspace
		[	WorkspaceSize <> 0
		LDR	ws,workspace_addr
		|
		MOV	ws,#0
		]
		MOV	pc,lr

; Finalisation code.
; Free up our workspace and set the private word to null.
final_code
		[	WorkspaceSize <> 0
		FNJSR
		MOV	r0,#7
		LDR	r2,[r12]
		SWI	XOS_Module		; free workspace
		FNRTS	VS
		MOV	r0,#0
		STR	r0,[r12]		; null private word
		FNRTS
		|
		MOV	pc,lr
		]

; This should really be in its own AREA. Unfortunately this causes relocation
; problems because many linkers want to put DATA, non-READONLY and similar
; AREAs at the end of the binary, which we don't want.
workspace_addr
		[	WorkspaceSize <> 0
		&	0
		]

; a bit of 32 bit ARM support code
ARM32_VCRet	RTVC


; Last area in module (so we know where it is)
		AREA	|ZModule_End_Comes_Last|,CODE,READONLY

Module_End

		END
