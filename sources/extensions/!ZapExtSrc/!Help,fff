Zap Extension Modules Copyright © 1998-1999 Zap Developers
==========================================================

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

(The GPL is supplied as !ZapExtSrc.Copying.)

This is the source release of the Zap extension modules. It contains source
for: ZapText (text-related Zap extension commands), ZapUtil (util-related
Zap extension commands), and ZapBits (various other Zap extension commands).

The following have code used with permission in the Zap extension modules:

	James Aylett
	Dominic Symes
	Darren Salt

Text extensions (maintainer: James Aylett):
	Martin Ebourne
	Justin Fletcher
	Paul Moore
	Tim Tyler
	Daniel Wagenaar

Util extensions (maintainer: James Aylett):
	Paul Moore
	Daniel Wagenaar

Bits extensions (maintainer: Darren Salt):
	Tim Tyler

(Elliot Hughes' EVAL command has been replaced by Darren Salt's more flexible
equivalent; if you need the exact facilities of Elliot's, you can achieve it
using INSERT $(<expression>).)

Each code file is generally written primarily by one person, with (usually
minor) modifications by others. Each file should make it fairly obvious who
wrote it; if not, it was probably me.

Basically this should build out of the box, providing you have a recent
copy of the main Zap source. Double click on !ZapExtSrc.Makefile to set it
going. If it can't find the appropriate extension, it will generate an error
before building, asking you to locate it.

You will need MakeExtern installed in !Zap.Code.MakeExtern to complete
the make process; however it is run as the very last step in each make, and
so isn't essential to building the extensions.

Note that these extensions can be built with or without international
support; the default makefiles currently build them without, so they are
compatible with Zap v1.40. Similarly, they can be built with or without TMF
support (default without).

Working with the source
-----------------------

Naming conventions: any symbols which are viewable externally to an object
file should start with "xxx_" where "xxx" is any number of valid symbol
characters which identifies that object file. For instance, for o.dwcomm we
use "dw_", and so on. Where the symbol refers to a command, the bit after the
"xxx_" should be the command name; I've used all lower case, but there's no
need to stick with this. For other symbols I've used underscores to separate
words, with each word starting with a capital; this makes it obvious what
sort of a symbol it is. In general you shouldn't be adding external symbols
except as commands anyway.
General routines should be prefixed with "util_".

For local symbols it's advisable to use symb$l, using LOCAL before each local
area to make this work.

If you have any difficulties in building this, please get in touch. Any
questions or ideas about the actual code and options which make up the
extension modules should be directed to the zap-devel mailing list.

Alterations
-----------

Please communicate alterations and additions back to me so I can include them
in the standard distribution; I reserve the right to alter any code sent to
me if it isn't working cleanly (but try to avoid the need for this - in
particular, I'd rather you claimed blocks from Zap than allocated a storage
area within your command's body, to avoid bloating the module; alternatively,
if it's small, allocate space for yourself in the module workspace, which
should result in less heap fragmentation than claiming each time).

If you add a new command, or alter the functionality of one currently
present, please: firstly, consider backwards compatibility (within the
extensions; don't worry too much about making commands which are incompatible
with earlier versions in other extensons - if there are serious problems I'll
rename the command); secondly, please write HelpData for it, because I hate
doing that :-)

James Aylett
dj@zap.uk.eu.org
