; Contains BASIC module header and non mode specific code.
; $Id: ZapBASIC,fff,v 1.11 2003-03-13 18:54:21 christian Exp $
; -*- armasm -*-

 GET h.ZapBasHdr
 GET h.BASIC
 GET h.BAStxt
 GET h.SWIs
 GET h.Version

 EXPORT Null
 EXPORT init_mode_word
 EXPORT restore_mode_word
 EXPORT save_mode_word
 EXPORT set_width
 EXPORT calc_mode_width
 EXPORT err5
 EXPORT err5a
 EXPORT err6
 EXPORT err30
 EXPORT err31
 EXPORT err33
 EXPORT err35
 EXPORT err36
 EXPORT err37
 EXPORT err39
 EXPORT err40
 EXPORT err41
 EXPORT error_offset
 EXPORT div_mod
 EXPORT title_string
 EXPORT red_overflow
 EXPORT strstr
 EXPORT str_len
 EXPORT strcmp
 EXPORT strcmpstr
 EXPORT strcpy
 EXPORT strcopy
 EXPORT cln_readc
 EXPORT cln_writec
 EXPORT test_shiftctrl
 EXPORT getoptswitches
 EXPORT loadlineeditor
 EXPORT basic_zapversion
 EXPORT basic_getzapversion
 EXPORT test_forkey
 EXPORT get_workspace
 EXPORT get_mode_word

 EXPORT ARM32_CCRet
 EXPORT ARM32_CSRet

 AREA |!!!Module_Header_Area|,CODE,READONLY

 ENTRY

Module_header
Start_code	     DCD start_code
Initialisation_code  DCD initialise_code
Finalisation_code    DCD finalise_code
Service_call_handler DCD 0
Title_string	     DCD title_string
Help_string	     DCD help_string
Command_keyword_tab  DCD command_table
SWI_chunk_number     DCD 0
SWI_handler_code     DCD 0
SWI_decoding_table   DCD 0
SWI_decoding_code    DCD 0
Messages_File	     DCD 0
Module_Flags	     DCD module_flags

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; TITLES AND COMMAND TABLES				       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

help_string = |zap$|,"BASIC",9
	    = version,"(00 Jan 0000)"
 [ BUILD > ""
		= " ",BUILD
  [ (BUILD:RIGHT:1 < "0" :LOR: BUILD:RIGHT:1 > "9") :LAND: patch_level <> ""
		= "-",patch_level
  ]
 |
  [ test_flag
		= " [TEST"
   [ patch_level <> ""
		= " ",patch_level
   ]
		= "]"
  |
   [ patch_level <> ""
		= " patch-",patch_level
   ]
  ]
 ]
 [ INTL>""
            = " Zap 1.40"
 ]
	    FNS (" © Zap Developers")

title_string FNS (|zap$|:CC:"BASIC")

command_table
 FNS (|zap$|:CC:"BASIC_TestProgram")
 DCD TestProgram
 DCD &10101
 DCD tpsyn
 DCD tphlp
 FNS (|zap$|:CC:"BASIC_RunProgram")
 DCD RunProgram
 DCD 0
 DCD rnsyn
 DCD rnhlp
 DCD 0

tphlp
 = "This command",27,")for testing",27,2,"Zap BASIC editor's "
 = "tokenisa",27,9,". It loads in",27,2,"BASIC ",27,7,27,16,"goes through "
 = "it line by line detokenising",27,16,"then retokenising. "
 = "If there",27,")a discrepancy then it prints up an error message.",13,10
tpsyn
 = 27,27,0
rnhlp
 = "This command",27,")used internally by",27,2,"ZapBASIC module",27
 = "(run a BASIC program directly from RAM. Don't use it.",13,10
rnsyn
 = 27,1,0
 ALIGN

module_flags DCD 1			; 32 bit compatible


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; INITIALISE AND FINALISE				       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

initialise_code
 FNJSR
 MOV R0,#6
 MOV R3,#variable_size
 SWI XOS_Module			; claim varable workspace
; FNRTS VS
 MOVVC R11,R2			; claimed block (R11 from now on)
 STRVC R11,[R12]			; save as my workspace pointer
 STRVC R11,workspace_address
 MOVVC R0,#18
 ADRVC R1,zap$l
 SWIVC XOS_Module			; find zap
; FNRTS VS			; not found
 MOVVC R12,R4			; zap workspace
 ADRVCL R0,key_command_table     ; add command table
 FNcallc Zap_AddCommands,VC
; FNRTS VS
 LDRVC R0,ext5$l
 BLVC add_one_mode
 ;FNRTS				; debugging code!
 LDRVC R0,ext6$l
 BLVC add_one_mode
 FNRTS VS
 MOVVC R1,#0
 MOVVC R2,R11
 MOVVC R3,#variable_size
 FNcallc Zap_FillWords,VC	; clear workspace
 FNRTS
zap$l	FNS (|zap$|)
ext5$l  DCD basic_table_start
ext6$l  DCD bastxt_table_start

; Address in module to store our workspace

workspace_address DCD 0

;X R11=module workspace |

get_workspace
 LDR R11,workspace_address
 MOV PC,R14

;E R0=module offset of the mode
;  Mode added #

add_one_mode
 FNJSR
 ADRL R14,Module_header
 ADD R0,R0,R14
 FNcall Zap_AddMode
 FNRTS

finalise_code
 FNJSR
 MOV R0,#7
 LDR R2,[R12]
 SWI XOS_Module			; free workspace
; FNRTS VS
 MOVVC R0,#0
 STRVC R0,[R12]			; null private word
 FNRTS

Null
 MOV PC,R14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Run program from RAM by starting new task		      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

RunProgram
 FNJSR "R1-R2"
 MOV R0,#2			; run module
 ADRL R1,title_string
 MOV R2,#0
 SWI XOS_Module			; start the module as an app
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; menu handling							 ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;E R8=winodow/0 R10=mode number
;X R0=w_mode/opt_mode for that mode #

get_mode_word
 FNJSR "R1"
 TEQ R8,#0
 BEQ ge10			; options menu
 ADD R0,R8,#w_mode0
 LDR R0,[R0,R10,LSL#2]		; mode word
 FNRTS
ge10
 ADD R1,R10,#&100		; variable number
 FNcall Zap_ReadVar
 FNRTS

;E R0=value R8=window/0 R10=mode
;X R0 saved in w_basic/opt_basic

put_mode_word
 FNJSR "R1"
 TEQ R8,#0
 BEQ pu10			; options menu
 ADD R14,R8,#w_mode0
 STR R0,[R14,R10,LSL#2]		; save mode word
 FNRTS
pu10
 ADD R1,R10,#&100		; variable number
 FNcall Zap_WriteVar
 FNRTS

;E R8=winodow/0
;X R0=w_format/opt_format #

get_format
 FNJSR "R1"
 TEQ R8,#0
 LDRNE R0,[R8,#w_format]
 FNRTS NE
 MOV R1,#3
 FNcall Zap_ReadVar
 FNRTS

;E R8=winodow/0
;X R0=w_flags/opt_flags #

get_flags
 FNJSR "R1"
 TEQ R8,#0
 LDRNE R0,[R8,#w_flags]
 FNRTS NE
 MOV R1,#2
 FNcall Zap_ReadVar
 FNRTS

;E R0=value R8=window/0
;X R0 saved in w_format/opt_format

put_format
 FNJSR "R1"
 TEQ R8,#0
 STRNE R0,[R8,#w_format]
 FNRTS NE
 MOV R1,#3
 FNcall Zap_WriteVar
 FNRTS

;E R0=value R8=window/0
;X R0 saved in w_flagst/opt_flags

put_flags
 FNJSR "R1"
 TEQ R8,#0
 STRNE R0,[R8,#w_flags]
 FNRTS NE
 MOV R1,#2
 FNcall Zap_WriteVar
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Redraw line						      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; update buffer pointers VS if overflowed

red_overflow
 FNJSR
 LDR R0,[R9,#f_ptr]
 LDR R14,[R9,#f_bufl]
 ADD R0,R0,R14			; end of buffer
 CMP R10,R0
 BCS ov1			; end is off end of buffer=overflow
 MOV R10,R0			; end of second buffer
 LDR R0,[R9,#f_splits]		; split size
 ADD R5,R5,R0
 ADD R7,R7,R0			; move into second buffer
 CMP R7,R10			; is it off the end of the second buf
 FNRTS CC			; return if not
ov1
 FNRTV				; return with overflow

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Leaving/entering mode					       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;E R0=mode number R8/R9=window /0 for options
;X mode word restored #

restore_mode_word
 FNjump Zap_RestoreModeWord

 LOCAL

;E R0=new width or -1 to read R8=window/0 R10=mode
;X width written #

set_width
 FNJSR "R1,R2"
 MOV R1,R0
 BL get_mode_word
 FNRTS VS
 MOV R2,R0,LSR #16
 EOR R0,R0,R2,LSL #16		; clear bottom 16 bits
 CMP R1,#-1
; FNRTS EQ			; just reading
 MOVNE R2,R2,LSL #16
 MOVNE R1,R1,LSL #16
 ORRNE R0,R2,R1,LSR #16		; new width
 BLNE put_mode_word
 FNRTS

;E R0=mode number R8/R9=window /0 for options menu
;X mode word saved #

save_mode_word
 FNjump Zap_SaveModeWord

;E R0=mode number R1=return character R8/R9
;X R0=w_bpl calculated as for standard text mode #

calc_mode_width
 FNJSR "R1-R2"
 ADD R14,R1,R1,LSL#8
 ADD R14,R14,R14,LSL#16
 STR R14,[R8,#w_cr]		; set up return character
 MOV R1,R0			; mode number
 ADD R0,R8,#w_mode0
 LDR R0,[R0,R1,LSL#2]		; mode word
 MOV R0,R0,LSL #16		; TT bug Fix...
 MOV R0,R0,LSR #16		; TT bug Fix...
 CMP R0,#5
 MOVLE R0,#5
 STR R0,[R8,#w_bpl]		; save the width
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set initial mode words				     ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

;X modes have their opt_mode words set up if they were 0
;  colours also set up

init_mode_word
 FNJSR "R1-R4,R8"
 MOV R8,#0			; default options
 FNLDR R1,mode_basic
 ADR R3,basic$l
 BL sub$l
 ;BLNE ensure_colours_correct
 FNLDR R1,mode_bastxt,VC
 ADRVC R3,bastxt$l
 BLVC sub$l
 FNRTS

sub$l				; R1=mode number R3=data block
 FNJSR
 LDR R4,[R3],#4			; number of extra colours
 PUSH "R1"
 ADD R1,R1,#&100		; variable number
 FNcall Zap_ReadVar		; R0=mode word
 PULL "R1"
 FNRTS VS
 TEQ R0,#0
 BNE toinit_cols
 PUSH "R1"
 LDR R0,[R3]			; get width etc
; MOV R0,R0,LSL#16		; should this code LSL...?
; MOV R0,R0,LSR#16		; save width in mode word
 ADD R1,R1,#&100
 FNcall Zap_WriteVar		; width kept here
 PULL "R1"
; FNRTS VS
 LDRVC R0,[R3]
 MOVVC R2,#0
 FNcallc Zap_ModeData,VC		; set the width etc
; FNRTS VS
 ADDVC R0,R3,#4
 ADDVC R4,R4,#9
 BLVC forcedocols			; setup initial colours
 FNRTS

toinit_cols
 ADD R0,R3,#4
 ADD R4,R4,#9
 BL init_cols			; setup initial colours
 FNRTS

basic$l
 DCD 27				; 3 extra colours ; now *more* TT :-)
 DCD &031E0000+66		; BASIC 03010000+66
 DCD &97070077
 DCD &9239CFAB			; cols
 DCD &D23EE589			; cols
 DCD &123DD191			; cols
 DCD &12951C99			; cols
bastxt$l
 DCD 0
 DCD 77				; 6=Bastxt
 DCD &97070077
 DCD &B

 LOCAL

forcedocols
 FNJSR "R1-R5"
 MOV R3,R0
 MOV R0,#0
 B thethickofthecols

modbas_localraero
 DCD 0

;E R0=pointer to words of wimp colours R1=mode number R4=num of cols
;  R8=window to set /0
;X Default colours set up #

init_cols
 FNJSR "R1-R5"
 PUSH "R0"
 MVN R0,#0
 FNcall Zap_ModeColourNum	; Read palette size
 PULL "R3"
 CMP R0,R4
 FNRTS "GE"			; why doesn't it work?
 ;SUB R0,R0,#9
thethickofthecols
 STR R0,modbas_localraero
 PUSH "R3"
 MOV R0,R4
 FNcall Zap_ModeColourNum	; change palette size
 PULL "R3"
 FNRTS VS
 MOV R2,#0			; colour number
a$l
 TST R2,#7			; 8 colour boundry?
 LDREQ R5,[R3],#4		; next bit of data
 LDR R0,modbas_localraero
 CMP R2,R0
 BLT postinitcolour		; Debugging - Why doesn't it work?
 AND R0,R5,#&F			; wimp colour
 FNcall Zap_ModeColour
 FNRTS VS
postinitcolour
 MOV R5,R5,LSR#4		; next colour
 ADD R2,R2,#1
 CMP R2,R4
 BCC a$l
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DIVISION						      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;E R0=numerator	  R1=denominator
;X R0=R0 Div R1	  R2=R0 Mod R1	  R0-R3 corrupted |

div_mod
 MOV R2,#0			; clear remainder
 ADDS R0,R0,R0			; double numerator
 RSB R1,R1,#0			; negate denom
 MOV R3,#32
div_mod_1
 ADCS R2,R1,R2,LSL#1
 SUBCC R2,R2,R1
 ADCS R0,R0,R0
 ADCS R2,R1,R2,LSL#1
 SUBCC R2,R2,R1
 ADCS R0,R0,R0
 ADCS R2,R1,R2,LSL#1
 SUBCC R2,R2,R1
 ADCS R0,R0,R0
 ADCS R2,R1,R2,LSL#1
 SUBCC R2,R2,R1
 ADCS R0,R0,R0
 SUB R3,R3,#4
 TEQ R3,#0
 BNE div_mod_1			; DO NOT CORRUPT CARRY
 MOV PC,R14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ERRORS					     ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; generate an error block, with error number offset $a and message $b

	MACRO
$la	FNerr $a,$b,$c
 [ INTL=""
$la	ADD R0,PC,#8			; address of the error message
	MOV R2,#0
	FNjump Zap_LookupError, R1	; return with an error
	DCD (ENUM+$a)			; the error number
	= $b,0
 |
$la	ADD R0,PC,#8			; address of the error message
	CMPVC PC,#1<<31			; don't use SEV son we know how
	CMNVC PC,#1<<31			;  long the sequence is
	MOV PC,R14
	DCD (ENUM+$a)			; the error number
	= $c,0
 ]
	ALIGN
	MEND

	MACRO
$la	FNierr $a,$b
$la	ADD R0,PC,#8			; address of the error message
	CMPVC PC,#1<<31			; don't use SEV son we know how
	CMNVC PC,#1<<31			;  long the sequence is
	MOV PC,R14
	DCD (ENUM+$a)			; the error number
	= $b,0
	ALIGN
	MEND

; err3 FNerr  3,("Bad number")
err5 ;FNierr  4,("Internal error: cln_backward in BASIC editor")
err5a FNierr  5,("Internal error: cln_backward in BASIC editor") ; ?!?!?
err6  FNierr  6,("Internal error: cln_phy in BASIC editor")
err30 FNerr  30,("basic_badlineno"),("BASIC line number too large (>65279)")
err31 FNerr  31,("basic_badprog"),("Bad BASIC program")
err33 FNierr 33,("Internal error: broken line number")
err35 FNerr  35,("basic_notbasic"),("Not a BASIC file or corrupt")
err36 FNerr  36,("basic_manylines"),("Too many lines - can't renumber")
err37 FNerr  37,("basic_longline"),("BASIC line too long")
err39 FNerr  39,("basic_cantrun"),("Not enough memory to download the program")
err40 FNerr  35,("basic_noeof"),("No end of line at end of file")
err41 FNerr  35,("basic_nolineno"),("No line number")

; err32 FNerr 32,("Internal error: basic_clnbackward")
; err34 FNerr 34,("BASIC line not found")
; err38 FNerr 38,("Program contains line references")

;E R0=error string R1=offset
;X Tags 'at offset xxx' onto the error string. VS on exit #

error_offset
 FNJSR "R1-R3"
 MOV R3,R1			; save offset
 ADDS R2,R0,#0			; clv and start of error block
 FNLDR R1,buf_error
 LDR R0,[R2],#4
 STR R0,[R1],#4			; copy error number
 BL strcpy
 ADR R2,err_s0
 BL strcpy
 MOV R0,R3			; offset
 MOV R2,#&10			; buffer length
 SWI XOS_ConvertHex6		; hex8 not needed as 16MB limit to BASIC...?
 ;ADR R2,err_s1			; No R8 :(
 ;BL strcpy
 ;MOV R0,R7			; offset
 ;MOV R7,R1
 ;BL basic_clnoff
 ;MOV R0,R2
 ;MOV R2,#&10			; buffer length
 ;MOV R1,R7
 ;SWI XOS_ConvertCardinal2
 ;ADR R2,err_s2
 ;BL strcpy
 FNLDR R0,buf_error
 FNRTV
err_s0
 FNS (" at offset &")
;err_s1
; FNS (" (Line ")
;err_s2
; FNS (")")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; STRING HANDLING					     ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;; find string length

 LOCAL

;E R0=pointer to string terminated by 0 or 10 or 13
;  May contain tabs or other ctrl chars
;X R0=length of string not including the terminator |

str_len
 FNJSR "R1"
 MOV R1,R0
a$l
 LDRB R14,[R0],#1
 TEQ R14,#0
 TEQNE R14,#10
 TEQNE R14,#13
 BNE a$l
 SUB R0,R0,R1			; length including terminator
 SUB R0,R0,#1			; length excluding terminator
 FNRTS

;;;; copy strings

;E R1=dest R2=source (copy till <32 and zero added)
;X R0=0 R1=end of dest (after 0) R2=char after terminator |

strcopy
 LDRB R0,[R2],#1
 STRB R0,[R1],#1
 CMP R0,#32
 BCS strcopy
 MOV R0,#0
 STRB R0,[R1,#-1]
 MOV PC,R14

;E R1=dest R2=source (copy till <32 and add no zero)
;X R0=terminatior R1=end of dest R2=char after terminator |

strcpy
 LDRB R0,[R2],#1
 CMP R0,#32
 MOVCC PC,R14
 STRB R0,[R1],#1
 B strcpy

 LOCAL

;E R1=dest R2=source R3=dest buf size R4=max terminating char
;X str moved R1=dest 0 term R2=source term+1 R3=amount left in buf |

strmove
 SUBS R3,R3,#1			; remove room for terminator
 MOVMI PC,R14			; no room
a$l
 CMP R3,#1
 BLT b$l			; buffer full
 LDRB R0,[R2],#1
 CMP R0,R4
 STRHIB R0,[R1],#1
 SUBHI R3,R3,#1
 BHI a$l			; not at end so fill and loop
 MOV R0,#0
 STRB R0,[R1]			; add term and return
 MOV PC,R14
b$l
 MOV R0,#0
 STRB R0,[R1]			; add terminator
c$l
 LDRB R0,[R2],#1
 CMP R0,R4
 BHI c$l			; move to end of source
 MOV PC,R14

 LOCAL

;E R1=first str R2=second str
;X Z flag returned R0-R2 corrupted case sensitive |

strcmp
 FNJSR
a$l
 LDRB R0,[R1],#1
 LDRB R14,[R2],#1
 CMP R0,#&20
 BCC b$l
 TEQ R0,R14
 BEQ a$l			; next char
 FNRTS				; not equal
b$l
 CMP R14,#&20
 MOVCS R14,#0
 MOVCC R14,#1
 TEQ R14,#1			; equal if R14 was a terminator
 FNRTS

 LOCAL

;E R1=string R2=text (NB null strings R1 always fail to match)
;X EQ if R1 matches start of text and R0=next point in text |

strcmpstr
 FNJSR "R1-R2"
 LDRB R0,[R1]
 CMP R0,#&20			; is R1 null
 FNRTS CC			; return if so (with NE)
a$l
 LDRB R0,[R1],#1
 CMP R0,#&20
 BCC b$l
 LDRB R14,[R2],#1
 TEQ R0,R14			; does the match continue
 BEQ a$l
 FNRTS
b$l
 MOV R0,R2
 TEQ R0,R0			; EQ
 FNRTS

 LOCAL

;E R1=string R2=text (NB null strings R1 always fail to match)
;X EQ if R1 matches start of text and R0=next point in text |
;  Match is case unsensitive

strCMPstr
 FNJSR "R1-R3"
 LDRB R0,[R1]
 CMP R0,#&20			; is R1 null
 FNRTS CC			; return if so (with NE)
a$l
 LDRB R0,[R1],#1
 LDRB R14,[R2],#1
 CMP R0,#&20
 BCC b$l			; reached end of R1 string so matches
 CMP R0,#'a'
 RSBHSS R3,R0,#'z'
 SUBHS R0,R0,#32
 CMP R14,#'a'
 RSBHSS R3,R14,#'z'
 SUBHS R14,R14,#32
 TEQ R0,R14			; does the match continue
 BEQ a$l
 FNRTS
b$l
 MOV R0,R2
 TEQ R0,R0			; EQ
 FNRTS

;E R0=byte R1=buffer R2=number
;X R0 saved R1=next byte after R2 R0's R2 undef |

strstr
 SUBS R2,R2,#1
 STRGEB R0,[R1],#1
 BGE strstr
 MOV PC,R14

;X R0 saved R1=flags (b0=shift pressed b1=ctrl pressed)

test_shiftctrl
 FNJSR "R0,R2-R3"
 MOV R3,#0			; flags
 MOV R0,#&81			; shift either inkey = 0
 MOV R1,#&FF
 MOV R2,#&FF
 SWI XOS_Byte
 CMP R1,#&FF			; cmp and clv
 ORREQ R3,R3,#1
 MOV R0,#&81
 MOV R1,#&FE			; ctrl either inkey = 1
 MOV R2,#&FF
 SWI XOS_Byte
 CMP R1,#&FF
 ORREQ R3,R3,#2
 MOV R1,R3
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Read/write file bytes					;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;E R0=offset R9=file
;X R0=byte

 LOCAL
cln_readc
 FNJSR
 LDR R14,[R9,#f_len]
 CMP R0,R14
 BCS eof$l
 LDR R14,[R9,#f_splito]
 CMP R0,R14
 LDRCS R14,[R9,#f_splits]
 ADDCS R0,R0,R14
 LDR R14,[R9,#f_ptr]
 LDRB R0,[R14,R0]
 FNRTS
eof$l
 LDRB R0,[R8,#w_cr]		; but what if no R8!?!?!?!
 FNRTS

;E R0=byte (in bottom 8 bits) R2=file offset R9=file
;X byte written with no checking |

cln_writec
 FNJSR "R1-R2"
 LDR R1,[R9,#f_splito]
 CMP R2,R1
 LDRCS R1,[R9,#f_splits]
 ADDCS R2,R2,R1
 LDR R1,[R9,#f_ptr]
 STRB R0,[R1,R2]
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SERVICE CALL HANDLER					       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;service_call
; LDR R12,[R12]
; MOV PC,R14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Run program handling						;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

;X Executes ZapBASIC_RunProgram as a Wimp task so entering the module
;  Clears run_flag as well.

run_wimptask
 FNJSR
 ADR R0,c$l
 SWI XWimp_StartTask		; enter my module (as a new task)
 MOV R14,#0
 FNSTR R14,run_flag		; reset the run flag
 FNRTS
c$l FNS (|zap$|:CC:"BASIC_RunProgram")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Assemble a string					    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

;E R0=address of the string to assemble (eg in buf_detoken) ended by &0D
;     (in fact these days this seems to be assumed...)
;  R1 = pointer to trailing &OD...
;  R5=address to assume instruction is assembled at
;X R0=the assembled instruction _AND_ EQ if OK...
;  Uses buf_retoken #

;local_r5inasm
; & 0
;atverystatofassembling
 ;FNLDR R0,buf_detoken		; no harm/important...
 ;B ass$l

assemble_string
 FNJSR "R1-R7,R10"

; to be enabled when SWI chunk is registered.
; SWI XAsm_Version
; BVC asm_module_assembly

 ADDS R0,R0,#0			; clv
 LDR R0,local_disasmdata
 TST R0,#1<<10 ; long MULs
 MOVNE R10,#(64+8+4+2) ; 78
 MOVEQ R10,#(8+4+2) ; 14
atverystatofassembling
 FNLDR R0,buf_detoken		; no harm/important...?
 MOV R2,#0			; flags
 MOV R7,R0			; make sure no ':'s outside strings.
 MOV R1,R0			; strip multiple spaces too.
loop$l
 LDRB R14,[R7],#1
 STRB R14,[R1],#1
 CMP R14,#'"'
 EOREQ R2,R2,#1
 CMP R14,#32
 ADDCC R1,R1,#1
 BCC passatend$l ; foundend$l
 CMPNE R14,#']'
 ORRNE R2,R2,#2
 TST R2,#1
 BNE loop$l
 CMP R14,#']'
 TSTEQ R2,#2
 BEQ attheveryend$l
 CMP R14,#':'
 BNE loop$l ; passatend$l
 ;CMP R14,#' '
 ;BICNE R2,R2,#2
 ;BNE loop$l
 ;TST R2,#2
 ;ORREQ R2,R2,#2
 ;BEQ loop$l
 ;SUB R1,R1,#1
 ;B loop$l
passatend$l
 MOV R14,#13
 STRB R14,[R1,#-1]
 STRB R14,[R1]			; new...
foundend$l
 MOV R7,#0			; zero column ; R0 set by by now...
 MOV R2,#0			; start of line flags
 BL tokenise_line		; R0=len (exc &0D) in buf_retoken
 FNRTS VS
aftertokenised
 ADR R1,swi$l
 FNLDR R2,buf_retoken		; text
 BL strCMPstr			; is it a SWI instr? R0=next
 BNE ass$l			; no
 FNLDR R1,buf_retoken		; string pointer
 BL skipa$l			; skip SWI<cond>
 MOV R2,R1
 BL skips$l			; skip gap
 CMP R1,R2
 BLE ass$l			; no gap
 LDRB R0,[R1]
 CMP R0,#'A'
 BCC ass$l			; number given/already quoted
 MOV R3,#'"'
 STRB R3,[R1,#-1]		; overwrite last space
 BL skipa$l			; skip swi name
 STRB R3,[R1],#1
 MOV R0,#&0D
 STRB R0,[R1]
ass$l				; R4=length
 BL assembleinstrhere
 FNRTS VS
 FNLDR R1,buf_retoken		; use as the error buffer
 MOV R0,#0
 STR R0,[R1],#4			; error type 0
 ADR R0,tmpstr$l
 MOV R2,#&100
 MOV R3,#0
 MOV R4,#0
 SWI XOS_ReadVarVal		; read error string
 FNRTS VS
 CMP R2,#0
 BGT err1$l			; failed (non null error)
noerrorsecondtimeround
 ADR R0,tmpnum$l		; var with answer
 FNLDR R1,buf_retoken
 MOV R2,#4
 MOV R3,#0
 MOV R4,#0
 SWI XOS_ReadVarVal		; read the word
 FNRTS VS
 BL killasm			; corrupts R0,R1
 FNLDR R0,buf_retoken
 LDR R0,[R0]			; the assembled instruction
 MOVS R14,#0
 FNRTS
err1$l				; BASIC assembler returned an error
 LDRB R14,[R1]
 CMP R14,#'#'
 BEQ attheveryend$l
 CMP R10,#(8+4+2)		; 14
 CMPNE R10,#(64+8+4+2)
 BNE err2$l
 MOV R0,#11			; auto load asm
 BL getoptswitches
 BEQ secondattrmpt$l
 ADR R0,tmpnum$l		; var with answer
 FNLDR R1,buf_retoken		; now corrupted :/
 MOV R2,#4
 MOV R3,#0
 MOV R4,#0
 SWI XOS_ReadVarVal		; read the word
 ;BVS attheveryend$l
 FNLDR R0,buf_retoken
 LDR R0,[R0]			; the RETURNED ERROR NUMBER
 CMP R0,#1			; No such suffix on EQU / No such mnemonic
 CMPNE R0,#2			; Bad immediate constant
 CMPNE R0,#16			; Syntax error
 CMPNE R0,#26			; Unknown or missing variable
 BLEQ loadasm			; preserve R5...?
secondattrmpt$l
 LDR R0,local_disasmdata
 TST R0,#1<<10 ; long MULs
 MOVNE R10,#(64+32+8+4+2) ; 110
 MOVEQ R10,#(32+8+4+2) ; 46
 B atverystatofassembling ; ass$l
 ;B atverystatofassembling	; load ExtBASAsm here...
err2$l				; BASIC assembler returned an error
 BL killasm			; corrupts R0,R1
 MOV R0,#0
 STRB R0,[R1,R2]		; terminate it
 SUB R0,R1,#4
 ; FNLDR R0,buf_retoken		; start of error string
 MOVS R14,#0
 FNRTV

attheveryend$l
 MVNS R0,#0
 FNRTS

; to be enabled when SWI chunk is registered.
; asm_module_assembly
;  MOV R0,#0
;  STRB R0,[R1]
;  MOV R1,R5
;  FNLDR R0,buf_detoken		; no harm/important...?
;  SWI XAsm_Assemble
;  MOVVC R0,R2
;  MOVS R14,#0			; set EQ...
;  FNRTS

getoptswitches
 FNJSR "R0-R10"
 STR R0,ptrtooptswval
 ADR R0,miscopsname
 FNcall (Zap_FindCommand)
 CMP R0,#0
 FNRTS EQ
 MOV R7,R0
 MOV R1,#1 ; not used.
 MOV R2,#15
 ADR R0,ptrtooptswval
 MOV R8,#0
 MOV R9,#0
 MOV R10,#0
 FNcall (Zap_ProcessCommand) ; was commented...?!
 CMP R0,#0
 FNRTS

ptrtooptswval
 DCD 0
miscopsname FNS ("MISCOPS")
swi$l = "SWI",0
tmpstr$l FNS ("Zap$Temp")	; also returned error
tmpnum$l FNS ("Zap$TempNum")	; error flag
tmpopt$l FNS ("Zap$TempOpt")
 ALIGN

skipa$l
 LDRB R0,[R1]
 CMP R0,#&20
 ADDGT R1,R1,#1
 BGT skipa$l
 MOV PC,R14
skips$l
 LDRB R0,[R1]
 TEQ R0,#&20
 TEQNE R0,#9
 ADDEQ R1,R1,#1
 BEQ skips$l
 MOV PC,R14

assembleinstrhere
 FNJSR
 FNLDR R1,buf_retoken		; string pointer
 MOV R0,R1
 BL str_len
 MOV R2,R0
 ADR R0,tmpstr$l
 MOV R3,#0
 MOV R4,#2			; macro string
 SWI XOS_SetVarVal		; set up string to assemble variable
; FNRTS VS

 ADRVC R0,tmpnum$l
 FNLDR R1,buf_retoken,VC
 STRVC R5,[R1]			; address of the instruction
 MOVVC R2,#4
 MOVVC R3,#0
 MOVVC R4,#1
 SWIVC XOS_SetVarVal		; set up address number variable
; FNRTS VS

 ADRVC R0,tmpopt$l
 FNLDR R1,buf_retoken,VC
 STRVC R10,[R1]			; opt value
 MOVVC R2,#4
 MOVVC R3,#0
 MOVVC R4,#1
 SWIVC XOS_SetVarVal		; set up address number variable
; FNRTS VS

 MOVVC R0,#2			; quit
 ORRVC R0,R0,#4<<8		; Code mode (run Assemble program)
 FNSTR R0,run_flag,VC		; save flags
 BLVC run_wimptask
 FNRTS				; we've got the answer

; ------------------------------------------------

loaddisasm
 FNJSR "R0,R1"
 LDR R14,localcopyof_zapversion
 CMP R14,#136
 FNRTS CC
 MOV R0,#10			; auto load asm
 BL getoptswitches
 FNRTS EQ
 BL checkseeifdisasmloaded
 FNRTS VC
 ADR R0,disasmpath
 SWI XWimp_StartTask
 SUBS R14,R14,R14		; CLV
 FNRTS

loadasm
 FNJSR "R0,R1"
 LDR R14,localcopyof_zapversion
 CMP R14,#136
 FNRTS CC
 MOV R0,#11			; auto load asm
 BL getoptswitches
 FNRTS EQ
 BL checkseeifasmloaded
 ADRVS R0,asmpath
 FNRTS VC
 SWI XWimp_StartTask
 STR R13,loadedbyzap		; just a flag :-)
 SUBS R14,R14,R14		; CLV
 FNRTS

loadedbyzap
 DCD 0

killasm
 FNJSR "R0,R1"
 LDR R0,loadedbyzap
 CMP R0,#0
 FNRTS EQ
 ADR R1,asmnamed
 MOV R0,#4
 SWI XOS_Module
 MOV R0,#0
 STR R0,loadedbyzap
 FNRTS

loadlineeditor
 FNJSR "R0,R1"
 LDR R14,localcopyof_zapversion
 CMP R14,#136
 FNRTS CC
 MOV R0,#9			; auto load LE
 BL getoptswitches
 FNRTS EQ
 BL checkseeiflineeditorloaded
 ADRVS R0,lineeditorpath
loadamodulefromname
 SWIVS XWimp_StartTask
 SUBS R14,R14,R14 ; CLV
 FNRTS

checkseeifdisasmloaded
 FNJSR "R0-R5"
 ;MOV R0,#0
 ;MOV R1,#0
 ;SWI XDebugger_63
 ADR R1,disasmnamed
 MOV R0,#18
 SWI XOS_Module
 FNRTS VS
 BL getmoduleversionnumber
 CMP R0,#&200
 FNRTS CS
 FNRTV

checkseeifasmloaded
 FNJSR "R0,R1"
 ADR R1,asmnamed
checkforamodulebyname
 MOV R0,#18
 SWI XOS_Module
 FNRTS
; B checkforamodulebyname
checkseeiflineeditorloaded
 FNJSR "R0,R1"
 ADR R1,lineeditornamed
 B checkforamodulebyname

 LOCAL

getmoduleversionnumber ; e.g. 1.32 becomes &132 in R0.
 LDR R0,[R3,#&14]
 ADD R3,R3,R0
loop$l
 LDRB R0,[R3],#1
 CMP R0,#'.'
 BNE loop$l
 LDRB R0,[R3,#-2]
 SUB R2,R0,#'0'
 LDRB R0,[R3],#1
 SUB R1,R0,#'0'
 LDRB R0,[R3],#1
 SUB R0,R0,#'0'
 ADD R0,R0,R1,LSL #4
 ADD R0,R0,R2,LSL #8
 MOV PC,R14

disasmnamed FNS ("Debugger")
asmnamed FNS ("ExtBASICasm")
lineeditornamed FNS ("LineEditor")
asmpath FNS ("Obey ZapExtensions:BootExtAsm")
disasmpath FNS ("Obey ZapExtensions:BootDisasm")
lineeditorpath FNS ("Obey ZapExtensions:BootLineEd")

 LOCAL

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

basic_zapversion
 STR R0,localcopyof_zapversion
 MOV PC,R14

basic_getzapversion
 LDR R0,localcopyof_zapversion
 MOV PC,R14

localcopyof_zapversion
 & 0

;E R0=inkey number (not eored)
;X CS if key pressed |

test_forkey
 FNJSR "R1-R2"
 EOR R1,R0,#&FF
 MOV R2,#&FF
 MOV R0,#&81
 SWI XOS_Byte
 CMP R1,#&FF
 FNRTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Extra commands					    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 LOCAL

local_disasmdata
 DCD 0

localrfive
 DCD 0

 DCD (3<<3)+(1<<6)
Assemble
 FNJSR
 MOV R4,R0			; save data string
 LDR R6,[R10,#c_off]		; offset of the instruction
 BIC R6,R6,#3			; word align
 LDR R5,[R8,#w_addr]		; address of offset 0
 ADD R5,R5,R6			; address instruction came from
 STR R5,localrfive
 BL get_workspace		; set up R11
 FNRTS VS
 TEQ R2,#6
 BEQ prompt$l
 MOV R2,R4			; source
 FNLDR R1,buf_detoken		; dest
 BL strcpy			; copy string to be assembled
 MOV R0,#&0D
 STRB R0,[R1]			; add an &0D terminator
; MOV R0,#&00
; STRB R0,[R1,#1]		; add an &00 terminator for Asm_ ... ?
 FNLDR R0,buf_detoken
 BL assemble_string		; R0=assembled instruction
 FNRTS VS
 FNRTS NE
 MOV R1,R6			; file offset
 FNcall Zap_ReplaceWord		; do it!
 FNRTS VS
 ADD R0,R6,#4			; file offset
 LDR R14,[R9,#f_len]
 CMP R0,R14
 MOVCS R0,R14
 FNcall Zap_JumptoOffset
 FNRTS
prompt$l
 BL loaddisasm
 MOV R0,#0			; blat cache
 MOV R1,#0			; blat cache
 SWI XDebugger_Disassemble	; blat cache
 BLVC carefully_getdisasmdata
 STRVC R0,local_disasmdata
 LDRVC R0,localrfive
 ;MOV R0,R5
 FNLDR R1,buf_detoken,VC
 MOVVC R2,#&100
 SWIVC XOS_ConvertHex8		; start off with the address in hex
; FNRTS VS
 FNLDR R0,buf_detoken,VC
 FNcallc Zap_MiniPrompt,VC		; prompt = address + colon
  [ HIST=""
 MOVVC R0,#lineed_buf_asm
 FNcallc Zap_SelectHistoryBuffer,VC
  ]
; FNRTS VS
 MOVVC R0,R6
 FNcallc Zap_ReadWord,VC		; get the instruction
; FNRTS VS
 LDRVC R1,localrfive
 ; MOV R1,R5			; address it came from
 MOVVC R7,R0
 BLVC like_Debugger_Disassemble
; SWI XDebugger_Disassemble
 FNRTS VS
 FNLDR R2,buf_detoken		; buffer to copy detokenised line
 MOV R3,R2			; save start of line address
 LDRB R0,[R1,#4]
 CMP R0,#'f'
; LDR R0,[R1]
; LDR R14,undefasastring$l
; CMP R0,R14
 BEQ todoadcd$l
 MOV R14,#0
copy$l
 LDRB R0,[R1],#1
 CMP R0,#&20
 BCC copied$l
 TEQ R0,#';'
 BEQ copied$l
 CMP R0,#' '
 BEQ aspace$l
 BIC R14,R14,#1
storeit$l
 STRB R0,[R2],#1
 B copy$l
aspace$l
 TST R14,#1
 ORREQ R14,R14,#1
 BEQ storeit$l
 B copy$l
copied$l			; copied string & remove excess spaces
 CMP R2,R3
 BLE seed$l
 LDRB R0,[R2,#-1]!
 TEQ R0,#&20
 BEQ copied$l
 ADD R2,R2,#1
seed$l				; seed minibuffer with current instruction
 MOV R0,#0
 STRB R0,[R2]
 MOV R0,R3
 FNcall Zap_MiniWrite		; old instruction
 FNRTS
todoadcd$l
 MOV R1,R2			; start of line address
 MOV R3,R2			; save start of line address
 ADR R2,dcd$l
 BL strcpy
 MOV R0,R7			; value.
 MOV R2,#&100
 SWI XOS_ConvertHex8		; start off with the address in hex
 MOV R0,#0
 STRB R0,[R1]
 MOV R0,R3
 FNcall Zap_MiniWrite		; DCD instruction
 FNRTS

;undefasastring$l FNS ("Unde")
dcd$l FNS ("DCD &")
asc$l FNS ("+ASC""")
;aswi$l FNS ("SWI &")
; FNS ("10100+ASC'x'x")
 ALIGN

like_Debugger_Disassemble
 FNJSR
 BICS R14,R0,#&FF000000
 BICS R14,R14,#&20000
 BICS R14,R14,#&FF
 CMP R14,#&100
 BEQ possiblyaswiprob
juscallswidd
 SWI XDebugger_Disassemble
 FNRTS

possiblyaswiprob
 ANDS R14,R0,#&F000000
 CMP R14,#&F000000
 BEQ possiblyaswiprob2
 SWI XDebugger_Disassemble
 FNRTS

possiblyaswiprob2
 LDR R14,local_disasmdata
 TST R14,#(1<<6)
 BNE juscallswidd

 PUSH "R2-R5"
 MOV R5,R0
 SWI XDebugger_Disassemble
 MOV R4,R1
lpbak$l
 LDRB R14,[R1],#1
 CMP R14,#32
 BGT lpbak$l
 MOV R14,#'&'
 STRB R14,[R1],#1
 BIC R0,R5,#&FF000000		; value.
 BIC R0,R0,#&FF			; value.
 MOV R2,#&100
 SWI XOS_ConvertHex6		; start off with the address in hex
 AND R0,R5,#&FF
 CMP R0,#127
 CMPNE R0,#'"'
 CMPNE R0,#31
 BLE secondprobasm

 ADR R2,asc$l
 BL strcpy
 AND R14,R5,#&FF
 STRB R14,[R1],#1
 MOV R14,#'"'
 STRB R14,[R1],#1
finishasmhere
 MOV R14,#0
 STRB R14,[R1],#1
 MOV R1,R4
 PULL "R2-R5"
 FNRTS

secondprobasm
 MOV R14,#'+'
 STRB R14,[R1],#1
 MOV R2,#&100
 SWI XOS_ConvertCardinal1		; start off with the address in hex
 B finishasmhere

carefully_getdisasmdata
 FNJSR
 BL      checkseeifdisasmloaded
 BVS     gracefully_do_nothing
 MOV     R0,#0
 MOV     R1,#0
 SWI     XDebugger_63
 FNRTS

gracefully_do_nothing
 SUBS R14,R14,R14
 FNRTS


; DCD 0 ; +(3<<3)+(1<<6)+(1<<10)
;Findfunction
; FNJSR
; LDR R0,[R10,#c_off]
; MOV R1,#12
; MOV R11,#e_init ; terrogate
; FNcall Zap_CallMode
; CMP R1,#12
; FNRTS EQ
; CMP R1,#0
; FNRTS EQ ; OK.
; ADR R0,err_notfunfound
; MOV R1,#0
; FNcall Zap_Warning ; assume we have a window...
; FNRTS
;err_notfunfound
; FNS ("Function not found")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Command service calls					;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

key_service_call
; CMP R1,#0
; MOVNE PC,R14			; allow zap to kill now
; MOVEQ R0,#-1
 MOV PC,R14			; allow zap to kill now

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Command table						    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; define a new command $a=command name $b=label for the command

	MACRO
$la	FNcom $a,$b
$la	= "$a",0
	ALIGN
	DCD $b
	MEND

key_command_table
 DCD key_command_table
 DCD key_service_call
 FNcom "ASSEMBLE",Assemble
 FNcom "BASIC_CHECKBUF",BASIC_checkbuffer
 FNcom "BASIC_FLAGSTOGGLE",CmdBASICflagstoggle
 FNcom "BASIC_REMARK",BASIC_REMARK
 FNcom "BASIC_REMARKSEL",BASIC_REMARKSEL
 FNcom "BASIC_TWRUN",BASIC_TWRun
 FNcom "BASIC_UNREMARK",BASIC_UNREMARK
 FNcom "BASIC_UNREMARKSEL",BASIC_UNREMARKSEL
 FNcom "DELWORDLEFT",DELWORDLEFT
 FNcom "DELWORDRIGHT",DELWORDRIGHT
 DCD 0				; end

; Imported code from ZapUtils

; \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\;
; \ Word deletion commands                                       \;
; \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\;

 DCD (1<<12)
DELWORDLEFT
 FNJSR

 LDR R3,[R10,#c_off]
 MOV R0,R3

 TEQ R1,#0
 BEQ done$l
dwl01
 BL back_word
 SUBS R1,R1,#1
 BNE dwl01

; \\\ R0 = start of block, R3 = end of block
done$l
 MOV R1,R0
 SUB R2,R3,R0
 FNcall Zap_StartOp
 BVS dwl02
 MOV R0,#2
 FNcall Zap_Command
 FNcall Zap_StopOp

dwl02
 FNRTS

 LOCAL

; \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\;

 DCD (1<<12)
DELWORDRIGHT
 FNJSR

 LDR R3,[R10,#c_off]
 MOV R0,R3

 TEQ R1,#0
 BEQ done$l
dwr01
 BL fwd_word
 SUBS R1,R1,#1
 BNE dwr01

; \\\ R3 = start of block, R0 = end of block
done$l
 MOV R1,R3
 SUB R2,R0,R3
 FNcall Zap_StartOp
 BVS dwr02
 MOV R0,#2
 FNcall Zap_Command
 FNcall Zap_StopOp

dwr02
 FNRTS

; \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\;
; \ Subroutines                                                  \;
; \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\;
; \ Move one word forward in file
; \ (In) R0 = file offset, (Out) R0 = new file offset
fwd_word
 FNJSR "R1-R2"
 LDR R2,[R9,#f_len]

 CMP R0,R2
 MOVHS R0,R2
 BHS fw_eof

fw01
 BL getc_off
 BL wordchar
 BCC fw02
 ADD R0,R0,#1
 CMP R0,R2
 BLO fw01
 B fw_eof

fw02
 ADD R0,R0,#1
 CMP R0,R2
 BHS fw_eof
 BL getc_off
 BL wordchar
 BCC fw02

fw_eof
 FNRTS

; \ Move one word backward in file
; \ (In) R0 = file offset, (Out) R0 = new file offset
back_word
 FNJSR "R1"

bw01
 SUBS R0,R0,#1
 BMI bw_eof

 BL getc_off
 BL wordchar
 BCC bw01

bw02
 SUBS R0,R0,#1
 BMI bw_eof
 BL getc_off
 BL wordchar
 BCS bw02

bw_eof
 ADD R0,R0,#1
 FNRTS

; redundant code...?
; \ Get a character from a file buffer
; \ (In) R0=file offset (Out) R1=char
getc_off
 FNJSR "R0"

 LDR R1,[R9,#f_splito]
 CMP R0,R1
 LDRCS R1,[R9,#f_splits]
 ADDCS R0,R0,R1
 LDR R1,[R9,#f_ptr]
 LDRB R1,[R1,R0]

 FNRTS

; \ Check whether a character is a word constituent
; \ (In) R1=char (Out) CS=Word, CC=NonWord
wordchar
 FNJSR "R0-R2"
 ADR R0,wordtab
 MOV R2,R1,LSR #5
 LDR R0,[R0,R2,ASL #2]
 AND R1,R1,#&1F
 ADD R1,R1,#1
 MOVS R0,R0,LSR R1
 FNRTS

; \ Word characters (A-Z,a-z,0-9,_)
wordtab
 DCD &00000000        ;\ &00-&1F
 DCD &03FF0000        ;\ &20-&3F (0-9)
 DCD &87FFFFFE        ;\ &40-&5F (A-Z and _)
 DCD &07FFFFFE        ;\ &60-&7F (a-z)
 DCD &00000000        ;\ &80-&9F
 DCD &00000000        ;\ &A0-&BF
 DCD &00000000        ;\ &C0-&DF
 DCD &00000000        ;\ &E0-&FF


; some 32 bit ARM support code

ARM32_CSRet
	RTCS
ARM32_CCRet
	RTCC

;;;;;;;;;; End Of Assembly ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 END
