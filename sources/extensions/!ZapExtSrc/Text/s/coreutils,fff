; Zap Text Command Extension
; Copyright (C) 1998 Zap Developers
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
; Utility routines taken/adapted from the core (Dominic Symes)
;
; util_readc		- read character at given position in file
; util_long_op_on	- start a long operation (hourglass, escape)
; util_long_op_off	- stop a long operation
; util_long_op_display	- update hourglass percentage
; strlen, strcmp, strcopy, strstarts
;			- string handling

; Includes
		GET	h.ZapText

; What we give to other people
		EXPORT	util_readc
		EXPORT	util_long_op_on
		EXPORT	util_long_op_off
		EXPORT	util_long_op_display
		EXPORT	strlen
		EXPORT	strcmp
		EXPORT	strcopy
		EXPORT	strstarts

; util_readc - reads from position r0 in file, accounting
; for the split point as necessary. Code from core.
; Returns the result in r0, and corrupts r1
		LOCAL

util_readc	LDR	r1,[fileptr,#f_splito]
		CMP	r0,r1
		LDRCS	r1,[fileptr,#f_splits]
		ADDCS	r0,r0,r1
		LDR	r1,[fileptr,#f_ptr]
		LDRB	r0,[r1,r0]
		MOV	pc,lr

;X Hourglass on and escape enabled #

util_long_op_on
		FNJSR	"R1,R2"
		SWI	XHourglass_On
		FNRTS	VS

		MOV	R0,#229
		MOV	R1,#0			; new escape state
		MOV	R2,#0
		SWI	XOS_Byte			; enable escape
		FNRTS

;X Hourglass off and escape disabled #

util_long_op_off
		FNJSR	"R1,R2"
		SWI	XHourglass_Off
		FNRTS	VS

		MOV	R0,#229
		MOV	R1,#1
		MOV	R2,#0
		SWI	XOS_Byte			; disable escape
		FNRTS	VS

		MOV	R0,#124
		SWI	XOS_Byte			; clear escape condition
		FNRTS

;E R0=numerator R1=denominator
;X percentage shown on hourglass #

util_long_op_display
		STMFD	R13!,{R1-R3,R14}
		MOV	R2,#100
		MUL	R0,R2,R0
		SWI	XZapRedraw_Divide
		CMP	R0,#99
		MOVCS	R0,#99
		SWI	XHourglass_Percentage
		LDMFD	R13!,{R1-R3,PC}

;E R0=string, NUL terminated
;X R0=length

strlen
		FNJSR	"r1,r2"
		MOV	r1,#0
loop$l		LDRB	r2,[r0],#1
		ADD	r1,r1,#1
		CMP	r2,#0
		BNE	loop$l
		SUB	r0,r1,#1
		FNRTS

;E R1=first str R2=second str
;X Z flag returned R0-R2 corrupted case sensitive |
;  (So NE/EQ condition as you'd expect)
		LOCAL
strcmp
		FNJSR
a$l
		LDRB R0,[R1],#1
		LDRB R14,[R2],#1
		CMP R0,#&20
		BCC b$l				; space or less from first
		TEQ R0,R14
		FNRTS NE			; not equal
		B a$l				; next char
b$l
		CMP R14,#&20
		MOVCS R14,#0
		MOVCC R14,#1			; space or less from second
		TEQ R14,#1			; equal if R14 was a terminator
		FNRTS

;E R0 first str, R1 second string
;X Z returns if first string starts with second, R0-R2 corrupted, case insensitive
		LOCAL
strstarts
		FNJSR
a$l		LDRB	r2,[r0],#1
		CMP	r2,#'A'
		BLT	jump1$l
		CMP	r2,#'Z'
		ADDLE	r2,r2,#32		; to lower
jump1$l		LDRB	r14,[r1],#1
		CMP	r14,#'A'
		BLT	jump2$l
		CMP	r14,#'Z'
		ADDLE	r14,r14,#32		; to lower
jump2$l		CMP	r14,#32
		BCC	b$l			; second string ended
		CMP	r14,r2
		BEQ	a$l			; identical, so keep going

b$l		CMP	r14,#32			; if terminator was found
		MOVCS	r14,#0			; in second string, then
		MOVCC	r14,#1			; TEQ will set Z, so EQ
		TEQ	r14,#1			; bears. Otherwise, ~Z.
		FNRTS

;E R1=dest R2=source (copy till <32 and zero added)
;X R0=0 R1=end of dest (after 0) R2=char after terminator |

strcopy
		LDRB R0,[R2],#1
		CMP R0,#32
		STRCSB R0,[R1],#1
		BCS strcopy
		MOV R0,#0
		STRB R0,[R1],#1
		MOVS PC,R14

; That's it
		END
