; Zap Text Command Extension
; Copyright (C) 1998 Zap Developers
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
; Text commands by Justin Fletcher
;
; INSERTFILE		- Insert file with optional auto-indent and GS trans
; BRACKETCURSOR/SEL	- Bracket the selection / word at cursor

; Includes
		GET	h.ZapText
		GET	h.dsutils
		GET	h.coreutils

; What we give to other people
		EXPORT	jrf_insertfile
		EXPORT	jrf_bracketcursor
		EXPORT	jrf_bracketsel

; INSERTFILE - insert file, optionally auto-indenting and/or GS transing lines before entry
		LOCAL

		&	(3:SHL:3) + (1:SHL:6) + (1:SHL:9)
						; string parameter, minibuffer, tab complete
jrf_insertfile	CMP	r2,#6
		BEQ	mini$l

		FNJSR	"r0-r7"
		BL	zap_startop
		MOV	r5,#0
flagsloop$l	LDRB	r1,[r0]

		CMP	r1,#'|'
		ORREQ	r5,r5,#1		; auto-indent
		ADDEQ	r0,r0,#1
		BEQ	flagsloop$l

		CMP	r1,#'*'
		ORREQ	r5,r5,#2		; GS trans
		ADDEQ	r0,r0,#1
		BEQ	flagsloop$l

		MOV	r1,r0			; save filename pointer

		MOV	r11,#e_interrogate
		MOV	r0,#14			; mode type
		FNcall	Zap_CallMode
		AND	r0,r0,#255		; low byte
		CMP	r0,#2			; BASIC
		ORREQ	r5,r5,#4

		MOV	r0,#0x43
		SWI	XOS_Find		; open file
		BVS	invalid$l
		CMP	r0,#0
		BEQ	invalid$l


		MOV	r7,r0			; file handle
		MOV	r0,#512			; I'm not particularly happy with this, because long lines will fail :-(
		FNcall	Zap_Claim
		MOV	r6,r0			; buffer
loop$l		MOV	r0,r6
		MOV	r1,r7
		MOV	r2,#256
		BL	getlinefromfile		; read a line
		BCS	done$l

		TST	r5,#2
		BEQ	nogstrans$l

		ADD	r1,r6,#256
		MOV	r3,r1
		MOV	r2,#256
		SWI	XOS_GSTrans		; convert
		B	insertit$l

nogstrans$l	MOV	r3,r0			; pointer to insert
		SUB	r2,r2,r6		; amount to insert
		SUBS	r2,r2,#1		; remove trailing NUL

insertit$l	BMI	loop$l
		MOV	r0,#0x1			; insert unbuffered
		LDR	r1,[cursorptr,#c_off]	; at cursor
		FNcall	Zap_Command
;		LDRB	r14,[windptr,#w_format]	; current mode
;		CMP	r14,#5
;		BNE	notbasic$l
		TST	r5,#4
		BEQ	notbasic$l

		; horrible hack since BASIC doesn't tokenise immediately
		ADR	r0,basichack1$l		; insert a space
		BL	zap_commandstring
		ADR	r0,basichack2$l		; delete it again
		BL	zap_commandstring

notbasic$l	TST	r5,#1
		ADRNE	r0,returnindent$l	; auto indent
		ADREQ	r0,returnnoindent$l
		BL	zap_commandstring
		B	loop$l

done$l		MOV	r0,#0
		MOV	r1,r7			; restore file handle
		SWI	XOS_Find

		MOV	r0,r6			; free block
		FNcall	Zap_Free

invalid$l	BL	zap_stopop
		FNRTS				; don't cause a fuss

mini$l		ADR	r0,prompt$l
		B	zap_setprompt

prompt$l	=	"Insert file: ", 0
basichack1$l	=	"INSERT "" """, 0
basichack2$l	=	"DELETE", 0
returnindent$l	=	"RETURN", 0
returnnoindent$l
		=	"RETURNNOINDENT", 0
		ALIGN

; BRACKETCURSOR - bracket the word at the cursor
		LOCAL

		&	(3:SHL:3)+(1:SHL:6)
						; a string
						; call me before minibuf
jrf_bracketcursor
		CMP	r2,#6
		ADREQ	r0,prompt$l
		BEQ	zap_setprompt

		CMP	r10,#0
		CMPNE	r9,#0
		CMPNE	r8,#0
		MOVEQ	pc,lr

		FNJSR
		MOV	r4,r0			; store

		MOV	r11,#e_interrogate
		MOV	r0,#14
		FNcall	Zap_CallMode		; are you text-like?
		AND	r0,r0,#&FF
		CMP	r0,#14
		FNRTS	NE

do$l		MOV	r0,r4			; restore
		BL	getparams		; \X r2, r3, r5
		FNRTSS	VS

		LDR	r0,[cursorptr,#c_off]
		MOV	r11,#e_returnword	; actually get going
		FNcall	Zap_CallMode		; \X r0/r1 offset/length
		ADD	r1,r1,r0

		BL	do_bracket
		B	end$l

prompt$l	=	"Bracket with: ", 0
		ALIGN

; BRACKETSEL - bracket the selection
		&	(3:SHL:3)+(1:SHL:6)
jrf_bracketsel	CMP	r2,#6
		ADREQ	r0,prompt$l
		BEQ	zap_setprompt

		FNJSR
		BL	getparams		; \X r2, r3, r5
		FNRTSS	VS
		PUSH	"r2,r3"

		FNcall	Zap_GetSel		; \X r1, r2, r8/9
		BCS	stop$l			; no selection
		MOV	r0,r1
		ADD	r1,r1,r2

		PULL	"r2,r3"
		MOV	r4,r0

		MOV	r11,#e_interrogate
		MOV	r0,#14
		FNcall	Zap_CallMode		; are you text-like?
		AND	r0,r0,#&FF
		CMP	r0,#14
		FNRTS	NE

		MOV	r0,r4

		BL	do_bracket
		B	end$l

stop$l		PULL	"r2,r3"
end$l		STRB	r5,[r3,#-1]		; return break character
		FNRTS

; \E r0 place to put string r2
;    r1 place to put string r3
		LOCAL
do_bracket
		FNJSR	"r0-r3"
		BL	zap_startop		; single undo

		PUSH	"r1,r3"
		MOV	r1,r0
		MOV	r3,r2

		MOV	r0,r3
		BL	strlen			; \X r0=length
		MOV	r2,r0			; r3, r1 already set up
		MOV	r0,#1			; insert
		BL	zap_command

		PULL	"r1,r3"			; pull into same registers and do again
		ADD	r1,r1,r2		; adjust for previous insert

		MOV	r0,r3
		BL	strlen
		MOV	r2,r0
		MOV	r0,#1
		BL	zap_command

		BL	zap_stopop
		FNRTS

; \E r0 = param string
; \X r2, r3, r5
		LOCAL
getparams	LDRB	r5,[r0]			; first break
		CMP	r5,#0
		BEQ	fail$l
		ADD	r0,r0,#1		; skip break
		MOV	r2,r0			; store
loop$l		LDRB	r3,[r0],#1
		CMP	r3,#0
		BEQ	fail$l
		CMP	r5,r3
		BNE	loop$l
		; r2 points to first string, r0 to second, r5 is break
		MOV	r1,#0
		STRB	r1,[r0,#-1]		; terminate first string
		MOV	r3,r0
		MOV	pc,lr

fail$l		ADR	r0,mess$l
		MOV	r1,#(1:SHL:31)		; default delay, don't beep
		FNJSR
		FNcall	Zap_Warning
		FNRTV				; caused an error

mess$l		=	"Not enough parameters specified.", 0
		ALIGN

; \E r0=buffer for string, r1=handle, r2=buffer length
; \X r0, r2=first free byte in buffer
;    CS if eof read
		LOCAL

getlinefromfile
		FNJSR	"r0-r1,r5"
		ADD	r2,r2,r0
		SUB	r2,r2,#1
		MOV	r5,r0
loop$l		SWI	XOS_BGet
		BCS	eof$l
		CMP	r0,#32
		BLT	eof$l
		STRB	r0,[r5],#1
		CMP	r5,r2
		B	loop$l
eof$l		MOV	r0,#0
		STRB	r0,[r5],#1
		MOV	r2,r5
		FNRTS

; That's it
		END
