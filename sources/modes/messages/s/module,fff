; Messages mode
; all new MessageTrans colouring mode

 GET h.ZapMsg


mod_header	DCD	0				; start offset
		DCD	mod_init			; init code
		DCD	0				; finalisation
		DCD	0				; sevice handler
		DCD	mod_title			; title
		DCD	mod_help			; help
		DCD	0				; commands
		DCD	0				; the 4 SWI ones
		DCD	0				;
		DCD	0				;
		DCD	0				;
		DCD	0				; messages filename
		DCD	mod_flags			; flags

mod_title	=	"ZapMsg",0

mod_help	=	"Zap Messages mode",9,"2.00 (00 Jan 0000) © Zap developers",0
		ALIGN

mod_flags	DCD	1

		LOCAL


mod_init	FNJSR	"R0-R4,R11"
		MOV	R0,#18				; find Zap
		ADR	R1,Zap				;
		SWI	XOS_Module			;
		FNRTS	VS				;
		MOV	R12,R4				;
		ADR	R0,msg_modetable		; add our mode
		FNcall	Zap_AddMode			;
		FNRTS					;

Zap		= "Zap",0


msg_modetable	DCD	msg_modetable			; offset of mode table
		DCD	msg_title			; mode title string
		DCD	msg_author			; author string
		DCD	0				; base mode number
		DCD	1<<12 + 1<<13 + 1<<10		; messages, cloneable, block
		DCD	msg_init			; offset of initialisation code
		DCD	0				; offset of your menu
		DCD	msg_tableend-msg_modetable	; length of table
		DCD	0				; mode_postload
		DCD	0				; mode_presave
		DCD	0				; mode_loading
		DCD	0				; mode_start
		DCD	0				; mode_end
		DCD	0				; mode_width
		DCD	0				; mode_linecol
		DCD	0				; mode_lineoff
		DCD	0				; mode_clnlog
		DCD	0				; mode_clnphy
		DCD	0				; mode_clnoff
		DCD	0				; mode_nextline
		DCD	0				; mode_minus
		DCD	0				; mode_plus
		DCD	0				; mode_sminus
		DCD	0				; mode_splus
		DCD	0				; mode_cminus
		DCD	0				; mode_cplus
		DCD	msg_redrawline			; mode_redrawline
		DCD	0				; mode_redrawlnum
		DCD	0				; mode_char
		DCD	0				; mode_delete
		DCD	0				; mode_tab
		DCD	0				; mode_return
		DCD	0				; mode_renumber
		DCD	0				; mode_saveandrun
		DCD	0				; mode_linestart
		DCD	0				; mode_lineend
		DCD	0				; mode_linenext
		DCD	0				; mode_lineprev
		DCD	0				; mode_copy
		DCD	0				; mode_joinline
		DCD	0				; mode_splitline
		DCD	0				; mode_aligncaret
		DCD	0				; mode_command
		DCD	0				; mode_compile
		DCD	0				; mode_formattext
		DCD	0				; mode_run
		DCD	0				; mode_runandquit
		DCD	0				; mode_basic
		DCD	0				; mode_search
		DCD	0				; mode_replace
		DCD	0				; mode_selection
		DCD	0				; mode_click
		DCD	0				; mode_message
		DCD	0				; mode_setwidth
		DCD	0				; mode_listfns
		DCD	msg_prevline			; mode_prevline
		DCD	0				; mode_openwindow
		DCD	msg_interrogate			; mode_interrogate
		;DCD	0				; mode_returnword
		;DCD	0				; mode_help
		;DCD	0				; mode_stripspaces
msg_tableend

msg_title	= "Messages",0
msg_author	= "Christian Ludlam",0

		ALIGN

		LOCAL


; ----------- init options -------------

		FNAME	"msg_init"
msg_init
;		[ Debug={TRUE}
;		TEQ	R1,#0
;		MOVEQ	R0,#-1				; prevent zap killing my module
;		MOVEQ	PC,R14				; so we know where we error'd
;		]

;		TEQ	R1,#1				; initialising
;		BEQ	init_1$l			;
		TEQ	R1,#2				; initialised
		BEQ	init_2$l			;
		TEQ	R1,#13				; invalidate colour cache on
		TEQNE	R1,#14				;  redraw start/end
		MOVEQ	R1,#-1				;
		STREQ	R1,msg_colour			;
		TEQ	R1,#6				; fetch colours menu
		ADREQ	R1,colours$l			;
		MOV	PC,R14				;

init_2$l	FNJSR	"R1,R2,R8"			;
		MOV	R1,R0				; keep mode number
		MOV	R8,#0				; default options
		FNcall	Zap_GetModeWord			;
		FNRTS	VS				;
		TEQ	R0,#0				;
		BNE	checkopts$l			;

		; no options at all yet
		LDR	R0,default0$l			;
		MOV	R2,#0				; default word 0
		FNcall	Zap_ModeData			;
		LDR	R0,default1$l			;
		MOV	R2,#1				; and 1
		FNcall	Zap_ModeData			;
		MOV	R0,#4				; dummy, for compatibility
		FNcall	Zap_Claim			;
		FNRTS	VS				;
		MOV	R1,#4				; block length
		STR	R1,[R0]				;
		FNcall	Zap_PutModeWord			;
		MOV	R0,#numberofcolours		; and number of colours
		FNcall	Zap_ModeColourNum		;
		MOV	R2,#9				; and set up default colours
		BL	default_colours			;
		FNRTS					;

		; we have options, so validate them
checkopts$l	MOV	R0,#-1				; read number
		FNcall	Zap_ModeColourNum		;
		CMP	R0,#numberofcolours		;
		FNRTS	HS				;
		MOV	R0,#numberofcolours		; set the number
		FNcall	Zap_ModeColourNum		;
		MOV	R2,R0				;
		BL	default_colours			;
		FNRTS					;

default0$l	DCD	&10050050
default1$l	DCD	&0200000F
defaultmode$l	DCD	1				; nice non-zero value

colours$l	= "messages_colours",0
		ALIGN


		LOCAL

; E  r1 = mode number  r2 = number of existing colours  r8 = 0
		FNAME	"default_colours"
default_colours	FNJSR	"R4-R5"
		ADR	R4,table$l			; point to table
		SUB	R5,R2,#9			; subtract always colours
loop$l		LDR	R0,[R4,R5,LSL #2]		; load colour value
		FNcall	Zap_ModeColour			; add colour def
		ADD	R2,R2,#1			;
		ADD	R5,R5,#1			; next
		CMP	R2,#numberofcolours		; finished?
		BLS	loop$l				; nope
		FNRTS

table$l		=	10				; comments
		=	15				; substitutions
		=	1				; punctuation
		=	12				; replacement text
		=	9				; /
		=	13				; um...
		=	14				; aliases
		=	11				; colon
		=	3				; GSTrans
		=	14				; wildcards



		LOCAL

; --------------- redraw -----------------

msg_colour	DCD	0

;flags in r2
rf_newline	* 1<<8					; had an lf
rf_next		* 1<<9					; ready to move to next colour

rf_pc_next	* 1<<16					; return out of percent colour

rf_pun_osvar	* 1<<16					; entered punct colour via <
rf_pun_bar	* 1<<17					; entered punct colour via |

rf_gst_osvar	* 1<<16					; entered GSTrans colour via <OS$Var>


; r0		char
; r1		current column
; r2		colour
; r3		w_txtw
; r4		 0-7  cr
;		 8-15 flags
;		24-31 tab
; r5		apparent start
; r6		output pointer
; r7		input pointer
; r8/r9
; r10		split
; r11		bpl (line number)
; r12		Zap's workspace
; r14		temp


		FNAME	"msg_redrawline"
msg_redrawline	FNJSR	"R6,R11"
		LDR	R2,msg_colour			; get previous colour
		LDR	R3,[R8,#w_txtw]			;
		LDRB	R4,[R8,#w_cr]			;
		CMP	R2,#-1				;
		BNE	noreset$l			;
		MOV	R2,#c_fg			; init colour to first column
		LDR	R5,[R9,#f_ptr]			;
		LDR	R10,[R9,#f_bufl]		;
		ADD	R10,R10,R5			; return if at EOF
		TEQ	R7,R10				;
		FNRTS	EQ				;

		SUBS	R1,R7,R5			; get file offset
		BEQ	sof$l				; already at start
		MOV	R6,#0				;
backloop$l	SUB	R6,R6,#1			; 1 less character
		FNcall	Zap_ReadMinus
		TEQ	R0,R4				; cr?
		BEQ	gotback$l			; yes - at start of prev line
		TEQ	R1,#0
		BNE	backloop$l

gotback$l	FNcall	Zap_ReadC			; skip forward a char
		ADDS	R6,R6,#1			; and a character
		LDMPLFD	R13,{R6}			; restore output if at SOL

sof$l		LDR	R10,[R9,#f_splito]		; convert offset to address
		CMP	R1,R10				; and find end of section
		LDRHS	R10,[R9,#f_bufl]		; and apparant file start
		LDRHS	R14,[R9,#f_splits]		;
		LDR	R7,[R9,#f_ptr]			;
		MOV	R5,R7				;
		ADD	R10,R7,R10			;
		ADD	R7,R7,R1			;
		ADDHS	R7,R7,R14			;
		ADDHS	R5,R5,R14			;

noreset$l	LDRB	R0,[R8,#w_tabchar]		; load tab char
		ORR	R4,R4,R0,LSL #24		; patch in
		LDR	R11,[R8,#w_bpl]			; load bpl
newline$l	MOV	R1,#0				; reset column counter

main$l		CMP	R7,R10				; finished if at EOF
		FNRTS	EQ				;

		; check the colour (state) of previous char
		AND	R14,R2,#&FF			; return from single char colours
		TEQ	R14,#c_separator		;
		TEQNE	R14,#c_wildcard			;
		MOVEQ	R14,#c_fg			;

		TEQ	R14,#c_colon			; move to text state from token
		MOVEQ	R14,#c_text			;

		BIC	R2,R2,#&FF			;
		ORR	R2,R2,R14			;

		FNcall	Zap_ReadAddrAuto
		AND	R14,R4,#&FF			; mask cr char
		EOR	R2,R2,#rf_newline		; toggle newline flag
		TEQ	R0,R14				; at cr?
		TSTEQ	R2,#rf_newline			; yes - check flag
		MOVEQ	R2,#c_fg			; clear - set as label
		BEQ	main$l				; and carry on
		BIC	R2,R2,#rf_newline		; clear flag
		TEQ	R0,R14				; at cr?
		BEQ	nextchar$l

		TEQ	R0,R4,LSR #24			; check for TAB
		BEQ	tab$l

		AND	R14,R2,#&FF
		TEQ	R14,#c_text
		BEQ	text$l
		TEQ	R14,#c_percent
		TEQNE	R14,#c_aliases
		BEQ	percent$l
		TEQ	R14,#c_punctuation
		BEQ	punct$l
		TEQ	R14,#c_GSTrans
		BEQ	gst$l
		TEQ	R14,#c_comments
		BEQ	storechar$l

		; token part colouring
		TEQ	R0,#'/'
		BICEQ	R2,R2,#&FF
		ORREQ	R2,R2,#c_separator

		TEQ	R0,#'?'
		BICEQ	R2,R2,#&FF
		ORREQ	R2,R2,#c_wildcard

		TEQ	R0,#':'
		BICEQ	R2,R2,#&FF
		ORREQ	R2,R2,#c_colon

		TEQ	R0,#'#'
		TEQNE	R0,#';'				; not really MessageTrans syntax
		TEQNE	R0,#'|'				;
		BICEQ	R2,R2,#&FF
		ORREQ	R2,R2,#c_comments

		B	storechar$l

		; text part colouring
text$l		TEQ	R0,#'%'
		BNE	notpc$l
		BL	getahead$l
		TEQ	R14,#'0'
		TEQNE	R14,#'1'
		TEQNE	R14,#'2'
		TEQNE	R14,#'3'
		TEQNE	R14,#'%'
		BICEQ	R2,R2,#&FF
		ORREQ	R2,R2,#c_percent
		BEQ	storechar$l

notpc$l		TEQ	R0,#'`'
		BICEQ	R2,R2,#&FF
		ORREQ	R2,R2,#c_aliases
		BEQ	storechar$l

		TEQ	R0,#'<'
		BICEQ	R2,R2,#&FF
		ORREQ	R2,R2,#c_punctuation
		ORREQ	R2,R2,#rf_pun_osvar
		BEQ	storechar$l

;		TEQ	R0,#'>'
;		BICEQ	R2,R2,#&FF
;		ORREQ	R2,R2,#c_aliases
;		BEQ	storechar$l

		TEQ	R0,#'|'
		BICEQ	R2,R2,#&FF
		ORREQ	R2,R2,#c_punctuation
		ORREQ	R2,R2,#rf_pun_bar
		B	storechar$l

		; substitution colouring
percent$l	TST	R2,#rf_pc_next			; go back to text colour
		BICNE	R2,R2,#&FF			;
		BIC	R2,R2,#rf_pc_next		;
		ORRNE	R2,R2,#c_text			;
		BNE	text$l				; and treat it as text
		ORR	R2,R2,#rf_pc_next		;
		B	storechar$l

		; punctuation colouring
punct$l		TST	R2,#rf_pun_osvar		; deal with <OS$Var>
		BEQ	notosvar$l			;
		BL	is_osvar$l			;
		BIC	R2,R2,#&FF			;
		BIC	R2,R2,#rf_pun_osvar		;
		ORREQ	R2,R2,#c_GSTrans		;
		ORREQ	R2,R2,#rf_gst_osvar		;
		ORRNE	R2,R2,#c_text			;
		BNE	text$l				;
		B	storechar$l			;

notosvar$l	TST	R2,#rf_pun_bar			; seal with M in |M
		BEQ	notbar$l			;
		BIC	R2,R2,#&FF			;
		BIC	R2,R2,#rf_pun_bar		;
		ORR	R2,R2,#c_GSTrans		;
		B	storechar$l			;

notbar$l	BIC	R2,R2,#&FF			; deal with >
		ORR	R2,R2,#c_text			;
		B	text$l				;

		; GSTrans colouring
gst$l		TST	R2,#rf_gst_osvar		; |M - return to text colour
		BICEQ	R2,R2,#&FF			;
		ORREQ	R2,R2,#c_text			;
		BEQ	text$l				;

		TEQ	R0,#'>'
		BICEQ	R2,R2,#&FF			;
		BICEQ	R2,R2,#rf_gst_osvar		;
		ORREQ	R2,R2,#c_punctuation		;

		; store the output
storechar$l	CMP	R6,#0				; store fg colour
		ADDGT	R14,R6,R3,LSL #2		;
		STRGTB	R2,[R14,R1]			;

storenocol$l	CMP	R6,#0				; store char
		STRGT	R0,[R6,R1,LSL #2]		;

		MOVGT	R0,#c_bg			; store bg colour
		ADDGT	R14,R3,R3,LSL #2		;
		ADDGT	R14,R14,R6			;
		STRGTB	R0,[R14,R1]			;

		ADD	R1,R1,#1			; inc column

nextchar$l	CMP	R6,#0				; check if we've reached physical line start
		ADDLTS	R6,R6,#1			;
		BMI	main$l				;
		LDREQ	R6,[R13]			;
		BEQ	newline$l			;
		AND	R14,R4,#&FF			; check for newline
		TEQ	R0,R14				;
		BEQ	eol$l				;

		ORR	R2,R2,#rf_newline		;
noteol$l	TEQNE	R1,R11				; at bpl?
		BICNE	R2,R2,#rf_newline		; nope - clear flag
		BNE	main$l				;

		; hit bpl, so stop. if the next char is cr, skip it.
		PUSH	"R5,R7,R10"			;
		TEQ	R10,#0				; check for EOF
		MOVEQ	R0,#0				;
		FNcallc	Zap_ReadAddrAuto,NE		;
		AND	R14,R4,#&FF			; mask cr char
		TEQ	R0,R14				; cr?
		PULL	"R5,R7,R10",NE			; restore if not
		ADDEQ	R13,R13,#12

eol$l		LDREQ	R0,[R13,#4]			; inc line number
		ADDEQ	R0,R0,#1			;
		STREQ	R0,[R13,#4]			;
		MOVEQ	R2,#c_fg			; init colour for next line
		AND	R0,R4,#&FF<<16			; mask bpl
		TEQ	R1,R0,LSR #16			; at bpl?
		BICNE	R2,R2,#rf_newline		; nope - clear flag
		STR	R2,msg_colour			; store colour for next line
		FNRTS					; done

tab$l		MOV	R0,R6				;
		FNcall	Zap_RedrawTab			;
		B	nextchar$l			;


; read ahead one character
; returns it in R14
getahead$l	FNJSR	"R0,R1,R5,R7,R10"
		FNcall	Zap_ReadAddrAuto,R1
		MOV	R14,R0
		FNRTS

; return if the character is a GSTrans-style OS variable
; returns EQ if ok
is_osvar$l	FNJSR	"R0,R1,R5,R7,R10"
osvloop$l	CMP	R10,#1				; return NE if off eof
		FNRTS	LO				;
		FNcall	Zap_ReadAddrAuto,R1		;
		TEQ	R0,#'>'				;
		FNRTS	EQ				;
		CMP	R0,#' '+1			; allow all chars > space
		BHS	osvloop$l			;
		FNRTS					;


		LOCAL


; -------------- prevline ----------------

		FNAME	"msg_prevline"
msg_prevline	SUBS	R0,R0,#32			; for GSTrans sequences
		MOVMI	R0,#0				;
		MOV	PC,R14				;



; ------------- interrogate --------------

		FNAME	"msg_interrogate"
msg_interrogate
		TEQ	R0,#26				; variable tabstops
		TEQNE	R0,#27				; UTF-8
		TEQNE	R0,#28				; Wide redraw
		MOVEQ	R0,#0
		MOVEQ	PC,R14
;		TEQ	R0,#15				; colour use
;		MOVEQ	R0,#3
;		MOVEQ	PC,R14

		LDR	R9,[R13]			; get our mode number off stack
		MOV	R11,#e_interrogate
		FNjump	Zap_BaseMode


	END

