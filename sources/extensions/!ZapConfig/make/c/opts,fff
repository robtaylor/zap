/*	opts.c
	© James Aylett	*/

#include "opts.h"

void _save_misc(BOOL flag)
{
  int code;
  FILE *file;

  /* Now we can save the file! */
  /* Update TempParsed version, then build new keys file from TempParsed */
  file=fopen("<ZapConfig$Dir>.TempParsed.misc","w");
  if(file==NULL)
    makeerror(TRUE,"EBadInternals");

  /* Generic Zap keys file header */
  fprintf(file, "\nSearch macros:\n\n");

  /* Note: no compaction for search macros currently :-( */

  for(code=0x200; code<0x400; code++)
  {
    int l;
    if(code==0x300)
    {
      /* Insert more information :-) */
      fprintf(file, "\nOther variables:\n\n");
    }
    if(KeysFile[code-0x200]!=NULL)
    {
      /* We've got an entry */

      /* Okay, so we've got a variable at code */
      /* Let's write something :-) */

      other_var_to_text(code);
      /* Returns in output - add tabs */
      l=strlen(output);
      if(l<8)
      {
        output[l++]=9;
        output[l++]=9;
      }
      else
      {
        if(l<16)
        {
          output[l++]=9;
        }
      }
      /* And add keycode */
      sprintf(output+l,"&%3.3x\t", code);
      l=strlen(output);
      strcpy(output+l,KeysFile[code-0x200]);

      /* And add this to the file :-) */
      fprintf(file, "%s\n", output);
    }
  }

  fclose(file);
}

char *other_var_to_text(int var)
{
  output[0]=NULL;
  if(var>=0x200 && var<0x300)
  {
    sprintf(output,"Macro %x",var-0x200);
    return(output);
  }
  switch(var)
  {
    case 0x300:strcpy(output,"Standard date format\t\t\t"); break;
    case 0x301:strcpy(output,"Standard time format\t\t\t"); break;
    case 0x302:strcpy(output,"Default anti-aliased font\t\t"); break;
    case 0x303:strcpy(output,"End of file gap (lines)\t\t\t"); break;
    case 0x304:strcpy(output,"Anti-aliased font size (pts)\t\t"); break;
    case 0x305:strcpy(output,"Font char top reduction (pixs)\t\t"); break;
    case 0x306:strcpy(output,"Font char bot reduction (pixs)\t\t"); break;
    case 0x307:strcpy(output,"Quick print EOL string (GS)\t\t"); break;
    case 0x308:strcpy(output,"Left cursor indent (chars)\t\t"); break;
    case 0x309:strcpy(output,"Right cursor indent (chars)\t\t"); break;
    case 0x30a:strcpy(output,"Top cursor indent (chars)\t\t"); break;
    case 0x30b:strcpy(output,"Bottom cursor indent (chars)\t\t"); break;
    case 0x30c:strcpy(output,"Window left margin (os)\t\t\t"); break;
    case 0x30d:strcpy(output,"Window right margin (os)\t\t"); break;
    case 0x30e:strcpy(output,"Type of file created on SELECT\t\t"); break;
    case 0x30f:strcpy(output,"Type of file create on ADJUST\t\t"); break;
    case 0x310:strcpy(output,"Font char left reduction (pixs)\t\t"); break;
    case 0x311:strcpy(output,"Font char right reduction (pix)\t\t"); break;
    case 0x314:strcpy(output,"Minibuffer size (chars)\t\t\t"); break;
    case 0x315:strcpy(output,"Default indent string\t\t\t"); break;
    case 0x316:strcpy(output,"Cursor flash on time (cs)\t\t"); break;
    case 0x317:strcpy(output,"Cursor flash off time (cs)\t\t"); break;
    case 0x318:strcpy(output,"Minimum auto-width width (char)\t\t"); break;
    case 0x319:strcpy(output,"Maximum auto-width width (char)\t\t"); break;
    case 0x31a:strcpy(output,"Default low-res bitmap font\t\t"); break;
    case 0x31b:strcpy(output,"Default hi-res bitmap (YEig=1)\t\t"); break;
    case 0x31c:strcpy(output,"Attributes for new files\t\t"); break;
    case 0x31d:strcpy(output,"Dialogue box offsets (OS-Units)\t\t"); break;
//    case 0x31e:strcpy(output,"Outline font offsets (OS-Units)\t\t"); break;
    case 0x31e:strcpy(output,"Don't use: deprecated\t\t\t"); break;
    case 0x31f:strcpy(output,"Quick print SOF string (GS)\t\t"); break;
    case 0x320:strcpy(output,"Quick print EOF string (GS)\t\t"); break;
    case 0x321:strcpy(output,"Minimum time between backups (seconds)\t"); break;
  }
  return(output);
}

void _save_keyn(BOOL flag)
{
  int code;
  FILE *file;

  /* Find out if the user wants to save or not ... */

  /* Now we can save the file! */
  /* Update TempParsed version, then build new keys file from TempParsed */
  file=fopen("<ZapConfig$Dir>.TempParsed.keyn","w");
  if(file==NULL)
    makeerror(TRUE,"EBadInternals");

  /* Generic Zap keys file header */
  fprintf(file, "\nKey map variables::\n\n");

  /* Default entry */
  if(KeysFile[0]!=NULL)
    fprintf(file, "Default key map\t&400\t%s\n", KeysFile[0]);
  else
    fprintf(file, "Default key map\t&400\t0\n");

  for(code=0x401; code<0x500; code++)
  {
    int l;
    if(KeysFile[code-0x400]!=NULL)
    {
      /* We've got an entry */

      /* Okay, so we've got a variable at code */
      /* Let's write something :-) */

      sprintf(output, "Map %i range\t", code-0x400);
      l=strlen(output);

      /* And add keycode */
      sprintf(output+l,"&%3.3x\t", code);
      l=strlen(output);
      strcpy(output+l,KeysFile[code-0x400]);

      /* And add this to the file :-) */
      fprintf(file, "%s\n", output);
    }
  }

  fclose(file);

}

void _save_fileopts(BOOL flag)
{
  FILE *file, *filehigh, *filewhich;
  int code;

  /* Now we can save the file! */
  /* Update TempParsed version, then build new keys file from TempParsed */
  file=fopen("<ZapConfig$Dir>.TempParsed.TypesLow","w");
  if(file==NULL)
    makeerror(TRUE,"EBadInternals");

  filehigh=fopen("<ZapConfig$Dir>.TempParsed.TypesHigh","w");
  if(filehigh==NULL)
  {
    fclose(file);
    makeerror(TRUE,"EBadInternals");
  }

  /* Path recognition */

  /* Headers */
  fprintf(file, "Paths:\n(\\#\\* matches anything, \\o\\* anything but \'.\', \\ commands can be used)\n");
  fprintf(file, "(-1 filetype matches anything - the 5xx numbers don't matter)\n\n");

  fprintf(filehigh, "High priority file types. Intended for user's choices.\n");
  fprintf(filehigh, "See TypesLow for details and examples on format.\n\n");

  for(code=0; code<0x100; code++)
  {
    if(KeysFile[code]!=NULL)
    {
      if (KeysFile[code][0]=='*')
        filewhich=filehigh;
      else
        filewhich=file;
      /* First, we add the &5xx number */
      fprintf(filewhich, "&500\t");
      /* Next we add the contents of KeysFile[code] */
      if (KeysFile[code][0]=='*')
        fprintf(filewhich, "%s\n", KeysFile[code]+1);
      else
        fprintf(filewhich, "%s\n", KeysFile[code]);
      /* That's it! */
    }
  }

  /* Filetype recognition */

  /* Headers */
  fprintf(file, "\nFile types:\n(+ means load even when shift not held, paths checked first if above)\n");
  fprintf(file, "(mode names can be followed by a list of commands eg Text:Down)\n\n");

  fprintf(filehigh, "\n\n");

  for(code=0x100; code<0x1101; code++)
  {
    if(KeysFile[code]!=NULL)
    {
      if (KeysFile[code][0]=='*')
        filewhich=filehigh;
      else
        filewhich=file;
      /* First, textual equivalent */
      if (code==0x1100)
        fprintf(filewhich, "Untyped\t\t");
      else
      {
        /* look it up first as File$Type_(code) */
        char temp[20];

        sprintf(output,"File$Type_%3.3x",code-0x100);
        if (OS_ReadVarVal(output, temp, 20)!=TRUE)
          fprintf(filewhich, "\t\t");
        else
        {
          if (strlen(temp)<8)
            fprintf(filewhich, "%s\t\t", temp);
          else
            fprintf(filewhich, "%s\t", temp);
        }
      }
      /* Next, &1xxx number */
      fprintf(filewhich, "&%4.4x\t", code + 0xF00);
      /* Next we add the contents of KeysFile[code] */
      if (KeysFile[code][0]=='*')
        fprintf(filewhich, "%s\n", KeysFile[code]+1);
      else
        fprintf(filewhich, "%s\n", KeysFile[code]);
      /* That's it! */
    }
  }

  fclose(file);
  fclose(filehigh);
}

void load_fileopts()
{
  // Note that this doesn't cope with more than one variable per line, since
  // it really doesn't make sense (okay, so it *could* happen in the &1xxx
  // variables ...). So we just drop anything along those lines.
  char line[2048];
  int i,i2,i3,i500_next=0;
  FILE *file;

  /* And load in keys file */
  free_keys();

  /* First we do Types Low */

  file=fopen("<ZapConfig$Dir>.TempParsed.TypesLow","r");
  if(file==NULL)
  {
    /* Re-open the option set just in case ... */
    open_optionset();
    file=fopen("<ZapConfig$Dir>.TempParsed.TypesLow","r");
  }

  if(file==NULL)
    makeerror(TRUE,"EBadInternals");

  do
  {
    if(read_key(file, line, &i, &i3, &i2))
    {
      /* Now points to command line */
      /* Set i3 to the number in KeysFile, dependent on i */
      if (i>=0x500 && i<0x600)
      {
        if (i500_next == 0x100)
          /* Too many variables - warn ONCE and then forget */
          makeerror(FALSE,"ETooManyZapPaths");
        if (i500_next < 0x100)
          i3=i500_next;
        else
          i3=-1;
        i500_next++;
      }
      else
        i3=i-0xF00; /* &1xxx vars start at 0x100 */
      if (i3>=0 && KeysFile[i3]==NULL)
        KeysFile[i3]=memalloc(strlen(line)+1);
      strcpy(KeysFile[i3], line);
    }
  } while( ((i>=0x500 && i<0x600) || (i>=0x1000 && i<=0x2000)) && !feof(file));
  fclose(file);

  /* Now TypesHigh - the overrides */

  file=fopen("<ZapConfig$Dir>.TempParsed.TypesHigh","r");
  if(file==NULL)
  {
    /* Re-open the option set just in case ... */
    open_optionset();
    file=fopen("<ZapConfig$Dir>.TempParsed.TypesHigh","r");
  }

  if(file==NULL)
    makeerror(TRUE,"EBadInternals");

  do
  {
    if(read_key(file, line, &i, &i3, &i2))
    {
      /* Now points to command line */
      /* Set i3 to the number in KeysFile, dependent on i */
      if (i>=0x500 && i<0x600)
      {
        if (i500_next == 0x100)
          /* Too many variables - warn ONCE and then forget */
          makeerror(FALSE,"ETooManyZapPaths");
        if (i500_next < 0x100)
          i3=i500_next;
        else
          i3=-1;
        i500_next++;
      }
      else
        i3=i-0xF00; /* &1xxx vars start at 0x100 */
      if (i3>=0 && KeysFile[i3]==NULL)
        KeysFile[i3]=memalloc(strlen(line)+2);
      KeysFile[i3][0]='*'; /* override */
      strcpy(KeysFile[i3]+1, line);
    }
  } while( ((i>=0x500 && i<0x600) || (i>=0x1000 && i<=0x2000)) && !feof(file));
  fclose(file);
}

void _save_keys(BOOL flag, int keymap)
{
  int code,i2;
  FILE *file;

  /* Now we can save the file! */
  /* Update TempParsed version, then build new keys file from TempParsed */
  if(keymap==0)
    file=fopen("<ZapConfig$Dir>.TempParsed.key0","w");
  else
    file=fopen("<ZapConfig$Dir>.TempParsed.keyx","w");
    /* write keyx, then filter keym to create keym2, then copy keym2 to keym and delete keyx */
  if(file==NULL)
    makeerror(TRUE,"EBadInternals");

  KeyLowest=0x3000;
  KeyHighest=-1;

  /* Generic Zap keys file header */
  if(keymap==0)
  {
    fprintf(file, "Zap keys file (saved by ZapConfig)\n\nZap keymap:\n");
    fprintf(file, "Key:\t\tCode:\tCommand:\n\n");
  }

  for(code=0; code<0x200; code++)
  {
    int l;
    char temp[32];
    i2=code;
    if(KeysFile[i2]!=NULL)
    {
      /* We've got an entry */
      /* Now test to see if it's a recurrent entry ... */

      /*
      // Check for special *&xx case ... (scratch variables: t1, t2)
      */
      if(KeysFile[i2][0]=='*' && KeysFile[i2][1]=='&')
      {
        int t1,t2;

        t1=(int)strtol(KeysFile[i2]+2, NULL, 16);
        t2=t1;

        while ( KeysFile[code+1][0]=='*' &&
                KeysFile[code+1][1]=='&' &&
                t2==(t1+code-i2) &&
                code+1<0x200 )
        {
          t2=(int)strtol(KeysFile[code+1]+2, NULL, 16);
          /* Slightly bizarre method of doing this, since we actually want to check twice
           * Could have used if(t2!=(t1+code+1-i2)) continue;
           */
          if(t2==(t1+code+1-i2)) code++;
        }
      }

      while (!strcmp(KeysFile[code+1],KeysFile[i2]) && code+1<0x200)
        code++;
      /* Okay, so we've got a block of codes defined by i2 ... code */
      /* Let's write something :-) */
      if(i2<KeyLowest) KeyLowest=i2;
      if(code>KeyHighest) KeyHighest=code;
      if(i2==code)
      {
        zapcode_to_string(code);
        /* Returns in output - add tabs */
        l=strlen(output);
        if(l<8)
        {
          output[l++]=9;
          if(keymap==0)
            output[l++]=9;
        }
        else
        {
          if(l<16)
          {
            output[l++]=9;
          }
        }
        /* And add keycode */
        if(keymap==0)
          sprintf(output+l,"&%3.3x\t", i2);
        else
          sprintf(output+l,"&%5.5x\t", i2+0x10000*keymap);
        l=strlen(output);
        strcpy(output+l,KeysFile[i2]);
      }
      else
      {
        /*
        // Okay, this is more complex
        // Basically, we want to catch the following:
        //   Ascii chars (0x020 - 0x0ff)
        //   control keypads (0x121 - 0x12a)
        //   sc keypads (0x140 - 0x14a)
        //   shift keypads (0x168 - 0x17e)
        //   'As norm' (entry is '*')
        //
        // These are taken from Zap's base keys file, and make things look nicer
        */
        if(KeysFile[i2][0]=='*' && KeysFile[i2][1]==0)
        {
          strcpy(output,"As norm");
        }
        else
        {
          if(i2>=0x020 && i2<=0x0ff && code>=0x020 && code<=0x0ff)
          {
            strcpy(output,"Ascii chars");
          }
          else
          {
            if(i2>=0x121 && i2<=0x12a && code>=0x121 && code<=0x12a)
            {
              strcpy(output,"control keypads");
            }
            else
            {
              if(i2>=0x140 && i2<=0x14a && code>=0x140 && code<=0x14a)
              {
                strcpy(output,"sc keypads");
              }
              else
              {
                if(i2>=0x168 && i2<=0x17e && code>=0x168 && code<=0x17e)
                {
                  strcpy(output,"shift keypads");
                }
                else
                {
                  /* Normal range */
                  /* Put the second one in temp */
                  strcpy(temp, zapcode_to_string(code));
                  zapcode_to_string(i2);
                  l=strlen(output);
                  output[l++]='-';
                  strcpy(output+l, temp);
                }
              }
            }
          }
        }
        /* Tabs */
        l=strlen(output);
        if(l<8)
        {
          output[l++]=9;
          if(keymap==0)
            output[l++]=9;
        }
        else
        {
          if(l<16)
          {
            output[l++]=9;
          }
        }
        /* And add keycodes */
        if(keymap==0)
          sprintf(output+l,"&%3.3x-%3.3x ", i2, code);
        else
          sprintf(output+l,"&%5.5x-%5.5x\t", i2+0x10000*keymap, code+0x10000*keymap);
        l=strlen(output);
        strcpy(output+l,KeysFile[i2]);
      }
      /* And add this to the file :-) */
      fprintf(file, "%s\n", output);
    }
  }

  fclose(file);

  if(keymap!=0)
  {
    BOOL written=FALSE;
    FILE *keym, *keym2;    /* filter keym to keym2 via keyx, copy keym2 to keym, delete keyx */
    char temp[256], temp2[2048];
    int t,t2,k,len;

    file=fopen("<ZapConfig$Dir>.TempParsed.keyx","r");

    fseek(file,0,SEEK_END);
    len=(int)ftell(file);
    fseek(file,0,SEEK_SET);

    keym=fopen("<ZapConfig$Dir>.TempParsed.keym","r");
    keym2=fopen("<ZapConfig$Dir>.TempParsed.keym2","w");
    if(file==NULL || keym==NULL || keym2==NULL)
    {
      fclose(file);
      fclose(keym);
      fclose(keym2);
      makeerror(TRUE,"EBadInternals");
    }

    /* now filter keym via file to keym2 */
    do
    {
      temp[0]=0; t=0; temp2[0]=0; t2=0;
      do
      {
        temp[t]=fgetc(keym);
        if(t>=256) t=0;
      } while(temp[t++]!='&' && !feof(keym));

      if(!feof(keym))
      {
        do
        {
          temp2[t2]=fgetc(keym);
        } while(temp2[t2++]!='\n' && !feof(keym));

        k=(int)strtol(temp2,NULL,16);

        /* k is keycode */
        if( ((k & 0xff0000) >> 16) == keymap)
        {
          /* substitute entire keymap */
          if(!written)
          {
            if(len>0)
            {
              if(keymap==1)
                fprintf(keym2, "\nAlternate keymaps:\n\n");
              fprintf(keym2, "\nKeymap %2.2x:\n\n", keymap);
            }
            while(len>0)
            {
              if(len>500)
              {
                fread(temp2, 1, 500, file);
                fwrite(temp2, 1, 500, keym2);
                len-=500;
              }
              else
              {
                fread(temp2, 1, len, file);
                fwrite(temp2, 1, len, keym2);
                len=0;
              }
            }
            written=TRUE;
          }
        }
        else
        {
          fwrite(temp, 1, t, keym2);
          fwrite(temp2, 1, t2, keym2);
        }
      }
    } while(!feof(keym));

    if(!written)
    {
      /* write file now */
      if(keymap==1)
        fprintf(keym2, "\nAlternate keymaps:\n\n");
      fprintf(keym2, "\nKeymap %2.2x:\n\n", keymap);
      while(len>0)
      {
        if(len>500)
        {
          fread(temp2, 1, 500, file);
          fwrite(temp2, 1, 500, keym2);
          len-=500;
        }
        else
        {
          fread(temp2, 1, len, file);
          fwrite(temp2, 1, len, keym2);
          len=0;
        }
      }
    }

    fclose(file);
    fclose(keym);
    fclose(keym2);

    /* finally copy keym2 to keym and delete keyx */
    OS_CLI("Copy <ZapConfig$Dir>.TempParsed.keym2 <ZapConfig$Dir>.TempParsed.keym ~C~DF~N~V");
  }
}

void _load_keys(int keymap)
{
  char line[2048];
  int i,i2,i3, i4;
  FILE *file;

  /* And load in keys file */
  free_keys();

  if(keymap==0)
    file=fopen("<ZapConfig$Dir>.TempParsed.key0","r");
  else
    file=fopen("<ZapConfig$Dir>.TempParsed.keym","r");
  if(file==NULL)
  {
    /* Re-open the option set just in case ... */
    open_optionset();
    if(keymap==0)
      file=fopen("<ZapConfig$Dir>.TempParsed.key0","r");
    else
      file=fopen("<ZapConfig$Dir>.TempParsed.keym","r");
  }

  if(file==NULL)
    makeerror(TRUE,"EBadInternals");

  do
  {
    if(read_key(file, line, &i, &i3, &i2))
    {
      /* Now points to command line */
      for(i3=i; i3<=i2; i3++)
      {
        if(i3>=0x10000 * keymap && i3<0x10000*keymap+0x200)
        {
          if(line[0]=='*' && line[1]=='&' && i!=i2)
          {
            /*
            // Okay, this is bizarre, I know, but it's entirely Dominic's fault :-)
            // Basically, if we have say *&30 for a range, that means start renumbering
            // this range from &30, rather than shift all to &30. Okay, let's do that then ...
            */
            i4=(int)strtol(line+2, NULL, 16);
            i4+=i3-i;
            if (KeysFile[i3 & 0x1ff]!=NULL)
              memfree(KeysFile[i3 & 0x1ff]);
            KeysFile[i3 & 0x1ff]=memalloc(6);
            sprintf(KeysFile[i3 & 0x1ff], "*&%3.3x", i4);
          }
          else
          {
            if (KeysFile[i3 & 0x1ff]!=NULL)
              memfree(KeysFile[i3 & 0x1ff]);
            KeysFile[i3 & 0x1ff]=memalloc(strlen(line)+1);
            strcpy(KeysFile[i3 & 0x1ff], line);
          }
        }
      }
    }
  } while(i<0x10000*keymap+0x200 && i2<0x10000*keymap+0x200 && !feof(file));
  fclose(file);
}

char *zapcode_to_string(int key)
{
  char temp[256];
  output[0]=NULL;

  /* Alphas (0x7f a special case) */
  if(key==0x7f)
  {
    strcpy(output,"Delete"); return(output);
  }
  if(key>=0x21 && key<=0xff)
  {
    output[0]=key; output[1]=NULL; return(output);
  }

  /* sc+ alphas */
  if(key>=0x101 && key<=0x11a)
  {
    output[0]='s'; output[1]='c'; output[2]=key-0xc0; output[3]=NULL;
    return(output);
  }
  /* c+ alphas */
  if(key>=0x001 && key<=0x01a)
  {
    output[0]='c'; output[1]=key+0x040; output[2]=NULL; return(output);
  }

  if(key>=0x121 && key<=0x127)
  {
    sprintf(temp, "c%s", key_to_string(key+0x040));
    strcpy(output,temp);
    return(output);
  }
  if(key>=0x130 && key<=0x139)
  {
    sprintf(temp, "c%s", key_to_string(key+0x100));
    strcpy(output,temp);
    return(output);
  }
  if(key>=0x141 && key<=0x147)
  {
    sprintf(temp,"sc%s", key_to_string(key+0x020));
    strcpy(output,temp);
    return(output);
  }
  if(key>=0x150 && key<=0x159)
  {
    sprintf(temp,"sc%s", key_to_string(key-0x120));
    strcpy(output,temp);
    return(output);
  }
  if(key>=0x161 && key<=0x167)
  {
    key_to_string(key);
    return(output);
  }
  if(key>=0x171 && key<=0x177)
  {
    sprintf(temp,"s%s", key_to_string(key-0x010));
    strcpy(output,temp);
    return(output);
  }
  if(key>=0x180 && key<=0x18f)
  {
    key_to_string(key);
    return(output);
  }
  if(key>=0x190 && key<=0x19f)
  {
    sprintf(temp, "s%s", key_to_string(key-0x10));
    strcpy(output,temp);
    return(output);
  }
  if(key>=0x1a0 && key<=0x1af)
  {
    sprintf(temp, "c%s", key_to_string(key-0x20));
    strcpy(output,temp);
    return(output);
  }
  if(key>=0x1b0 && key<=0x1bf)
  {
    sprintf(temp,"sc%s", key_to_string(key-0x30));
    strcpy(output,temp);
    return(output);
  }
  if(key>=0x1c0 && key<=0x1cf)
  {
    key_to_string(key);
    return(output);
  }
  if(key>=0x1d0 && key<=0x1df)
  {
    sprintf(temp, "s%s", key_to_string(key-0x10));
    strcpy(output,temp);
    return(output);
  }
  if(key>=0x1e0 && key<=0x1ef)
  {
    sprintf(temp, "c%s", key_to_string(key-0x20));
    strcpy(output,temp);
    return(output);
  }
  if(key>=0x1f0 && key<=0x1ff)
  {
    sprintf(temp, "sc%s", key_to_string(key-0x30));
    strcpy(output,temp);
    return(output);
  }

  /* Remainder */
  switch(key)
  {
    case 0x1b:case 0x1c:case 0x1d:case 0x1e:
      key_to_string(key);
      break;
    case 0x11b:case 0x11c:case 0x11d:case 0x11e:
      sprintf(temp, "s%s", key_to_string(key-0x100));
      strcpy(output,temp);
      break;
    case 0x13b:case 0x13c:case 0x13d:case 0x13e:
      sprintf(temp, "c%s", key_to_string(key-0x120));
      strcpy(output,temp);
      break;
    case 0x15b:case 0x15c:case 0x15d:case 0x15e:
      sprintf(temp, "sc%s", key_to_string(key-0x140));
      strcpy(output,temp);
      break;
    case 0x1f: strcpy(output,"cDelete"); break;
    case 0x11f: strcpy(output,"scDelete"); break;
    case 0x17f: strcpy(output,"sDelete"); break;
    case 0x000: strcpy(output,"cSpace"); break;
    case 0x100: strcpy(output,"scSpace"); break;
    case 0x120: strcpy(output,"sSpace"); break;
    case 0x12b: strcpy(output,"c["); break;
    case 0x12c: strcpy(output,"c\\"); break;
    case 0x12d: strcpy(output,"c]"); break;
    case 0x12f: strcpy(output,"c-"); break;
    case 0x14b: strcpy(output,"sc["); break;
    case 0x14c: strcpy(output,"sc\\"); break;
    case 0x14d: strcpy(output,"sc]"); break;
    case 0x14f: strcpy(output,"sc-"); break;
  }
  return(output);
}

/* minkey is inclusive, maxkey exclusive */
void read_keys(char *filename, int minkey, int maxkey, int shiftkey)
{
  char line[2048];
  int i,i2,i3;
  FILE *file;

  free_keys();

  file=fopen(filename,"r");
  if (file==NULL)
  {
    open_optionset();
    file=fopen(filename,"r");
  }
  if (file==NULL)
    makeerror(TRUE,"EBadInternals");

  do
  {
    if (read_key(file, line, &i, &i3, &i2))
    {
      /* Now points to command line */
      for(i3=i; i3<=i2; i3++)
      {
        if (i3>=minkey && i3<maxkey)
        {
          if (KeysFile[i3-shiftkey]!=NULL)
            memfree(KeysFile[i3-shiftkey]);
          KeysFile[i3-shiftkey] = memalloc(strlen(line)+1);
          strcpy(KeysFile[i3-shiftkey], line);

//          sprintf(output,"Read variable &%x as %s.\n", i3, line);
//          reporterror(0,output,1,"ZapConfig");

        }
      }
    }
  } while(!feof(file));
  fclose(file);
}

int read_key(FILE *file, char *line, int *i, int *i3, int *i2)
{
  char g;

  do
  {
    g=fgetc(file);
  } while(g!='&' && !feof(file));

  if (!feof(file))
  {
    fscanf(file, "%s", line); // ### buffer overflow possible

    *i=(int)strtol(line,NULL,16);

    *i3=0;
    while(line[*i3]!='-' && *i3<strlen(line))
    {
      (*i3)++;
    }
    if (line[(*i3)++]=='-')
    {
      *i2=(int)strtol(line+(*i3), NULL, 16);
    }
    else
    {
      *i2=*i;
    }

    *i3=0;
    do
    {
      g=fgetc(file);
    } while(g==' ' || g==9);
    line[(*i3)++]=g;
    while(line[(*i3)-1]!='\n' && !feof(file))
    {
      line[*i3]=fgetc(file);

//      sprintf(output,"Added %c (%d); %s.\n", line[*i3],line[*i3],line);
//      reporterror(0,output,1,"ZapConfig");

      (*i3)++;
    }
    line[--(*i3)]=NULL; /* terminate string */
    return TRUE;
  }
  else
    return FALSE;
}
