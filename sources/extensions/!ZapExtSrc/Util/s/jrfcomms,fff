; Zap Util Command Extension
; Copyright (C) 1998 Zap Developers
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
; Util commands by Justin Fletcher
;
; NOTIFYUSER		- Display a message in the minibuffer
; OPENFILE		- Broadcast DataOpen / run the file on bounce

; Includes
		GET	h.ZapUtil
		GET	h.coreutils
		GET	h.dsutils
		GET	h.module

; What we give to other people
		EXPORT	jrf_notifyuser
		EXPORT	jrf_openfile

; NOTIFYUSER - displays the string parameter in the minibuffer and
; pauses for a short time. Note that multiple instances of this command
; in a single MULTICOMMAND won't work properly.
		LOCAL

		&	(3<<3)+(1<<8)
		; string param, call me before inserting into the minibuffer
jrf_notifyuser
		FNJSR	"r0-r5"
		TEQ	r2,#0				; init
		BEQ	prompt$l
		STR	r2,[sp]				; insert character specified
		FNRTS					; (ie: r0 pulled here is r2 above)

prompt$l	BL	strlen				; \X r0 length of string
		ADD	r0,r0,#12			; space for some registers
		FNcall	Zap_Claim
		FNRTS	VS
		MOV	r3,r0				; store
		STMIA	r0!,{windptr,fileptr}		; push them into our new stack space
		LDR	r2,[sp]				; this is the r0 stored at FNJSR above
		MOV	r1,r0				; destination
		BL	strcopy				; r1 dest, r2 source,
							; \X r1,r2 after terminators
		MOV	r1,#-1				; shortest delay possible
		ADR	r2,callback$l
		FNcall	Zap_CallBack			; r3 => r8/r9/<string>
		FNRTS

; Need to use a CallBack because otherwise the window is cleared by
; subsequent commands.

; alternate (doesn't work, although it would look better ...):
;callback$l
;		FNJSR	"r0-r9"
;		PUSH	"r11"
;		LDMIA	r11!,{windptr,fileptr}
;		MOV	r0,r11
;		MOV	r1,#(3:SHL:30)			; don't beep, no "Warning: " prefix
;		FNcall	Zap_Warning
;		FNRTS

callback$l
		FNJSR	"r0-r9"
		PUSH	"r11"				; so we can free the block later
		LDMIA	r11!,{windptr,fileptr}		; get our parameters
		FNcall	Zap_MiniClear			; clear the minibuffer
		ADR	r7,jrf_notifyuser		; command to call on return
		FNcall	Zap_MiniStart
		MOV	r0,r11				; string to display
		FNcall	Zap_MiniPrompt
		FNcall	Zap_MiniUpdate
		PULL	"r0"				; block to free
		FNcall	Zap_Free
		FNRTS

		LOCAL
; OPENFILE
; Save if modified.
; Broadcast DataOpen; on bounce, Wimp_StartTask the file instead.
		DCD	3
		; don't need windptr, cursorptr
jrf_openfile
		FNJSR
		LDR	r0,[fileptr,#f_name]
		BL	zap_checkfilename
		TEQ	r0,#0
		BNE	beep_and_exit$l
		FNcall	Zap_TestChanged
		BEQ	nosave$l
		BL	zap_savefile
		TEQ	r0,#0
		BNE	beep_and_exit$l

nosave$l
		; we need to grab a message block, set up Message_DataOpen,
		; send it registering our bounce code, and have the
		; bounce code call Wimp_StartTask on the file.
		MOV	r0,#256
		FNcall	Zap_Claim			; a message block
		FNRTS	VS
		MOV	r3,r0

		; set up Message_DataOpen block
		ADD	r1,r3,#44
		LDR	r2,[fileptr,#f_name]
		BL	strcopy
		MOV	r1,r3

		MOV	r0,#0
		STR	r0,[r1,#20]
		STR	r0,[r1,#28]
		STR	r0,[r1,#32]

		LDR	r0,[fileptr,#f_load]
		CMP	r0,#(0xff:SHL:24)
		MOVCS	r0,r0,LSL #12			; clear top 12 bits
		MOVCS	r0,r0,LSR #20			; file type
		MOVCC	r0,#-1				; no file type
		STR	r0,[r1,#40]

		MOV	r2,#0				; broadcast
		MOV	r3,#44				; offset of terminating string
		ADD	r3,r3,#(1:SHL:31)
		ADR	r5,retcode$l
		FNcall	Zap_GetFileOff
		MOV	r6,r0				; so we know which file to deal with
		MOV	r0,#5+(2_1101:SHL:28)		; DataOpen; interested in bounces and replies
		FNcall	Zap_SendMessage

		MOV	r0,r1
		FNcall	Zap_Free

		FNRTS

; \E r11 file offset number, r0 action
retcode$l
		CMP	r0,#19
		MOVNE	pc,lr

		FNJSR
		MOV	r0,r11
		FNcall	Zap_ConvFileOff			; \X r9
		; send file to Wimp_StartTask
		LDR	r0,[fileptr,#f_name]
		SWI	XWimp_StartTask
		FNRTS

beep_and_exit$l	ADR	r0,beep$l
		ORR	r0,r0,#1:SHL:31			; don't learn
		FNcall	Zap_CommandString
		FNRTSS					; status flags too
beep$l		=	"BEEP", 0
		ALIGN

; That's it
		END
