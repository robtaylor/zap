\#
\# $Id: Chapter08,fff,v 1.1 1998-12-03 15:49:04 dj Exp $
\#
\# Manual.Section08/src
\# Search and replace
\# Original author: James Aylett
\#
\# This is largely based on section D (Search and replace) from the original
\# manual.
\#

\C{Searching} Searching

Zap's \i{search} system is quite powerful, and is based loosely on \i\e{Emacs} regular expression searching. There are a variety of ways in which you can use it; the main ones are \i{search to cursor}, \i{search to window}, \i{replace}, and \I{i\-search}incremental (or keyboard) search. These are started by \c{F4}, \c{F7}, \c{sF4} and \c{cS}/\c{cR} (for forward/backward incremental search) respectively. The first three use similar dialogue boxes.

The first two are essentially the same, with one important difference: search to cursor will jump the cursor to the search match, while search to window creates a \e{throwback buffer} containing all the matches (search to window is also sometimes called search to buffer). See \k{Throwback mode} for more information about throwback buffers.

The Zap search window is split into several sections. In the first column is a set of search options; the second column gives the direction (forward, backward, forward from the start of the file, or all files starting from the start of the first one); and the final column gives some more options. Below these columns are the search expression (and, for the replace dialogue box, the replace expression) and a button labelled \c{Edit macros} which we'll cover later. In addition there are the expected \c{Cancel} and \c{Find} buttons, and a button marked \c{couNt} with a field below it - clicking this (or pressing \c{cN}, which is why the label is capitalised the way it is) will fill the field with the number of matches of the current search string.

\c{cP} inserts the current selection in Zap into whichever search/replace field has the caret. \c{cK} clears the history; \c{page up} and \c{page down} and the cursor keys navigate the history (cursor keys will move from field to field in the replace dialogue), and \c{cTab} replaces the entry with the one used in the last search.

\H{search options} Search options

A number of options control how Zap's search system works. These are: raw search, case sensitivity, macros, \\\-commands and to window.

\S{raw search} \i{Raw search}

If this option is turned on, then the whole file will be treated as a single line of text and searched accordingly. Thus \c{\\<} will match the start of the file, and \c{\\>} the end of the file (see \k{\\-commands} below). The reason it's called 'raw search' is that in this mode, Zap won't 'detokenise' first - so you're searching the raw data of the file. With this option turned off, the search is done line by line, but BASIC mode will detokenise the lines (so you are searching against what you see when Zap displays the file, rather than against what is stored); Code mode disassembles, and so on.

\S{case sensitive} \i{Case sensitivity}

If this option is turned on, strings of letters will only match if their case agrees; if off, matching ignores case. Case matching is currently only done for letters in ASCII - ie the letters A\-Z. Accented characters in \i{ISO Latin 1} are \e{not} understood for case insensitive matching.

\S{macros} \i{Macros}

To make your life easier, you can define up to sixteen macros. These are substituted in the search string before the search is actually performed. Macros may expand to anything - most usefully, they may contain \\\-commands, as defined below.

There are three default macros:

\b \c{*} - \c{\\.\\*} (matches anything).

\b \c{#} - \c{\\ #} (matches any character).

\b \c{\\d} - \c{\\[0-9]} (matches any digit).

The 'Edit macros' button in the search windows allows you to view and edit these macros; note, however, that to change them permanently you'll have to edit Zap's textual settings file. See \k{settings} for more information.

\S{towindow} \I{search to buffer}To window searching

This option is automatically turned off when you press \c{F4}, and turned on when you press \c{F7}. When it is turned off, the cursor will be moved to the first match, and subsequent matches may be got by pressing \c{sF7} (next match) and \c{scF7} (previous match). A beep will sound if there are no more matches, and the cursor will not move.

If it is turned on, all matches are placed in a new throwback file. Double clicking entries in this file will cause the cursor to jump to the corresponding match - see \k{Throwback mode} for more information.

\H{\\-commands} \i{\\\-commands}

The search dialogues have a switch to turn off \\\-commands. If you don't, then the character '\\' introduces a \e{wildcard}. The wildcards are documented below, and are also summarised in the search windows (although they are initially hidden - click the toggle size icon to reveal the wildcard descriptions).

In this list, \c{x} stands for any ASCII character unless otherwise mentioned:

\b \c{\\x} - Matches \c{x} case sensitively (irrespective of the case sensitivity option), unless \\x is mentioned below.

\b \c{`x} - Matches \c{x} only (without any replacement of macros).

\b \c{\\(, \\)} - Act as brackets for nesting expressions.

\b \c{\\\{, \\\}} - Act as bracket, but may be referred to in the replace string (see \k{replace} below).

\b \c{\\ #} - Matches any character. eg: \c{a\\#d} matches \c{and}, \c{aad} but not \c{ad}.

\b \c{\\.} - Matches any character except the return character.

\b \c{\\*} - Matches any number of the previous expression. eg: \c{fo\\*} matches \c{f}, \c{fo}, \c{foo} etc., and \c{\\(and\\)\\*} matches the empty string, \c{and}, \c{andand}, etc.

\b \c{\\%} - Matches any number of the previous expression. Thus \c{\\[0-9]\\%} matches \c{1} in \c{1pt}, and the \c{395} in \c{ab395rty}.

\b \c{\\|} - Matches either one expression or another. eg: \c{hello\\|goodbye\\|fred} matches \c{hello}, \c{goodbye} or \c{fred}. \c{\\(a\\|b\\)\\*} matches \c{abababa}, \c{abbba}, etc.

\b \c{\\[...]} - Matches a range of characters. eg \c{\\[a-zA-Z%]} matches any letter or a \c{%}. If a \c{^} if given after the opening bracket, then the range given is the characters that the expression \e{won't} match, so \c{\\[^abc]} matches any character except \c{a}, \c{b} or \c{c}. A \c{]} may be included in the range by placing it first in the list (after the \c{[} opening the list, or after the \c{^} if present).

\b \c{\\<} - Matches the null string at the start of a line.

\b \c{\\>} - Matches the null string at the end of a line. Note that this doesn't work properly; \c{phip\\>} won't match \c{phip} at the end of a line. Assuming your return character is the normal one, \c{phip\\n\\>} will do the trick (this will be fixed at some point).

\b \c{\\+} - Turns on case sensitivity for the following letters. Its effect stops at the next wildcard, bracket or command. It doesn't affect nested or bracketed statements. eg: \c{\\+Fred\\|Bill} will match \c{Fred} case sensitively, but not \c{Bill}.

\b \c{\\-} - As above, but turns off case sensitivity.

\b \c{\\\\} - Matches a \c{\\}.

\b \c{\\ddd} - Where d is any decimal digit, matches a byte of that value, eg: \c{\\0alf} matches the byte 0 followed by \c{alf}, and \c{\\233} matches the byte 233. Please note that \c{\\999} matches byte 99 following by \c{9}, since 999 > 255 (the greatest possible value of a byte).

\b \c{\\&hh} - As above, but matches the hex byte hh when h are valid hex characters.

\b \c{\\A} - \c{\\Z} - Matches control A to control Z.

\b \c{\\a} - Matches alert (ASCII 7).

\b \c{\\b} - Matches backspace (ASCII 8).

\b \c{\\f} - Matches a form feed (ASCII 12).

\b \c{\\hdd..} - Where d's are hex digits, match the given word (32 bit number).

\b \c{\\n} - Matches a newline (ASCII 10).

\b \c{\\o} - Matches any character except a \c{.} (useful for matching filenames).

\b \c{\\r} - Matches a return (ASCII 13).

\b \c{\\t} - Matches a tab (ASCII 9).

\b \c{\\v} - Matches a vertical tab (ASCII 11).

\b \c{\\?} - Matches a delete (ASCII 127).

\b \c{\\wdd} - Where d's are decimal digits, match the given word (32 bit number).

\b \c{\\xhh} - Matches hex numbers as above (where \c{x} is the letter \c{x}).

Examples:
                                           
\b \c{cat\\|mat} - Matches cat or mat.

\b \c{re*ment} - Matches any occurrence of \c{re} then \c{ment} on a line.

\b \c{SWI} - Matches any SWI (in code mode).

\b \c{LDR\\|STR} - Matches any load or store instruction.

\b \c{R6} - Matches any instruction using \c{R6}.

\b \c{BL*&0000A95C} - Matches any call to \c{&0000A95C}.

\b \c{\\&0A} - Matches the byte &0A.

\b \c{\\<fred} - Matches fred, but only at the start of a line.

\b \c{main`(} - Matches \c{main(}.

\b \c{\\d\\%} - Matches any number (where \c{\\d} is a macro which expands to \c{\\[0-9]}).

The search will be \e{much} faster if you give a definite first character to start with. eg: \c{a\\(nd\\|pple\\)} will be a lot faster than \c{and\\|apple}. If the search takes longer than a third of a second, then an hourglass will come up displaying the position in the file as a percentage underneath. You may stop the search by pressing \c{Escape}, and the partial results will be displayed if you are using \c{Search to window}.

\H{replace} \i{Replace}

Pressing \c{sF4} brings up the search and replace dialogue box. The first two columns of this are the same as for the search dialogue; the last one has a \c{global} option instead of \c{to window}. \c{couNt} works the same way as for searching (it does \e{not} perform any replaces), as does \c{Edit macros}.

\S{global} \i{Global replace}

With the global option turned on, replace will replace all occurrences of the search expression with the replace expression, in the direction of the search. (So if you're searching forwards, only matches forwards of the cursor will be replaced; if the search direction is \c{all files} then all matches in all files will be replaced.)

With global turned off, each match will be highlighted in turn, and a \c{Replace ?} window will appear with a series of options. As usual, you can press control and the first capitalised letter of each button to get the desired action; in this case you can also do the same without holding down control. The options are:

\b \c{Replace} - Replaces that match and moves to the next.

\b \c{Skip} - \e{Doesn't} replace this match, and moves to the next.

\b \c{Last} - Replaces this match and aborts the operation.

\b \c{Undo} - Undoes the last replace operation.

\b \c{reDo} - Redoes the last replace operation.

\b \c{All} - Replaces all matches from the current match onwards.

\b \c{Front} - Brings the window containing the match to the front; particularly useful when you are replacing across all files.

\b \c{In sel} - Replaces all matches in the selection (since the replace system selects the word it's considering, you'll have to make your own selection while the operation is in progress for this to be useful).

\b \c{Cancel} - Closes the window and aborts the search/replace operation.

\S{replace expression} The replace expression

The format of the replace expression is as for the search string, with the following additions:

\b \c{&n} - Replace with the n'th \c{\\\{ ... \\\}} expression in the search string. n starts at 1 and must be less than 10.

\b \c{&&} - Replace with an \c{&}.

Examples:

\b S:\c{cat}, R:\c{} - Removes all occurrences of \c{cat}.

\b S:\c{\\\{cat\\\}}, R:\c{&1s} - Replaces \c{cat} with \c{cats}, preserving case.

\b S:\c{time=\\\{\\#\\\}}, R:\c{time is &1} - Replaces \c{time=58} with \c{time is 58} etc.

To convert spaces between columns of figures in a table into tab characters, use \c{\\\{\\d\\\}  \\*} as the search string, and \c{&1\\9} as the replace string. Alternatively, replace \c{\\\{\\d\\\} \\%} with \c{&1\\9}.

\H{incremental search} Incremental search

(This is also sometimes called keyboard or interactive search, or \i{i\-search}.)

Incremental search is activated by pressing \c{cS} (to search forward) or \c{cR} (to search backwards - reverse incremental search). When you do this, a \i{minibuffer} will be opened for you to type the search string into. As you type the string, Zap will search though the text placing the cursor at the end of the next match. If there is no match, Zap will beep and print \c{(fail)}. Pressing \c{Delete} removes characters from the search string; doing so will move you back to the first successful match of whatever is left in the search string.

To halt the search at the current position, press \c{Escape} or \c{Return}. If you press an arrow or function key, then the search will be halted and the keypress acted upon. Alternatively, \c{cG} (\c{Cancel}) will cause the search to be cancelled and the search returned to its initial position before the search.

Pressing \c{cS} or \c{cR} whilst in search mode will move you to the next/previous match; if the search string was empty then the previous search string will be placed in the buffer.

\i{Macros} are turned off during the search; however \c{\\(} and all other \i{\\\-commands} will still work. The current settings of the options in the search window will be used (so you if you have disabled \\\-commands in searches, they won't work in incremental search either).

RULEHERE

The next section in the manual is \k{Advanced use}, which covers various advanced features of Zap, as well as Zap's internal help system.

Alternatively, you could move on to \k{Modes}, which explains Zap's different editing/displaying modes, and looks at some of the most useful ones. Modes form the key to many of Zap's most useful features, and since they've been occasionally mentioned in the manual up till now you probably want to learn more about them.
