; Zap Util Command Extension
; Copyright (C) 1998 Zap Developers
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
; Utility routines and quick Zap call jump routines by Darren Salt (from ZapDS)

; Includes
		GET	h.ZapUtil

; What we give to other people
		EXPORT	zap_startop
		EXPORT	zap_stopop
		EXPORT	zap_replacearea
		EXPORT	zap_command
		EXPORT	zap_setprompt
		EXPORT	zap_commandstring
		EXPORT	zap_readvar
		EXPORT	zap_savefile
		EXPORT	zap_checkfilename
		EXPORT	zap_evaluateexpression

		EXPORT	util_reflectcaret
		EXPORT	util_splitbuffer
		EXPORT	util_replacearea_nowind
		EXPORT	util_doinsert_nowind
		EXPORT	util_commandcur
		EXPORT	util_percentage
		EXPORT	util_findlinestart

		EXPORT	util_escon
		EXPORT	util_escoff

; Quick jump routines
; Macro performs tail call (ie: the call returns to the routine which called us).
		MACRO
$la		FNjump	$a
$la		PUSH	"lr,pc"				; stack return and reserve address pointer
		LDR	r14,[zapws,#0]			; start of Zap table
		ADD	r14,r14,#$a			; address of sub
		STR	r14,[sp,#4]			; stack sub address
		PULL	"lr,pc"				; tail call
		MEND

zap_startop	FNjump	Zap_StartOp
zap_stopop	FNjump	Zap_StopOp
zap_replacearea	FNjump	Zap_ReplaceArea
zap_setprompt	FNjump	Zap_MiniPrompt
zap_commandstring
		FNjump	Zap_CommandString
zap_readvar	FNjump	Zap_ReadVar
zap_savefile	FNjump	Zap_SaveFile
zap_checkfilename
		FNjump	Zap_CheckFileName
zap_evaluateexpression
		FNjump	Zap_EvaluateExpression

; Do command at the current cursor
util_commandcur	LDR	r1,[cursorptr,#c_off]
zap_command	FNjump	Zap_Command

; Move split to end
util_splitbuffer
		LDR	r0,[fileptr,#f_len]
		MOV	r1,#0
		FNjump	Zap_SplitBuffer

; Do an area replacement but force default mode
util_replacearea_nowind
		FNJSR	"r8"
		MOV	r8,#0
		BL	zap_replacearea
		FNRTS

; Do an insertion but force default mode
util_doinsert_nowind
		FNJSR	"r8"
		MOV	r8,#0
		MOV	r0,#&11
		BL	zap_command
		FNRTS

; \E r0 new cursor offset
util_reflectcaret
		STR	r0,[cursorptr,#c_off]
		FNjump	Zap_ReflectCaret

; util_findlinestart
; \E r1 - file start address
;    r2 - cursor offset
;    r3 - restriction offset (before r2)
; \X r2 - start of line, or r3 if reached
;    r4 - corrupted
;    S  - set by CMP r2,r3
		LOCAL
util_findlinestart
		CMP	r2,r3
		MOVLT	pc,lr
		FNJSR
		LDRB	r14,[windptr,#w_cr]
loop$l		SUB	r2,r2,#1
		CMP	r2,r3
		FNRTS	LT

		LDRB	r4,[r1,r2]
		TEQ	r4,r14
		BNE	loop$l
		CMP	r2,r3
		FNRTS

; util_escon / util_escoff
; Enable / disable normal escape handling
		LOCAL
util_escon
		FNJSR	"r0-r2"
		MOV	r1,#1
escx$l		MOV	r0,#229
		MOV	r2,#0
		SWI	XOS_Byte
		FNRTSS

util_escoff
		FNJSR	"r0-r2"
		MOV	r1,#0
		B	escx$l

; util_percentage
; Set hourglass percentage to 100 * r1 / f_len
util_percentage
		FNJSR	"r0-r3"
		LDR	r2,[fileptr,#f_len]
		MOV	r14,#100
		MUL	r3,r1,r14
		DIVIDE	r3,r2,r0,r14		; r0 = r3 / r2, r14=scratch
		SWI	XHourglass_Percentage
		FNRTS

; That's it
		END
